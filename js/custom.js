(function ($) {
    var lastWindowScrollTop = 0,
        userAgent = navigator.userAgent,
        $body = $('body'),
        isIOS = /iPhone|iPad/.test(userAgent),
        NO_SCROLL_CLASS = isIOS
            ? 'ios-noscroll'
            : '';
    function fixedBody() {
        if (isIOS) {
            lastWindowScrollTop = $(window).scrollTop();
            $body.addClass(NO_SCROLL_CLASS);
            $body.css('top', '-' + lastWindowScrollTop + 'px');

        }
    }

    function looseBody() {
        $body.removeClass(NO_SCROLL_CLASS);
        if (isIOS) {
            $body.css('top', '');
            window.scrollTo(0, lastWindowScrollTop);
        }
    }


    $('.mega-menu-wrapper .sub-deviding-container .mega-menu-sub-block').each(function () {
        $(this).find(".mega-menu-duo").wrapAll('<div class="duo-inner-wrap"></div>');
    })
    // $('.mega-menu-wrapper .sub-deviding-container .mega-menu-sub-block .mega-menu-duo').wrapAll('<div class="duo-inner-wrap"></div>');
    $('.header-search-wrap .search-submit').click(function () {
        if ($(window).width() > 1024) {
            $('.mega-menu-wrapper .mega-menu-top-nav-container').hide();
        }
        $(this).closest('.mega-menu-wrapper').addClass('active-search');
        $('#search-here').focus();
    });
    $('.menu-icon.desktop').click(function () {

        $('.mega-menu-wrapper').removeClass('active-search');
        setTimeout(function () {
            $('.mega-menu-wrapper .mega-menu-top-nav-container').fadeIn();
        }, 700);
    })
    $('body').click(function () {
        $('.mega-menu-wrapper').removeClass('active-search');
        if ($(window).width() > 1024) {
            setTimeout(function () {
                $('.mega-menu-wrapper .mega-menu-top-nav-container').fadeIn();
            }, 700);
        }
    })

    $(".header-search-wrap").click(function (e) {
        e.stopPropagation();
    });
    $('.mega-menu-wrapper .menu-icon.mobile').click(function () {
        if($('.mega-menu-wrapper').hasClass('active-nav')){
               $('.mega-menu-wrapper').removeClass('active-nav');
               $(".nav-overlay").remove();
             $("html").css({"overflow": "auto"});
        }
        else{
              $('.mega-menu-wrapper').addClass('active-nav');
              $(".mega-menu-top-nav-container").before('<div class="nav-overlay"></div>');

            if (isIOS){
                fixedBody();
            }
            else{
                looseBody();
                $("html").css({"overflow": "hidden"});
            }
        }



    });
    $(".mobile-nav-head .nav-close").click(function () {
        $('.mega-menu-wrapper').removeClass('active-nav active-sub-nav-outer');
        $(".dropdown-content-outer").removeClass("active-sub-nav");
        $(".mega-menu-right-side-content .nav-overlay").remove();
        $(".mega-menu-wrapper .mobile-nav-head h3").text("Menu");

        if (isIOS){
            looseBody();
        }
        else{
            $("html").css({"overflow": "initial"});
        }

    });
    $(window).on("load resize", function () {
        if ($(window).width() < 1025) {
            if ($(".mega-menu-wrapper .mega-menu-top-nav-container .header-menu li.dropdown .side-arrow").length <= 0) {
                $(".mega-menu-wrapper .mega-menu-top-nav-container .header-menu li.dropdown > a").append("<i class='side-arrow'></i>");
            }
          }
        else {
            $(".mega-menu-wrapper .mega-menu-top-nav-container .header-menu li.dropdown .side-arrow").remove();

        }
        if ($(window).width() < 768) {
            if ($(".mega-menu-wrapper .header-search-wrap .mo-search-close").length == 0) {
                $(".mega-menu-wrapper .header-search-wrap ").append('<i class="mo-search-close"></i>');
            }
            if ($(".mega-menu-wrapper .sub-deviding-container .mega-menu-sub-block h4 i.fa").length <= 0) {
                $(".mega-menu-wrapper .mega-menu-sub-block h4").append('<i class="fa fa-plus"></i>');
            }
            $(".language-container .header-language .dropdown").hover(function(){

            $(".language-container .header-language .dropdown .dropdown-content").mCustomScrollbar();
            })
        }
        else {
            $(".mega-menu-wrapper .sub-deviding-container .header-search-wrap .mo-search-close").remove();
            $(".mega-menu-wrapper .sub-deviding-container .mega-menu-sub-block h4 i.fa").remove();
            FlagSearch = true;
        }
        $(".mega-menu-wrapper .header-search-wrap .mo-search-close").on("click", function () {
            $('.mega-menu-wrapper').removeClass('active-search');
        });
        $(".mega-menu-wrapper .sub-deviding-container .mega-menu-sub-block h4").click(function(e){
            if ($(window).width() < 768) {
                $(".mega-menu-wrapper .sub-deviding-container .mega-menu-sub-block h4 i").toggleClass("fa-minus fa-plus");
                $(this).siblings(".duo-inner-wrap").slideToggle();
                $(this).closest(".mega-menu-sub-block").siblings(".mega-menu-sub-block").find(".duo-inner-wrap").slideUp();
                $(this).closest(".mega-menu-sub-block").siblings(".mega-menu-sub-block").find("i").removeClass("fa-minus");
                $(this).closest(".mega-menu-sub-block").siblings(".mega-menu-sub-block").find("i").addClass("fa-plus");
            }
            e.preventDefault();
        });
    });
    // sub menu
    $(".mega-menu-wrapper .header-menu li.dropdown > a").click(function () {
        if ($(window).width() < 1025) {
            $('.mega-menu-wrapper').addClass('active-sub-nav-outer');
            $(this).closest("li.dropdown").find(".dropdown-content-outer").addClass("active-sub-nav");
            var activeNavText = $(this).text();
            $(".mega-menu-wrapper .mobile-nav-head h3").text(activeNavText);
        }
    });
    $(".mega-menu-wrapper .mobile-nav-head i.back").click(function () {
        $('.mega-menu-wrapper').removeClass('active-sub-nav-outer');
        $(".dropdown-content-outer").removeClass("active-sub-nav");
        $(".mega-menu-wrapper .mobile-nav-head h3").text("Menu");

    })
    $('.forumFilterContainer').on("select2:open", function(e){
        if($(window).width() < 768){
            $(".main-header.sticky header").css("z-index","9 !important");
        }
    })
    $('.forumFilterContainer').on("select2:close", function(e){
        $(".main-header.sticky header").css("z-index","999 !important");
    })
$('.mega-menu-wrapper li.showActSetting').on("click",function(){
    $(this).toggleClass("active");
    $(this).find(".acc-setting-list").slideToggle();
});
})(jQuery);

$(document).ready(function () {

    $.fn.serializeObject = function () {
        var o = {};
        var a = this.serializeArray();
        $.each(a, function () {
            if (o[this.name] !== undefined) {
                if (!o[this.name].push) {
                    o[this.name] = [o[this.name]];
                }
                o[this.name].push(this.value || '');
            } else {
                o[this.name] = this.value || '';
            }
        });
        return o;
    };


    $.each(queryType, function (key, value) {
        var options = "<option value='" + key + "'>" + key + "</option>";
        $("#queryTypeList").append(options + "<br>")
    });

    $("#stateList").on('change', function () {

        if ($("#cityList option").length > 0) {
            $("#cityList").empty();
        }
        var state_code = $('#stateList option:selected').attr('id');
        $.ajax({
            type: 'GET',
            url: SIH.getEndPoint("/api/noauth/resource/state/district/list"),
            data: {
                state: state_code
            }
        }).done(function (data) {
            if ($.trim(data)) {
                $("#cityList").append('<option value="" disabled="" selected="">City / District</option>');
                var list = data && data.data;
                $.each(list, function (index, result) {
                    var options = "<option id='" + result.id + "' value='" + result.text + "'>" + result.text + "</option>";
                    $("#cityList").append(options + "<br>");
                });
            }
        });
    });

});

$("#queryTypeList").on('change', function () {

    if ($("#subQueryTypeList option").length > 0) {
        $("#subQueryTypeList").empty();
    }
    var queryTypeTitle = $('#queryTypeList option:selected').val();
    var data = queryType[queryTypeTitle];
    if (data && $.trim(data)) {
        $.each(data, function (index, result) {
            var options = "<option value='" + result + "'>" + result + "</option>";
            $("#subQueryTypeList").append(options + "<br>");
            $("#subQueryTypeList").closest(".select-wrapper").removeClass("invisible").addClass("visible");
        });
    } else {
        $("#subQueryTypeList").closest(".select-wrapper").removeClass("visible").addClass("invisible");
    }
});

var validateCaptcha = function ($formContainer, captchaResponseId) {
    var $captchaResponse = $formContainer.find("textarea[name='g-recaptcha-response']");
    if ($captchaResponse && $captchaResponse.val()) {
        return true;
    } else {
        var captchaResponse = grecaptcha.getResponse(captchaResponseId);
        if (captchaResponse) {
            $captchaResponse.val(captchaResponse);
            return true;
        } else {
            if (!$formContainer.find(".g-recaptcha .help-block").length) {
                $formContainer.find(".g-recaptcha").append('<div class="help-block with-errors"><ul class="list-unstyled"><li>Please fill up the captcha.</li></ul></div>')
                    .addClass("has-error has-danger");
            }
            return false;
        }
    }
};

var validateContactForm = function () {
    var result = true;
    $(".required-field").each(function () {
        if (!$(this).val() || $(this).parents(".has-error").length) {
            result = false;
            return false;
        }
    });
    return result;
};

var contactUsSubmission = function () {
    $('#modal-loader').modal('show');
    var data = JSON.stringify($('.contact-us').serializeObject());
    $.ajax({
        type: "POST",
        url: SIH.getEndPoint("/api/noauth/email/contact-us"),
        contentType: "application/json",
        data: data
    }).done(function (data) {
        $('#modal-loader').modal('hide');
        $('.thankyou-modal .modal-body .heading').html($('form.contact-us').attr('thank-you-header'));
        $('.thankyou-modal .modal-body p').html($('form.contact-us').attr('thank-you-content'));
        $('.thankyou-modal').modal('show').addClass("in").css("display","block");
        //showThankYouModal('contact-us');
        document.forms['contact-us'].reset();
    }).fail(function (error) {
        $('#modal-loader').modal('hide');
        $('.error-modal .modal-body p').html($('form.contact-us').attr('error-message'));
        $('.error-modal').modal('show').addClass("in").css("display","block");
    });
};

function contactUsSideCardSubmission(resourcePartnerEmail, email, resourcePartnerSupportEmail, redirectPath, $source) {
    var data = $('.contact-sideCard').serializeObject();
    data["resourcePartnerEmail"] = resourcePartnerEmail;
    if(!data.email) {
        data["email"] = email;
    }
    data["resourcePartnerSupportEmail"] = resourcePartnerSupportEmail;
    data = JSON.stringify(data);
    if ($source.length)
        $source.find('input[type=submit]').attr('disabled', 'disabled');
    $.ajax({
        type: "POST",
        url: SIH.getEndPoint("/api/noauth/email/contact-sideCard"),
        contentType: "application/json",
        data: data
    }).done(function (data) {
        showThankYouModal('contact-sideCard', redirectPath);
        document.forms["contact-sideCard"].reset();
        if ($source.length)
            $source.find('input[type=submit]').removeAttr('disabled');
        $('.contact-sideCard :input').each(function () {
            if ($(this).attr('type') != 'submit') {
                $(this).siblings('label').css('display', 'block');
                $(this).siblings(".placeholder-label").removeClass('display-n');
                $(this).prop('readonly', 'readonly');
            }
            else {
                $(this).prop('disabled', 'disabled');
            }
        });

    }).fail(function (error) {
        $('.error-modal .modal-body p').html($('.contact-us').attr('error-message'));
        $('.error-modal').modal();
    });
}

var contactUsIndoSwedenSubmission = function () {
    var data = JSON.stringify($('.indo-sweden-contactUs').serializeObject());
    $.ajax({
        type: "POST",
        url: SIH.getEndPoint("/api/noauth/email/indo-sweden-contactUs"),
        contentType: "application/json",
        data: data
    }).done(function (data) {
        $('.indoSwedenContactUs').modal('hide');
        showThankYouModal('contact-us');
        document.forms['indo-sweden-contactUs'].reset();
        $('.indo-sweden-contactUs :input').each(function () {
            if ($(this).attr('type') != 'submit') {
                $(this).siblings('label').css('display', 'block');
                $(this).siblings(".placeholder-label").removeClass('display-n');
            }
        });
    }).fail(function (error) {
        $('.indoSwedenContactUs').modal('hide');
        $('.error-modal .modal-body p').html($('.contact-us').attr('error-message'));
        $('.error-modal').modal();
    });
};

function populateContactUsSideCardData(formFields) {
    $.each(formFields, function (index, inputSel) {
        var key = $(inputSel).attr("name");
        if (typeof key != "undefined") {
            if (store.getItem(key)) {
                $(inputSel).val(store.getItem(key)).trigger('change');
                if ($(inputSel).closest('.new-resource-partner').length === 0)
                    $(inputSel).siblings(".placeholder-label").addClass('display-n');
                if (window.location.href.indexOf("zoho") > -1 && key === "fullName") {
                } else {
                    $(inputSel).prop('readonly', 'readonly');
                }
            }
        }
    });
}

function showThankYouModal(className, redirectPath) {
    var $thankyouModal = $(".thankyou-modal");
    if (className === 'contact-sideCard') {
        $thankyouModal.attr('data-backdrop', 'static').attr('data-keyboard', 'false');
        $(document).on('click', '.close.forum-report-abuse', function (event) {
            location.href = redirectPath;
        });
    }
    $thankyouModal.find('.heading').html($('.contact-us').attr('thank-you-header'));
    $thankyouModal.find('.modal-body p').html($('.' + className).attr('thank-you-content'));
    $thankyouModal.modal('show').addClass("in").css("display","block");
}

function showContactUsIndoSwedenModal() {
    $('indo-sweden-contactUs').modal('show');
}

var queryType = {
    "Startup India Scheme": ["Information & Benefits", "Public Procurement", "Application Status"],
    "Tax Exemptions": [],
    "IPR and Patent Support": [],
    "Incubator Support": [],
    "Funding": ["Loan", "Fund of Funds"],
    "Company Incorporation": [],
    "Learning Program": [],
    "Technical Issues on Website": [],
    "Advisory": ["Funding", "Business", "Regulatory", "Others"],
    "Others": []
};
// $(document).ready(function () {
//         $.ajax({
//         type: "GET",
//         url: "/services/tags/countries.json"
//     }).done(function (data) {
//         $.each(data, function (index, result) {
//             var options = "<option  id='" + result.id + "' value='" + result.text + "'>" + result.text + "</option>";
//             $("#indoDutchCountryList").append(options + "<br>")
//         });
//     });
// });
var indoDutchContactUsSubmission = function () {
    var data = JSON.stringify($('.contact-us').serializeObject());
    $.ajax({
        type: "POST",
        url: SIH.getEndPoint("/api/noauth/email/indo-dutch-contact-us"),
        contentType: "application/json",
        data: data
    }).done(function (data) {
        showThankYouModal('contact-us');
        document.forms['contact-us'].reset();
    }).fail(function (error) {
        $('.error-modal .modal-body p').html($('.contact-us').attr('error-message'));
        $('.error-modal').modal();
    });
};

// Linked In Social Integration

function liAuth() {
    IN.User.authorize(function () {
        onLinkedInLoad();
    });
}

function onLinkedInLoad() {
    IN.Event.on(IN, "auth", getProfileData);
}

// Use the API call wrapper to request the member's profile data
function getProfileData() {
    IN.API.Profile("me").fields("id", "first-name", "last-name", "headline", "location", "picture-url", "public-profile-url", "email-address").result(linkedInLogin).error(onError);
}

// Handle the successful return from the API call
function displayProfileData(user) {
    //var user = data.values[0];
    store.setItem('email', user.emailAddress);
    store.setItem('fullName', user.firstName + ' ' + user.lastName);
    if (!store.getItem("sihRegisteredUser")) {
        store.setItem("linkedInSocialLogin", true);
        checkForExistingUser();
    }
}

function linkedInLogin(data) {
    var user = data.values[0];
    if (user.emailAddress) {
        linkedInPostLogin(user);
    } else {
        var socialUser = {
            "id": user.id,
            "accountType": "Linkedin",
            "name": user.firstName + ' ' + user.lastName
        };
        if (!store.getItem('socialId')) {
            checkForExistingEmail(socialUser, user.id, "Linkedin", linkedInPostLogin);
        }
    }
}

function linkedInPostLogin(user) {
    if (!store.getItem("email")) {
        store.setItem('email', user.emailAddress);
        store.setItem('fullName', user.firstName + ' ' + user.lastName);
    }
    if (!store.getItem("sihRegisteredUser")) {
        store.setItem("linkedInSocialLogin", true);
        checkForExistingUser();
    }
}

// Handle an error response from the API call
function onError(error) {
    console.log(error);
}

// Destroy the session of linkedin
function linkedInlogout() {
    IN.User.logout(removeProfileData);
}

// Remove profile data from page
function removeProfileData() {
    document.getElementById('profileData').remove();
}

function checkForExistingUser(d) {
    path = SIH.getEndPoint("/api/noauth/sihLogin/auth/social");
    var socialLoginDTO = {"email": store.getItem('email'), name: store.getItem('fullName')};
    if (d) {
        socialLoginDTO = {"email": store.getItem('email'), name: store.getItem('fullName'), "token": d};
    }
    var currentPage = window.location.href;
    $.ajax({
        type: "POST",
        url: path,
        data: JSON.stringify(socialLoginDTO),
        contentType: "application/json",
        beforeSend: setAuthTokenHeader,
        success: function (data) {
            store.removeItem("international-checkbox");
            store.setItem("socialLogin", true);
            if (data['rejected']) {
                $('.profile-rejected-disabled-modal .modal-body p').html("Your profile has been rejected");
                $('.profile-rejected-disabled-modal').modal();
            } else if (data['disabled'] == false) {
                store.setItem("sihRegisteredUser", true);
                var time = new Date();
                store.setItem("loginTime", time.getTime());
                store.setItem("uid", data['uid']);
                store.setItem("uniqueId", data['uniqueId']);
                store.setItem("fullName", data['fullName']);
                store.setItem("registered", data["registered"]);
                store.setItem("email", data["mail"]);
                if (data['sms_user'] && data['sms_user']['mobileNumber']) {
                    store.setItem('phone', data['sms_user']['mobileNumber']);
                }

                store.setItem("country", data["country"]);
                store.setItem("state", data["state"]);
                if (data['registered'] == false) {
                    $('.redirect-model').modal('show');
                    store.setItem('no-profile', true);
                    var createProfile = $('.notification-container').attr('create-profile');
                    if ($.cookie("countryTag") == "5f041328d7b2225074b1ab4e") {
                        createProfile = $('.notification-container').attr('create-int-profile') + "?uid=" + data['uid'];
                    }
                    window.location = createProfile;
                } else {
                    store.setItem("token", data['token']);
                    store.setItem('published', data['published']);
                    store.setItem('role', data['role']);

                    var role = ["ServiceProvider", "Academia"];
                    if ($.cookie('countryTag') != "5f02e38c6f3de87babe20cd2") {
                        /*if($.cookie("countryTag") === "sih:location/sweden"){
                            window.location = $('.notification-container').attr('sweden-landing-page');
                        }else{
                            window.location = $('.notification-container').attr('international-landing-page');
                        }*/
                        window.location = $('.notification-container').attr('dashboard') + "/Int" + data['role'] + ".html";
                    } else if (role.indexOf(data['role']) !== -1) {
                        store.setItem('no-dashboard', true);
                        $('.redirect-model').modal('show');
                        window.location = $('.notification-container').attr('home-page');
                    } else if (currentPage.indexOf($('.notification-container').attr('home-page')) !== -1
                        || currentPage.indexOf($('.notification-container').attr('login-page')) !== -1
                        || currentPage.indexOf($('.notification-container').attr('registration-page')) !== -1) {

                        if (window.location.hostname === $('.notification-container').attr('main-domain')) {
                            $('.redirect-model').modal('show');
                            window.location = $('.notification-container').attr('dashboard') + "/" + data['role'] + ".html";
                        } else if (getCookie("authToken") === "" || !getCookie("authToken")) {
                            $('.redirect-model').modal('show');
                            window.location = $('.notification-container').attr('dashboard') + "/" + data['role'] + ".html";
                        } else {
                            location.reload();
                        }
                    } else {
                        $.cookie("authToken", data['token'], {
                            'expires': 365,
                            'path': '/',
                            'domain': SIH.getSiteDomain()
                        });
                        $('.redirect-model').modal('show');
                        if (store.getItem('secureLinkClicked')) {
                            $.event.trigger({type: "secureApplyClick"})
                        }
                        else {
                            window.location = currentPage.split('?')[0];
                        }

                    }
                }
                $.cookie("authToken", data['token'], {
                    'expires': 365,
                    'path': '/',
                    'domain': SIH.getSiteDomain()
                });
            } else {
                $('.profile-rejected-disabled-modal .modal-body p').html("Your profile has been disabled");
                $('.profile-rejected-disabled-modal').modal();
            }
            $.cookie("loginType", 'socialLogin', {'expires': 365, 'path': '/', 'domain': SIH.getSiteDomain()});
            clearForm(".login-signup-modal #login-form");
        }, error: function (data) {
            store.removeItem("international-checkbox");
            showError(".login-tab", data);
        }
    });
}

// Gmail Social Integration
function onSignIn(googleUser) {
    if (store.getItem("gmailButtonClicked") === true) {
        var profile = googleUser.getBasicProfile();
        store.setItem('email', profile.getEmail());
        store.setItem('fullName', profile.getName());
        if (!store.getItem("sihRegisteredUser")) {
            store.setItem("gmailSocialLogin", true);
            checkForExistingUser();
        }
    }
}

function gmailButtonClicked() {
    store.setItem("gmailButtonClicked", true);
}

function renderButton() {
    gapi.signin2.render('my-signin2', {
        'scope': 'profile email',
        'width': 240,
        'height': 50,
        'longtitle': true,
        'theme': 'dark',
        'data-approvalprompt': "force",
        'onsuccess': onSignIn
    });
    gapi.signin2.render('reg-signin', {
        'scope': 'profile email',
        'width': 240,
        'height': 50,
        'longtitle': true,
        'theme': 'dark',
        'data-approvalprompt': "force",
        'onsuccess': onSignIn
    });
    gapi.signin2.render('google-signin2', {
        'scope': 'profile email',
        'width': 240,
        'height': 50,
        'longtitle': true,
        'theme': 'dark',
        'onsuccess': onSignIn
    });
    gapi.signin2.render('google-signin3', {
        'scope': 'profile email',
        'width': 240,
        'height': 50,
        'longtitle': true,
        'theme': 'dark',
        'onsuccess': onSignIn
    });
    gapi.signin2.render('google-signin4', {
        'scope': 'profile email',
        'width': 240,
        'height': 50,
        'longtitle': true,
        'theme': 'dark',
        'onsuccess': onSignIn
    });
}

function signOut() {
    try {
        if (gapi) {
            if (gapi.auth2) {
                var auth2 = gapi.auth2.getAuthInstance();
                if (auth2) {
                    auth2.signOut();
                    auth2.disconnect();
                }
            }
        }
    } catch (e) {
        console.log("Error in logging out from gmail")
    }
}

//Facebook SDK

// This is called with the results from from FB.getLoginStatus().
function statusChangeCallback(response) {
    // The response object is returned with a status field that lets the
    // app know the current login status of the person.
    // Full docs on the response object can be found in the documentation
    // for FB.getLoginStatus().
    console.log(response);
    if (response.status === 'connected') {
        console.log(response);
        // Logged into your app and Facebook.
        fetchUserInfoFromFB();
    }
}

// This function is called when someone finishes with the Login
// Button.  See the onlogin handler attached to it in the sample
// code below.
function checkLoginState() {
    FB.getLoginStatus(function (response) {
        statusChangeCallback(response);
    });
}

// Load the SDK asynchronously
(function (d, s, id) {
    var js, fjs = d.getElementsByTagName(s)[0];
    if (d.getElementById(id)) return;
    js = d.createElement(s);
    js.id = id;
    js.src = "https://connect.facebook.net/en_US/sdk.js";
    fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));

// Here we run a very simple test of the Graph API after login is
// successful.  See statusChangeCallback() for when this call is made.
function fb_login() {
    FB.login(function (response) {

        if (response.authResponse) {
            console.log('Welcome!  Fetching your information.... ');
            //console.log(response); // dump complete info
            // access_token = response.authResponse.accessToken; //get access token
            // user_id = response.authResponse.userID; //get FB UID

            fetchUserInfoFromFB();

        } else {
            //user hit cancel button
            console.log('User cancelled login or did not fully authorize.');

        }
    }, {
        scope: 'public_profile,email'
    });
}

function fetchUserInfoFromFB() {
    console.log("Fetch User Info");
    FB.api('/me?fields=name,email', function (response) {
        onFBSignIn(response);
    });
}

function onFBSignIn(fbUser) {
    if (fbUser.email) {
        fbPostLogin(fbUser);
    } else {
        var socialUser = {
            "id": fbUser.id,
            "accountType": "Facebook",
            "name": fbUser.name
        };
        checkForExistingEmail(socialUser, fbUser.id, "Facebook", fbPostLogin);
    }
}

function fbPostLogin(fbUser) {
    if (!store.getItem("email")) {
        store.setItem('email', fbUser.email);
        store.setItem('fullName', fbUser.name);
    }
    if (!store.getItem("sihRegisteredUser")) {
        store.setItem("fbSocialLogin", true);
        checkForExistingUser();
    }
}

function fbLogout() {
    FB.logout(function (response) {
        console.log(response);
    });
}

function redirectEmailVerificationPage() {
    window.location = $('.notification-container').attr('email-verification');
}

function checkForExistingEmail(socialUser, id, type, postLogin) {
    var path = SIH.getEndPoint("/api/noauth/sihUser/socialLogin/email");
    var user = {
        "socialId": id,
        "socialAccountType": type
    };
    $.ajax({
        url: path,
        type: 'POST',
        contentType: "application/json",
        data: JSON.stringify(user),
        success: function (data) {
            store.setItem("email", data.email);
            store.setItem("fullName", data.fullName);
            if (store.getItem("email")) {
                postLogin();
            } else {
                store.setItem("socialAccountType", socialUser.accountType);
                store.setItem('fullName', socialUser.name);
                store.setItem('socialId', socialUser.id);
                redirectEmailVerificationPage(socialUser);
            }
        }, error: function (data) {
            console.log("Otp generation error")
        }
    });
}

function verifyOtp(event) {
    event.preventDefault();
    if (isValid(".otp-handling .social-login-otp-form form")) {
        var path = SIH.getEndPoint("/api/noauth/sihUser/socialLogin/otp/verify");
        var email = $(".email-enter .social-login-email-form #social-login-email-id").val();
        var otp = $(".otp-handling .social-login-otp-form #social-login-email-otp").val();
        var sihSocialUser = {
            "socialId": store.getItem("socialId"),
            "socialAccountType": store.getItem("socialAccountType"),
            "email": email,
            "verificationCode": otp,
            "fullName": store.getItem("fullName")
        };
        $.ajax({
            url: path,
            type: 'POST',
            contentType: "application/json",
            data: JSON.stringify(sihSocialUser),
            success: function (data) {
                $(".otp-handling").addClass("display-n");
                $(".email-verification").removeClass("display-n");
                var user = {
                    "email": email,
                    "fullName": store.getItem("fullName")
                };
                if (store.getItem("socialAccountType") === "Facebook") {
                    setTimeout(fbPostLogin(user), 2000);
                } else if (store.getItem("socialAccountType") === "Twitter") {
                    setTimeout(twitterPostLogin(user), 2000);
                } else if (store.getItem("socialAccountType") === "Linkedin") {
                    setTimeout(linkedInPostLogin(user), 2000);
                }
                return false;
            }, error: function (data) {
                $(".otp-handling .social-login-otp-form .help-block").html(data.responseText).parent().addClass("has-error");
            }
        });
    }
}

function generateOtp(event) {
    event.preventDefault();
    if (isValid(".email-enter .social-login-email-form form")) {
        var path = SIH.getEndPoint("/api/noauth/sihUser/socialLogin/otp/generate");
        var email = $(".email-enter .social-login-email-form #social-login-email-id").val();
        var sihSocialUser = {
            "socialId": store.getItem("socialId"),
            "socialAccountType": store.getItem("socialAccountType"),
            "email": email,
            "fullName": store.getItem('fullName')
        };
        $.ajax({
            url: path,
            type: 'POST',
            contentType: "application/json",
            data: JSON.stringify(sihSocialUser),
            success: function (data) {
                store.setItem("email", email);
                $(".email-enter").addClass("display-n");
                $(".otp-handling").removeClass("display-n");
                showOtpTimer(".otp-handling");
                return false;
            }, error: function (data) {
                var msg = "";
                for (var i = 0; i < data.responseJSON.length; i++) {
                    msg = msg + data.responseJSON[i].defaultMessage + "<br/>";
                }
                $(".email-enter .social-login-email-form .help-block").html(msg).parent().addClass("has-error");
            }
        });
    }
}

$(document).ready(function () {
    $(".email-enter .social-login-email-form .email-btn").click(function (event) {
        generateOtp(event);
    });
    $(".otp-handling .social-login-otp-form .resend-btn").click(function (event) {
        generateOtp(event);
    });
    $(".otp-handling .social-login-otp-form .otp-button").click(function (event) {
        verifyOtp(event);
    })
});

var showOtpTimer = function (parent) {
    $(".resend-btn").attr("disabled", "disabled");
    var twentyFiveSeconds = 30;
    var display = $(parent + ' #time');
    startTimer(twentyFiveSeconds, display);
};

function twitter_login() {
    path = SIH.getEndPoint("/api/noauth/twitter/login");
    var callbackUrl = window.location.protocol + "//" + window.location.host + $('.notification-container').attr('home-page');
    $.ajax({
        type: "POST",
        url: path,
        data: {callbackUrl},
        contentType: "application/json",
        success: function (data) {
            console.log(data);
            store.setItem("auth_token", data['auth_token']);
            store.setItem("auth_token_secret", data['auth_token_secret']);
            window.location.href = data['authUrl'];
        }
    });
}

function twitter_callback() {
    console.log("Calling Twitter Callback...");
    path = SIH.getEndPoint("/api/noauth/twitter/callback");
    var callback_data = JSON.stringify({
        auth_token: getUrlParameter('oauth_token'),
        auth_token_secret: store.getItem('auth_token_secret'),
        oauth_verifier: getUrlParameter("oauth_verifier")
    });
    $.ajax({
        type: "POST",
        url: path,
        data: callback_data,
        contentType: "application/json",
        success: function (data) {
            onTwitterSignIn(data);
        }, error: function (error) {
            console.error(error.responseText)
        }
    });
}

$(document).ready(function () {
    var currentPage = window.location.href;
    if (currentPage.indexOf('oauth_token') > -1 && currentPage.indexOf('oauth_verifier') > -1) {
        twitter_callback();
    }

    if (currentPage.indexOf('sih_auth_token') > -1 && currentPage.indexOf('login_type') > -1) {
        appAutoLogin(getUrlParameter("sih_auth_token"), getUrlParameter("login_type"));
    }
});

function onTwitterSignIn(twitterUser) {
    if (twitterUser.email) {
        twitterPostLogin(twitterUser);
    } else {
        var socialUser = {
            "id": twitterUser.id,
            "accountType": "Twitter",
            "name": twitterUser.name
        };
        checkForExistingEmail(socialUser, twitterUser.id, "Twitter", twitterPostLogin);
    }
}

function twitterPostLogin(twitterUser) {
    if (!store.getItem("email")) {
        store.setItem('email', twitterUser.email);
        store.setItem('fullName', twitterUser.name);
    }
    if (!store.getItem("sihRegisteredUser")) {
        store.setItem("twitterSocialLogin", true);
        checkForExistingUser();
    }
}

function twitterLogout() {
    store.setItem("auth_token", undefined);
    store.setItem("auth_token_secret", undefined);
}

var headerLoginCaptchaId, loginPageCaptchaId, contactPageCaptchaId, indoCaptchaId, logoFormCaptchaId;
var headerCaptchaOnloadCallback = function() {
    var siteKey = $("#header-login-captcha").data("sitekey");
    if ( $('#header-login-captcha').length ) {
        headerLoginCaptchaId = grecaptcha.render('header-login-captcha', {
            'sitekey': $("#header-login-captcha").data("sitekey"),
            'callback': filledCaptchaCallback
        });
    }
};
var loginPageCaptchaOnloadCallback = function() {
    if ( $('#main-login-captcha').length ) {
        loginPageCaptchaId = grecaptcha.render('main-login-captcha', {
            'sitekey': $("#main-login-captcha").data("sitekey"),
            'callback': filledCaptchaCallback
        });
    }
};
var contactCaptchaOnloadCallback = function() {
    if ( $('#contact-captcha').length ) {
        contactPageCaptchaId = grecaptcha.render('contact-captcha', {
            'sitekey': $("#contact-captcha").data("sitekey"),
            'callback': filledCaptchaCallback
        });
    }
};
var indoContactCaptchaOnloadCallback = function() {
    if ( $('#indoContact-captcha').length ) {
        indoCaptchaId = grecaptcha.render('indoContact-captcha', {
            'sitekey': $("#indoContact-captcha").data("sitekey"),
            'callback': filledCaptchaCallback
        });
    }
};
var logoFormCaptchaOnloadCallback = function() {
    if ( $('#logoForm-captcha').length ) {
        logoFormCaptchaId = grecaptcha.render('logoForm-captcha', {
            'sitekey': $("#logoForm-captcha").data("sitekey"),
            'callback': filledCaptchaCallback
        });
    }
};
var filledCaptchaCallback = function() {
    $(".g-recaptcha .help-block").remove();
};

var store = ContextHub.getStore("sih_user"); var loginTime;
var countryMap = {
    "en" : "5f02e38c6f3de87babe20cd2",
    "pt" : "5f041328d7b2225074b1ab4c"
};
var urlparts = window.location.pathname.split('/');
var urlCountryId = "en";
var grantType = "PASSWORD";
$.each( countryMap, function( key, value ) {
    if($.inArray(key, urlparts) != -1)
        urlCountryId = urlparts[$.inArray(key, urlparts)];
});
$.cookie("countryTag", (store.getItem('country') === 'Sweden') ? "5f041328d7b2225074b1ab4e" : countryMap[urlCountryId]);
//$.cookie("countryTag", countryMap[urlCountryId]);

$(document).on('click',"div.blog, div.card", function (e) {
    var $anchorTag = $(this).find("a.secure");
    if($anchorTag.length > 0 && $anchorTag.attr('href')){
        secureLinksClicked($anchorTag.attr('href'));
    }
});

$(document).on('click',"a.secure,.secure",function(e) {
    e.preventDefault();
    e.stopPropagation();
    var link = $(this).attr('href');
    if(!link){
        link = window.location.href;
    }
    var tar = $(this).attr('target');
    secureLinksClicked(link,tar,$(this));
});

function secureLinksClicked(link,tar,obj) {
    if(store.getItem("token")) {
        $(document).off('secureApplyClick');
        store.removeItem("secureLinkClicked");
        if(link && link.indexOf('/content/dam/invest-india') >= 0) {
            authenticateToken(link);
        }
        else if(link && (link.indexOf('/content/sih/en/reources') >= 0 || link.indexOf('/content/sih/en/resource-partners') >= 0)){
            authenticateToken(link);
        }
        else
        {
            if(!link){
                window.location.reload();
            } else if(tar === '_blank') {
                window.open(link, '_blank');
                window.location.reload();
            }
            else{
                window.location.href = link;
            }

        }
    }
    else {
        if(store.getItem("no-profile")){
            $('.complete-profile-modal').modal('show');
        }else{
            store.setItem('secureLinkClicked',"true");
            $(document).on('secureApplyClick',function(){
                $(obj).trigger('click');
            });
            $(".login .sign-in").trigger('click');
        }
        //$('#secureAssests').modal('show');

    }
}

function checkUserProfileExists() {
    if(store.getItem("no-profile")){
        $('.complete-profile-modal').modal('show');
    }else{
        $(".login .sign-in").trigger('click');
    }
}

$(document).ready(function () {
    showHideMenu();

    if(store.getItem("uid") || store.getItem("sihRegisteredUser")){
        $(".logout-user").hide()
    }
    ////signin-signup

    /*var _signIn = $('.sign-in').attr('href');
    $('.sign-in').attr('href', _signIn + location.protocol + '//' + location.host + location.pathname);*/

    var registerUrl = $('.register').attr('href');
    $('.register').attr('href', registerUrl + location.protocol + '//' + location.host + location.pathname);

    var currentPage = window.location.href;
    if (currentPage.indexOf('code') > -1) {
        var code = getUrlParameter('code');
        var redirectUrl = SIH.getEndPoint($('.notification-container').attr('profile-detail-Url') + code);
        $.getJSON(redirectUrl, function (data) {
            store.removeItem("international-checkbox");
            if(data['rejected']){
                $('.profile-rejected-disabled-modal .modal-body p').html("Your profile has been rejected");
                $('.profile-rejected-disabled-modal').modal();

            }else if (data['disabled'] == false) {
                var time = new Date();
                store.setItem("loginTime", time.getTime());
                store.setItem("uid", data['uid']);
                store.setItem("uniqueId", data['uniqueId']);
                store.setItem("fullName", data['fullName']);
                store.setItem("email", data['mail']);
                store.setItem("myGovLogin",true);
                if (data['sms_user'] && data['sms_user']['mobileNumber']) {
                    store.setItem('phone', data['sms_user']['mobileNumber']);
                }
                store.setItem("country", data["country"]);
                store.setItem("state", data["state"]);

                $.cookie("userCountry", $.cookie("countryTag"), {'expires': 365, 'path': '/'});

                if (data['registered'] == false) {
                    $('.redirect-model').modal('show');
                    store.setItem('no-profile', true);
                    var createProfile = $('.notification-container').attr('create-profile') + "?uid=" + data['uid'];
                    if ($.cookie("countryTag") != "5ef99f79e151c732272cad96") {
                        createProfile = $('.notification-container').attr('create-int-profile') + "?uid=" + data['uid'];
                    }
                    window.location = createProfile;
                } else {
                    store.setItem("token", data['token']);
                    store.setItem('published', data['published']);
                    store.setItem('role', data['role']);
                    var role = ["ServiceProvider", "Academia"];
                    /*if ($.cookie('countryTag') === "sih:location/portugal") {
                     window.location = $('.notification-container').attr('international-landing-page');
                     } else if ($.cookie('countryTag') === "sih:location/sweden") {
                     window.location = $('.notification-container').attr('sweden-landing-page');
                     } else */if (role.indexOf(data['role']) !== -1) {
                        store.setItem('no-dashboard', true);
                        $('.redirect-model').modal('show');
                        window.location = $('.notification-container').attr('home-page');
                    } else if (currentPage.indexOf($('.notification-container').attr('home-page'))) {
                        if(window.location.hostname === $('.notification-container').attr('main-domain')){
                            dashboardPageRedirection(data);
                        }else if(getCookie("authToken") === "" || !getCookie("authToken")){
                            dashboardPageRedirection(data);
                        }else{
                            location.reload();
                        }
                    } else {
                        $('.redirect-model').modal('show');
                        window.location = currentPage.split('?')[0];
                    }
                }
                $.cookie("authToken", data['token'], {
                    'expires': 365,
                    'path': '/',
                    'domain': SIH.getSiteDomain()
                });
            } else {
                $('.profile-rejected-disabled-modal .modal-body p').html("Your profile has been disabled");
                $('.profile-rejected-disabled-modal').modal();

            }
        }, function (error) {
            store.removeItem("international-checkbox");
        });
    }


    if(currentPage.indexOf("en/login.html") > -1 || currentPage.indexOf("en/register.html") > -1){
        var loginLink = $('.login-container #myGovLogin');
        var _signIn = $(loginLink).attr('link');
        $(loginLink).attr('href', _signIn + location.protocol + '//' + location.host + location.pathname);

        if(store.getItem("token")) {
            var role = ["ServiceProvider", "Academia"];
            if (role.indexOf(store.getItem('role')) !== -1) {
                $('.redirect-model').modal('show');
                window.location = $('.notification-container').attr('home-page');
            } else {
                $('.redirect-model').modal('show');
                if (store.getItem('country') === "5f02e38c6f3de87babe20cd2") {
                    window.location = $('.notification-container').attr('dashboard') + "/" + store.getItem('role') + ".html";
                } else {
                    window.location = $('.notification-container').attr('dashboard') + "/Int-" + store.getItem('role') + ".html";
                }
            }
        }
    }

    $('.error-modal').on('hidden.bs.modal', function () {
        removeQueryParam();
    });
    $('.profile-rejected-disabled-modal').on('hidden.bs.modal', function () {
        logout();
    });

    $(".login-signup-modal #login-form #sih-login-btn, .login-container #login-form #sih-login-btn").click(function (e) {
        cleanError(".login-tab");
        $("#resendMsg").hide();
        e.preventDefault();
        var currentContainer = $(".login-signup-modal").is(":visible") ? $(".login-signup-modal") : $(".login-container");
        var recaptchaContainerId = $(".login-signup-modal").is(":visible") ? headerLoginCaptchaId : loginPageCaptchaId;
        var form = currentContainer.find("#login-form");

        if(window.location.origin.indexOf("www.startupindia.gov.in") > -1) {
            if (validateCaptcha(form, recaptchaContainerId)) {
                if (isValid(form)) {
                    var username = form.find("#username_login").val();
                    var password = form.find("#password_login").val();
                    var captchaResponse = grecaptcha.getResponse(recaptchaContainerId);
                    var d = {
                        "username": username, "password": password, "grantType": grantType,
                        "captchaResponse": captchaResponse
                    };
                    sihLogin(d, form);
                } else {
                    console.warn("Validation failed")
                }
            }
        }else{
            if (isValid(form)) {
                var username = form.find("#username_login").val();
                var password = form.find("#password_login").val();
                var captchaResponse = null;
                var d = {
                    "username": username, "password": password, "grantType": grantType,
                    "captchaResponse": captchaResponse
                };
                sihLogin(d, form);
            } else {
                console.warn("Validation failed")
            }
        }
    });

    $(".login .sign-in").click(function (e) {
        var loginLink = $('.login-signup-modal .login-form #myGovLogin');
        var _signIn = $(loginLink).attr('link');
        $(loginLink).attr('href', _signIn + location.protocol + '//' + location.host + location.pathname);

        var regLink = $('.login-signup-modal .login-form #myGovReg');
        var registerUrl = $(regLink).attr('link');
        $(regLink).attr('href', registerUrl + location.protocol + '//' + location.host + location.pathname);
        showDefaultForm();
        $('#login-modal').modal('show');
        e.preventDefault();
    });

    $(".new-register-page .login-btn button:not('.submit-btn')").on('click', function (event) {
        cleanError(".registration-tab");
        $("#resendMsg").hide();
        event.preventDefault();
        var currentContainer =$(".new-register-page");
        var form = currentContainer.find(".register-form form");
        if (isValid($(form))) {
            var fullname = form.find("#fullname").val();
            var email = form.find("#email").val();
            var mobile = form.find("#mobile").val();
            var regpassword = form.find("#reg-password").val();
            var confirmPassword = form.find("#confirm-password").val();
            var d = {
                "fullName": fullname,
                "email": email,
                "mobile": mobile,
                "password": regpassword,
                "confirmPassword": confirmPassword
            };

            $.ajax({
                url: SIH.getEndPoint("/api/noauth/sihUser/register"),
                type: 'POST',
                contentType: "application/json",


                data: JSON.stringify(d),
                success: function (data) {
                    var regOtpForm = $(".new-register-page .registration-otp-form");
                    regOtpForm.find("#email").val(data.email);
                    hideRegistrationForm();
                    showRegistrationOTPForm();
                    clearForm(form);
                }, error: function (data) {
                    showError(".registration-tab", data);
                }
            });
        } else {
            console.warn("Validation failed")

        }
    });

//registration verify call
    $(".new-register-page .registration-otp-form .submit-btn").click(function (event) {
        //setTimeout(function () {
            $('#modal-loader').modal("show");
        //}, 100);
        cleanError(".registration-tab");
        event.preventDefault();
        var currentContainer = $(".new-register-page");
        var form = currentContainer.find(".registration-otp-form form");
        if (isValid(form)) {
            var code = form.find("#otp").val();
            var email = form.find("#email").val();
            var d = {"email": email, "code": code};

            $.ajax({
                url: SIH.getEndPoint("/api/noauth/sihUser/verify"),
                type: 'POST',
                contentType: "application/json",
                data: JSON.stringify(d),
                success: function (data) {
                    if(data.status){
                        $("#resendMsg").hide();
                        hideRegistrationOTPForm();
                        showRegistrationSuccess();
                        clearForm(form);
                        var axel = Math.random() + "";
                        var a = axel * 10000000000000;
                        var iframe = document.createElement('iframe');
                        iframe.frameBorder=0;
                        iframe.width="1";
                        iframe.height="1";
                        iframe.setAttribute("src", 'https://8254596.fls.doubleclick.net/activityi;src=8254596;type=invmedia;cat=fagcfhoh;dc_lat=;dc_rdid=;tag_for_child_directed_treatment=;ord='+a+'?');
                        document.head.appendChild(iframe);
                        cleanError(".registration-tab");
                    }
                    else{
                        showError(".registration-tab", data.message);
                    }
                    setTimeout(function () {
                        $('#modal-loader').modal("hide");
                    }, 50);
                }, error: function (data) {
                    showError(".registration-tab", data);
                    setTimeout(function () {
                        $('#modal-loader').modal("hide");
                    }, 50);
                }
            });
        } else {
            console.warn("Validation failed");
            setTimeout(function () {
                $('#modal-loader').modal("hide");
            }, 50);
        }
    });

//registration resend otp button
    $(".new-register-page .registration-otp-form .resend-btn").on("click", function (event) {
        cleanError(".registration-tab");
        $("#resendMsg").hide();
        event.preventDefault();
        var currentContainer = $(".new-register-page");
        var form = currentContainer.find(".registration-otp-form");
        var email = form.find("#email").val();
        var d = {"email": email};
        $.ajax({
            url: SIH.getEndPoint("/api/noauth/sihUser/otp/generate"),
            type: 'POST',
            contentType: "application/json",
            data: JSON.stringify(d),
            success: function (data) {
                var successMsg = "otp.generate.success";
                if(data === successMsg){
                    $("#resendMsg").show().find(".message").html("OTP Sent Successfully").show();
                    $("#resendMsg").fadeTo(2000, 500).slideUp(500, function(){
                        $("#resendMsg").slideUp(500);
                    });
                }
                showTimer(".new-register-page .registration-otp-form");
            }, error: function (data) {
                $("#resendMsg").hide();
                showError(".registration-tab", data);
            }
        });
    });

//forgot password call
    $(".login-signup-modal .forgot-pwd-form .submit-btn, .forgot-pwd-container .forgot-pwd-form .submit-btn").click(function (event) {
        cleanError(".login-tab");
        event.preventDefault();
        var currentContainer = $(".login-signup-modal").is(":visible") ? $(".login-signup-modal") : $(".forgot-pwd-container");
        var form = currentContainer.find(".forgot-pwd-form");
        if (isValid(form.find("form"))) {
            var email = form.find("form #email").val();
            var d = {"email": email};

            $.ajax({
                url: SIH.getEndPoint("/api/noauth/sihUser/password/forgot"),
                type: 'POST',
                contentType: "application/json",
                data: JSON.stringify(d),
                success: function (data) {
                    var forgotPwdForm = $(".login-signup-modal").is(":visible") ? $(".login-signup-modal .forgot-pwd-otp-form") : $(".otp-form-container .forgot-pwd-otp-form");
                    forgotPwdForm.find("#email").val(email);
                    hideForgotPasswordForm();
                    showForgotPasswordOTPForm();
                    clearForm(form);
                }, error: function (data,txt_status,xhr) {
                    if(data.status === 200){
                        var forgotPwdForm = $(".login-signup-modal").is(":visible") ? $(".login-signup-modal .forgot-pwd-otp-form") : $(".otp-form-container .forgot-pwd-otp-form");
                        forgotPwdForm.find("#email").val(email);
                        hideForgotPasswordForm();
                        showForgotPasswordOTPForm();
                        clearForm(form);
                        showError(".login-tab", data);
                    }else {
                        showError(".login-tab", data);
                    }
                }
            });
        } else {
            console.warn("Validation failed")
        }
    });

//verify forgot password otp
    $(".login-signup-modal .forgot-pwd-otp-form .submit-btn, .otp-form-container .forgot-pwd-otp-form .submit-btn").click(function (event) {
        cleanError(".login-tab");
        event.preventDefault();
        var currentContainer = $(".login-signup-modal").is(":visible") ? $(".login-signup-modal") : $(".otp-form-container");
        var form = currentContainer.find(".forgot-pwd-otp-form form");
        if (isValid(form)) {
            var code = form.find("#otp").val();
            var email = form.find("#email").val();
            var d = {"email": email, "code": code};

            $.ajax({
                url: SIH.getEndPoint("/api/noauth/sihUser/otp/verify"),
                type: 'POST',
                contentType: "application/json",
                data: JSON.stringify(d),
                success: function (data) {
                    if(data.status){
                        var chgPwdForm = $(".login-signup-modal").is(":visible") ? $(".login-signup-modal .change-pwd-form") : $(".change-pwd-container .change-pwd-form");
                        chgPwdForm.find("#email").val(email);
                        chgPwdForm.find("#otp").val(code);
                        hideForgotPasswordOTPForm();
                        showChangePasswordForm();
                        clearForm(form);
                    }
                    else{
                        showError(".login-tab", data.message);
                    }

                }, error: function (data) {
                    showError(".login-tab", data);
                }
            });
        } else {
            console.warn("Validation failed")
        }
    });

//change password otp
    $(".login-signup-modal .change-pwd-form .submit-btn, .change-pwd-container .change-pwd-form .submit-btn").click(function (event) {
        cleanError(".login-tab");
        event.preventDefault();
        var currentContainer = $(".login-signup-modal").is(":visible") ? $(".login-signup-modal") : $(".change-pwd-container");
        var form = currentContainer.find(".change-pwd-form form");
        if (isValid(form)) {
            var code = form.find("#otp").val();
            var email = form.find("#email").val();
            var regpassword = form.find("#reg-password").val();
            var confirmPassword = form.find("#confirm-password").val();
            var d = {"email": email, "code": code, "password": regpassword, "confirmPassword": confirmPassword};

            $.ajax({
                url: SIH.getEndPoint("/api/noauth/sihUser/password/update"),
                type: 'POST',
                contentType: "application/json",
                data: JSON.stringify(d),
                success: function (data) {
                    hideChangePasswordForm();
                    showChangePasswordSuccess();
                    clearForm(form);
                }, error: function (data) {
                    showError(".login-tab", data);
                }
            });
        } else {
            console.warn("Validation failed")
        }
    });

//forgot pwd resend otp btn
    $(".login-signup-modal .forgot-pwd-otp-form .resend-btn, .otp-form-container .forgot-pwd-otp-form .resend-btn").on("click", function (event) {
        cleanError(".login-tab");
        event.preventDefault();
        var currentContainer = $(".login-signup-modal").is(":visible") ? $(".login-signup-modal") : $(".otp-form-container");
        var form = currentContainer.find(".forgot-pwd-otp-form");
        var email = form.find("#email").val();
        var d = {"email": email};
        $.ajax({
            url: SIH.getEndPoint("/api/noauth/sihUser/otp/generate"),
            type: 'POST',
            contentType: "application/json",
            data: JSON.stringify(d),
            success: function (data) {
                showTimer(".login-signup-modal .forgot-pwd-otp-form, .otp-form-container");
            }, error: function (data) {
                showError(".login-tab", data);
            }
        });
    });


    $(".login-signup-modal .static-tabs ul li").click(function (e) {
        cleanError("#loginModal");
        if (!$(this).hasClass('active')) {
            $('#login-form form').trigger("reset");
        }
        
        $(this).addClass("active");
        $(this).siblings('li').removeClass('active');
       
        // if ($(this).attr("data-tab") == "login-tab-1") {
        //     $("li[data-tab=login-tab-2]").removeClass("active");
        //     $(".login-signup-modal div #login-tab-1").addClass("current");
        //     $(".login-signup-modal div #login-tab-2").removeClass("current");
        // } else {
        //     $("li[data-tab=login-tab-1]").removeClass("active");
        //     $(".login-signup-modal div #login-tab-2").addClass("current");
        //     $(".login-signup-modal div #login-tab-1").removeClass("current");
        // }
    });
});

function myGovLogin(d) {
    $.ajax({
        url: SIH.getEndPoint("/api/noauth/sihLogin/auth/myGov"),
        type: 'POST',
        contentType: "application/json",
        data: JSON.stringify(d),
        success: function (data) {
            loginSuccessFunction(data);
        }, error: function (data) {
            store.removeItem("international-checkbox");
            showError(".login-tab", data);
        }
    })
}
function logoRedirectionUrl() {
    var role = ["ServiceProvider", "Academia"];
    var loggedInUserRole = store.getItem("role");
    var country = store.getItem("country");
    /*if(loggedInUserRole != null) {
        if (role.indexOf(loggedInUserRole) !== -1) {
            $(".logo").data('page') != 'persona' ? $(".logo").attr("href", $('.notification-container').attr('home-page')) : $(".logo").removeAttr('href');
        }
        else if ((country && ((country === "India") || (country === "sih:location/india")) || (store.getItem('role') === "SIH_Admin"))) {
            $(".logo").attr("href", $('.notification-container').attr('dashboard') + "/" + loggedInUserRole + ".html");
        } else {
            $(".logo").attr("href", $('.notification-container').attr('dashboard') + "/Int-" + loggedInUserRole + ".html");
        }
    } else {
        $(".logo").data('page') != 'persona' ? $(".logo").attr("href", $('.notification-container').attr('home-page')) : $(".logo").removeAttr('href');
    }*/
    /*if($.cookie("countryTag) === "sih:location/sweden"){
        $(".logo").attr("href", $('.notification-container').attr('sweden-landing-page'));
    }*/
    //Redirecting to home page only
    if($(".logo").data('page') != 'persona') {
        $('.logo.nonsticky').eq(0).attr("href", $('.notification-container').attr('sih-logo1-url'));
        $('.logo.sticky').eq(0).attr("href", $('.notification-container').attr('sih-logo1-url'));
        $('.logo.nonsticky').eq(1).attr("href", $('.notification-container').attr('sih-logo2-url'));
        $('.logo.sticky').eq(2).attr("href", $('.notification-container').attr('sih-logo2-url'));
        $('.logo.nonsticky').eq(3).attr("href", $('.notification-container').attr('sih-logo3-url'));
        $('.logo.sticky').eq(3).attr("href", $('.notification-container').attr('sih-logo3-url'));
    } else { 
        $(".logo").removeAttr('href');
    }
}

function authenticateToken(link){
    var token = store.getItem("token") ? store.getItem("token") : $.cookie("authToken");
    $.ajax({
        url: link,
        type: 'GET',
        data: {token: token},
        success: function (data,textStatus,jqXHR) {
            if (link.indexOf('/startupindiaPDF') >= 0) {
                PDFObject.embed(link, "#PDFViewer");
                $('#InlinePDFViewer').modal('show');
            }
            else if (link.indexOf('/content/sih/en') >= 0) {
                window.location.href = link;
            }
            else window.open(link, '_blank');
        },error: function(data){
            // $("#loginModal").modal('show');
            if (store.getItem("no-profile")) {
                $('.complete-profile-modal').modal('show');
                e.preventDefault();
                e.stopPropagation();
            }
            else if (!store.getItem("published") && store.getItem("token")) {
                $('.under-moderation-modal').modal('show');
                e.preventDefault();
                e.stopPropagation();
            }
            else {
                //$('#secureAssests').modal('show');
                $(".login .sign-in").trigger('click');
            }
        }
    });
}

var removeQueryParam =function () {
    var currentPage = window.location.href;
    currentPage = currentPage.substring(0,currentPage.indexOf("?"));
    window.location = currentPage;
};

function showHideMenu() {
    logoRedirectionUrl();
    if (store.getItem("uid") || store.getItem("sihRegisteredUser")) {
        $('.login').hide();
        $('.inner-layout').addClass("logged-in-layout");
        $('.mid-header-wrap').addClass("logged-in-home-topnav");
        $('.notification-container').show();
        // $('.pull-right.top-nav-header').addClass("header-after-login");
        // var currentTime = new Date();
        /*  if (store.getItem("loginTime")) {
              $(this).mousemove(function (e) {
                  store.setItem("idleTimer", currentTime.getTime());
              });
              var diff = Math.abs(currentTime.getTime() - store.getItem("loginTime"));
              if (store.getItem("idleTimer")) {
                  var idleDiff = Math.abs(currentTime.getTime() - store.getItem("idleTimer"));
                  if (Math.ceil(idleDiff / 3600000) > 3) {
                      alert("Session is expired. Please Login again.");
                      store.removeItem("idleTimer");
                      logout();
                  }
              }
              if (Math.ceil(diff / 3600000) > 8) {
                  alert("Session is expired. Please Login again.");
                  logout();
              }
          } else {
              logout();
          }*/
    } else {
        var currentPage = window.location.href;
        if (!(currentPage.indexOf('code') > -1)) {
            $('.login').show();
        }
        $('.inner-layout').removeClass("logged-in-layout");
        $('.mid-header-wrap').removeClass("logged-in-home-topnav");
        //$('.pull-right.top-nav-header').removeClass("header-after-login");
        $('.notification-container').hide();
    }

}

function showLogoutModal() {
    $('#logout-modal').modal('show');
}

function logout(param) {
    var uniqueId = store ? store.getItem("email") : null;
    $.ajax({
        url: SIH.getEndPoint("/api/noauth/sihLogin/logout?token="+store.getItem("token")),
        type: 'GET',
        contentType: "application/json",
        complete: function () {
            if(store.getItem("socialLogin") && store.getItem("gmailSocialLogin")){
                signOut();
            }
            if(store.getItem("socialLogin") && store.getItem("linkedInSocialLogin")){
                linkedInlogout();
            }
            if(store.getItem("socialLogin") && store.getItem("fbSocialLogin")){
                fbLogout();
            }
            if(store.getItem("socialLogin") && store.getItem("twitterSocialLogin")){
                twitterLogout();
            }
            if(param){
                if ($(param).attr('button-type') == 'yes') {
                    store.clean();
                    sessionStorage.clear();
                    window.localStorage.removeItem("inforparent");
                    $.removeCookie("userCountry", {'expires': -1, path: '/'});
                    $.removeCookie("authToken", {'expires': -1, path: '/', 'domain': SIH.getSiteDomain()});
                    var path = "https://auth.mygov.in/user/logout";
                    if ($('.logout-url').attr('logout-url')) {
                        path = $('.logout-url').attr('logout-url');
                    }
                    window.open(path, 'logoutframe');
                    setTimeout(redirectHomePage,1000);
                }
            }else{
                store.clean();
                sessionStorage.clear();
                window.localStorage.removeItem("inforparent");
                $.removeCookie("userCountry", {'expires': -1, path: '/'});
                $.removeCookie("authToken", {'expires': -1, path: '/', 'domain': SIH.getSiteDomain()});
                redirectHomePage();
            }
        }
    });
}

function redirectHomePage(){
    window.location = $('.notification-container').attr('main-domain');
}

$(document).on('click', '#logout-modal .logout-button', function (e) {
    logout(this);
});

var getUrlParameter = function getUrlParameter(sParam,path) {
    var url = "";
    if(path){
        url = path;
    }else{
        url = window.location.search.substring(1);
    }
    var sPageURL = decodeURIComponent(url);
    if (sPageURL) {
        var sURLVariables = sPageURL.split('&'),
            sParameterName,
            i;
        for (i = 0; i < sURLVariables.length; i++) {
            sParameterName = sURLVariables[i].split('=');
            if (sParameterName[0] === sParam) {
                return sParameterName[1] === undefined ? true : sParameterName[1];
            }
        }
    }
};



$(".login .sign-in").click(function (e) {
    var loginLink = $('.login-signup-modal .login-form #myGovLogin');
    var _signIn = $(loginLink).attr('link');
    $(loginLink).attr('href', _signIn + location.protocol + '//' + location.host + location.pathname);

    var regLink = $('.login-signup-modal .login-form #myGovReg');
    var registerUrl = $(regLink).attr('link');
    $(regLink).attr('href', registerUrl + location.protocol + '//' + location.host + location.pathname);
    showDefaultForm();
    $('#login-modal').modal('show');
    e.preventDefault();
});

function showDefaultForm(){
    //login tab
    $(".login-signup-modal .login-tab .forgot-pwd-form").hide();
    $(".login-signup-modal .login-tab .forgot-pwd-otp-form").hide();
    $(".login-signup-modal .login-tab .change-pwd-form").hide();
    $(".login-signup-modal .login-tab .success-registeration").hide();
    $(".login-signup-modal .login-tab .default").show();

    //registration tab
    /*$(".login-signup-modal .registration-tab .registration-otp-form").hide();
    $(".login-signup-modal .registration-tab .success-registeration").hide();
    $(".login-signup-modal .registration-tab .default").show();*/

}

/*
 $(".register").click(function (e) {
 $('#registration-modal').modal('show');
 e.preventDefault();
 });
 */

function sihLogin(d, form) {
    $.ajax({
        url: SIH.getEndPoint("/api/noauth/sihLogin/auth"),
        type: 'POST',
        contentType: "application/json",
        data: JSON.stringify(d),
        success: function (data, status, xhr) {

            fbq('track', 'SubmitApplication');
            store.setItem("jsessionid", xhr.getResponseHeader("jsessionid"));
            loginSuccessFunction(data);
            $.cookie("loginType", 'sihLogin', {'expires': 365, 'path': '/', 'domain': SIH.getSiteDomain()});
            if(form){
                clearForm(form);
            }
        }, error: function (data) {
            store.removeItem("international-checkbox");
            if(window.location.origin.indexOf("www.startupindia.gov.in") > -1) {
                grecaptcha.reset();
            }
            $(".g-recaptcha .help-block").remove();
            showError(".login-tab", data);
        }
    });
}

function loginSuccessFunction(data){
    var currentPage = window.location.href;
    store.removeItem("international-checkbox");
    if (data['rejected']) {
        $('#loginModal').hide();
        $('.profile-rejected-disabled-modal .modal-body p').html("Your profile has been rejected");
        $('.profile-rejected-disabled-modal').modal();
    } else if (data['disabled'] == false) {
        $.cookie("authToken", data['token'], {
            'expires': 365,
            'path': '/',
            'domain': SIH.getSiteDomain()
        });
        store.setItem("sihRegisteredUser", true);
        var time = new Date();
        store.setItem("loginTime", time.getTime());
        store.setItem("uid", data['uid']);
        store.setItem("uniqueId", data['uniqueId']);
        store.setItem("fullName", data['fullName']);
        store.setItem("registered", data["registered"]);
        store.setItem("email", data["mail"]);
        if (data['sms_user'] && data['sms_user']['mobileNumber']) {
            store.setItem('phone', data['sms_user']['mobileNumber']);
        }
        store.setItem("country", data["country"]);
        store.setItem("state", data["state"]);
        store.setItem("city", data["city"]);
        store.setItem("startupName", data["city"]);
        if(data['role'] === 'SIH_Admin'){
            store.setItem("country", "5f02e38c6f3de87babe20cd2");
        }
        store.setItem("token", data['token']);
        if (data['registered'] == false) {
            $('.redirect-model').modal('show');
            store.setItem('no-profile', true);
            var createProfile = $('.notification-container').attr('create-profile');
            if ($.cookie("countryTag") == "5f041328d7b2225074b1ab4e") {
                createProfile = $('.notification-container').attr('create-int-profile') + "?uid=" + data['uid'];
            }
            window.location = createProfile;
        } else {

            store.setItem("expiresAt", data['expiresAt']);
            store.setItem("refreshToken", data['refreshToken']);
            store.setItem('published', data['published']);
            store.setItem('role', data['role']);

            var role = ["ServiceProvider", "Academia"];
            /*if ($.cookie('countryTag') != "sih:location/india") {s
             if($.cookie("countryTag") === "sih:location/sweden"){
             window.location = $('.notification-container').attr('sweden-landing-page');
             }else{
             window.location = $('.notification-container').attr('international-landing-page');
             }
             } else*/
            if (role.indexOf(data['role']) !== -1) {
                store.setItem('no-dashboard', true);
                $('.redirect-model').modal('show');
                window.location = $('.notification-container').attr('home-page');
            } else if (currentPage.indexOf($('.notification-container').attr('home-page')) !== -1
                || currentPage.indexOf($('.notification-container').attr('login-page')) !== -1
                || currentPage.indexOf($('.notification-container').attr('registration-page')) !== -1) {

                if(data.switchedUser && !localStorage.getItem("disablePersonaUpdateMsg"+store.getItem("uniqueId"))){
                    var profileURL = $('.notification-container').attr('create-profile');
                    profileURL = profileURL.split(".")[0].concat(".update.html");
                    window.location = profileURL;
                    return;
                }

                if(window.location.hostname === $('.notification-container').attr('main-domain')){
                    dashboardPageRedirection(data);
                }else if(getCookie("authToken") === "" || !getCookie("authToken")){
                    dashboardPageRedirection(data);
                }else{
                    location.reload();
                }

                //window.location = $('.notification-container').attr('dashboard') + "/" + data['role'] + ".html";
            } else {
                $.cookie("authToken", data['token'], {
                    'expires': 365,
                    'path': '/',
                    'domain': SIH.getSiteDomain()
                });
                $('.redirect-model').modal('show');
                if(store.getItem('secureLinkClicked')){
                    $.event.trigger({type:"secureApplyClick"})
                }else {
                    if(data.switchedUser && !localStorage.getItem("disablePersonaUpdateMsg"+store.getItem("uniqueId"))){
                        var profileURL = $('.notification-container').attr('create-profile');
                        profileURL = profileURL.split(".")[0].concat(".update.html");
                        window.location = profileURL;
                        return;
                    } else {
                        window.location = currentPage;
                    }
                }
            }
        }

    } else {
        $('#loginModal').hide();
        $('.profile-rejected-disabled-modal .modal-body p').html("Your profile has been disabled");
        $('.profile-rejected-disabled-modal').modal();
    }
}

var showRegistrationOTPForm = function () {
    $(".new-register-page .registration-otp-form").show();
    showTimer(".new-register-page .registration-otp-form");
};

var hideRegistrationOTPForm = function () {
    $(".new-register-page .registration-otp-form").hide()
};

var showForgotPasswordOTPForm = function () {
    $(".login-signup-modal .forgot-pwd-otp-form, .otp-form-container").show();
    showTimer(".login-signup-modal .forgot-pwd-otp-form, .otp-form-container");
};

var hideForgotPasswordOTPForm = function () {
    $(".login-signup-modal .forgot-pwd-otp-form, .otp-form-container").hide()
};

var hideRegistrationForm = function () {
    $(".new-register-page .register-form").hide();
};

var showRegistrationSuccess = function () {
    $(".new-register-page .registration-tab .success-registeration, .success-container").show();
    $(".new-register-page .right-block-inner .success-registeration-right-block").show();
};

var showChangePasswordSuccess = function () {
    $(".login-signup-modal .login-tab .success-registeration, .success-container").show();
};

var showForgotPasswordForm = function () {
    $(".login-signup-modal .forgot-pwd-form, .forgot-pwd-container").show();
};

var hideForgotPasswordForm = function () {
    $(".login-signup-modal .forgot-pwd-form, .forgot-pwd-container").hide();
};

var showChangePasswordForm = function () {
    $(".login-signup-modal .change-pwd-form, .change-pwd-container").show();
};

var hideChangePasswordForm = function () {
    $(".login-signup-modal .change-pwd-form, .change-pwd-container").hide();
};

//forgot password call
$(".login-signup-modal .forgot-pwd-form .submit-btn, .forgot-pwd-container .forgot-pwd-form .submit-btn").click(function (event) {
    cleanError(".login-tab");
    event.preventDefault();
    var currentContainer = $(".login-signup-modal").is(":visible") ? $(".login-signup-modal") : $(".forgot-pwd-container");
    var form = currentContainer.find(".forgot-pwd-form");
    if (isValid(form.find("form"))) {
        var email = form.find("form #email").val();
        var d = {"email": email};

        $.ajax({
            url: SIH.getEndPoint("/api/noauth/sihUser/password/forgot"),
            type: 'POST',
            contentType: "application/json",
            data: JSON.stringify(d),
            success: function (data) {
                var forgotPwdForm = $(".login-signup-modal").is(":visible") ? $(".login-signup-modal .forgot-pwd-otp-form") : $(".otp-form-container .forgot-pwd-otp-form");
                forgotPwdForm.find("#email").val(email);
                hideForgotPasswordForm();
                showForgotPasswordOTPForm();
                clearForm(form);
            }, error: function (data,txt_status,xhr) {
                if(data.status === 500){
                    var forgotPwdForm = $(".login-signup-modal").is(":visible") ? $(".login-signup-modal .forgot-pwd-otp-form") : $(".otp-form-container .forgot-pwd-otp-form");
                    forgotPwdForm.find("#email").val(email);
                    hideForgotPasswordForm();
                    showForgotPasswordOTPForm();
                    clearForm(form);
                    showError(".login-tab", data);
                }else {
                    showError(".login-tab", data);
                }
            }
        });
    } else {
        console.warn("Validation failed")
    }
});

//verify forgot password otp
$(".login-signup-modal .forgot-pwd-otp-form .submit-btn, .otp-form-container .forgot-pwd-otp-form .submit-btn").click(function (event) {
    cleanError(".login-tab");
    event.preventDefault();
    var currentContainer = $(".login-signup-modal").is(":visible") ? $(".login-signup-modal") : $(".otp-form-container");
    var form = currentContainer.find(".forgot-pwd-otp-form form");
    if (isValid(form)) {
        var code = form.find("#otp").val();
        var email = form.find("#email").val();
        var d = {"email": email, "code": code};

        $.ajax({
            url: SIH.getEndPoint("/api/noauth/sihUser/otp/verify"),
            type: 'POST',
            contentType: "application/json",
            data: JSON.stringify(d),
            success: function (data) {
                var chgPwdForm = $(".login-signup-modal").is(":visible") ? $(".login-signup-modal .change-pwd-form") : $(".change-pwd-container .change-pwd-form");
                chgPwdForm.find("#email").val(email);
                chgPwdForm.find("#otp").val(code);
                hideForgotPasswordOTPForm();
                showChangePasswordForm();
                clearForm(form);
            }, error: function (data) {
                showError(".login-tab", data);
            }
        });
    } else {
        console.warn("Validation failed")
    }
});

//change password otp
$(".login-signup-modal .change-pwd-form .submit-btn, .change-pwd-container .change-pwd-form .submit-btn").click(function (event) {
    cleanError(".login-tab");
    event.preventDefault();
    var currentContainer = $(".login-signup-modal").is(":visible") ? $(".login-signup-modal") : $(".change-pwd-container");
    var form = currentContainer.find(".change-pwd-form form");
    if (isValid(form)) {
        var code = form.find("#otp").val();
        var email = form.find("#email").val();
        var regpassword = form.find("#reg-password").val();
        var confirmPassword = form.find("#confirm-password").val();
        var d = {"email": email, "code": code, "password": regpassword, "confirmPassword": confirmPassword};

        $.ajax({
            url: SIH.getEndPoint("/api/noauth/sihUser/password/update"),
            type: 'POST',
            contentType: "application/json",
            data: JSON.stringify(d),
            success: function (data) {
                hideChangePasswordForm();
                showChangePasswordSuccess();
                clearForm(form);
            }, error: function (data,txt_status,xhr) {
                if(xhr.status === 403){
                    var forgotPwdForm = $(".login-signup-modal").is(":visible") ? $(".login-signup-modal .forgot-pwd-otp-form") : $(".otp-form-container .forgot-pwd-otp-form");
                    forgotPwdForm.find("#email").val(email);
                    hideForgotPasswordForm();
                    showForgotPasswordOTPForm();
                    clearForm(form);
                }else {
                    showError(".login-tab", data);
                }
            }
        });
    } else {
        console.warn("Validation failed")
    }
});

//forgot pwd resend otp btn
$(".login-signup-modal .forgot-pwd-otp-form .resend-btn, .otp-form-container .forgot-pwd-otp-form .resend-btn").on("click", function (event) {
    cleanError(".login-tab");
    event.preventDefault();
    var currentContainer = $(".login-signup-modal").is(":visible") ? $(".login-signup-modal") : $(".otp-form-container");
    var form = currentContainer.find(".forgot-pwd-otp-form");
    var email = form.find("#email").val();
    var d = {"email": email};
    $.ajax({
        url: SIH.getEndPoint("/api/noauth/sihUser/otp/generate"),
        type: 'POST',
        contentType: "application/json",
        data: JSON.stringify(d),
        success: function (data) {
            showTimer(".login-signup-modal .forgot-pwd-otp-form, .otp-form-container");
        }, error: function (data) {
            showError(".login-tab", data);
        }
    });
});

var showError = function (parentClass, error) {
    if (error.responseJSON) {
        for (var i = 0; i < error.responseJSON.length; i++) {
            $(parentClass + " div.error-message span.error-content").html(error.responseJSON[i].defaultMessage + "<br/>");
        }
    } else if (error.responseText) {
        $(parentClass + " div.error-message span.error-content").html(error.responseText);
    }
    else if (typeof(error) === "string" || error instanceof String) {
            $(parentClass + " div.error-message span.error-content").html(error);
    }

    else {
        $(parentClass + " div.error-message span.error-content").html("Something went wrong. Please try again later.")
    }
    $(parentClass + " div.error-message").css("display","block");
};

var cleanError = function(parentClass) {
    $(parentClass + " div.error-message span.error-content").html("");
    $(parentClass + " div.error-message").css("display","none");
};

$(".login-signup-modal .static-tabs ul li").click(function (e) {
    cleanError("#loginModal");
    $(this).addClass("active");
    if ($(this).attr("data-tab") == "login-tab-1") {
        $("li[data-tab=login-tab-2]").removeClass("active");
        $(".login-signup-modal div #login-tab-1").addClass("current");
        $(".login-signup-modal div #login-tab-2").removeClass("current");
    } else {
        $("li[data-tab=login-tab-1]").removeClass("active");
        $(".login-signup-modal div #login-tab-2").addClass("current");
        $(".login-signup-modal div #login-tab-1").removeClass("current");
    }
});

var isValid = function (form) {
    var isValid = true;
    $(form).find(".form-control").not(':button').each(function (index, ele) {
        var element = $(ele);
        var parent = element.closest(".form-group");
        isValid = validateField(element, parent, isValid);
    });
    $(form).find(".form-control").unbind("change");
    $(form).find(".form-control").on("change", function () {
        validateField($(this), $(this).closest(".form-group"));
    });
    return isValid;
};

var validateField = function (element, parent, isFormValid) {
    parent.find("span.help-block").html("");
    parent.removeClass("has-error");
    if (element.data("pattern") !== undefined) {
        var pattern = new RegExp(element.data("pattern"), "g");
        if (element.val().match(pattern) === null) {
            parent.addClass("has-error");
            parent.find("span.help-block").html(element.data("pattern-error") + "<br/>");
            isFormValid = false;
        }

    }
    if (element.data("match") !== undefined) {
        var match = $(element.data("match"));
        if (match.val() !== element.val()) {
            parent.addClass("has-error");
            parent.find("span.help-block").html(element.data("match-error") + "<br/>");
            isFormValid = false;
        }
    }
    if (element.attr("required") === "required" || element.attr("requiredField")=="true") {
        if ((element.val() === "" || element.val() === null)) {
            parent.addClass("has-error");
            parent.find("span.help-block").html("This field is required<br/>");
            isFormValid = false;
        }
    }
    return isFormValid;
};

var clearForm = function (form) {
    try {
        form.find('form :input').not(':button, :submit, :reset').removeAttr('checked').removeAttr('selected').not('‌​:checkbox, select').val('').removeAttr('value');
    }catch(e){
        console.error("form not found");
    }
};


$('#loginModal').on('hidden.bs.modal', function () {
    clearForm($(".login-form"));
    cleanError("#loginModal");
});

var openDefaultForm = function(otherLogin=false) {

    if (otherLogin){
        $('#username_login').attr('placeholder', 'Enter Your Email Id');
        $("#login-form .trouble-login").addClass("display-n");
        $("#login-form .reg-redirect").addClass("display-n");
        $("#login-form .social-login").addClass("display-n");
        $(".unable-to-login").hide();
        grantType = "AGNII";
    } else {
        $(".unable-to-login").show();
        $('#username_login').attr('placeholder', 'Enter Your Email Id / CIN');
        $("#login-form .trouble-login").removeClass("display-n");
        $("#login-form .reg-redirect").removeClass("display-n");
        $("#login-form .social-login").removeClass("display-n");
        grantType = "PASSWORD";
    }

    showDefaultForm();
    $("#loginModal .login-form").hide();
    $("#loginModal .login-form.default").show();
    cleanError(".login-form")
};

var forgotPassword = function () {
    $(".login-tab .login-form").hide();
    cleanError(".login-tab");
    showForgotPasswordForm();
};

var openTab = function (tabId) {

    fbq('track', 'Lead');

    $(".login-signup-modal .static-tabs ul li[data-tab=" + tabId + "]").click();
};

function startTimer(duration, display) {
    var time = duration, seconds;
    var timer = setInterval(function () {
        seconds = parseInt(duration);

        seconds = seconds < 10 ? "0" + seconds : seconds;

        display.html(time);

        if (--time < 0) {
            clearInterval(timer);
            $(".resend-btn").removeAttr("disabled");
        }
    }, 1000);
}

var twentyFiveSeconds = 30;
var showTimer = function (parent) {
    $(".resend-btn").attr("disabled","disabled");
    var display = $(parent).find('#time');
    startTimer(twentyFiveSeconds, display);
};

var openLogin = function () {
    openTab("login-tab-1");
    openDefaultForm();
};
var openLoginPopUp = function () {
    openDefaultForm();
};

if (!store.getItem("token") && getCookie("authToken") && !store.getItem("no-profile")) {
    var d = {token: getCookie("authToken")};
    if (getCookie('loginType') === 'socialLogin') {
        checkForExistingUser(getCookie("authToken"));
    }
    else if (getCookie('loginType') === 'sihLogin') {
        sihLogin(d);
    } /*else {
        myGovLogin(d);
    }*/
} else if ((store.getItem("token") && !getCookie("authToken")) || ((store.getItem("token") != null || store.getItem("token") != undefined) && (store.getItem("token")  != getCookie("authToken")))) {
    logout();
}

function appAutoLogin(authToken,loginType){
    var d = {token : authToken};
    if(!store.getItem("token") || (store.getItem("token") && (store.getItem("token") !== authToken))){
        if (loginType === 'socialLogin') {
            checkForExistingUser(authToken);
        }
        else if (loginType === 'sihLogin') {
            sihLogin(d);
        } else if(loginType === 'myGovLogin'){
            myGovLogin(d);
        }
    }
}

function dashboardPageRedirection(data) {
    $('.redirect-model').modal('show');
    if (data['country'] === "5f02e38c6f3de87babe20cd2" || data['role'] === "SIH_Admin") {
        window.location = $('.notification-container').attr('dashboard') + "/" + data['role'] + ".html";
    } else {
        window.location = $('.notification-container').attr('dashboard') + "/Int-" + data['role'] + ".html";
    }
}

function unableToLoginDialog(){
    var dialog = bootbox.dialog({
        message: '<div class="unable-login-modal"><div class="modal-header">\n' +
        '                <h3>Frequently Asked Questions for Log in Issues:</h3>\n' +
        '            </div>\n' +
        '            <div class="modal-body">\n' +
        '                <div class="row">\n' +
        '                    <div class="col-sm-12">\n' +
        '                        <ul class="certification-list">\n' +
        '                            <li>\n' +
        '                                <h4>I had an account on www.startupindia.gov.in but I’m unable to log in now </h4>\n' +
        '                                <p>The quickest way to resolve this is by select the forgot password option. <a href="javascript:void(0)" class="forgot-password-link">Click here</a> to reset your password and continue with your Startup India journey </p>\n' +
        '                            </li>\n' +
        '                            <li>\n' +
        '                                <h4>I am unable to log in with my CIN</h4>\n' +
        '                                <p>This is probably because you have registered your company with a different email ID. Please use the forgot password option with CIN details to retrieve the email ID which your CIN is mapped to.</p>\n' +
        '                            </li>\n' +
            '                        <li>\n' +
            '                            <h4><b>I made an account previously, but I do not remember my email ID and I don’t have a CIN:</b></h4>\n' +
            '                            <p>Please create a new account OR email us at dipp-startups[at]nic[dot]in and share your Company Name with us so that we can help you to access your old account.</p>\n' +
            '                        </li>\n' +
        '                        </ul>\n' +
        '                    </div>\n' +
        '                </div>\n' +
        '            </div></div>'
    });
    $('.bootbox .modal-dialog').addClass('unable-login-wrapper');
}
$(document).on('click','.forgot-password-link',function(){
    $('.bootbox.modal').modal('hide');
    forgotPassword();
});





var settingSuccess;
$(document).ready(function () {
    var settingsRole = store.getItem("role");
    if (!(settingsRole && settingsRole == 'Startup')) {
        $('.businessPrivacyList').html('');
    }
    $(".settings-modal .btn-small").click(function () {
        var settingDetails = new Object();
        settingDetails.notificationOn = $(".swipe-btn input[type='checkbox']").prop("checked");
        if (settingDetails.notificationOn) {
            settingDetails.frequency = $("#emailList option:selected").val();
        } else {
            settingDetails.frequency = null;
        }
        settingDetails.contactPrivacy = $("#contactList option:selected").val();
        settingDetails.bussinessDocPrivacy = $("#businessList option:selected").val();

        $.ajax({
            url: SIH.getEndPoint("/api/auth/user/settings"),
            type: 'POST',
            data: JSON.stringify(settingDetails),
            contentType: 'application/json',
            beforeSend: setAuthTokenHeader,
            success: function () {
                $('.settings-modal').modal('hide');
                settingSuccess = "success";
            }, error: function () {
                $('.settings-modal').modal('hide');
                settingSuccess = "failure";
            }
        });
    });
    var roleQueue = ["Individual", "GovernmentBody"];
    if (store.getItem('token') && ($.inArray(store.getItem("role"), roleQueue) == -1)) {
        $.ajax({
            type: "GET",
            async: false,
            url: SIH.getEndPoint("/api/auth/user/message/queue"),
            beforeSend: setAuthTokenHeader
        }).done(function (data) {
            var unreadMsgs = jQuery.grep(data.content, function (element) {
                return (element.unread);
            });
            var $msgNotification = $(".msg-notification");
            if (unreadMsgs.length > 0) {
                $msgNotification.find(".numbers").html(unreadMsgs.length);
                $msgNotification.find(".numbers").css("display", "block");
            } else {
                $msgNotification.find(".numbers").css("display", "none");
            }
            return false;
        });
    }
});

$('.settings-modal').on('hidden.bs.modal', function () {
    if (settingSuccess == "success") {
        $.notify($('.settings-modal').attr('success-meassage'), 'success');
    } else if (settingSuccess == "failure") {
        $.notify($('.settings-modal').attr('error-meassage'));
    }
    settingSuccess = "";
});

function notificationEnable() {
    if ($(".swipe-btn input[type='checkbox']").prop("checked")) {
        $('#emailList').removeAttr('disabled');
    }
    else {
        $('#emailList').attr('disabled', 'disabled');
    }
}

function getSettings(refObj) {
    /*var $refObj = $(refObj);
    $refObj.closest("ul.notification-info").hide();*/
    $.ajax({
        url: SIH.getEndPoint("/api/auth/user/settings"),
        type: 'GET',
        dataType: 'json',
        beforeSend: setAuthTokenHeader,
        success: function (data) {
            $('#emailList option,#contactList option, #businessList option').each(function () {
                $(this).removeAttr('selected')
            });
            var role = store.getItem('role') ? store.getItem('role') : "";
            if (role.toLowerCase() == "individual") $("select#contactList").find("option[value='My Connections']").remove();
            $('#emailList option[value=' + data.frequency + ']').prop("selected", true);
            $('#contactList option[value="' + data.contactPrivacy + '"]').prop("selected", true);
            $('#businessList option[value="' + data.bussinessDocPrivacy + '"]').prop("selected", true);
            $(".swipe-btn input[type='checkbox']").prop("checked", data.notificationOn);
            notificationEnable();
            $('.settings-modal').modal();
        }
    });
}

// Change Password Modal
function showChangePasswordOption(event) {
    $(".changePwd-modal").find("#changePwdSuccess").hide().find(".message").html("").hide();
    $(".changePwd-modal").find("#changePwdError").hide().find(".message").html("").hide();
    $('.changePwd-modal').modal("show");
    return false;
}

function showCreatePasswordOption(event) {
    //event.preventDefault();
    $('.showPwd-modal').modal("show");
    return false;
}

$(document).on('hidden.bs.modal','.showPwd-modal', function () {
    location.reload(true);
});

function createPassword(event) {
    event.preventDefault();
    event.stopPropagation();
    var crtpwd = "createPassword";
    if (validatePasswords(true)) {

        $(".changePwdMsg").hide();
        $("#changePwdBtn").attr("disabled", "disabled");
        $.ajax({
            url: SIH.getEndPoint("/api/auth/user/password/create"),
            type: 'POST',
            beforeSend: setAuthTokenHeader,
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            data: JSON.stringify({
                email: store.getItem("email"),
                password: $("#passwordChange").val(), comfirmPassword: $("#confirmPassword").val()
            }),
            success: function (data) {
                if (data.status) {
                    $(".changePwd").val("");
                    $(".createPasswordForm").remove();
                    $("#changePwdSuccess").closest(".col-sm-7").toggleClass("col-sm-7 col-sm-12");
                    $("#changePwdSuccess").show().find(".message").html("Password created successfully").show();
                } else {
                    $("#changePwdError").show().find(".message").html(data.message).show();
                }
                $("#changePwdBtn").attr("disabled", false);

            }, error: function () {
                $("#changePwdError").show().find(".message").html("Error encountered. Please try again.").show();
                $("#changePwdBtn").attr("disabled", false);
            }
        });
    }else{
        $("#changePwdBtn").attr("disabled", false);

    }
}

function changePassword(event) {
    event.preventDefault();
    event.stopPropagation();
    var currentTarget = event.currentTarget;
    var dataAction = $(currentTarget).data("action");
    //console.log(dataAction);
    $(".changePwdMsg").hide();
    //$("#changePwdBtn").attr("disabled", "disabled");
    if (validatePasswords()) {
        $.ajax({
            url: SIH.getEndPoint("/api/auth/user/password/change"),
            type: 'POST',
            beforeSend: setAuthTokenHeader,
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            data: JSON.stringify({
                email: store.getItem("email"),
                oldPassword: $("#oldPassword").val(),
                password: dataAction === "changePassword" ? $("#newPassword").val() : $("#passwordChange").val(),
                comfirmPassword: dataAction === "changePassword" ? $("#confirmNewPassword").val() :$("#confirmPassword").val()
            }),
            success: function (data) {
                if (data.status) {
                    $(".changePwd").val("");
                    $(currentTarget).closest("#changePwdForm").find("#changePwdSuccess").show().find(".message").html("Password changed successfully").show();
                    $(currentTarget).find("#changePwdBtn").attr("disabled", true);
                } else {
                    $(currentTarget).closest("#changePwdForm").find("#changePwdError").show().find(".message").html(data.message).show();
                }
            }, error: function () {
                $(currentTarget).closest("#changePwdForm").find("#changePwdError").show().find(".message").html("Error encountered. Please try again.").show();
                $(currentTarget).find("#changePwdBtn").attr("disabled", true);
            }
        });
    } else {
        $("#changePwdBtn").attr("disabled", false);
    }
}

$('.changePwd-modal').on('hidden.bs.modal', function () {
    $('.changePwd-modal').find(".form-group").removeClass("has-error")
        .end().find(".help-block").hide()
        .end().find(".changePwdMsg").hide()
        .end().find(".changePwd").val("");
});

function validatePasswords(isCreatePassword) {

    var newPwdField = isCreatePassword ? "#passwordChange" : "#newPassword";
    var newCfmPwdField = isCreatePassword ? "#confirmPassword" : "#confirmNewPassword";
    var flag = true, newPwd = $(newPwdField).val();
    var pwdRegex = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z0-9])(?!.*\s).{8,15}$/;
    var classValue= "";

    if(isCreatePassword!= '' && isCreatePassword){
        classValue = "crtpwd"
    }else{
        classValue = "changePwd"

    }
    $("."+classValue+":visible").each(function () {
        var el = $(this);
        if (el.val() == "") {
            flag = false;
            el.siblings('.help-block').show();
            el.closest(".form-group").addClass("has-error").find("span.help-block").first().html("This field cannot be left Blank.");
        } else if (!(pwdRegex.test(newPwd)) && el.attr("id") == "passwordChange") {
            flag = false;
            el.siblings('.help-block').show();
            el.closest(".form-group").addClass("has-error").find("span.help-block").first().html("Invalid Password.");
        } else if (($(newPwdField).val() != $(newCfmPwdField).val())
            && (el.attr("id") == "confirmPassword" || el.attr("id") == "confirmNewPassword") ) {

            flag = false;
            el.siblings('.help-block').show();
            el.closest(".form-group").addClass("has-error").find("span.help-block").first().html("New passwords do not match.");
        } else {
            el.closest(".form-group").removeClass("has-error")
                .end().siblings(".help-block").hide();
        }
    });
    return flag;
}
// Change User Name Modal
function showChangeUserNameOption() {
    $('.changeUsr-modal').modal("show");
    $("#changeUsrForm").show();
    $("#changeUsrForm1").hide();
    $("#changeUsrForm").trigger("reset");
    $("#changeUsrError").hide();
    $("#changeUsrSuccess").hide();
    $(".changePwd").val("");
}

$('.changeUsr-modal').on('hidden.bs.modal', function () {
    $('.changeUsr-modal').find(".form-group").removeClass("has-error")
        .end().find(".help-block").hide()
        .end().find(".changeUsrMsg").hide()
        .end().find(".changePwd").val("")
        .end().find(".changeUsr").val("");
});

$('.changeUsrMsg').on('close.bs.alert', toggleAlert);

function toggleAlert() {
    $(".changeUsrMsg").hide();
    $(".changePwd").val("");
    $("#changeUsrForm").trigger("reset");
    return false;
}

function sendOTP(event){
    cleanError(".changeUsrMsg");
    $("#otp").removeAttr("required");
    $("#confirmPasswordUsr").removeAttr("required");
    $("#changeUsrSuccess").hide();
    $("#changeUsrError").hide();
    event.preventDefault();
    event.stopPropagation();
    var currentContainer = $(".changeUsr-modal");
    var form = currentContainer.find("#changeUsrForm");
    if (isValid(form)) {
        var oldEmail = store.getItem('email');
        var email = form.find("#email").val();
        var d = { "oldEmail":oldEmail,"newEmail":email,"otp":'testOTP',"password":"testPwd"};
        $.ajax({
            url: SIH.getEndPoint("/api/noauth/sihUser/emailChange/otp"),
            type: 'POST',
            contentType: "application/json",
            data: JSON.stringify(d),
            success: function (data) {
                if(data.status) {
                    $("#changeUsrSuccess").show().find(".message").html(data.message).show();
                    $("#changeUsrForm").hide();
                    $("#changeUsrForm1").show();
                    $("#enteredEmail").val(email);
                    showTimer("#changeUsrForm1");
                }else {
                    $("#changeUsrSuccess").hide();
                    if (data.responseJSON) {
                        for (var i = 0; i < data.responseJSON.length; i++) {
                            $("#changeUsrError").show().find(".message").html(data.responseJSON[0].defaultMessage).show();
                        }
                    }else if(data.responseText) {
                        $("#changeUsrError").show().find(".message").html(data.responseText).show();
                    }else{
                        $("#changeUsrError").show().find(".message").html(data.message).show();
                    }
                }
            }, error: function (data) {
                $("#changeUsrSuccess").hide();
                if (data.responseJSON) {
                    for (var i = 0; i < data.responseJSON.length; i++) {
                        $("#changeUsrError").show().find(".message").html(data.responseJSON[0].defaultMessage).show();
                    }
                }else if(data.responseText) {
                    $("#changeUsrError").show().find(".message").html(data.responseText).show();
                }else{
                    $("#changeUsrError").show().find(".message").html(data.message).show();
                }
            }
        });
    }
}
function editEmailId(event) {
    event.preventDefault();
    event.stopPropagation();
    $("#changeUsrSuccess").hide();
    $("#changeUsrError").hide();
    $("#changeUsrForm1").hide();
    $("#changeUsrForm1").trigger("reset");
    $("#changeUsrForm").show();
}


function changeUserName(event) {
    $("#changeUsrError").hide();
    $("#otp").attr('required', 'required');
    $("#confirmPasswordUsr").attr('required', 'required');
    cleanError(".changeUsrMsg");
    event.preventDefault();
    event.stopPropagation();
    var currentContainer = $(".changeUsr-modal");
    var form = currentContainer.find("#changeUsrForm1");
    if (isValid(form)) {
        var oldEmail = store.getItem('email');
        var email = form.find("#enteredEmail").val();
        var code = form.find("#otp").val();
        var password = form.find("#confirmPasswordUsr").val();
        var d = { "oldEmail":oldEmail,"newEmail":email,"otp":code,"password":password}
        $.ajax({
            url: SIH.getEndPoint("/api/noauth/sihUser/changeEmail"),
            type: 'POST',
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify(d),
            success: function (data) {
                if (data.status) {
                    $(".changePwd").val("");
                    $("#changeUsrError").hide();
                    $('.changeUsr-modal').modal("hide");
                    alert("E-mail ID changed successfully, Please login again using new email Id");
                    logout();
                } else {
                    $("#changeUsrSuccess").hide();
                    if (data.responseJSON) {
                        for (var i = 0; i < data.responseJSON.length; i++) {
                            $("#changeUsrError").show().find(".message").html(data.responseJSON[0].defaultMessage).show();
                        }
                    }else if(data.responseText) {
                        $("#changeUsrError").show().find(".message").html(data.responseText).show();
                    }else{
                        $("#changeUsrError").show().find(".message").html(data.message).show();
                    }
                }
            }, error: function (data) {
                $("#changeUsrSuccess").hide();
                if (data.responseJSON) {
                    for (var i = 0; i < data.responseJSON.length; i++) {
                        $("#changeUsrError").show().find(".message").html(data.responseJSON[0].defaultMessage).show();
                    }
                }else if(data.responseText) {
                    $("#changeUsrError").show().find(".message").html(data.responseText).show();
                }else{
                    $("#changeUsrError").show().find(".message").html(data.message).show();
                }
            }
        });
    }
}




var notificationpage = 0;

var handleNotificationData = function (data) {
    if (!(data.content.length == 0)) {
        var source = $("#notification-template").html();
        var template = Handlebars.compile(source);
        $("#notification-list").html(template(data));

        //Pagination
        var pagination = {
            pages: data.totalPages,
            number: data.number + 1,
            last: data.last,
            first: data.first
        }
        var paginationResource = $('#notification-pagination-template').html();
        var paginationTemplate = Handlebars.compile(paginationResource);
        $('#notification-pagination-div').html(paginationTemplate(pagination));
        if (pagination.pages > 5) {
            $('span.first-page,span.last-page').css('display', 'block');
            if ($('#notification-pagination-div .pagination li.active').index() == 0)
                $('span.first-page').css('display', 'none');
            if ($('#notification-pagination-div .pagination li.active').index() == 4)
                $('span.last-page').css('display', 'none');
        } else {
            $('span.first-page, span.last-page').css('display', 'none');
        }
        viewedNotification();
    } else {
        var noNotificationResource = $("#no-notificaton-template").html();
        var noNotificationTemplate = Handlebars.compile(noNotificationResource);
        var noNotificationText = $('#notification-list').attr('no-notification-text');
        $('#notification-list').html(noNotificationTemplate({'data': noNotificationText}));
    }
    addCursorPointer();
}

function addCursorPointer() {
    $('#notification-list li').each(function (index, val) {
        if ($(this).attr("navigation-link")) {
            $(this).css("cursor", "pointer");
            $("a", $(this)).removeClass("default-cursor");
        }
    });
}

var handleNotificationCount = function (data) {
    $('#notification').parents('.tab-container').find('.desktop-tabs.active .count').html(" (" + data + ")");
}

var handleNotificationViewCount = function (data) {
    var source = $("#notification-count-template").html();
    var template = Handlebars.compile(source);
    if (data) {
        if (data > 99) {
            data = "99+"
        }
        $('#notification-link').html(template({'data': data}));
    }
}

var viewedNotification = function () {
    var viewedNotification = new Object();
    viewedNotification.notificationId = $('#notification-list li:first').attr('id');
    viewedNotification.connectionId = $('#connections-request-div li:first').attr('id');
    $.ajax({
        type: "PUT",
        url: SIH.getEndPoint('/api/auth/user/notifications/view'),
        data: JSON.stringify(viewedNotification),
        headers: {
            "X-Auth-Token": store.getItem("token"),
            "Content-Type": 'application/json'
        },
        success: function (data) {
            $('#notification-link').html("");
        }
    });

}

var notificationPrevious = function (elem) {
    var currentPage = parseInt($(elem).siblings('ul').find('li.active').html());
    notificationpage = currentPage - 2;
    notifications();
}

var notificationNext = function (elem) {
    var currentPage = parseInt($(elem).siblings('ul').find('li.active').html());
    notificationpage = currentPage;
    notifications();
}

var notificationFirst = function () {
    notificationpage = 0;
    notifications();
}

var notificationLast = function (pages) {
    notificationpage = pages - 1;
    notifications();
}

var loadNotificationPage = function (page) {
    var pageNumber = parseInt($(page).html());
    notificationpage = pageNumber - 1;
    notifications();
}

var notifications = function () {
    var path = SIH.getEndPoint('/api/auth/user/notifications') + "?offset=" + notificationpage;
    $.ajax({
        type: "GET",
        url: path,
        dataType: "json",
        beforeSend: setAuthTokenHeader,
    }).done(function (data) {
        if ($.trim(data)) {
            handleNotificationData(data);
        }
    });
}

var notificationCount = function () {
    $.ajax({
        type: "GET",
        url: SIH.getEndPoint('/api/auth/user/notifications/unread/count'),
        headers: {
            "X-Auth-Token": store.getItem("token")
        },
        success: function (data) {
            handleNotificationCount(data);
        }
    });
}

$(document).ready(function () {
    $(".notification").on('click', '#notification-list a', function (e) {
        e.preventDefault();
        e.stopPropagation();
        var id = $(this).parents('li').attr('id');
        var notificationPage = $(this).attr('href');
        if (!$(this).parents('li').hasClass('read')) {
            $.ajax({
                type: "PUT",
                url: SIH.getEndPoint('/api/auth/user/notifications/read/' + id),
                headers: {
                    "X-Auth-Token": store.getItem("token")
                },
                success: function () {
                    var element = "#" + id;
                    $(element).addClass('read');
                    notificationCount();
                    if (notificationPage && notificationPage !== "javascript:void(0)") {
                        window.open(notificationPage, "_blank");
                    }
                }
            });
        } else {
            if (notificationPage && notificationPage !== "javascript:void(0)") {
                window.open(notificationPage, "_blank");
            }
        }
    });

    $(".notification").on('click', '#notification-list li', function (e) {
        if ($(this).attr('navigation-link').length > 0) {
            $("a", $(this)).trigger("click");
            e.preventDefault();
            e.stopPropagation();
        }
    });


    if (store.getItem('token')) {
        $.ajax({
            type: "GET",
            url: SIH.getEndPoint('/api/auth/user/notifications/not-viewed/count'),
            dataType: "json",
            headers: {
                "X-Auth-Token": store.getItem("token")
            },
            success: function (data) {
                handleNotificationViewCount(data);
            }
        });
    }
});

$.facilitators = function () {
    var $mainContent = $(".mirsd-section");
    var formData = {};

    function getFormData(alpha, category) {
        formData["name"] = $("input[name='name']").val().trim();
        formData["jurisdiction"] = $("input[name='jurisdiction']").val().trim();
        formData["location"] = $("input[name='location']").val().trim();
        formData["sectors"] = $("select[name='sector']").val();
        formData["rootPage"] = $("#rootPagePath").val().trim();
        formData["alpha"] = alpha;
        formData["category"] = category ? category : "all";
    }

    function getFacilitators() {
        $('#modal-loader').modal('show');
        $(".facilitatorList").html("");
        $.ajax({
            type: "GET",
            async: false,
            dataType: "json",
            data: formData,
            url: "/bin/services/facilitators"
        }).done(function (data) {
            $('#modal-loader').modal('hide');
            if (data.result) {
                var source = $("#facilitator-template").html();
                var template = Handlebars.compile(source);
                $(".facilitatorList").append(template(data.result));
                $(".facilitator-error").addClass("display-n");
                $(".facilitatorList").children(":even").find(".card-table-left").addClass("right");
                lazyloader(null, null, true, "facilitator-list");
            } else {
                $(".facilitator-error").html("");
                $(".facilitator-error").removeClass("display-n");
                $(".facilitator-error").append(data.noData);
            }

        }).fail(function () {
            $('#modal-loader').modal('hide');
        });
    }

    // calling of functions
    getFormData("", "all");
    getFacilitators();

    $mainContent.find(".search-btn").click(function () {
        var f = $(this);
        var e = $(this).parent().siblings(".committee-search");
        if (e.css("display") == 'none') {
            e.css("display", 'block');
            f.find(".search-arrow").html('&#9660');
        }
        else {
            e.css("display", 'none');
            f.find(".search-arrow").html('&#9650');
        }
    });

    $mainContent.find(".btn.a-z").click(function () {
        $(".btn.a-z.darkAlphabet").removeClass('darkAlphabet');
        $(this).addClass('darkAlphabet');
        getFormData($(this).text().toLowerCase(), "filterByAlphabet");
        getFacilitators();
        $mainContent.find(".btn.a-z").removeClass("darkAlphabet");
        $(this).addClass("darkAlphabet");
    });

    $mainContent.find("#goButton").click(function () {
        var alpha = $('.committee-search .darkAlphabet').text().toLowerCase();
        getFormData(alpha, "filterByOthers");
        if (alpha) {
            getFormData(alpha, "filterByAlphabet");
        } else if (formData["name"] || formData["jurisdiction"] || formData["location"] || formData["sectors"]) {
            getFormData(alpha, "filterByOthers");
        } else {
            getFormData("", "all");
        }
        getFacilitators();
        /*if($('.committee-search .darkAlphabet').text().toLowerCase())
        getFormData($('.committee-search .darkAlphabet').text().toLowerCase(), "filterByOthers");

        if(!formData["name"] && !formData["jurisdiction"] && !formData["location"] && !formData["sectors"]) {
          /!*  $(".facilitatorList").html("");
            $(".facilitator-error").html("");
            $(".facilitator-error").removeClass("display-n");
            $(".facilitator-error").append($("#fac-error-message").val());*!/
          if(formData["alpha"]){
              getFormData($('.committee-search .darkAlphabet').text().toLowerCase(), "filterByAlphabet");
              getFacilitators();
          }else{
              getFormData("", "all");
              getFacilitators();
          }
        } else {
            getFacilitators();
            $mainContent.find(".btn.a-z").removeClass("darkAlphabet");
        }*/
    });

    $mainContent.find("#showRecords").click(function () {
        $mainContent.find("input[type='text']").val("");
        $mainContent.find("#sectors").val("");
        $mainContent.find("li.select2-search-choice").remove();
        getFormData("", "all");
        getFacilitators();
        $mainContent.find(".btn.a-z").removeClass("darkAlphabet");
    });
};

			var summernoteeditor = {
    max: null,
    placeholderValue: ""
};

// Select and loop the container element of the elements you want to equalise
function eq_heights() {
    $('.grid-wrap').each(function () {
        var highestBox = 0;
        $('li', this).each(function () {
            if ($(this).height() > highestBox) {
                highestBox = $(this).height();
            }
        });
        $('li', this).height(highestBox);

    });
}

$(document).on('click', ".home-banner a.btn-default[href='https://www.indoSwedenContactUs.html']", function (e) {
    e.preventDefault();
    $('.indoSwedenContactUs').modal('show');
});

/*$('body').click(function(){
    $('.notification-info, .top-nav-detail').css('display','none');
});*/

function hideNavItem() {
    if ($.cookie("userCountry") != "5f02e38c6f3de87babe20cd2") {
        $(".notification-container").find("li a.dashboardLink").parent().hide();
    }
    if ($('.top-nav-detail .content-section').length == 0) {
        $('#button-menu').addClass('display-n');
    }
}

/*Show tab Notification
 * ----------------------------------*/
function showTab(id) {
    $("#bell,#user").hide();
    if (id === 'bell') {
        $('#bell').css('display', 'block');
        $('#bell').find('.notification-info').css('display', 'block');
        return;
    } else if (id === 'user') {
        $('#user').css('display', 'block');
        $('#user').find('.notification-info').css('display', 'block');
        return;
    }
}

//show tab function via data-id attribute
$('.show-tab').click(function (event) {
    showTab($(this).attr("data-id"));
    event.stopPropagation();
});

if ($('.row-container .criteria')) {
    $('.row-container').each(function () {
        $(this).find('.criteria').wrapAll("<div class='container-criteria' />")
    });
}

/*lazy loader
 * -------------------------------*/
function lazyloader(maxValue, currentTime, reload, uriPath) {
    $('.learning-and-development-listing #' + currentTime + ' .card,.newsfeed, .fixed-table-body.card-table, .block-container .blog-card').addClass('display-n');
    var size_li = $('.learning-and-development-listing .card,.newsfeed, .fixed-table-body.card-table, .block-container .blog-card').size();
    var x = 6;
    var y = 6;
    if (maxValue) x = maxValue, y = maxValue;
    var count = 0;
    var lndListing = '.learning-and-development-listing #' + currentTime + ' .card:lt(' + x + ')';
    $('.newsfeed:lt(' + x + '),.fixed-table-body.card-table:lt(' + x + '),.block-container .blog-card:lt(' + x + ')').removeClass('display-n');
    $(lndListing).removeClass('display-n');
    if (reload) {
        sessionStorage.removeItem(uriPath);
    }
    if (size_li > parseInt(x)) {
        $('#loadMore').css('display', 'block');

        if (sessionStorage.getItem(uriPath)) {
            //count = window.location.hash.split('#')[1];
            count = sessionStorage.getItem(uriPath);
            var lastIndex = (y * (parseInt(count) + 1));
            $('.learning-and-development-listing #' + currentTime + ' .card:lt(' + lastIndex + '),.newsfeed:lt(' + lastIndex + '),.fixed-table-body.card-table:lt(' + lastIndex + '),.block-container .blog-card:lt(' + lastIndex + ')').removeClass('display-n');
            if (lastIndex >= size_li) {
                $('#loadMore').css('display', 'none');
            }
        }
    }
    $('#loadMore').off('click').on('click', function () {
        var c = sessionStorage.getItem(uriPath) || 0;
        sessionStorage.setItem(uriPath, ++c);
        var lastIndex = (y * (parseInt(c) + 1));
        //window.history.replaceState(window.location.pathname, "", window.location.pathname.concat("#" + ++count));
        //x = (x + y <= size_li) ? x + y : size_li;
        x = (lastIndex <= size_li) ? lastIndex : size_li;
        $('.newsfeed:lt(' + x + '),.fixed-table-body.card-table:lt(' + x + '),.block-container .blog-card:lt(' + x + ')').removeClass('display-n');
        $('.learning-and-development-listing #' + currentTime + ' .card:lt(' + x + ')').removeClass('display-n');
        (x === size_li) ? showmsg() : '';
        equalHeights();
        try {
            setMinHeight();
        } catch (e) {
            console.error("min height not found")
        }
    });
    $('.blog-image img, .resource-component img').bind('load', function () { // image ready
        equalHeights();
    });
    $('.learning-and-development-listing #' + currentTime + ' .card .img-resources').bind('load', function () { // image ready
        equalHeightsForLnD(currentTime);
    });

    $('.newsfeed .card .img-resources').bind('load', function () { // image ready
        equalHeightsForNewsfeedCards();
    });
    equalHeights();
}

$(window).load(function () {
    equalHeights();
   // equalHeightsForSelector(".leading-partners-image");
    $(window).resize(function () {
        equalHeightsForSelector(".new-persona-content .persona-radio-wrap .caption p");
    });
    equalHeightsForSelector(".new-persona-content .persona-radio-wrap .caption p");
});



$(window).load(function(){
    $('.faqs-wrapper.mentor .home-left-quick-tabs ul.dynamicTabs').slick('unslick')
    function tabScroll(){
        $('.faqs-wrapper .home-left-quick-tabs ul.dynamicTabs, .ams-listing-tabs-wrapper ul.dynamicTabs').slick({
            slidesToShow: 2,
            slidesToScroll: 1,
            infinite: false,
            responsive: [
                {
                    breakpoint: 767,
                    settings: {
                        slidesToShow: 3,
                        slidesToScroll: 1
                    }
                },
                {
                    breakpoint: 600,
                    settings: {
                        slidesToShow: 2,
                        slidesToScroll: 1
                    }
                },


            ]
        })
    }

    if ($(window).width() <= 1024) {


        $(document).on('click','.faqs-wrapper .home-left-quick-tabs ul.dynamicTabs li, .ams-listing-tabs-wrapper ul.dynamicTabs li',function () {
            $(this).addClass('active');
            $(this).parents('.slick-slide').siblings().children().children().removeClass('active');
        });
        tabScroll();
    }


    $(window).resize(function(){

        if ($(window).width() <= 1024) {
            tabScroll();
        }
    });
    //
    // if ($(window).width() <= 480) {
    //
    //
    //     $(document).on('click','.faqs-wrapper .home-left-quick-tabs ul.dynamicTabs li, .ams-listing-tabs-wrapper ul.dynamicTabs li',function () {
    //         $(this).addClass('active');
    //         $(this).parents('.slick-slide').siblings().children().children().removeClass('active');
    //     });
    //     tabScroll();
    // }
    // $('.dynamicTabs a').click(function (e) {
        // $(this).closest(".dropdown-menu").siblings(".dropdown-toggle").html($(this).text() + "<span class='caret'></span>");
    // $(".mobile-tab.active .dropdown-toggle").html("Select &nbsp;<span class='caret'></span>");
        // e.preventDefault();
        // $(this).tab('show');
    // });
    $(".mobile-tab .dropdown-toggle").each(function(){
        var actVal = $(this).siblings(".dropdown-menu").find(li).first().find("a").text();
        console.log("actVal", actVal)
        $(this).html("Select" + "<span class='caret'></span>");
    })
})




/*card equal height
 * --------------------------------*/
function equalHeights() {
    $('#bloglist-container .blog,.resource,.search-card, .startup-themes-list .startup-content, .learning-and-development-listing .card').equalHeight({
        groupByTop: false,
        resizeTimeout: 20,
        updateOnDOMReady: true,
        updateOnDOMLoad: true
    });
}

function equalHeightsForLnD(currentTime) {
    $('.learning-and-development-listing #' + currentTime + ' .card').equalHeight({
        groupByTop: false,
        resizeTimeout: 20,
        updateOnDOMReady: true,
        updateOnDOMLoad: true
    });
}

function equalHeightsForNewsfeedCards() {
    $('.newsfeed .card').equalHeight({
        groupByTop: false,
        resizeTimeout: 20,
        updateOnDOMReady: true,
        updateOnDOMLoad: true
    });

}

function equalHeightsForSelector(selector) {
    $(selector).equalHeight({
        groupByTop: false,
        resizeTimeout: 20,
        updateOnDOMReady: true,
        updateOnDOMLoad: true
    });
}


/*carousel elements equal height
 * -------------------------------*/
function carouselequalHeights() {
    $('.item .category-card').equalHeight({
        groupByTop: false,
        resizeTimeout: 20,
        updateOnDOMReady: true,
        updateOnDOMLoad: true
    });
}

/*Load more show message
 * --------------------------------*/
function showmsg() {
    $('#loadmoreicon').hide();
    $('#nomore').show();
}

/* Show progress in level achievement */
function showLevelInfo() {
    $('.level-info').show()
}

/* Close dialog showing level info */
function closeLevelInfo() {
    $('.level-info').hide();
}

/* Open filters */
function expandFilter(ele) {
    $(ele).siblings('.search-filters-list,.search-filters-data,.show-read-more,.focus-content').addClass('more');
    $(ele).siblings('.search-filter-less').removeClass('display-n');
    $(ele).addClass('display-n');
    $(ele).siblings('ul').mCustomScrollbar({'autoHideScrollbar': false});
}

/* Close filters */
function contractFilter(ele) {
    $(ele).siblings('.search-filters-list,.search-filters-data,.show-read-more,.focus-content').removeClass('more');
    $(ele).siblings('.search-filter-more').removeClass('display-n');
    $(ele).addClass('display-n');

    $('.search-filters-list,.search-filters-data,.focus-content').animate({scrollTop: 0}, 500);

    $(ele).siblings('ul').mCustomScrollbar('destroy');

}

function scrollFilters() {
    $(".filter-container.search-filters-list, .modal.fade.connection-showing-data.in .modal-content .modal-body").mCustomScrollbar({
        'autoHideScrollbar': false,
        theme: "dark",
        scrollButtons: {
            enable: true
        }
    });
}

/* Display filters for mobile */
/*function displayFilters() {
 $('.filter-menu').toggleClass('display-b');
 }*/

/**/
function moreContent() {
    /*
     var maxLength = 300;
     $(".show-read-more p").each(function(event){

     var myStr = $(this).text();
     if($.trim(myStr).length > maxLength){
     var newStr = myStr.substring(0, maxLength);
     var removedStr = myStr.substring(maxLength, $.trim(myStr).length);
     $(this).empty().html(newStr);
     $(this).append(' <a href="javascript:void(0);" class="read-more">read more...</a>');
     $(this).append('<span class="more-text">' + removedStr + '</span>');
     }
     });
     $(".read-more").click(function(e){
     */
    /**/
    /*$(this).siblings(".more-text").contents().unwrap();*/
    /**/
    /*
     e.stopPropagation();
     $(this).hide();

     $(this).next().css('display','inline');
     $(this).parent('p').next().show();

     });

     $(".less-text").click(function(e){
     e.stopPropagation();

     $(this).hide();
     $(this).prev().children('.more-text').css('display','none');
     $(this).prev().children('.read-more').css('display','block');
     });*/
    $(".focus-content").each(function () {

        var main = $(this).find('p');

        if (main.length > 0 && main.height() > 37) {
            $(this).siblings(".search-filter-more").removeClass('display-n');
        }
    });

    if ($('ul.recognition-list li').size() > 4) {

        $('ul.recognition-list').siblings('.search-filter-more').show();

    }
    if ($('ul.recognition-list li').size() <= 3) {

        $('ul.recognition-list').siblings('.search-filter-more').hide();
    }
    /*  $('#show-details').each(function(){
     if($(this).height() < 60){

     $('#show-details').siblings('.search-filter-more').hide();
     }else{
     $('#show-details').siblings('.search-filter-more').show();
     }
     });*/
    /*$('.read-more').click(function(){
     $(this).siblings('.show-read-more').removeClass('more-content-height-fixed');
     $('.less').removeClass('hidden');
     $('.read-more').addClass('hidden');
     });
     $('.less').click(function(){
     $(this).siblings('.show-read-more').addClass('more-content-height-fixed');
     $('.read-more').removeClass('hidden');
     $('.less').addClass('hidden');
     });*/


    readOrLess();

}


function readOrLess() {

    $(".main-tabs-cards .active").find(".more-content").each(function () {
        var main = $(this);
        var myStr = $(this).html();
        main.empty().html(myStr);

        $(this).removeClass('more-content-height-fixed');
        main.siblings(".read-desc").addClass('hidden');
        main.siblings(".readLess").addClass('hidden');


        if (main.height() >= 150) {
            var _this = $(this);

            $(this).addClass('more-content-height-fixed');
            console.log(_this.siblings(".read-desc"));
            _this.siblings(".read-desc").removeClass('hidden');
            _this.find('.more-content-foot').css("display", "block");

        }
    });

    $(".main-cards.persona-description-container").find(".more-content").each(function () {

        var main = $(this);
        var myStr = $(this).html();
        main.empty().html(myStr);

        $(this).removeClass('more-content-height-fixed');
        main.siblings(".read-desc").addClass('hidden');
        main.siblings(".readLess").addClass('hidden');


        if (main.height() >= 150) {
            var _this = $(this);

            $(this).addClass('more-content-height-fixed');

            _this.siblings(".read-desc").removeClass('hidden');
            _this.find('.more-content-foot').css("display", "block");

        }
    });

    $(".main-cards .allReviews .flat-media").find(".more-content").each(function () {

        var main = $(this);
        var myStr = $(this).html();
        main.empty().html(myStr);

        $(this).removeClass('more-content-height-fixed');
        main.siblings(".read-desc").addClass('hidden');
        main.siblings(".readLess").addClass('hidden');


        if (main.height() >= 150) {
            var _this = $(this);

            $(this).addClass('more-content-height-fixed');

            _this.siblings(".read-desc").removeClass('hidden');
            _this.find('.more-content-foot').css("display", "block");

        }
    });

}

function changeLanguage() {
    var lang = $(this).attr("value");
    $("#P9LngDdl").text(lang);
    if (lang == "English")
        setCookie("lang", '');
    else
        setCookie("lang", lang);
}

function setCookie(cname, cvalue) {
    if (cvalue && cvalue !== "English") {
        $.cookie(cname, cvalue, {domain: '.startupindia.gov.in', path: '/'});
    } else {
        $.cookie(cname, cvalue, {domain: '.startupindia.gov.in', path: '/', expires: -1});
    }
    window.location.reload(true);
}

$(document).on("click", ".desktop-tabs a", function () {
    readOrLess();
});

$(document).on("click", ".read-desc", function (e) {
    e.stopPropagation();
    $(this).addClass('hidden');
    $(this).siblings(".more-content").removeClass('more-content-height-fixed');
    $(this).siblings(".readLess").removeClass('hidden');
    $(this).siblings(".more-content").children('.more-content-foot').css("display", "none");
});

$(document).on("click", ".readLess", function (e) {
    e.stopPropagation();
    $(this).addClass('hidden');
    $(this).siblings(".read-desc").removeClass('hidden');
    $(this).siblings(".more-content").addClass('more-content-height-fixed');
    $(this).siblings(".more-content").children('.more-content-foot').css("display", "block");
    $('html, body').animate({
        scrollTop: $(this).parent().offset().top - 200
    }, 500);
});

$(document).ready(function () {
    var loc = window.location.href;
    if ((loc.indexOf("content/sih/en/reources/government-schemes/") > 0) && $(window).width() <= 768) {
        $('table').wrap("<div class='res-table'></div>");
    }
    if(loc.indexOf("applicationId=5c6b6fd8e4b0ba900e10556b") > 0){
        $('.thankyou-modal .modal-body p')
            .html('First round shortlist of the challenge will notified to the selected startups, via email, on 6th June 2019');
        $('.thankyou-modal').modal('show');
    }
    if(loc.indexOf("applicationId=5c6b64f5e4b0ba900e105542") > 0){
        $('.thankyou-modal .modal-body p')
            .html('Results of the challenge will notified to the winner, via email, on 15th June 2019');
        $('.thankyou-modal').modal('show');
    }
    // if ((window.location.href.indexOf("home-page") === -1) || (window.location.href.indexOf("startup-scheme") === -1)) {
    if ($(".home-banner").length === 0) {
        $('.inner-layout').removeClass("home-layout");
        $('.mid-header-wrap').removeClass("home-topnav");
    } else {
        $('.inner-layout').addClass("home-layout");
        $('.mid-header-wrap').addClass("home-topnav");
    }

    //top navigation toggle
    $(".top-nav-button").click(function (event) {
        $(".top-nav-detail").slideToggle();
        event.stopPropagation();
        $('#user').hide();

    });
    $(".top-nav-detail, .notification-info").click(function (event) {
        event.stopPropagation();
    });

    $(".notification-container .show-tab").click(function (event) {
        $(".top-nav-detail").hide();
    });
    //responsive menu on home page
    $(".responsive-menu").click(function () {
        $("nav").slideToggle();

    });
    $(".dropbtn-responsive").click(function () {
        $(".dropdown-content-responsive").slideToggle();

    });

    if ($(window).width() < 768) {
        $(".dropdown-content .dropdown").click(function () {
            $(this).children(".dropdown-content.sub-submenu").slideToggle('300');
        });
    }
    hideNavItem();

    //for home page grids
    eq_heights();

    summernoteeditor.max = $('textarea.richTextarea').attr("maxlength");
    summernoteeditor.placeholderValue = $('textarea.richTextarea').attr("placeholder");
    //summernote customize code for richtext.
    $('textarea.richTextarea').summernote({
        minHeight: 100,
        disableDragAndDrop: true,
        linkTargetBlank: true,
        placeholder: summernoteeditor.placeholderValue,

        toolbar: [
            ['insert', ['link']]
        ],
        callbacks: {
            onKeydown: function (e) {
                $(".note-placeholder").hide();
                var t = e.currentTarget.innerText;
                if (t.trim().length >= summernoteeditor.max) {
                    //delete key
                    if (e.keyCode != 8)
                        e.preventDefault();
                }
            },
            onKeyup: function (e) {
                var t = e.currentTarget.innerText;
                $('#maxContentPost').text(summernoteeditor.max - t.trim().length);
                if (t.trim().length == 0) {
                    $('.note-editor.note-frame').addClass('note-has-error').removeClass('note-writer-text');
                } else {
                    $('.note-editor.note-frame').removeClass('note-has-error').addClass('note-writer-text');
                }
            },

            onPaste: function (e) {
                equalHeights()
                var t = e.currentTarget.innerText.trim();
                var bufferText = ((e.originalEvent || e).clipboardData || window.clipboardData).getData('Text').trim();
                e.preventDefault();
                document.execCommand('insertText', false, bufferText.substring(0, summernoteeditor.max - t.length));
            },
            onFocus: function (e) {
                var t = e.currentTarget.innerText;
                if (!$('.note-editor.note-frame').hasClass('note-has-error') && t.trim().length == 0) {
                    $('.note-editor.note-frame').addClass('note-writer-text');
                } else if ($('.note-editor.note-frame').hasClass('note-has-error') && t.trim().length == 0) {
                    $('.note-editor.note-frame').addClass('note-has-error').removeClass('note-writer-text');
                } else if (t.trim().length > 0) {
                    $('.note-editor.note-frame').removeClass('note-has-error note-writer-text');
                }
            },
            onBlur: function (e) {
                var t = e.currentTarget.innerText;
                if (!$('.note-editor.note-frame').hasClass('note-has-error') && t.trim().length == 0) {
                    $('.note-editor.note-frame').removeClass('note-writer-text').addClass('note-has-error');
                } else if ($('.note-editor.note-frame').hasClass('note-has-error') && t.trim().length == 0) {
                    $('.note-editor.note-frame').addClass('note-has-error').removeClass('note-writer-text');
                } else if (t.trim().length > 0) {
                    $('.note-editor.note-frame').removeClass('note-has-error note-writer-text');
                }
            }

        }
    });

    /*   $(".note-editable").on("keyup", function(){
     if(!$(".note-editable").html().replace(/<\/?[^>]+(>|$)/g, "").length>0){
     $('.note-editor.note-frame').css('border','1px solid rgb(169, 68, 66)');
     }else{
     $('.note-editor.note-frame').css('border','1px solid rgb(169, 169, 169)');
     }
     });
     */
    window.addEventListener('resize', eq_heights);
    window.addEventListener('scroll', eq_heights);

    // window.onload = eq_heights;

    function close_accordion_section() {
        jQuery('.accordion .accordion-section-title').removeClass('active');
        jQuery('.accordion .accordion-section-content').slideUp(300).removeClass('open');
    }

    jQuery('.accordion-section-title').click(function (e) {
        // Grab current anchor value
        var currentAttrValue = jQuery(this).attr('href');

        if (jQuery(this).is('.active')) {
            close_accordion_section();
        } else {
            close_accordion_section();

            // Add active class to section title
            jQuery(this).addClass('active');
            // Open up the hidden content panel
            //  jQuery('.accordion ' + currentAttrValue).slideDown(300).addClass('open');
            $(this).siblings(".accordion-section-content").slideDown(300).addClass('open');

            // this code auto scroll to 100px for home page FAQs
            setTimeout(function () {
                if ($(e.currentTarget).closest(".accordionitem").is(":last-child")) {
                    $(".faq-home .accordion").mCustomScrollbar("scrollTo", 100);
                }
            }, 350);
            // ----- end -----

        }
        e.preventDefault();
    });

    /*Lazy loader calling on newsfeeds and blog listing page*/
    // lazyloader();

    /*Equal Heights
     * ----------------------------*/
    equalHeights();
    equalHeightsForLnD();

    /*toggle tabs
     * -----------------------------------*/
    function tabsresponsive() {
        var $tabs = $('#horizontalTab');
        $tabs.responsiveTabs({
            startCollapsed: 'accordion',
            collapsible: 'accordion'
        });
        $('.r-tabs-state-default >.r-tabs-anchor').children('i').hide();
        $('.r-tabs-state-active >.r-tabs-anchor').children('i').show();
        $("ul.r-tabs-nav li.r-tabs-tab").click(function () {
            $('.r-tabs-state-default >.r-tabs-anchor').children('i').hide();
            $('.r-tabs-state-active >.r-tabs-anchor').children('i').show();
        });
    }

    tabsresponsive();

    /*customised dropdown
     * ------------------------------------*/
    $(document).on('click', '.customised-dropdown .dropdown-menu', function (e) {
        e.stopPropagation();
    });

    /*carousels
     * ------------------------------------*/
    $(".manual-carousel").owlCarousel({
        items: 4,
        navigation: true,
        navigationText: ["<", ">"],
        itemsTablet: [768, 3],
        itemsMobile: [479, 2],
        itemsCustom: false
    });
    $(".small-carousel").owlCarousel({
        items: 3,
        navigation: true,
        navigationText: ["<", ">"],
        itemsTablet: [768, 3],
        itemsMobile: [479, 2],
        itemsCustom: false
    });
    $(".automatic-carousel").owlCarousel({
        items: 3,
        /* navigation : true,*/
        itemsTablet: [768, 3],
        itemsMobile: [479, 1],
        itemsCustom: false,
        autoPlay: true,
        autoplayTimeout: 5000,
        autoplayHoverPause: false,
        responsiveRefreshRate: 200,
        //stopOnHover: true,
        dots: true
    });
    var owl = $('.automatic-carousel');
    owl.on('click', '.carousel-image-wrap', function () {
        owl.trigger('owl.play', 5000);
    });
    carouselequalHeights();

    /*form popover
     * -------------------------------------*/
    $(function () {
        $('[data-toggle="popover"]').popover()
    });

    /*carousel information close
     * -------------------------------------*/


    /*carousel close
     * --------------------*/
    var infoparent = [], infohidden;
    var item = window.localStorage.getItem('inforparent');
    if (item && item.length > 0) {
        infoparent = item.split(',');
    }

    $('.close').on('click', function () {
        $(this).parents('.item').css('display', 'none');
        infohidden = true;
        infoparent.push($(this).parents('.manual-carousel').attr('id'));
        window.localStorage.setItem('information', infohidden);
        window.localStorage.setItem('inforparent', infoparent);
    });

    /* check if the information is present in storage
     * ------------------------------------------------------------*/
    if (window.localStorage.getItem('information') && window.localStorage.getItem('inforparent')) {
        for (var i = 0; i < infoparent.length; i++) {
            $('#' + infoparent[i]).find('.item:first').css('display', 'none');
        }
    }

    /*form validation
     * -------------------------------------*/
    $('form').validator()
    rules: {
        city: {
            required: true
        }
        state: {
            required: true
        }
    }
//datepicker

    if($("#datepicker").length) {
        $("#datepicker").datepicker();
    }
    //add link for form
    $('.add').click(function () {
        $('.block:last').before(' <div class="block"><input type="text" class="form-control"/><span class="remove">Remove</span></div>');


    });

    $('body').on('click', '.remove', function () {
        $(this).parent('.block').remove();
    });

    $(".add-form").click(function () {
        $(".form:first").clone().appendTo(".accordion-body").after('<div class="block-form"><span class="remove-form">Remove</span></div>');
    });

    $('body').on('click', '.remove-form', function () {
        $(this).parent('.block-form').prev('.form').remove();
        $(this).parent('.block-form').remove();
    });

    /** Notification panel
     ------------------------------**/
    //hide on body click
    /*$('body').click(function(){
        $('.notification-info, .top-nav-detail').css('display','none');
    });*/

    //show tab function via data-id attribute
    $('.show-tab').click(function (event) {
        console.log($(this).attr("data-id"));
        showTab($(this).attr("data-id"));
        event.stopPropagation();
    })


    $('.level-info').hide();

//uncheck and check all for checkboxes
    /* $(".checkAll").change(function () {
     $("input:checkbox").prop('checked', $(this).prop("checked"));
     });*/

    // Following filter event listener is used at Online Course Dashboard and other places
    $('.filter-container :checkbox').bind('click', function () {

        var $chk = $(this), $li = $chk.closest('li'), $ul, $parent;
        if ($li.find('ul')) {
            $li.find(':checkbox').not(this).prop('checked', this.checked)
        }

        do {
            $ul = $li.parent();
            $parent = $ul.siblings('label').find(':checkbox');
            if ($chk.is(':checked')) {
                $parent.prop('checked', $ul.has(':checkbox:not(:checked)').length == 0)
            } else {
                $parent.prop('checked', false)
            }
            $chk = $parent;
            $li = $chk.closest('li');
        } while ($ul.is(':not(.filter-container)'));
    });


    $('.filter').on('click', '.filter-container :checkbox', function () {
        var $chk = $(this), $li = $chk.closest('li'), $ul, $parent;
        if ($li.has('ul')) {
            $li.find(':checkbox').not(this).prop('checked', this.checked)
        }

        do {
            $ul = $li.parent();
            $parent = $ul.siblings('label').find(':checkbox');
            if ($chk.is(':checked')) {
                $parent.prop('checked', $ul.has(':checkbox:not(:checked)').length == 0)
            } else {
                $parent.prop('checked', false)
            }
            $chk = $parent;
            $li = $chk.closest('li');
        } while ($ul.is(':not(.filter-container)'));
    });

    $(document).on('click touchend', function () {
        $('.info.popover').hide();
        $(".more-info").removeClass("active");
    });

    $(document).on('click touchend', '.more-info', function (event) {
        event.stopPropagation();
        var show = false;
        if ($(this).find('.info.popover').is(':hidden')) {
            show = true;
        }
        $('.info.popover').hide();
        $(".more-info").removeClass("active");

        if (show) {
            $(this).addClass("active");
            $(this).find('.info.popover').show();
        }
        return false;

    });

    $('.dynamicTabs a').click(function (e) {
        $(this).closest(".dropdown-menu").siblings(".dropdown-toggle").html($(this).text() + "&nbsp;<span class='caret'></span>");
        // $(".mobile-tab.active .dropdown-toggle").html($(this).text() + "<span class='caret'></span>");
        e.preventDefault();
        $(this).tab('show');
    });

    /*for home tabs to scroll on click*/
    $('.r-tabs-tab a[href^="#"]').on('click', function (event) {
        var target = $($(this).attr('href'));
        if (target.length) {
            event.preventDefault();
            $('html, body').animate({
                scrollTop: target.offset().top - 200
            }, 500);
        }
    });

    /*    if(!$('footer .iparys_inherited div').hasClass('footer')){
            $('.push').css('display','none');
        }*/

    /*$('.query-not-found').modal({
     backdrop: 'static',
     keyboard: true
     })*/
    $("a[href='/content/sih/en/israel-challenge.html?theme=digital_health'], a[href='/content/sih/en/israel-challenge.html?theme=agriculture'], a[href='/content/sih/en/israel-challenge.html?theme=water'], a[href='/content/sih/en/facebook-application.html']").click(
        function (e) {
            if (!store.getItem("published") && store.getItem("token")) {
                $('.under-moderation-modal').modal('show');
                e.preventDefault();
                e.stopPropagation();
            } else if (store.getItem("no-profile")) {
                $('.complete-profile-modal').modal('show');
                e.preventDefault();
                e.stopPropagation();
            }
        });
    setTimeout(function () {
        $("a[href='/content/sih/en/israel-challenge.html?theme=digital_health'], a[href='/content/sih/en/israel-challenge.html?theme=agriculture'], a[href='/content/sih/en/israel-challenge.html?theme=water']").css('display', 'block')
    }, 2000);

    if ($(window).width() < 768) {
        $('.profile-tabs a[href^="#"]').on('click', function (event) {
            readOrLess();
            var target = $(this.getAttribute('href'));
            if (target.length) {
                event.preventDefault();
                $('html, body').stop().animate({
                    scrollTop: target.offset().top - 30
                }, 1000);
            }
        });
    }
    $(".complete-profile-modal .btn-redirect").click(function () {
        window.location.href = $('.notification-container').attr('create-profile');
    });
    $(".complete-profile-modal").on('hidden.bs.modal', function () {
        window.location.href = $('.notification-container').attr('create-profile');
    });

    function checkRecognitionRequiredField(attrValue, inputSel) {
        var requiredField = $(inputSel).closest(".row").find("sup.required");
        if (requiredField && requiredField.length > 0 && (!attrValue || attrValue === "")) {
            isValidated = false;
            $(inputSel).closest(".form-group").addClass("has-error").find("span.help-block").first().html("This field can't be left Blank.");
        } else {
            $(inputSel).closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
        }
    }

    $(".validateRecognitionCertificate").click(function () {
        var formData = new FormData();
        /*if (!$('input[name=regno]').val()) {
            $('input[name=regno]').closest(".form-group").addClass("has-error").find("span.help-block").first().html("This field can't be left Blank.");
        } else {
            $('input[name=regno]').closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
            formData.append("regno", $('input[name=regno]').val());
        }
        if (!$('input[name=entname]').val()) {
            $('input[name=entname]').closest(".form-group").addClass("has-error").find("span.help-block").first().html("This field can't be left Blank.");
        } else {
            $('input[name=entname]').closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
            formData.append("entname", $('input[name=entname]').val());
        }*/

        if (!$('input[name=regno]').val() && !$('input[name=entname]').val()) {
            $('input[name=regno]').closest(".form-group").addClass("has-error").find("span.help-block").first().html("This field can't be left Blank.");
            $('input[name=entname]').closest(".form-group").addClass("has-error").find("span.help-block").first().html("This field can't be left Blank.");
        } else {
            $('input[name=regno]').closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
            $('input[name=entname]').closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
            if ($('input[name=regno]').val()) {
                formData.append("regno", $('input[name=regno]').val());
            }
            if ($('input[name=entname]').val()) {
                formData.append("entname", $('input[name=entname]').val());
            }
        }

        if (!$("input[name='certificate']:checked").length > 0) {
            $("input[name='certificate']").closest(".form-group").addClass("has-error").find("span.help-block").first().html("This field can't be left Blank.");
            return;
        } else {
            $('input[name=certificate]').closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
            formData.append("certificate", $("input[name='certificate']:checked").val());

        }
        if ($('input[name=regno]').val() || $('input[name=entname]').val()) {
            fetchCertificate(formData)
        }
    });


    function fetchCertificate(data) {
        var formData = new FormData();
        if (data instanceof FormData) {
            formData.append("regno", data.get("regno"));
            if (data.get("entname")) {
                formData.append("entname", data.get("entname"));
            }
        } else {
            if (data && $.isArray(data)) {
                var randumReg = data[0].randum_reg;
                if (randumReg) {
                    formData.append("regno", randumReg);
                } else {
                    $(".validateStartupRecognition").html(" Your application is Pending/Rejected so you are not able to download certificate").removeClass('display-n');
                    $('.viewRecognitionCertificate').addClass('display-n');
                    return;
                }
            } else {
                $(".validateStartupRecognition").html("Invalid Entity name").removeClass('display-n');
                $('.viewRecognitionCertificate').addClass('display-n');
                return;
            }
        }
        formData.append("certificate", $("input[name='certificate']:checked").val());
        var newFormData = {};
        if (($('input[name=regno]').val() || $('input[name=entname]').val()) && $("input[name='certificate']:checked").length > 0) {
            $('#modal-loader').modal('show');
            newFormData["certificateType"] = $("input[name='certificate']:checked").val();
            newFormData["dippNumber"] = $('input[name=regno]').val();
            newFormData["entityName"] = $('input[name=entname]').val();
            $.ajax({
                type: "POST",
                dataType: "json",
                data: JSON.stringify(newFormData),
                contentType: "application/json",
                url: SIH.getEndPoint($('.validateRecognitionCertificate').data('form-action')),
                success: function (data) {
                    if (data.status) {
                        $('#modal-loader').modal('hide');
                        $('.viewRecognitionCertificate').attr('pdfLink', $('.notification-container').attr('admin-service-base-url')+data.data);
                        $('.viewRecognitionCertificate').removeClass('display-n');
                        $(".validateStartupRecognition").addClass('display-n');
                    } else {
                        $('#modal-loader').modal('hide');
                        $(".validateStartupRecognition").html(data.message).removeClass('display-n');
                        $('.viewRecognitionCertificate').addClass('display-n');
                    }
                },
                error: function () {
                    $('#modal-loader').modal('hide');
                    $(".validateStartupRecognition").removeClass('display-n');
                }
            });
        }
    }

    $('.viewRecognitionCertificate').click(function () {
        window.open($('.viewRecognitionCertificate').attr('pdfLink'), "_blank")
    });

    $('.rbl-applyButton1,.rbl-applyButton2').click(function () {
        ga('send', 'event', 'Website-InFinIT20', 'ApplyButton', 'InFinIT20-Apply-button', 1);
    })

    $('.accordion-section-title').bind('click', function () {
        var self = this;
        setTimeout(function () {
            theOffset = $(self).offset();
            $('#mCSB_1_container').mCustomScrollbar({
                axis: 'y',
                setTop: theOffset.top - 100
            });
        }, 310);
    });
    // dialog-ling code
    /*
    * Added a a target of '.note-link .note-btn' to the click listener. This allows for the validation
    * to work while editing the created link in the LinkDialog
        */
    $(document).on('click', '.note-insert .note-btn, .note-link .note-btn', function () {
        $('.modal.link-dialog').before('<div class="link-dialog-overlay"></div>');
        /*
        * Added the below content for validating empty spaces and URL in LinkDialog.
        */
        var linkText = document.querySelector('.note-link-text');
        var linkUrl = document.querySelector('.note-link-url');
        var $linkBtn = $('.note-link-btn');
        var regex = /(https?:\/\/[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|https?:\/\/[a-zA-Z0-9]+\.[^\s]{2,})/;

        $('input.note-link-text').on('input paste propertychange', function (e) {
            linkText.value = linkText.value.trimLeft();
            setTimeout(()=>{
                if(!regex.test(linkUrl.value) && linkUrl.value != ""){
                    $linkBtn.addClass('disabled');
                }
            }, 0);
        });
        $('input.note-link-url').on('input paste propertychange', function (e) {
            linkUrl.value = linkUrl.value.trim();
            setTimeout(()=>{
                if(!regex.test(linkUrl.value) && linkUrl.value != ""){
                    $linkBtn.addClass('disabled');
                }
            }, 0);
        });
    });
    $(document).on('click', '.link-dialog .close, .link-dialog .note-link-btn, .link-dialog', function (e) {
        $('.link-dialog-overlay').remove();
    });
    $(document).on('click', ".modal-dialog", function(e){
      e.stopPropagation();

    })
    $(document).on('click', '.discussion-detail .note-insert .note-btn', function () {
      setTimeout(function(){
        $('.modal-backdrop.in').remove();
      },500);
    });

    $(document).on('click', '.persona-detail-form-wrap .note-insert .note-btn', function () {
        $('.modal-backdrop.in').remove();
    });

    $(".webinar-main-page .center-blue-tabs .dynamicTabs li").click(function(){
        setTimeout(function () {
            $('.webinar-card .img-wrap.img-replacement h2').equalHeight({
                groupByTop: false,
                resizeTimeout: 20,
                updateOnDOMReady: true,
                updateOnDOMLoad: true
            });
         }, 200);
        $('.webinar-card .img-wrap.img-replacement h2').equalHeight({
            groupByTop: false,
            resizeTimeout: 20,
            updateOnDOMReady: true,
            updateOnDOMLoad: true
        });
    })
    $('.webinar-card .img-wrap.img-replacement h2').equalHeight({
        groupByTop: false,
        resizeTimeout: 20,
        updateOnDOMReady: true,
        updateOnDOMLoad: true
    });
});

function getCookie(cname) {
    var name = cname + "=";
    var ca = document.cookie.split(';');
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) == ' ') {
            c = c.substring(1);
        }
        if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
        }
    }
    return "";
}

function getDippStatesNo(stateName, apiLink) {
    var state = {};
    state["state"] = stateName;
    $.ajax({
        type: "POST",
        data: state,
        url: apiLink
    }).done(function (data) {
        var result = JSON.parse(data);
        if (result._resultflag === "1") {
            $('.dipp-state-no').text(result.homepageCount.startuptilldate.totalapprovedapp + "+");
        }
    }).fail(function () {
        console.log("error");
    });
};
$(document).on("click", ".linked-block", function (e) {
    e.stopPropagation();
    e.preventDefault();
    var linkedBlock = $(e.target).parent().data('id');
    if (linkedBlock) {
        var scrollPos = '.' + linkedBlock;
        $('html, body').animate({
            scrollTop: $(scrollPos).offset().top - 100
        }, 500);
    }
});

$(document).on("click", ".linked-block-row", function (e) {
    e.stopPropagation();
    e.preventDefault();
    var linkedBlock = $(e.target).parent().data('id');
    if (linkedBlock) {
        var $scrollPos = $('.' + linkedBlock).find(".common-heading");
        $('html, body').animate({
            scrollTop: $scrollPos.offset().top - 100
        }, 500);
    }
});

function saveStateRecognized() {
    $.ajax({
        type: "GET",
        url: SIH.getEndPoint("/api/auth/user/recognition/save"),
        data: {'stateRecognized': true},
        headers: {"X-Auth-Token": store.getItem("token")},
        success: function () {
            console.log('State recognition option has been saved successfully');
        }, error: function (data) {
            store.removeItem("stateRecognized");
            console.error("Error in saving state recognition option");
        }
    });
}

$.removeCookie("authToken", {'expires': -1, path: '/'});

$('.shell-btn, .clean-air-btn').on('click', function () {
    window.open($(this).data('form-action'), "_blank")
});

function displayContentListing(param, enableFilterOption, uriPath, noResultMessage, viewType, numberOfBlogListing, classes, currentTime, reload) {
    $('#modal-loader').modal('show');
    var formData = null;
    var templateID = "#learn-and-develop-grid-template";
    var blockDiv = ".learning-and-development-listing #" + currentTime + " .content";

    if (param) {
        formData = param;
        if (viewType == 'true') {
            templateID = "#learn-and-develop-grid-template-popup";
            blockDiv = ".bootbox-body";
        }
    } else if (enableFilterOption) {
        var $filterBlock = $("div.tag-filter-block");
        if ($filterBlock) {
            var $filterForm = $filterBlock.find("form");
            formData = ($filterForm && $filterForm.length > 0) ? $filterForm.serialize() : null;
        }
    }

    if (viewType == 'list') {
        templateID = $("#learn-and-develop-list-template");
    }
    var source = $(templateID).html();
    var template = Handlebars.compile(source);
    var errorMsg = "<div class=\"page404 clearfix\">\n" +
        "        \t<div class=\"page404-image\">\n" +
        "            \t<img src=\"/etc/designs/invest-india/investindialibs/images/no-result.png\">\n" +
        "        \t</div>\n" +
        "        \t<div class=\"page404-message\">\n" +
        "            \t<h2>" + noResultMessage || "Sorry!! we are unable to find any result matching your search criteria." + "</h2>\n" +
        "        \t</div>\n" +
        "    \t</div>";
    $.ajax({
        type: "GET",
        data: formData,
        url: uriPath,
        dataType: "json",
        success: function (data) {
            $(".result-count .stats").text(data.length || 0);

            if (data && $.isArray(data) && data.length > 0) {
                var l = numberOfBlogListing || 6;
                if (data.length > l) {

                    $("#loadMore").show();

                    $('#loadmoreicon').show();
                    $('#nomore').hide();
                } else {
                    $("#loadMore").hide();
                }

                // if (numberOfBlogListing) {
                //     $(blockDiv).html(template(data.slice(0, numberOfBlogListing)));
                // }
                // else {
                //     $(blockDiv).html(template(data));
                // }

                $(blockDiv).html(template(data));

                $(".learning-cols").addClass(classes);
                if(data.length ===1){

                    $('.learningAndDevelopment').css({
                        "margin-right":"auto",
                        "margin-left":"auto",
                        //"float":"none"
                    });
                }

                lazyloader(numberOfBlogListing, currentTime, reload, uriPath);
            } else {
                $(blockDiv).html(errorMsg);
                $("#loadMore").hide();
            }
            //setMinHeight();
            $("a[href='/content/sih/en/international/India_Japan.html']").attr("href","https://www.startupindia.gov.in/japan");
            $('#modal-loader').modal('hide');
        }, error: function (data) {
            $(blockDiv).html(errorMsg);
            $("#loadMore").hide();
            $('#modal-loader').modal('hide');
        }
    });
}


function lazyloader_My(maxValue, currentTime, reload, uriPath) {
    $('.govt-scheme.listing .learningAndDevelopment .card').css('height','230px');
  
    $('.learning-and-development-listing .card,.newsfeed, .fixed-table-body.card-table, .block-container .blog-card').addClass('display-n');
    var size_li = $('.learning-and-development-listing .card,.newsfeed, .fixed-table-body.card-table, .block-container .blog-card').size();
    var x = 6;
    var y = 6;
    if (maxValue) x = maxValue, y = maxValue;
    var count = 0;
    var lndListing = '.learning-and-development-listing .card:lt(' + x + ')';
    $('.newsfeed:lt(' + x + '),.fixed-table-body.card-table:lt(' + x + '),.block-container .blog-card:lt(' + x + ')').removeClass('display-n');
    $(lndListing).removeClass('display-n');
    if (reload) {
        sessionStorage.removeItem(uriPath);
    }
    if (size_li > parseInt(x)) {
        $('#loadMore').css('display', 'block');
        if (sessionStorage.getItem(uriPath)) {
            //count = window.location.hash.split('#')[1];
            count = sessionStorage.getItem(uriPath);
            var lastIndex = (y * (parseInt(count) + 1));
            $('.learning-and-development-listing .card:lt(' + lastIndex + '),.newsfeed:lt(' + lastIndex + '),.fixed-table-body.card-table:lt(' + lastIndex + '),.block-container .blog-card:lt(' + lastIndex + ')').removeClass('display-n');
            if (lastIndex >= size_li) {
                $('#loadMore').css('display', 'none');
            }
        }
    }
}
$('a.search_keyword button').on('click',function(){
    $('#modal-loader').modal('show');
    var textdata=$('#search-component').val();
    var currentTime = "18316648043633627"
    var blockDiv = ".learning-and-development-listing .content";   // component name
    var templateID = "#learn-and-develop-grid-template";
    var source = $(templateID).html();
    var template = Handlebars.compile(source);
    var numberOfBlogListing=6;
    // /////////////////////////////
    var errorMsg = "<div class=\"page404 clearfix\">\n" +
        "        \t<div class=\"page404-image\">\n" +
        "            \t<img src=\"/etc/designs/invest-india/investindialibs/images/no-result.png\">\n" +
        "        \t</div>\n" +
        "        \t<div class=\"page404-message\">\n" +
        "            \t<h2>" + "Sorry!! we are unable to find any result matching your search criteria." + "</h2>\n" +
        "        \t</div>\n" +
        "    \t</div>";
    // //////////////////////////////
       $.ajax({
        type: "GET",
        data: {},
        url: '/content/sih/en/government-schemes/jcr:content/col-1/learning_and_develop.list.json',
        dataType: "json",
        success: function (data) {

            if ($('div.form-group.clearfix button').length > 0) {
                $('div.form-group.clearfix button').click();
            }

            $('#modal-loader').modal('hide');
            var NewList=[];
            $.each(data,function(i,v)
             {
                if((v.title!=undefined && v.title.toLowerCase().indexOf(textdata.toLowerCase())>=0) || (v.description!=undefined && v.description.toLowerCase().indexOf(textdata.toLowerCase())>=0))
                {
                    NewList.push(v);
                }
            });
             var l = numberOfBlogListing || 6;
             if (NewList.length > l) {
                    $("#loadMore").show();
                    $('#loadmoreicon').show();
                    $('#nomore').hide();
                } else {
                    $("#loadMore").hide();
                }
             $(".result-count .stats").text(NewList.length || 0);
            ////////////////////////////
            if (NewList.length > 0) {
                $(blockDiv).html(template(NewList));
                $(".learning-cols").addClass('col-sm-6 col-md-4');
                 if(NewList.length ===1){
                       $('.learningAndDevelopment').css({
                           "margin-right":"auto",
                           "margin-left":"auto",
                           //"float":"none"
                       });
                   }
               lazyloader_My(numberOfBlogListing, currentTime, true, '/content/sih/en/government-schemes/jcr:content/col-1/learning_and_develop.list.json');
            } else {
                $(blockDiv).html(errorMsg);
                $("#loadMore").hide();
            }
            ////////////////////////////
            //  $(blockDiv).html(template(NewList));
            //  $(".learning-cols").addClass('col-sm-6 col-md-4');
            //   if(NewList.length ===1){
            //         $('.learningAndDevelopment').css({
            //             "margin-right":"auto",
            //             "margin-left":"auto",
            //             //"float":"none"
            //         });
            //     }
            // lazyloader_My(numberOfBlogListing, currentTime, true, '/content/sih/en/government-schemes/jcr:content/col-1/learning_and_develop.list.json');
        }
     });
     return false;
})

$('.compendium #state').on("change", function (event) {
    var stateSelected = $('.compendium #state option:checked').val();
    var allStatesList = $('.compendiumFilter');
    $(allStatesList).each(function (index, element) {
        var s1 = $('.stateId', element).val();
        if (stateSelected === s1 || s1 === "All States") {
            $(element).show();
        } else if (!stateSelected) {
            $(element).show();
        } else {
            $(element).hide();
        }
    });
    if ($(".compendiumFilter:visible").length) {
        $(".noData").addClass("display-n")
    } else {
        $(".noData").removeClass("display-n")
    }
    $(".compendium").not('.compendium-states').each(function (index, element) {
        if ($(".compendiumFilter:visible", this).length) {
            $(".text", this).removeClass("display-n")
        } else {
            $(".text", this).addClass("display-n")
        }
    })
});

function fetchTableData(tbl_name, tbl_condition_field, callBack, retrievedData) {
    var formData = {};
    formData["tbl_name"] = tbl_name;
    if (tbl_condition_field) {
        formData["tbl_condition_field"] = tbl_condition_field;
    }
    $.ajax({
        type: "POST",
        dataType: "json",
        data: formData,
        url: $("#fetchApiUrl").val() || "https://recognition.startupindia.gov.in/webapi/webservice.php?rquest=retriveData",
        success: function (data) {
            if (data.message) {
                retrievedData ? callBack(data.message, retrievedData) : callBack(data.message);
            }
        },
        error: function () {
            console.log("error while fetching data from server");
        }
    });
}

function checkFileUploadReturn(selectedFormats, fileToValidate, size, isValidated) {
    var validated = isValidated;
    var message = "";
    if ($(fileToValidate).val() !== "") {
        if (fileToValidate.files[0].size > size) {
            message = "File Should not be greater then " + Math.floor(size / 1024000) + " MB.";
        }
        if (jQuery.inArray(fileToValidate.files[0].type, selectedFormats) === -1) {
            var fileTypes = [];
            $.each(selectedFormats, function (i, val) {
                if(val.split("/")[1] === "vnd.ms-powerpoint"){
                    fileTypes.push(" " + "ppt");
                } else if(val.split("/")[1] === "vnd.openxmlformats-officedocument.presentationml.presentation"){
                    fileTypes.push(" " + "pptx");
                } else {
                    fileTypes.push(" " + val.split("/")[1]);
                }
            });
            message = message + " Please upload" + fileTypes.toString() + " file formats.";
        }
        if (message !== "") {
            validated = false;
            $(fileToValidate).siblings(".help-block").html(message).parents(".form-group").addClass("has-error");
            $(fileToValidate).val("");
            $(fileToValidate).siblings(".fileName").val("");
            $(fileToValidate).siblings(".fileDisplayName").val("");
            $(fileToValidate).siblings("a.presentationLink").addClass("display-n");
        } else {
            $(fileToValidate).siblings("a").html("").addClass("display-n").attr("href", "");
            $(fileToValidate).siblings(".help-block").html("");
            $(fileToValidate).parents(".form-group").removeClass("has-error");
        }
    }
    return validated;
}

function validateRegexFields(regexFields, isValidated) {
    var validated = isValidated;
    $.each(regexFields, function (index, item) {
        var element = $(item);
        var re = new RegExp(element.attr("regex"));
        if ((!element.hasClass('disabled-field') && !element.parents('.disabled-field').length) && element.val() && !re.test(element.val())) {
            validated = false;
            element.closest(".form-group").addClass("has-error");
            element.siblings(".regex-msg").show();
        } else {
            if (!(element.closest(".form-group").has("sup.required") && !element.val())) {
                showErrorState(element, false);
            }
            element.siblings(".regex-msg").hide();
        }
    });
    return validated;
}

function validateFileField(requiredFiles, removeError, isValidated) {
    var validated = isValidated;
    if (removeError) {
        $.each(requiredFiles, function (index, item) {
            var element = $(this).closest('.form-group').find('input[type=file]');
            $(element).closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
        });
    } else {
        if (requiredFiles) {
            $.each(requiredFiles, function (index, item) {
                var element = $(this).closest('.form-group').find('input[type=file]:not(.validate-ignore)');
                if (element && element.length) {
                    var fileExist = $(element)[0].files[0];
                    var fileAlreadyExist = $(element).siblings('a').attr('href');
                    console.log(fileAlreadyExist);
                    if (fileExist || fileAlreadyExist) {
                        $(element).closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
                    } else {
                        validated = false;
                        $(element).closest(".form-group").addClass("has-error").find("span.help-block").first().html("This field cannot be left Blank.");
                    }
                }
            });
        }
    }
    return validated;
}

$(".thankyou-modal").on('hidden.bs.modal', function () {
    var loc = window.location.href;
    if(loc.indexOf("applicationId=5c6b6fd8e4b0ba900e10556b") > 0){
        return;
    }
    if(loc.indexOf("applicationId=5c6b64f5e4b0ba900e105542") > 0){
        return;
    }
    if($(".thankyou-modal").hasClass("no-reload")){
        return;
    }
    if ($(".thankyou-modal").data("edit-course-redirect")) {
        window.location.href = $(".thankyou-modal").data("edit-course-redirect");
    }
    else if (location.href.indexOf("add-course") > 0) {
        window.location.href = location.href; // Form data clearing for Firefox;
    } else if (location.href.indexOf("webinar") > 0) {
        window.location.href = $('.webinar-main-page').data("path");
    } else
        window.location.reload();
});

$(function () {

    $(".header-menu .dropdown li").on('mouseenter mouseleave', function (e) {
        if ($('ul', this).length) {
            var elm = $('ul', this);
            var off = elm.offset();
            var l = off.left;
            var w = elm.width();
            var docH = $(".container").height();
            var docW = $(".container").width();

            var isEntirelyVisible = (l + w <= docW);

            if (!isEntirelyVisible && ($(window).width() <= 768)) {
                $('.dropdown-content.sub-submenu').addClass('edge');
            } else {
                $('.dropdown-content.sub-submenu').removeClass('edge');
            }
        }
    });

    $('.modal').on('hidden.bs.modal', function () {
        $('html').css('overflow', 'auto');
    });
    $('.modal').on('show.bs.modal', function () {
        $('html').css('overflow', 'hidden');
    });
});

var suggestionBoxSubmission = function (formSelector, apiPath) {
    var data = JSON.stringify($("." + formSelector).serializeObject());
    $.ajax({
        type: "POST",
        url: SIH.getEndPoint("/api/noauth/email/" + apiPath),
        contentType: "application/json",
        data: data
    }).done(function () {
        var $thankyouModal = $(".suggestion-thank-modal");
        $thankyouModal.find('.modal-body p').html($("form." + formSelector).data('thankContent'));
        $thankyouModal.modal();
        document.forms[formSelector].reset();
    }).fail(function () {
        $('.error-modal .modal-body p').html($("form." + formSelector).attr('errorMsg'));
        $('.error-modal').modal();
    });
};


var setAuthTokenHeader = function (xhr) {
    var token = store.getItem('token');
    if (token) {
        xhr.setRequestHeader('X-Auth-Token', token);
        xhr.setRequestHeader('Content-Type', 'application/json');
    } else {
        xhr.setRequestHeader('Content-Type', 'application/json');
    }
}
$(window).on('load resize', function () {
    winWidth = $(window).width();
    conWidth = $('.container.stats-n-video-section').outerWidth();
    marginR = (winWidth - conWidth) / 2;
    if ($(window).width() > 991) {
        $('.stats-n-video-section .hero-wrapper.home').css('margin-right', '-' + marginR);
        $('.stats-n-video-section .hero-wrapper.home iframe').attr('height', 470);
    }
  if($(window).width() < 1025){
      var twitterWrapWidth = $('.twitter-stack').width();
      $('#twitter-widget-0').css('width',twitterWrapWidth);
  }
  if($(window).width() < 768){
    // twitter section

    // home page slider
    var homeBannerWidth = $('.home-banner.home').width();
    $('.home-banner.home .slick-list.draggable, .home-banner.home .slick-list.draggable .slick-track, .home-banner.home .slick-list.draggable .slick-slide').css('width',homeBannerWidth);
    // $('.home-banner.home .slick-list.draggable .slick-track').css('width',homeBannerWidth);
    var ytIframeWidth = $('.home-banner.home .vid-tag .player-container').height();
    $('.home-banner.home .slick-list.draggable').css('height',ytIframeWidth);
  }
});
(function($){

  $('.table-striped').stackedRows();
  $('.forumFilterContainer').on('select2:open resize', function(e){
    e.stopPropagation();
    e.preventDefault();
    if($(window).width() < 501 && $('.forumFilterContainer').length){
      $("body").addClass("mobile-drop");
      store.setItem("select2",true);
      if(!$(".select2-dropdown .select2-search i.close-drop").length){
        $(".select2-dropdown .select2-search").append('<i class="fa fa-times-circle close-drop" aria-hidden="true"></i>');
      }
    }
    else{
      $("body").removeClass("mobile-drop");
      $(".select2-dropdown .select2-search i.close-drop").remove();
    }
    // $('.mobile-drop .select2-container--default .select2-results > ul.select2-results__options').css("max-height","calc(100% - 60px)");
  });

  $('.forumFilterContainer').on('select2:selecting', function(e){
    if(store.getItem("select2") === true){
      e.stopPropagation();
      e.preventDefault();
      store.removeItem("select2");
    }
    // $('.mobile-drop .select2-container--default .select2-results > ul.select2-results__options').css("max-height","calc(100% - 60px)");
  });

  $('.forumFilterContainer').on('select2:close', function(e){
  store.removeItem("select2");
    // $('.mobile-drop .select2-container--default .select2-results > ul.select2-results__options').css("max-height","calc(100% - 60px)");
  });
  $(document).on("click", ".select2-dropdown .select2-search i.close-drop", function(){
    var targetSelect = $(this).closest('span').siblings('span').find('ul').attr('id');
    var tartgetId = targetSelect.substring(targetSelect.indexOf("-")+1, targetSelect.lastIndexOf("-"));
    tartgetIdNew = `#${tartgetId}`;
    $(".select2-dropdown .select2-search i.close-drop").remove();
    $(tartgetIdNew).select2('close');
    $("body").removeClass("mobile-drop");
  })
})(jQuery);

function getStateFacts (stateName, api, $target) {
    if (stateName) {
        api = SIH.getEndPoint(api);
        $.ajax({
            url: api,
            type: "GET",
            success: function (response) {
                if (!response.data){
                    response = JSON.parse(response);
                }
                var stateObj = response.data.find(element => element.state === stateName);
                if (api.indexOf("keySector") > 0) {
                    if (stateObj && stateObj.sector)
                        $target.html(stateObj.sector);
                } else {
                    if (stateObj && stateObj.totalCount)
                        $target.html(stateObj.totalCount);
                }
            }
        })
    }
}
var recognition = function () {
    var cin = "";
    var reg_id = "";
    var lastSavedSection = "";
    var formData = new FormData();
    var isValidated = true;
    var validationMsg = "";
    var tableContent;
    var alLeastInfoRequired = true;
    var empWelInfoRequired = true;
    var isFinalDataValid = true;
    var selectedValue = "";
    var $funded_or_bootstrapped = $("input[name='funded_or_bootstrapped']");
    var $awards_or_recognition = $("input[name='awards_or_recognition']");
    var $funded_or_bootstrapped_file = $("input[name='upload_funded_or_bootstrapped_file']");
    var $sector_name = $("select[name='section']");
    var $nature_entity = $("select[name='entity_type']");
    var $incorp_number = $("input[name='incorp_number']");
    var $entity_name = $("input[name='entity_name']");
    var $incorp_date = $("input[name='incorp_date']");
    var $industry_id = $("select[name='industry_id']");
    var $upload_award_recognization_entity = $("input[name='upload_award_recognization_entity']");
    var $submitRecognitionForm = $("input[name='submitRecognitionForm']");
    var docOptions = ["Website link", "Videos", "Pitch Deck", "Patents", "Others"];
    var docUploadRowCount = 0;
    var isDraftedApplication = false;
    const optionalCertifyFlags = ["isConversion", "isNameChange", "isCinChange"];
    const optionalCertifyDocs = ["conversionDocs", "nameChangeDocs", "cinChangeDocs"];

    function addMoreUploads(index) {
        var selectedDoctype = $("#moreupload .upload-row select > option:selected").map(function (index,element){
            if(element.value != "others"){
                return element.value
            }
        }).get();
        if(selectedDoctype.length > 0) {
            docOptions = docOptions.filter(function (item) {
                return !selectedDoctype.includes(item.toLowerCase().replace(/ /g,"_"));
            });
        }/*else{
            docOptions = docOptions.map(function(item){
                return item.toLowerCase().replace(/ /g,"_");
            });
        }*/
        var $uploadRow = $("#moreupload .upload-row");
        //$(".demo-linkOrDocTemplate").find("a.removeFile").parent().addClass("display-n");

        var source = $("#demo-linkOrDocTemplate").html();
        var template = Handlebars.compile(source);

        //var linknDocTemplate = $(".demo-linkOrDocTemplate").first().html();
        docUploadRowCount = docUploadRowCount + 1;
        $uploadRow.append(template({"rowCount":docUploadRowCount, "docOptions": docOptions}));

        $("div[id^=docRow] .removeFile").off("click").on("click", function(){
            var recoveredDocOption = toTitleCase($("#docRow"+$(this).data("click")+" select").val());
            if(recoveredDocOption) {
                docOptions.push(recoveredDocOption);
            }
            //Array.from(new Set(docOptions));
            docOptions = docOptions.filter(function(elem, index, self) {
                return index === self.indexOf(elem);
            })
            $("#docRow"+$(this).data("click")).remove();
        });
        /*$.each($uploadRow.find(".form-group"), function (index) {
            $(this).find("select").attr("name", "selfcertification[" + (index + 1) + "]");
            $(this).find(".add_doc_desc input[type='text']").attr("name", "docAsText[" + (index + 1) + "]");
            $(this).find(".add_doc_file input[type='file']").attr("name", "docAsFile[" + (index + 1) + "]");
            $(this).find(".add_doc_file input[type='text']").attr("name", "docAsFileName[" + (index + 1) + "]");
        });*/
    }

    function showHideOptions($this) {
        var addDoc = $($this).val();
        var index = $($this).attr("name").split("[")[1].split("]")[0];
        var docArea = $($this).parent().next().find(".doc_area");
        $(docArea).parent().removeClass("display-n");
        //$(docArea).parents(".form-group").first().find(".removeFile").parent().removeClass("display-n");
        if ($.inArray(addDoc, ["website_link", "videos"]) > -1) {
            var source = $("#demo-linkTemplate").html();
            var template = Handlebars.compile(source);
            $(docArea).html(template({"rowCount":index}));
            //$(docArea).find(".add_doc_desc").removeClass("display-n").next().addClass("display-n");
        } /*else if (addDoc === "videos") {
            $(docArea).find(".add_doc_desc").removeClass("display-n").next().addClass("display-n");
        } else if (addDoc === "pitch_deck") {
            $(docArea).find(".add_doc_file").removeClass("display-n").prev().addClass("display-n");
        } else if (addDoc === "patents") {
            $(docArea).find(".add_doc_file").removeClass("display-n").prev().addClass("display-n");
        }*/ else if ($.inArray(addDoc, ["pitch_deck", "patents", "others"]) > -1) {
            var source = $("#demo-docTemplate").html();
            var template = Handlebars.compile(source);
            $(docArea).html(template({"rowCount":index}));
            // $(docArea).find(".add_doc_file").removeClass("display-n").prev().addClass("display-n");
        }
    }

    function toTitleCase(str) {
        str = str.replace("/_/g", " ");
        return str.replace(/(?:^|\s)\w/g, function(match) {
            return match.toUpperCase();
        });
    }

    function checkRequiredFields(attrValue, inputSel) {
        var checkValid = true;
        var requiredField = $(inputSel).closest(".row").find("sup.required");
        var re = new RegExp($(inputSel).attr("regex"));
        if (requiredField && requiredField.length > 0 && (!attrValue || attrValue === "")) {
            isValidated = false;
            checkValid = false;
            $(inputSel).closest(".form-group").addClass("has-error").find("span.help-block").first().html("This field can't be left Blank.");
        } else if($.inArray($(inputSel).attr("name"), ["emp_gen_note","problem_startup_solving",
                "startup_propose_to_solve_problem","uniqueness_of_your_solution","startup_generate_revenue"]) > -1
            && attrValue && !(attrValue.length >= 500 && attrValue.length <= 5000)){

            isValidated = false;
            checkValid = false;
            $(inputSel).closest(".form-group").first().addClass("has-error")
                .find("span.help-block").first()
                .html("This field must have characters between 500 to 5000");
        }else if (attrValue && !re.test(attrValue)) {
            isValidated = false;
            checkValid = false;
            if (!$(inputSel).closest(".form-group").find("span.help-block").hasClass("ipr-table-block")) {
                $(inputSel).closest(".form-group").find("span.help-block").first().html("");
                $(inputSel).closest(".form-group").addClass("has-error").find("span.regex-msg").show();
            }
        } else if (!$(inputSel).closest(".form-group").hasClass("record-error")) {
            if (!$(inputSel).closest(".form-group").find("span.help-block").hasClass("ipr-table-block")) {
                $(inputSel).closest(".form-group").removeClass("has-error").find("span.help-block, span.regex-msg").first().html("");
            }
        }
        return checkValid;
    }

    function checkAtLeastOneInfoRequired2() {
        var valid = true;
        var innovativeProductServiceType = $("input[name=innovative_product_service_type]:checked").val();
        var businessModelType = $("input[name=emp_gen_or_wel_create]:checked").val();
        if (innovativeProductServiceType === "2" && businessModelType === "2") {
            isValidated = false;
            valid = false;
            alLeastInfoRequired = false;
            bootbox.alert("<h3>Please select <strong style='font-weight: 800;'>Yes</strong> for any of the following </h3>" +
                "<ul>" +
                "<li>Is the startup creating an innovative product / service / process or improving an existing product / service / process</li>" +
                "<li>Is the startup creating a scalable business model with high potential of employment generation or wealth creation</li>" +
                "</ul>");
        } else {
            alLeastInfoRequired = true;
        }
        return valid;
    }

    function checkScalableBusinessModelRequired2() {
        var valid = true;
        var businessModelType = $("input[name=emp_gen_or_wel_create]:checked").val();
        if (businessModelType === "1" && $("input[name=emp_gen_or_wel_create_emp_welth]:checked").length === 0) {
            empWelInfoRequired = false;
            isValidated = false;
            valid = false;
        } else {
            empWelInfoRequired = true;
        }
        return valid;
    }

    function infoRequiredData2(accordianItem, fieldName, additionalInfo, workCategories) {
        var inputSelection = $(accordianItem).find("input[name='" + fieldName + "']:checked");
        var attrValue = $(inputSelection).val();
        if (fieldName == "dev_of_product_service") {
            if (attrValue == 1) additionalInfo["stage"] = "IDEATION";
            else if (attrValue == 2) additionalInfo["stage"] = "VALIDATION";
            else if (attrValue == 3) additionalInfo["stage"] = "EARLY_TRACTION";
            else if (attrValue == 4) additionalInfo["stage"] = "SCALING";
        }
        var work = {};
        if (fieldName == "product_type") {
            work["workNature"] = "PRODUCT";
            if (attrValue == 1) {
                work["innovative"] = true;
                work["improvement"] = false;
            } else if (attrValue == 2) {
                work["innovative"] = false;
                work["improvement"] = true;
            }
            workCategories.push(work);
        }
        if (fieldName == "service_type") {
            work["workNature"] = "SERVICE";
            if (attrValue == 1) {
                work["innovative"] = true;
                work["improvement"] = false;
            } else if (attrValue == 2) {
                work["innovative"] = false;
                work["improvement"] = true;
            }
            workCategories.push(work);
        }
        if (fieldName == "process_type") {
            work["workNature"] = "PROCESS";
            if (attrValue == 1) {
                work["innovative"] = true;
                work["improvement"] = false;
            } else if (attrValue == 2) {
                work["innovative"] = false;
                work["improvement"] = true;
            }
            workCategories.push(work);
        }
        return checkRequiredFields(attrValue, $(accordianItem).find("input[name='" + fieldName + "']"));
    }

    function checkEntityDetails($saveBtn, saveSection) {
        var startupEntity = {};
        var valid = [];
        var accordianItem = $saveBtn.closest(".accordion-section-content");
        var firstAccordionFields = $(accordianItem).find("input.form-control, select.form-control, textarea.form-control, input[name=subsidiary-certify]");
        $.each(firstAccordionFields, function (index, inputSel) {
            var key = $(inputSel).attr("name");
            if (typeof key !== "undefined") {
                var attrValue = $(inputSel).val();
                if ($(inputSel)) {
                    if (key == "entity_type") {
                        var startupNatureOfEntity = {};
                        startupNatureOfEntity["id"] = $(inputSel).children("option:selected").val();
                        startupEntity["startupNatureOfEntity"] = startupNatureOfEntity;
                    } else if (key == "industry_id") {
                        var startupIndustry = {};
                        startupIndustry["id"] = $(inputSel).children("option:selected").val();
                        startupEntity["startupIndustry"] = startupIndustry;
                    } else if (key == "section") {
                        var startupSection = {};
                        startupSection["id"] = $(inputSel).children("option:selected").val();
                        startupEntity["startupSection"] = startupSection;
                    } else if (key == "categories_id") {
                        var startupServices = [];
                        var catList = $(inputSel).children("option:selected");
                        $.each(catList, function (i, val) {
                            var id = {};
                            id["id"] = $(val).val();
                            startupServices.push(id);
                        });
                        startupEntity["startupServices"] = startupServices;
                    } else if (key == "incorp_number") {
                        formData["incorporationNumber"] = attrValue.trim();
                    } else if (key == "entity_name") {
                        startupEntity["name"] = attrValue;
                    } else if (key == "incorp_date") {
                        var date = new Date(attrValue.replace(/(\d{2})-(\d{2})-(\d{4})/, "$2/$1/$3"));
                        startupEntity["incorporationDate"] = date.getFullYear() + "-" + (("0" + (date.getMonth() + 1)).slice(-2)) + "-" + (("0" + date.getDate()).slice(-2));
                    } else if (key == "pan_number") {
                        startupEntity["panNumber"] = attrValue.trim();
                    } else if (key == "subsidiary-certify"){
                        if($(inputSel).prop("checked")){
                            valid.push(true);
                            $(inputSel).parent().siblings(".form-group.has-error").remove();
                        }else{
                            valid.push(false);
                            $(inputSel).parent().siblings(".form-group.has-error").remove();
                            $(inputSel).parent().after("<div class='form-group has-error'><span class='help-block'>Please accept this field.</span></div>")
                        }
                    }
                }
                if (key != "incorp_number") {
                    valid.push(checkRequiredFields(attrValue, inputSel));
                } else if (!attrValue || attrValue === "") {
                    isValidated = false;
                    valid.push(false);// = false;
                    $(inputSel).closest(".form-group").addClass("has-error").find("span.help-block").first().html("This field can't be left Blank.");
                }
                if (key === "categories_id") {
                    var catList = $(inputSel).siblings(".select2-container").find("ul.select2-selection__rendered li.select2-selection__choice");
                    if (catList.length <= 0) {
                        $(inputSel).closest(".form-group").addClass("has-error").find("span.help-block").first().html("This field can't be left Blank.");
                    } else {
                        $(inputSel).closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
                    }
                }
                if (key === "pan_number" && !(!attrValue || attrValue === "")) {
                    var re = new RegExp($(inputSel).attr("regex"));
                    if (attrValue && !re.test(attrValue)) {
                        isValidated = false;
                        valid.push(false); //= false;
                        $(inputSel).closest(".form-group").find("span.help-block").first().html("");
                        $(inputSel).closest(".form-group").addClass("has-error").find("span.regex-msg").show();
                    } else {
                        $(inputSel).closest(".form-group").removeClass("has-error").find("span.regex-msg").hide();
                    }
                    //data
                }
                if (key === "incorp_date" && !(!attrValue || attrValue === "")) {
                    var currentDate = new Date();
                    var diffYear = diff_years(new Date(attrValue), currentDate);
                    if ($(inputSel).val() && diffYear > 10) {
                        $(inputSel).closest(".form-group").addClass("has-error");
                        $(inputSel).parents(".accordion-section").find(".button").next().find(".has-error").html("");
                        isValidated = false;
                        valid.push(false); //= false;
                        validationMsg = "We regret to inform you that your startup does not match the eligibility criteria of incorporation date. Hence, the entity is not eligible for Startup recognition.";
                        $(inputSel).parents(".accordion-section").find(".button").next().find(".has-error").html(validationMsg);
                    } else {
                        $(inputSel).closest(".form-group").removeClass("has-error");
                    }
                    var dateSplit = attrValue.split("/");
                    var newDate = dateSplit[2] + "/" + dateSplit[0] + "/" + dateSplit[1];
                }
            }
        });
        valid.forEach(function (value) {
            if (!value) {
                valid = false;
            }
        });
        if (valid) {
            formData["startupEntity"] = startupEntity;
            if(saveSection) {
                var response = saveDpiitFormData(formData, "ENTITY", "DRAFT");
                if(!response.responseJSON.status){
                    showDocUploadError(response);
                }
                isFinalDataValid = response.responseJSON.status;
            }else{
                isFinalDataValid = true;
            }
        } else {
            isFinalDataValid = false;
        }
    }

    function diff_years(dt2, dt1) {
        var diff = (dt2.getTime() - dt1.getTime()) / 1000;
        diff /= (60 * 60 * 24);
        return Math.abs(Math.round(diff / 365.25));
    }

    function checkFullAddress($saveBtn, saveSection) {
        var addresses = {};
        var valid = [];
        var accordianItem = $saveBtn.closest(".accordion-section-content");
        var inputField = $(accordianItem).find("input.form-control, select.form-control, textarea.form-control");
        $.each(inputField, function (index, inputSel) {
            var key = $(inputSel).attr("name");
            valid.push(checkRequiredFields($(inputSel).val(), inputSel));
            if (typeof key != "undefined") {
                var attrValue = $(inputSel).val().trim();
                if (attrValue) {
                    if (key == "state_name") {
                        attrValue = $(inputSel).find("option:selected").text();
                    }
                }
                if (attrValue) {
                    if (key == "office_address") addresses["address1"] = attrValue.toString();
                    else if (key == "office_address1") addresses["address2"] = attrValue.toString();
                    else if (key == "office_address2") addresses["address3"] = attrValue.toString();
                    else if (key == "city_name") addresses["city"] = attrValue.toString();
                    else if (key == "district_id") {
                        addresses["districtId"] = $(inputSel).find("option:selected").val();
                        addresses["districtName"] = $(inputSel).find("option:selected").text();
                    }
                    else if (key == "pin_code") addresses["pinCode"] = attrValue.toString();
                    else if (key == "state_name") {
                        addresses["stateId"] = $(inputSel).find("option:selected").val();
                        addresses["stateName"] = $(inputSel).find("option:selected").text();
                    } else if (key == "subdistrict_id") {
                        addresses["subDistrictId"] = $(inputSel).find("option:selected").val();
                        addresses["subDistrictName"] = $(inputSel).find("option:selected").text();
                    }
                }

            }
        });
        valid.forEach(function (value) {
            if (!value) {
                valid = false;
            }
        });
        if (valid) {
            formData["address"] = addresses;
            if(saveSection) {
                var response = saveDpiitFormData(formData, "ADDRESS", "DRAFT");
                if(!response.responseJSON.status){
                    showDocUploadError(response);
                }
                isFinalDataValid = response.responseJSON.status;
            }else{
                isFinalDataValid = true;
            }
        } else {
            isFinalDataValid = false;
        }
    }

    function checkAuthorizedRepresentatives($saveBtn, saveSection) {
        var representative = {};
        var valid = [];
        var accordianItem = $saveBtn.closest(".accordion-section-content");
        var inputFields = $(accordianItem).find("input.form-control, select.form-control, textarea.form-control");
        $.each(inputFields, function (index, inputSel) {
            var key = $(inputSel).attr("name");
            if (typeof key != "undefined") {
                var attrValue = $(inputSel).val().trim();
                if (attrValue) {
                    if (key == "rep_name") representative["name"] = attrValue.toString();
                    else if (key == "desg_rep_name") representative["designation"] = attrValue.toString();
                    else if (key == "mobile_number") representative["mobile"] = attrValue.toString();
                    else if (key == "emailId") representative["email"] = attrValue.toString();
                }
                valid.push(checkRequiredFields(attrValue, inputSel));
            }
        });
        valid.forEach(function (value) {
            if (!value) {
                valid = false;
            }
        });
        if (valid) {
            formData["representative"] = representative;
            if(saveSection) {
                var response = saveDpiitFormData(formData, "REPRESENTATIVE", "DRAFT");
                if(!response.responseJSON.status){
                    showDocUploadError(response);
                }
                isFinalDataValid = response.responseJSON.status;
            }else{
                isFinalDataValid = true;
            }
        } else {
            isFinalDataValid = false;
        }
    }

    function checkDirectorInfo($saveBtn, saveSection) {
        var valid = [];
        var accordianItem = $saveBtn.closest(".accordion-section-content");
        var director;
        var directorList = [];
        var no_dir = $("select[name='no_dir']").val();
        var partnerTable = $("input[name='saveDirectorDetails']").parents(".accordionitem").find(".partnerTable tr");
        var partnerTableRow = partnerTable.slice(1, partnerTable.length);
        $.each(partnerTableRow, function (i, value) {
            var inputField = $(value).find("input.form-control, select.form-control, textarea.form-control");
            director = {};
            $.each(inputField, function (index, inputSel) {
                var key = $(inputSel).attr("name");
                if (typeof key != "undefined") {
                    var attrValue = $(inputSel).val().trim();
                    if (attrValue) {
                        if (key.includes("gender")) {
                            if (attrValue == 0) {
                                director["gender"] = 'MALE';
                            } else if (attrValue == 1) {
                                director["gender"] = 'FEMALE';
                            } else {
                                director["gender"] = 'OTHER';
                            }
                        } else if (key.includes("c_code")) {
                            director["mobilePrefix"] = attrValue.toString();
                        } else if (key.includes("mobile")) {
                            director["mobileNumber"] = attrValue.toString();
                        } else if (key.includes("directorCin")) {
                            if ($("select[name='entity_type']").val() === "5f48ce5f2a9bb065cdfa185d") {
                            } else {
                                var regex = new RegExp(/^[0-9]{8}$/);
                                if (regex.test(attrValue)){
                                    director[key.slice(0, key.indexOf("["))] = attrValue.toString();
                                    $(inputSel).closest("td").removeClass("has-error").find("span.help-block").first().html("");
                                } else {
                                    isValidated = false;
                                    valid.push(false);// = false;
                                    $(inputSel).closest("td").addClass("has-error").find("span.help-block").first().html("Please add the 8 digit DIN/DPIN number");
                                    return false;
                                }
                            }
                        } else {
                            director[key.slice(0, key.indexOf("["))] = attrValue.toString();
                        }
                        $(inputSel).closest("td").removeClass("has-error").find("span.help-block").first().html("");
                    } else {
                        if (!key.includes("directorCin") || $("select[name='entity_type']").val() !== "5f48ce5f2a9bb065cdfa185d") {
                            isValidated = false;
                            valid.push(false);// = false;
                            $(inputSel).closest("td").addClass("has-error").find("span.help-block").first().html("This Field can't be left Blank.");
                        }
                    }
                    if (key.indexOf("email") === 0) {
                        var emailReg = new RegExp($(inputSel).attr("regex"));
                        if (attrValue && !emailReg.test(attrValue)) {
                            isValidated = false;
                            valid.push(false); //= false;
                            $(inputSel).closest("td").addClass("has-error").find("span.regex-msg").show();
                        }
                    }
                }
            });
            director.directorCin = !director.directorCin ? "NA" : director.directorCin;
            directorList.push(director);
        });
        if (directorList.length === parseInt(no_dir)) {
            $(".saveDirectorErrorMessage").html("").removeClass("has-error scroll-error");
        } else {
            isValidated = false;
            valid.push(false);// = false;
            $(".saveDirectorErrorMessage").html("Please fill Details of all the Directors.").addClass("scroll-error");
        }
        valid.forEach(function (value) {
            if (!value) {
                valid = false;
            }
        });
        if (valid) {
            formData["directors"] = directorList;
            if(saveSection) {
                var response = saveDpiitFormData(formData, "DIRECTOR", "DRAFT");
                if(!response.responseJSON.status){
                    showDocUploadError(response);
                }
                isFinalDataValid = response.responseJSON.status;
            }else{
                isFinalDataValid = true;
            }
        } else {
            isFinalDataValid = false;
        }
    }

    function addDirectorTable(td, i) {
        $(td[0]).html(i);
        $(td[1]).find("input").attr("name", "directorCin[" + i + "]");
        $(td[2]).find("input").attr("name", "name[" + i + "]");
        $(td[3]).find("select").attr("name", "gender[" + i + "]");
        $(td[4]).find("input.countryCode").attr("name", "c_code[" + i + "]");
        $(td[4]).find("input.contactNo").attr("name", "mobile[" + i + "]");
        $(td[5]).find("textarea").attr("name", "address[" + i + "]");
        $(td[6]).find("input").attr("name", "email[" + i + "]");
        tableContent = $(".tableContent table tbody").html();
        $("#dataTable tbody").append(tableContent);
        $("#dataTable tbody").find("input, select, textarea").addClass("form-control");
    }

    function directorDataCallBack(directorsData) {
        var td = $(".tableContent").find("td");
        for (var i = 0; i < directorsData.length; i++) {
            addDirectorTable(td, i + 1);
            var director = directorsData[i];
            if (director.directorCin)
                $("input[name='directorCin[" + (i + 1) + "]']").val(director.directorCin);
            $("input[name='name[" + (i + 1) + "]']").val(director.name);
            if(director.gender) {
                $("select[name='gender[" + (i + 1) + "]'] option").filter(function () {
                    var gender = director.gender.toLowerCase();
                    return ($(this).text().toLowerCase() == gender); //To select Blue
                }).prop('selected', true);
            }
            //$("select[name='gender[" + (i + 1) + "]']").val(director.gender == "Male" ? "1" : director.gender == "Female" ? "2" : "3");
            //var contact = director.mobileNumber.replace(/\+91-/g, '');
            $("input[name='mobile[" + (i + 1) + "]']").val(director.mobileNumber);
            $("textarea[name='address[" + (i + 1) + "]']").val(unEscapeRegHtml(director.address));
            $("input[name='email[" + (i + 1) + "]']").val(director.email);
        }
    }

    function checkRequiredInfo($saveBtn, saveSection) {
        var valid = [];
        var additionalInfo = {}, businessModel = {}, fundingProof = {}, iprs = [], workCategories = [];
        var accordianItem = $saveBtn.closest(".accordion-section-content");
        var inputSelection = $(accordianItem).find("input[name='current_no_employee']");
        var attrValue = $(inputSelection).val().trim();
        valid.push(checkRequiredFields(attrValue, inputSelection));
        if (attrValue && $("input[name='current_no_employee']").val() < 1) {
            isValidated = false;
            valid.push(false);  //false;
            inputSelection.closest(".form-group").addClass("has-error").find("span.help-block").first().html("Please enter only number");
        } else if (attrValue) {
            additionalInfo["numberOfEmployees"] = attrValue.toString();
        }
        valid.push(checkAtLeastOneInfoRequired2());
        valid.push(checkScalableBusinessModelRequired2());
        valid.push(infoRequiredData2(accordianItem, "dev_of_product_service", additionalInfo));
        valid.push(infoRequiredData2(accordianItem, "ipr_type", additionalInfo));
        if ($("input[name='ipr_type']:checked").val() === "1") {
            additionalInfo["ipr"] = true;
            var iprPatent = {};
            if ($(".ipr-table input[type='radio']:checked").length === 0) {
                isValidated = false;
                valid.push(false); //false;
                $(".ipr-table").addClass("has-error").find("span.help-block").html("Please fill at least 1 of these fields.");
            } else {
                $(".ipr-table").removeClass("has-error").find("span.help-block").html("");
            }
            var $patent_application_no = $("input[name='patent_application_no']");
            if ($("input[name='patent_type']:checked").length > 0 && $patent_application_no.val() !== "") {
                iprPatent["applicationNumber"] = $patent_application_no.val();
                iprPatent["iprTitle"] = "PATENT";
                if ($("input[name='patent_type']:checked").val() == 1) {
                    iprPatent["applied"] = true;
                    iprPatent["registered"] = false;
                } else if ($("input[name='patent_type']:checked").val() == 2) {
                    iprPatent["applied"] = false;
                    iprPatent["registered"] = true;
                }
                $patent_application_no.parents("td").removeClass("has-error");
            } else if ($("input[name='patent_type']:checked").length === 0 && $patent_application_no.val() === "") {
                $patent_application_no.parents("td").removeClass("has-error");
            } else {
                isValidated = false;
                valid.push(false); //= false;
                if ($("input[name='patent_type']:checked").length === 0) {
                    $("input[name='patent_type']").parents("td").addClass("has-error");
                }
                $patent_application_no.parents("td").addClass("has-error");
            }
            iprs.push(iprPatent);
            valid.push(infoRequiredData2(accordianItem, "trademark_type", additionalInfo));
            var iprTrade = {};
            var $trademark_application_no = $("input[name='trademark_application_no']");
            if ($("input[name='trademark_type']:checked").length > 0 && $trademark_application_no.val() !== "") {
                iprTrade["applicationNumber"] = $trademark_application_no.val();
                iprTrade["iprTitle"] = "TRADEMARK";
                if ($("input[name='trademark_type']:checked").val() == 1) {
                    iprTrade["applied"] = true;
                    iprTrade["registered"] = false;
                } else if ($("input[name='trademark_type']:checked").val() == 2) {
                    iprTrade["applied"] = false;
                    iprTrade["registered"] = true;
                }
                $trademark_application_no.parents("td").removeClass("has-error");
            } else if ($("input[name='trademark_type']:checked").length === 0 && $trademark_application_no.val() === "") {
                $trademark_application_no.parents("td").removeClass("has-error");
            } else {
                isValidated = false;
                valid.push(false); //= false;
                if ($("input[name='trademark_type']:checked").length === 0) {
                    $("input[name='trademark_type']").parents("td").addClass("has-error");
                }
                $("input[name='trademark_application_no']").parents("td").addClass("has-error");
            }
            iprs.push(iprTrade);
            valid.push(infoRequiredData2(accordianItem, "copyright_type", additionalInfo));
            var iprCopy = {};
            var $copyright_application_no = $("input[name='copyright_application_no']");
            if ($("input[name='copyright_type']:checked").length > 0 && $copyright_application_no.val() !== "") {
                iprCopy["applicationNumber"] = $copyright_application_no.val();
                iprCopy["iprTitle"] = "COPYRIGHT";
                if ($("input[name='copyright_type']:checked").val() == 1) {
                    iprCopy["applied"] = true;
                    iprCopy["registered"] = false;
                } else if ($("input[name='copyright_type']:checked").val() == 2) {
                    iprCopy["applied"] = false;
                    iprCopy["registered"] = true;
                }
                $copyright_application_no.parents("td").removeClass("has-error");
            } else if (!($("input[name='copyright_type']:checked").length === 0 && $copyright_application_no.val() === "")) {
                isValidated = false;
                valid.push(false); //= false;
                if ($("input[name='copyright_type']:checked").length === 0) {
                    $("input[name='copyright_type']").parents("td").addClass("has-error");
                }
                $copyright_application_no.parents("td").addClass("has-error");
            }
            iprs.push(iprCopy);
            valid.push(infoRequiredData2(accordianItem, "design_type", additionalInfo));
            var iprDesign = {};
            var $design_application_no = $("input[name='design_application_no']");
            if ($("input[name='design_type']:checked").length > 0 && $design_application_no.val() !== "") {
                iprDesign["applicationNumber"] = $design_application_no.val();
                iprDesign["iprTitle"] = "DESIGN";
                if ($("input[name='design_type']:checked").val() == 1) {
                    iprDesign["applied"] = true;
                    iprDesign["registered"] = false;
                } else if ($("input[name='design_type']:checked").val() == 2) {
                    iprDesign["applied"] = false;
                    iprDesign["registered"] = true;
                }
                $design_application_no.parents("td").removeClass("has-error");
            } else if (!($("input[name='design_type']:checked").length === 0 && $design_application_no.val() === "")) {
                isValidated = false;
                valid.push(false); //= false;
                if ($("input[name='design_type']:checked").length === 0) {
                    $("input[name='design_type']").parents("td").addClass("has-error");
                }
                $design_application_no.parents("td").addClass("has-error");
            }
            iprs.push(iprDesign);
            valid.push(infoRequiredData2(accordianItem, "plant_variety_type", additionalInfo));
            var iprPlant = {};
            var $plant_variety_application_no = $("input[name='plant_variety_application_no']");
            if ($("input[name='plant_variety_type']:checked").length > 0 && $plant_variety_application_no.val() !== "") {
                iprPlant["applicationNumber"] = $plant_variety_application_no.val();
                iprPlant["iprTitle"] = "PLANT_VARIETY";
                if ($("input[name='plant_variety_type']:checked").val() == 1) {
                    iprPlant["applied"] = true;
                    iprPlant["registered"] = false;
                } else if ($("input[name='plant_variety_type']:checked").val() == 2) {
                    iprPlant["applied"] = false;
                    iprPlant["registered"] = true;
                }
                $plant_variety_application_no.parents("td").removeClass("has-error");
            } else if (!($("input[name='plant_variety_type']:checked").length === 0 && $plant_variety_application_no.val() === "")) {
                isValidated = false;
                valid.push(false); //= false;
                if ($("input[name='plant_variety_type']:checked").length === 0) {
                    $("input[name='plant_variety_type']").parents("td").addClass("has-error");
                }
                $plant_variety_application_no.parents("td").addClass("has-error");
            }
            iprs.push(iprPlant);
        } else {
            additionalInfo["ipr"] = false;
        }
        valid.push(infoRequiredData2(accordianItem, "innovative_product_service_type", additionalInfo));
        if ($("input[name='innovative_product_service_type']:checked").val() === "1") {
            additionalInfo["workCategory"] = true;
            valid.push(infoRequiredData2(accordianItem, "product_type", additionalInfo, workCategories));
            valid.push(infoRequiredData2(accordianItem, "service_type", additionalInfo, workCategories));
            valid.push(infoRequiredData2(accordianItem, "process_type", additionalInfo, workCategories));
            if ($(".innovative_product_service_table input[type='radio']:checked").length === 0) {
                isValidated = false;
                valid.push(false); //= false;
                $(".innovative_product_service_table").addClass("has-error").find("span.help-block").html("Please fill at least 1 of these fields.");
            } else {
                $(".innovative_product_service_table").removeClass("has-error").find("span.help-block").html("");
            }
            valid.push(checkRequiredFields($("textarea[name='emp_gen_note']").val(), $("textarea[name='emp_gen_note']")));
            businessModel["note"] = $("textarea[name='emp_gen_note']").val();
        } else {
            additionalInfo["workCategory"] = false;
        }
        valid.push(infoRequiredData2(accordianItem, "emp_gen_or_wel_create", additionalInfo));
        if ($("input[name='emp_gen_or_wel_create']:checked").val() === "1") {
            additionalInfo["scalableBusinessModel"] = true;
            var emp_wel_gen = [];
            $.each($("input[name='emp_gen_or_wel_create_emp_welth']:checked"), function (i, value) {
                if ($(value).val() == 1) {
                    businessModel["employmentGeneration"] = true;
                } else if ($(value).val() == 2) {
                    businessModel["wealthCreation"] = true;
                }
            });
            valid.push(checkRequiredFields($("textarea[name='emp_gen_note']").val(), $("textarea[name='emp_gen_note']")));
            businessModel["note"] = $("textarea[name='emp_gen_note']").val();
        } else {
            additionalInfo["scalableBusinessModel"] = false;
        }
        valid.push(infoRequiredData2(accordianItem, "funded_or_bootstrapped", additionalInfo));
        if ($funded_or_bootstrapped.prop("checked") === true) {
            additionalInfo["receiveFunding"] = true;
            if ($funded_or_bootstrapped_file.val() === "") {
                if ($funded_or_bootstrapped_file.parents(".form-group").find('a').html() === "") {
                    isValidated = false;
                    valid.push(false);//false;
                    $funded_or_bootstrapped_file.parents(".form-group").addClass("has-error").find(".help-block").html("This field can't be left Blank.");
                } else {
                    $funded_or_bootstrapped_file.parents(".form-group").removeClass("has-error").find(".help-block").html("");
                }
            } else {
                var responseData = uploadDpiitFiles($funded_or_bootstrapped_file[0].files[0], "FUNDING_PROOF", true);
                if(responseData) {
                    fundingProof = responseData.responseJSON.data;
                    if(formData.additionalInformation && formData.additionalInformation.fundingProof) {
                        delete formData.additionalInformation.fundingProof;
                    }
                } else {
                    //showDocUploadError(responseData);
                    valid.push(false);
                }
                $funded_or_bootstrapped_file.parents(".form-group").removeClass("has-error").find(".help-block").html("");
            }
        } else {
            additionalInfo["receiveFunding"] = false;
        }
        valid.forEach(function (value) {
            if (!value) {
                valid = false;
            }
        });
        if (valid) {
            additionalInfo["iprs"] = iprs;
            additionalInfo["workCategories"] = workCategories;
            additionalInfo["fundingProof"] = fundingProof;
            if(formData.additionalInformation && formData.additionalInformation.fundingProof){
                additionalInfo["fundingProof"] = formData.additionalInformation.fundingProof;
            }
            additionalInfo["businessModel"] = businessModel;
            formData["additionalInformation"] = additionalInfo;

            if(saveSection) {
                var response = saveDpiitFormData(formData, "INFORMATION", "DRAFT");
                if(!response.responseJSON.status){
                    showDocUploadError(response);
                }
                isFinalDataValid = response.responseJSON.status;
            }else{
                isFinalDataValid = true;
            }
        } else {
            isFinalDataValid = false;
        }
    }

    function checkStartActivity($saveBtn, saveSection) {
        var activities = {};
        var awardDoc = {};
        var valid = [];
        var $upload_award_recognization_entity = $("input[name='upload_award_recognization_entity']");
        var $award_recognization_entity_name = $('textarea[name=award_recognization_entity_name]');
        var sectioninputFields = $saveBtn.closest(".accordion-section-content").find("textarea.form-control");
        $.each(sectioninputFields, function (index, inputSel) {
            var key = $(inputSel).attr("name");
            if (typeof key != "undefined") {
                var attrValue = $(inputSel).val().trim();
                if (attrValue) {
                    if (key == "award_recognization_entity_name") {
                        activities['awardsReceived'] = attrValue;
                    }
                    if (key == "problem_startup_solving") {
                        activities['problemStatement'] = attrValue;
                    }
                    if (key == "startup_propose_to_solve_problem") {
                        activities['problemSolution'] = attrValue;
                    }
                    if (key == "uniqueness_of_your_solution") {
                        activities['solutionUniqueness'] = attrValue;
                    }
                    if (key == "startup_generate_revenue") {
                        activities['generateRevenue'] = attrValue;
                    }
                }
                valid.push(checkRequiredFields(attrValue, inputSel));
            }
        });

        if (selectedValue === "1" && $('textarea[name=award_recognization_entity_name]').val() === "") {
            isValidated = false;
            valid.push(false);
            $('.award_recognization_entity_name').closest(".form-group").addClass("has-error").find(".help-block").html("This field is required.");
        }else if (selectedValue === "1" && $('textarea[name=award_recognization_entity_name]').val()) {
            if ($award_recognization_entity_name.val().trim().length < 500 || $award_recognization_entity_name.val().trim().length > 5000) {
                isValidated = false;
                valid.push(false);
                $('.award_recognization_entity_name').closest(".form-group").addClass("has-error").find(".help-block").html("This field must have characters between 500 to 5000");
            } else {
                $('.award_recognization_entity_name').closest(".form-group").removeClass("has-error").find(".help-block").html("");
            }
        } else {
            $upload_award_recognization_entity.parents(".form-group").removeClass("has-error").find(".help-block").html("");
        }

        if ($('textarea[name=award_recognization_entity_name]').val() && $upload_award_recognization_entity.val() === "" && $upload_award_recognization_entity.parents(".form-group").find('a').html() === "") {
            isValidated = false;
            valid.push(false);
            $upload_award_recognization_entity.closest(".form-group.file-upload").addClass("has-error").find(".help-block").html("Please Upload awards file");
        } else {
            $upload_award_recognization_entity.parents(".form-group").removeClass("has-error").find(".help-block").html("");
        }
        if ($upload_award_recognization_entity.val() === "") {
            if ($upload_award_recognization_entity.parents(".form-group").find('a').html() != "") {
                awardDoc["name"] = $upload_award_recognization_entity.parents(".form-group").find('a').html();
                $upload_award_recognization_entity.parents(".form-group").removeClass("has-error").find(".help-block").html("");
            }
        } else {
            var responseData = uploadDpiitFiles($upload_award_recognization_entity[0].files[0], "STARTUP_AWARD_DOCUMENT", true);
            awardDoc = responseData.responseJSON.data;
            if(formData.activities && Object.keys(formData.activities).length > 0) {
                delete formData.activities;
            }
            $upload_award_recognization_entity.parents(".form-group").removeClass("has-error").find(".help-block").html("");
        }
        valid.forEach(function (value) {
            if (!value) {
                valid = false;
            }
        });
        if (valid) {
            if(awardDoc && Object.keys(awardDoc).length > 0) {
                activities["awardDocument"] = awardDoc;
                if(formData.activities && formData.activities.awardDocument){
                    activities["awardDocument"] = formData.activities.awardDocument;
                }
            }
            formData["activities"] = activities;
            if(saveSection) {
                var response = saveDpiitFormData(formData, "ACTIVITIES", "DRAFT");
                if(!response.responseJSON.status){
                    showDocUploadError(response);
                }
                isFinalDataValid = response.responseJSON.status;
            }else{
                isFinalDataValid = true;
            }
        } else {
            isFinalDataValid = false;
        }
    }

    function checkSaveCertificate($saveBtn, saveSection) {
        var valid = [];
        var selfCertificate = {};
        var additionalDocs = [];
        var registrationCertificate = {};
        var accordianItem = $saveBtn.closest(".accordion-section-content");
        var incorp_certificate = $(accordianItem).find("input[name='incorporation_certificate']");
        if ($(incorp_certificate).val() === "" || $(incorp_certificate).parents(".form-group").hasClass("has-error")) {
            var incorp_certi_file = $(accordianItem).find(".incorporation_certificate_filename a");
            if ($(incorp_certi_file).html() !== "") {
                selfCertificate["registrationCertificate"] = $(incorp_certi_file).html();
                $(incorp_certi_file).parents(".form-group").removeClass("has-error").find(".help-block").html("");
            } else {
                isValidated = false;
                valid.push(false);// = false;
                $(incorp_certificate).parents(".form-group").addClass("has-error").find(".help-block").html("This field can't be left Blank.");
            }
        } else {
            var responseData = uploadDpiitFiles(incorp_certificate[0].files[0], "SELF_CERTIFICATE", true);
            registrationCertificate = responseData.responseJSON.data;
            if(formData.selfCertificate && formData.selfCertificate.registrationCertificate
                && Object.keys(formData.selfCertificate.registrationCertificate).length > 0) {
                delete formData.selfCertificate.registrationCertificate;
            }
            $(incorp_certificate).parents(".form-group").removeClass("has-error").find(".help-block").html("");
        }
        valid.push(checkAdditionalDocsValidations());
        var oth = 0;
        var docLinksArray = $(accordianItem).find("#moreupload .upload-row").children();
        $.each(docLinksArray, function (index, value) {
            var inputDoc = $(value).find("input.additional");
            $.each(inputDoc, function (i, val) {
                var addMore = {};
                var $selfCertiDoc = $(val).parents(".selfCertiDoc");
                if (!$selfCertiDoc.hasClass("display-n")) {
                    var selectName = $(value).find("select").val();
                    addMore["name"] = selectName.toUpperCase();

                    if ($selfCertiDoc.hasClass("add_doc_file")) {
                        if ($(val).prop("type") === "text" && $(val).val() !== "") {
                            addMore["url"] = $(val).val();
                        } else if (val.files) {
                            if (val.files.length > 0) {
                                var files = {};
                                oth = oth + 1;
                                var responseData = uploadDpiitFiles(val.files[0], "OTHER_DOC", true);
                                if(responseData) {
                                    files = responseData.responseJSON.data;
                                } else {
                                    //showDocUploadError(responseData);
                                    valid.push(false);
                                }
                                addMore["file"] = files;
                                $(val).closest('.add_doc_file').removeClass('has-error');
                            } else if(formData.selfCertificate && formData.selfCertificate.additionalDocument.length > 0) {
                                addMore["file"] = formData.selfCertificate.additionalDocument[index].file;
                            } else if (!$(val).parent().hasClass('display-n')) {
                                isValidated = false;
                                valid.push(false);// = false;
                                $(val).closest('.add_doc_file').addClass('has-error');
                            }
                        }
                    } else {
                        if (!$(val).val()) {
                            isValidated = false;
                            valid.push(false); // = false;
                            $(val).closest('.add_doc_desc').addClass('has-error');
                            $(val).closest('.add_doc_desc').find('.help-block').html("This field can't be left Blank.");
                        } else if ($(val).val() && !($(val).val().startsWith("https") || $(val).val().startsWith("http"))) {
                            isValidated = false;
                            valid.push(false); // = false;
                            $(val).closest('.add_doc_desc').find('.help-block').html('Link should start with either http or https');
                            $(val).closest('.add_doc_desc').addClass('has-error');
                        } else {
                            $(val).closest('.add_doc_desc').removeClass('has-error');
                        }
                        addMore["url"] = $(val).val();
                    }
                    additionalDocs.push(addMore);
                }

            });
        });
        // validate mandatory certify checkboxes
        var validCertify = true;
        $('.recognition-self-certification .mandatory-certify .new-certify').find('input[name=certify]').each(function (index, item) {
            if (!$(item).is(':checked')) {
                validCertify = false;
            }
        })

        if (!validCertify) {
            isValidated = false;
            valid.push(false); // = false;
            $("input[name='certify']").parents(".form-group").addClass('certify-has-error')
            $("input[name='certify']").parents(".recognition-self-certification").find('span.mandatory-certify-help').removeClass('display-n')
        } else {
            $("input[name='certify']").parents(".form-group").removeClass("certify-has-error");
            $("input[name='certify']").parents(".recognition-self-certification").find('span.mandatory-certify-help').addClass('display-n')
        }

        valid.push(validateAndSaveAuthorizationLetter(selfCertificate));
        valid.push(validateAndSaveSelfCertifyDoc(selfCertificate));

        valid.forEach(function (value) {
            if (!value) {
                valid = false;
            }
        });
        if (valid) {
            selfCertificate["registrationCertificate"] = registrationCertificate;
            if(formData.selfCertificate && formData.selfCertificate.registrationCertificate){
                selfCertificate["registrationCertificate"] = formData.selfCertificate.registrationCertificate;
            }
            selfCertificate["additionalDocument"] = additionalDocs;

            formData["selfCertificate"] = selfCertificate;
            if(saveSection) {
                var response = saveDpiitFormData(formData, "CERTIFICATION", "DRAFT");
                if(!response.responseJSON.status){
                    showDocUploadError(response);
                }
                isFinalDataValid = response.responseJSON.status;
            }else{
                isFinalDataValid = true;
            }
        } else {
            isFinalDataValid = false;
        }
    }

    function checkAdditionalDocsValidations() {
        /*
        * Ideation Stage - No POC required
        * Validation Stage - Any 1 POC can work, even if it is a website
        * Early Traction and Scaling Stage - An additional POC mandatory, if in case the startup is providing us with just the website link.
        */
        var aValid = true;
        var startupStage = $("input[name='dev_of_product_service']:checked").val();

        if (startupStage === "3" || startupStage === "4") {
            var hasWebsite = false;
            $("#moreupload input").each(function (id, val) {
                var selection = $(this).closest('.form-group').find('select.selectDoc').val();
                if (selection === "website_link") { hasWebsite = true; }
            });
            if (hasWebsite && $("#moreupload").find('.form-group').length === 1) {
                aValid = false;
                $("#moreupload").parent().find('.additional-doc-error-span').html("Please upload one more additional document").removeClass('display-n');
            }
        }

        if (aValid && startupStage !== "1") {
            var valid = false;
            $("#moreupload input, #moreupload select").each(function (id, val) {
                if ($(this).val()) {
                    valid = true;
                }
            });
            if (!valid) {
                $("#moreupload").parent().find('.additional-doc-error-span').html("Additional Document is mandatory").removeClass('display-n');
                $("#moreupload").closest('.form-group').addClass('has-error');
                isValidated = false;
                aValid = false;
            } else {
                $("#moreupload").parent().find("span.additional-doc-error-span").addClass('display-n');
                $("#moreupload").closest('.form-group').removeClass('has-error');
            }
        }
        return aValid;
    }

    function validateAndSaveAuthorizationLetter(selfCertificate) {
        var isValidated = true;
        var $target = $(".recognition-self-certification input[name=authorization_letter]");

        if ($target.val() === "" || $target.parents(".form-group").hasClass("has-errors")) {
            var file = $target.closest('.form-group').find(".authorization_letter_filename a");
            if (file.html() !== "" && file.attr('href') !== "") {
                if(!formData.selfCertificate || !formData.selfCertificate.authorizationLetter){
                    console.error("authorizationLetter not found in fetched Data");
                } else
                    selfCertificate["authorizationLetter"] = formData.selfCertificate.authorizationLetter;
                file.closest(".form-group").removeClass("has-error has-errors").find(".help-block").html("");
            } else {
                isValidated = false;
                $target.closest(".form-group").addClass("has-error has-errors").find(".help-block").html("This field can't be left Blank.");
            }
        } else {
            var responseData = uploadDpiitFiles($target[0].files[0], "SELF_CERTIFICATE_AUTHORIZATION_LETTER", true);
            selfCertificate["authorizationLetter"] = responseData.responseJSON.data;
            $target.parents(".form-group").removeClass("has-error has-errors").find(".help-block").html("");
        }
        return isValidated;
    }

    function validateAndSaveSelfCertifyDoc(selfCertificate) {
        var validRadio = validateAndSaveRadioMandatory(selfCertificate);
        var validOptional = validateAndSaveOptionalMandatory(selfCertificate);
        return validRadio && validOptional;
    }

    function validateAndSaveRadioMandatory(selfCertificate) {
        var isValidated = true;
        var $target = $('.radio-mandatory-certify input[name=isMerger]');
        if ($target.is(":checked")) {
            var name = $target.attr('name');
            if ($('input[name=isMerger]:checked').val() === "yes") {
                var groupName = $target.attr('data-group');
                selfCertificate[name] = true;
                var mergerDocs = [];
                $('.radio-mandatory-certify .upload-group input[type=file]').each((index, item) => {
                    var obj = validSelfCertifyUpload(item, index, groupName);
                    if (!obj || !Object.keys(obj).length)
                        isValidated = false;
                    else
                        mergerDocs.push(obj);
                })
                selfCertificate[groupName] = mergerDocs;
            } else {
                selfCertificate[name] = false;
            }
        }
        return isValidated;
    }

    function validateAndSaveOptionalMandatory(selfCertificate) {
        var isValidated = true;
        var entityType = $nature_entity.val();
        $('.optional-certify input[type=checkbox]').each((i, elem) => {
            var name = $(elem).attr('name');
            if (name === "isCinChange" && $("select[name='entity_type']").val() === "5f48ce5f2a9bb065cdfa185d"){
                selfCertificate["isCinChange"] = false;
                delete selfCertificate["cinChangeDocs"];
            } else {
                if ($(elem).is(":checked")) {
                    selfCertificate[name] = true;
                    var groupDocs = [];
                    var groupName = $(elem).attr('data-group');
                    $(elem).closest('.group-parent').find('input[type=file]').each((index, item) => {
                        if (entityType !== "5f48ce5f2a9bb065cdfa185d" && $(item).attr('data-type') === "NAME_CHANGE_DOC_PAN_CARD")
                            return true;
                        var obj = validSelfCertifyUpload(item, index, groupName);
                        if (!obj || !Object.keys(obj).length)
                            isValidated = false;
                        else
                            groupDocs.push(obj);
                    })
                    selfCertificate[groupName] = groupDocs;
                } else {
                    selfCertificate[name] = false;
                }
            }
        })
        return isValidated;
    }

    function validSelfCertifyUpload(field, index, groupName) {
        var isValidated = true;
        var fieldName = $(field).attr("name");
        var fieldObj = {};

        if ($(field).val() === "" || $(field).parents(".form-group").hasClass("has-errors")) {
            var file = $(field).closest('.form-group').find("." + fieldName + "_filename a");
            if (file.html() !== "" && file.attr('href') !== "") {
                if(!formData.selfCertificate || !formData.selfCertificate[groupName] || !formData.selfCertificate[groupName][index]){
                    console.error(fieldName + " not found in fetched Data");
                } else
                    fieldObj = formData.selfCertificate[groupName][index];
                file.closest(".form-group").removeClass("has-error has-errors").find(".help-block").html("");
            } else {
                isValidated = false;
                $(field).closest(".form-group").addClass("has-error has-errors").find(".help-block").html("This field can't be left Blank.");
            }
        } else {
            var docType = $(field).attr('data-type');
            var responseData = uploadDpiitFiles($(field)[0].files[0], docType, true);
            fieldObj = responseData.responseJSON.data;
            $(field).parents(".form-group").removeClass("has-error has-errors").find(".help-block").html("");
        }
        return isValidated ? fieldObj : false;
    }

    function setUserDetails(data, disableOnly) {

        if (data.user.startup.startupEntity) {
            if (disableOnly) {
                $nature_entity.attr("disabled", "disabled").trigger("change");
            } else {
                var entityName = "";
                if (data.user.startup.startupEntity == "5f48ce5f2a9bb065cdfa185b") {
                    entityName = "Private Limited Company";
                } else if (data.user.startup.startupEntity == "5f48ce5f2a9bb065cdfa185c") {
                    entityName = "Limited Liability Partnership";
                } else if (data.user.startup.startupEntity == "5f48ce5f2a9bb065cdfa185d") {
                    $('.recognition-partner-detail').find('.removable-field').hide();
                    entityName = "Registered Partnership";
                }
                $nature_entity.find("option:contains(" + entityName + ")").attr("selected", "selected");
                $nature_entity.attr("disabled", "disabled");//.trigger("change");
            }
        }
        if (data.user.startup.cin) {
            if (disableOnly) {
                $incorp_number.attr("disabled", "disabled");
            } else {
                $incorp_number.val(data.user.startup.cin).trigger("change").attr("disabled","disabled");
            }
        }
        if (data.user.startup.pan) {
            $("input[name='pan_number']").val(data.user.startup.pan);
        }
        if (data.user.startup.stage) {
            if (disableOnly) {
                $("input[name='dev_of_product_service']").attr("disabled", "disabled");
            } else {
                var stage;
                switch (data.user.startup.stage) {
                    case "Prototype":
                        stage = 1;
                        break;
                    case "Validation":
                        stage = 2;
                        break;
                    case "EarlyTraction":
                        stage = 3;
                        break;
                    case "Scaling":
                        stage = 4;
                        break;
                }
                $("input[name='dev_of_product_service'][value=" + stage + "]").prop("checked", true);
                //$("input[name='dev_of_product_service']").attr("disabled", "disabled");
            }
        }
        if (data.user.startup.name) {
            if (disableOnly) {
                $("input[name='entity_name']").attr("disabled", "disabled");
            } else {
                $("input[name='entity_name']").val(htmlDecode(data.user.startup.name)).attr("disabled", "disabled");
            }
        }
        /* });*/

        if ($("select[name='entity_type']").val() === "5f48ce5f2a9bb065cdfa185d")
            $('.recognition-self-certification input[name=isCinChange]').closest('.group-parent').hide();
    }

    function retrieveRecognitionFormStatus(data) {
        if (data.status === "DRAFT") {
            retrieveFormCallBack(data)
        } else if (data.status === "SUBMIT" || data.status === "ON_HOLD") {
            retrieveFormCallBack(data);
            disableRecognitionForm();
            alert("The form is already Submitted")
        } else if (data.status === "APPROVE") {
            retrieveFormCallBack(data);
            disableRecognitionForm();
            alert("The form is already Approved")
        } else if (data.status === "INCOMPLETE") {
            retrieveFormCallBack(data)
        } else if (data.status === "PENDING") {
            retrieveFormCallBack(data);
            disableRecognitionForm();
            alert("The form is already Submitted and Pending")
        } else if (data.status === "REJECT") {
            retrieveFormCallBack(data);
            disableRecognitionForm();
            alert("We Regret To inform you that the form is Rejected")
        }else if (data.status === "CANCELLED") {
            retrieveFormCallBack(data);
            disableRecognitionForm();
        }else if (data.status === "EXPIRED") {
            retrieveFormCallBack(data);
            disableRecognitionForm();
        }
        setTimeout(function(){ $('#modal-loader').modal('hide'); }, 10);
    }

    function retrieveFormCallBack(data) {
        var imageLink = $('.notification-container').attr('admin-service-base-url');
        if (data) {
            setTimeout(function(){ $('#modal-loader').modal('show'); }, 10);
            // section - 1
            if (data.startupEntity) {
                if(data.startupEntity.startupNatureOfEntity){
                    $nature_entity.find("option:contains(" + data.startupEntity.startupNatureOfEntity.name + ")").attr("selected", "selected");
                    if (data.startupEntity.startupNatureOfEntity.id === "5f48ce5f2a9bb065cdfa185d")
                        $('.recognition-partner-detail').find('.removable-field').hide();
                }
                if(data.startupEntity.startupIndustry){
                    // $industry_id.find("option:contains(" + data.startupEntity.startupIndustry.industryName + ")").attr("selected", "selected").trigger("change");
                    $industry_id.find("option[value=" + data.startupEntity.startupIndustry.id + "]").attr("selected", "selected").trigger("change");
                }
                if(data.startupEntity.startupSection){
                    // $sector_name.find("option:contains(" + data.startupEntity.startupSection.sectionName + ")").attr("selected", "selected").trigger("change");
                    $sector_name.find("option[value=" + data.startupEntity.startupSection.id + "]").attr("selected", "selected").trigger("change");
                }
                
                if (data.startupEntity.startupServices && data.startupEntity.startupServices.length > 0) {
                    $.each(data.startupEntity.startupServices, function (i, val) {
                        $("select[name='categories_id']").find("option:contains(" + val.serviceName + ")").attr("selected", "selected");
                        $("select[name='categories_id']").trigger("change");
                    });
                }
                $incorp_number.val(data.incorporationNumber);
                if(data.startupEntity.startupNatureOfEntity && data.startupEntity.startupNatureOfEntity.name === "Registered Partnership"){
                    $incorp_number.prop("disabled", false);
                }
                $entity_name.val(htmlDecode(data.startupEntity.name));
                if(data.startupEntity.startupNatureOfEntity && data.startupEntity.startupNatureOfEntity.name != "Registered Partnership"){
                    $entity_name.attr("disabled", "disabled");
                }
                if (data.startupEntity.incorporationDate) {
                    var regDate = data.startupEntity.incorporationDate;//.replace(new RegExp("-", "g"), "/").split("/");
                    //regDate = regDate[1] + "/" + regDate[2] + "/" + regDate[0];
                    $incorp_date.val(regDate);
                    if(data.startupEntity.startupNatureOfEntity && data.startupEntity.startupNatureOfEntity.name != "Registered Partnership"){
                        $incorp_date.attr("disabled", "disabled");
                    }
                    // checkTaxAvail(data[0].incorporation_date.replace(new RegExp("-", "g"), "/"), data[0].nature_of_entity);
                }
                $("input[name='pan_number']").val(data.startupEntity.panNumber);
            }
            // section - 2
            if (data.address) {
                $("input[name='office_address']").val(data.address.address1);
                $("input[name='office_address1']").val(data.address.address2);
                $("input[name='office_address2']").val(data.address.address3);
                $("input[name='city_name']").val(data.address.city);
                $("select[name='state_name']").val(data.address.stateId).trigger("change");
                $("input[name='pin_code']").val(data.address.pinCode);
                $("select[name='district_id']").val(data.address.districtId).trigger("change");
                $("select[name='subdistrict_id']").val(data.address.subDistrictId);
            }
            // section - 3
            if (data.representative) {
                $("input[name='rep_name']").val(data.representative.name);
                $("input[name='desg_rep_name']").val(data.representative.designation);
                if (data.representative.mobile) {
                    if (data.representative.mobile.includes("+91-")) {
                        const regex1 = /(\+91-)/g;
                        $("input[name='mobile_number']").val(data.representative.mobile.replace(regex1, ""));
                    } else {
                        $("input[name='mobile_number']").val(data.representative.mobile);
                    }
                }
                $("input[name='emailId']").val(data.representative.email);
            }
            // section - 4
            if (data.directors) {
                if (data.directors.length > 0) {
                    $("select[name='no_dir']").val(data.directors.length);
                    directorDataCallBack(data.directors);
                }
            }
            // section - 5
            if (data.additionalInformation) {
                $("input[name='current_no_employee']").val(data.additionalInformation.numberOfEmployees);

                if (data.additionalInformation.stage == "IDEATION") {
                    $("input[name='dev_of_product_service'][value='1']").prop('checked', true);
                } else if (data.additionalInformation.stage == "VALIDATION") {
                    $("input[name='dev_of_product_service'][value='2']").prop('checked', true);
                } else if (data.additionalInformation.stage == "EARLY_TRACTION") {
                    $("input[name='dev_of_product_service'][value='3']").prop('checked', true);
                } else if (data.additionalInformation.stage == "SCALING") {
                    $("input[name='dev_of_product_service'][value='4']").prop('checked', true);
                }

                if (data.additionalInformation.ipr) {
                    $("input[name='ipr_type'][value='1']").prop('checked', true).trigger("change");
                } else {
                    $("input[name='ipr_type'][value='2']").prop('checked', true).trigger("change");
                }
                if (data.additionalInformation.ipr) {
                    $(".regiFormSection").removeClass("display-n");
                    $.each(data.additionalInformation.iprs, function (i, ipr) {
                        var iprTitle;
                        if(ipr.iprTitle !=null && ipr.iprTitle) {
                            var iprTitle = ipr.iprTitle.toLowerCase();
                        }
                        if (ipr.applied) {
                            $("input[name='" + iprTitle + "_type'][value='1']").prop('checked', true).trigger("click");
                        }
                        if (ipr.registered) {
                            $("input[name='" + iprTitle + "_type'][value='2']").prop('checked', true).trigger("click");
                        }
                        $("input[name='" + iprTitle + "_application_no']").val(ipr.applicationNumber);
                    });
                }
                if (data.additionalInformation.workCategory) {
                    $("input[name='innovative_product_service_type'][value='1']").prop('checked', true).trigger("change");
                } else {
                    $("input[name='innovative_product_service_type'][value='2']").prop('checked', true).trigger("change");
                }

                if (data.additionalInformation.workCategories) {
                    $.each(data.additionalInformation.workCategories, function (i, wc) {
                        var workNature = wc.workNature.toLowerCase();
                        if (wc.innovative) {
                            $("input[name='" + workNature + "_type'][value='1']").prop('checked', true).trigger("change");
                        }
                        if (wc.improvement) {
                            $("input[name='" + workNature + "_type'][value='2']").prop('checked', true).trigger("change");
                        }
                    });
                }
                if (data.additionalInformation.scalableBusinessModel) {
                    $("input[name='emp_gen_or_wel_create'][value='1']").prop('checked', true).trigger("change");
                } else {
                    $("input[name='emp_gen_or_wel_create'][value='2']").prop('checked', true).trigger("change");
                }

                if (data.additionalInformation.businessModel) {
                    if (data.additionalInformation.businessModel.employmentGeneration) {
                        $("input[name='emp_gen_or_wel_create_emp_welth'][value='1']").prop('checked', true);
                    }
                    if (data.additionalInformation.businessModel.wealthCreation) {
                        $("input[name='emp_gen_or_wel_create_emp_welth'][value='2']").prop('checked', true);
                    }
                    $("textarea[name='emp_gen_note']").val(unEscapeRegHtml(data.additionalInformation.businessModel.note));
                }
                if (data.additionalInformation.receiveFunding) {
                    $("input[name='funded_or_bootstrapped'][value='1']").prop('checked', true).trigger("change");
                } else {
                    $("input[name='funded_or_bootstrapped'][value='2']").prop('checked', true).trigger("change");
                }
                if (data.additionalInformation.fundingProof) {
                    var $upload_funded_entity = $("input[name=upload_funded_or_bootstrapped_file]").siblings("a");
                    $upload_funded_entity.html(data.additionalInformation.fundingProof.compressedName).removeClass("display-n");
                    $upload_funded_entity.prop("href", imageLink + data.additionalInformation.fundingProof.publicUrl);
                    $upload_funded_entity.prop("target", "_blank");
                    formData.additionalInformation = {};
                    formData.additionalInformation.fundingProof = {};
                    formData.additionalInformation.fundingProof = data.additionalInformation.fundingProof;
                }
            }
            //  section - 6
            if (data.activities) {
                $("textarea[name='award_recognization_entity_name']").val(unEscapeRegHtml(data.activities.awardsReceived));
                $("textarea[name='problem_startup_solving']").val(unEscapeRegHtml(data.activities.problemStatement));
                $("textarea[name='startup_propose_to_solve_problem']").val(unEscapeRegHtml(data.activities.problemSolution));
                $("textarea[name='uniqueness_of_your_solution']").val(unEscapeRegHtml(data.activities.solutionUniqueness));
                $("textarea[name='startup_generate_revenue']").val(unEscapeRegHtml(data.activities.generateRevenue));
                if (data.activities.awardDocument) {
                    if(data.activities.awardDocument.publicUrl){
                        $("input[name='awards_or_recognition'][value='1']").prop('checked', true).trigger("change");
                    }else {
                        $("input[name='awards_or_recognition'][value='2']").prop('checked', true).trigger("change");
                    }
                    var $award_recognization_entity = $("input[name=upload_award_recognization_entity]").siblings("a");
                    $award_recognization_entity.html(data.activities.awardDocument.compressedName).removeClass("display-n");
                    $award_recognization_entity.prop("href", imageLink + data.activities.awardDocument.publicUrl);
                    $award_recognization_entity.prop("target", "_blank");
                    formData.activities = {};
                    formData.activities.awardDocument = data.activities.awardDocument;
                }
            }
            // section - 7
            if (data.selfCertificate) {
                formData.selfCertificate = {};
                if (data.selfCertificate.registrationCertificate) {
                    var $incorp_file_link = $(".incorporation_certificate_filename a");
                    $incorp_file_link.html(data.selfCertificate.registrationCertificate.compressedName).parent().removeClass("display-n");
                    $incorp_file_link.prop("href", imageLink + data.selfCertificate.registrationCertificate.publicUrl);
                    $incorp_file_link.prop("target", "_blank");
                    // formData.selfCertificate = {};
                    formData.selfCertificate.registrationCertificate = {};
                    formData.selfCertificate.registrationCertificate = data.selfCertificate.registrationCertificate;
                }
                const disabledStatus = ["APPROVE", "REJECT", "SUBMIT", "CANCELLED", "ON_HOLD", "EXPIRED"]
                if (disabledStatus.includes(data.status) && data.isPreCertified === true) {
                    disableNewCertify();
                } else {
                    if (data.selfCertificate.authorizationLetter) {
                        populateUploadField($('input[name=authorization_letter]').closest('.form-group'), data.selfCertificate.authorizationLetter)
                        formData.selfCertificate["authorizationLetter"] = data.selfCertificate.authorizationLetter;
                    }
                    populateRadioSelfCertify(data);
                    populateOptionalSelfCertify(data);
                }
                var $uploadRow = $("#moreupload .upload-row");
                if (data.selfCertificate.additionalDocument && data.selfCertificate.additionalDocument.length > 0) {
                    $.each(data.selfCertificate.additionalDocument, function (i, ele) {
                        addMoreUploads(i);
                        var eleName = ele.name.toLowerCase();
                        $uploadRow.find("select[name='selfcertification[" + (i + 1) + "]']").val(eleName).trigger("change");
                        if (ele.url != null) {
                            $uploadRow.find("input[name='docAsText[" + (i + 1) + "]']").val(ele.url);
                        }
                        if (ele.file != null) {
                            var $fileLink = $uploadRow.find("input[name='docAsFileName[" + (i + 1) + "]']").siblings("a");
                            $fileLink.html(ele.file.compressedName).parent().removeClass("display-n");
                            $fileLink.prop("href", imageLink + ele.file.publicUrl);
                            $fileLink.prop("target", "_blank");
                            $uploadRow.find("input[name='docAsFileName[" + (i + 1) + "]']").addClass("display-n");
                            $fileLink.parent().css("word-break", "break-all");
                            $fileLink.parent().siblings("div").addClass("display-n");
                            $fileLink.removeClass("display-n");
                        }
                    });

                    formData.selfCertificate.additionalDocument = {};
                    formData.selfCertificate.additionalDocument = data.selfCertificate.additionalDocument;
                }
            } else {
                if ($("select[name='entity_type']").val() === "5f48ce5f2a9bb065cdfa185d")
                    $('.recognition-self-certification input[name=isCinChange]').closest('.group-parent').hide();
            }
            var openAccordian = $incorp_number;
            /*$('.accordionitem .number').each(function (index, val) {
                if ($(this).html().trim() === lastSavedSection) {
                    openAccordian = $(this);
                }
            });*/
            $(".accordionitem").find(".accordion-section-content").hide();
            $(".accordionitem").find(".accordion-section-title").removeClass("active");
            $(openAccordian).parents(".accordionitem").find(".accordion-section-title").addClass("active");
            $(openAccordian).parents(".accordionitem").find(".accordion-section-content").show();
            /* if (data.startupEntity.startupNatureOfEntity.orderFlag === "3") {
                 $('input[name=incorp_date]').removeAttr('disabled');
                 $('input[name=entity_name]').removeAttr('readonly disabled');
             }*/
            setTimeout(function(){ $('#modal-loader').modal('hide'); }, 10);
        }
    }

    function disableNewCertify() {
        $('.recognition-self-certification').find('.auth-letter-wrapper, .radio-mandatory-certify, .optional-certify').hide();
        $('.recognition-self-certification').find('.mandatory-certify').find('.new-certify').hide();
        $('.recognition-self-certification').find('.mandatory-certify').find('.old-certify').removeClass('display-n');
    }

    function populateRadioSelfCertify(data) {
        if (data.selfCertificate.isMerger !== undefined) {
            if (data.selfCertificate.isMerger === false) {
                $('input#isMerger-no').trigger('click')
            } else {
                $('input#isMerger-yes').trigger('click')
                if (data.selfCertificate.mergerDocs && data.selfCertificate.mergerDocs.length) {
                    $('.radio-mandatory-certify').find('.form-group').each((index, item) => {
                        populateUploadField(item, data.selfCertificate.mergerDocs[index])
                    })
                    formData.selfCertificate["mergerDocs"] = data.selfCertificate.mergerDocs;
                }
            }
            formData.selfCertificate["isMerger"] = data.selfCertificate.isMerger;
        }
    }

    function populateOptionalSelfCertify(data) {
        if ($("select[name='entity_type']").val() === "5f48ce5f2a9bb065cdfa185d")
            $('.recognition-self-certification input[name=isCinChange]').closest('.group-parent').hide();

        optionalCertifyFlags.forEach((item, index) => {
            if (data.selfCertificate[item] !== undefined) {
                if (data.selfCertificate[item] === true) {
                    var $target = $('.optional-certify input[name=' + item + ']');
                    $target.trigger('click')
                    var docName = optionalCertifyDocs[index];
                    if (data.selfCertificate[docName] && data.selfCertificate[docName].length) {
                        var fields = $target.closest('.group-parent').find('.form-group');
                        data.selfCertificate[docName].forEach((item, index) => {
                            populateUploadField($(fields).eq(index), item);
                        })
                        formData.selfCertificate[docName] = data.selfCertificate[docName];
                    }
                }
                formData.selfCertificate[item] = data.selfCertificate[item];
            }
        })

    }

    function populateUploadField(field, data) {
        var imageLink = $('.notification-container').attr('admin-service-base-url');
        var $link = $(field).find('a.file-link');
        $link.html(data.compressedName).parent().removeClass("display-n");
        $link.prop("href", imageLink + data.publicUrl);
        $link.prop("target", "_blank");
    }

    function diff_years(dt2, dt1) {
        var diff = (dt2.getTime() - dt1.getTime()) / 1000;
        diff /= (60 * 60 * 24);
        return Math.abs(Math.round(diff / 365.25));

    }

    function htmlDecode(input){
        var e = document.createElement('div');
        e.innerHTML = input;
        return e.childNodes.length === 0 ? "" : e.childNodes[0].nodeValue;
    }

    function prepopulateMCADetails(data) {
        setTimeout(function(){ $('#modal-loader').modal('show'); }, 10);
        var data = data.data;
        if (data.isValidIncorporationNo === true) {
            $entity_name.val(htmlDecode(data.companyName)).attr("readonly", "readonly").parents(".form-group").removeClass("has-error").find(".help-block").html("");
        }
        if (data.incorpdate) {
            var dateSplit = data.incorpdate.indexOf("/") > -1 ? data.incorpdate.split("/") : data.incorpdate.split("-");

            if (dateSplit.length === 3) {
                $incorp_date.val(dateSplit[1] + "/" + dateSplit[0] + "/" + dateSplit[2]).attr("readonly", "readonly").parents(".form-group").removeClass("has-error").find(".help-block").html("");
            }
            //  $($this).parents(".form-group").removeClass("has-error").find(".help-block").html("");
            var currentDate = new Date();
            var diffYear = diff_years(new Date($incorp_date.val()), currentDate);
            if ($incorp_date.val() && diffYear > 10) {
                $incorp_date.closest(".form-group").addClass("has-error");
                $incorp_date.parents(".accordion-section").find(".button").next().find(".has-error").html("");
                isValidated = false;
                validationMsg = "We regret to inform you that your startup does not match the eligibility criteria of incorporation date. Hence, the entity is not eligible for Startup recognition.";
            } else {
                $incorp_date.closest(".form-group").removeClass("has-error");
            }
            //var dateSplit = attrValue.split("/");
            //var newDate = dateSplit[2] + "/" + dateSplit[0] + "/" + dateSplit[1];
        }
        setTimeout(function(){ $('#modal-loader').modal('hide'); }, 10);
    }


    function setEntities() {
        $.ajax({
            type: "GET",
            async: false,
            url: SIH.getEndPoint("/api/auth/dpiit/services/list/entities"),
            headers: {"X-Auth-Token": store.getItem("token")}
        }).done(function (data) {
            $.each(data.data, function (i, value) {
                $("select[name='entity_type']").append("<option orderflag="+value.orderFlag+" value=" + value.id + ">" + value.name + "</option>");
            });
        });
    }

    function setIndustries() {
        $.ajax({
            type: "GET",
            async: false,
            url: SIH.getEndPoint("/api/auth/dpiit/services/list/industries"),
            headers: {"X-Auth-Token": store.getItem("token")}
        }).done(function (data) {
            $.each(data.data, function (i, value) {
                $("select[name='industry_id']").append("<option value=" + value.id + ">" + value.industryName + "</option>");
            });
        });
    }

    function setIndustrySectors(industryId) {
        $("select[name='section']").empty();
        $.ajax({
            type: "GET",
            async: false,
            url: SIH.getEndPoint("/api/auth/dpiit/services/list/industrysectors/" + industryId),
            headers: {"X-Auth-Token": store.getItem("token")}
        }).done(function (data) {
            $.each(data.data, function (i, value) {
                $("select[name='section']").append("<option value=" + value.id + ">" + value.sectionName + "</option>");
            });
        });
    }

    function setCategories() {
        $.ajax({
            type: "GET",
            async: false,
            url: SIH.getEndPoint("/api/auth/dpiit/services/list/services"),
            headers: {"X-Auth-Token": store.getItem("token")}
        }).done(function (data) {
            $.each(data.data, function (i, value) {
                $("select[name='categories_id']").append("<option value=" + value.id + ">" + value.serviceName + "</option>");
            });
        });
    }

    function setStates() {
        $.ajax({
            type: "GET",
            async: false,
            url: SIH.getEndPoint("/api/auth/dpiit/services/list/states"),
            headers: {"X-Auth-Token": store.getItem("token")}
        }).done(function (data) {
            $.each(data.data, function (i, value) {
                $("select[name='state_name']").append("<option value=" + value.id + ">" + value.stateName + "</option>");
            });
        });
    }

    function setDistricts(stateId) {
        $.ajax({
            type: "GET",
            async: false,
            url: SIH.getEndPoint("/api/auth/dpiit/services/list/districts/" + stateId),
            headers: {"X-Auth-Token": store.getItem("token")}
        }).done(function (data) {
            $("select[name='district_id']").children("option:not([value=''])").remove();
            $.each(data.data, function (i, value) {
                $("select[name='district_id']").append("<option value=" + value.id + ">" + value.districtName + "</option>");
                if(i==0 && value.id){
                    setSubDistricts(value.id);
                }
            });

        });
    }

    function setSubDistricts(districtId) {
        $.ajax({
            type: "GET",
            async: false,
            url: SIH.getEndPoint("/api/auth/dpiit/services/list/subdistricts/" + districtId),
            headers: {"X-Auth-Token": store.getItem("token")}
        }).done(function (data) {
            $("select[name='subdistrict_id']").children("option:not([value=''])").remove();
            $.each(data.data, function (i, value) {
                $("select[name='subdistrict_id']").append("<option value=" + value.id + ">" + value.subDistrictName + "</option>");
            });
        });
    }

    function uploadDpiitFiles(file, docType, doValidate) {
        if (doValidate) {
            if (file && !validateDpiitFiles(file)) {
                $('#modal-loader').modal("hide");
                return false;
            }
        }
        if (file) {
            var data = new FormData();
            data.append("file", file);
            data.append("documentType", docType);
            //$('#modal-loader').modal("show");
            var responseData = $.ajax({
                url: $('.notification-container').attr('admin-service-base-url')+"/s3/upload/document",
                type: 'POST',
                data: data,
                cache: false,
                async: false,
                contentType: false,
                processData: false,
                success: function (data) {
                   // $('#modal-loader').modal("hide");
                    return data.data;
                }, error: function (data) {
                    alert("Unable to Upload File: " + file.name);
                }
            });
            return responseData;
        }
    }
    $(".recognition-self-certification").on('change', "input[type=file][name=incorporation_certificate]", function (event) {
        var formats = ["image/jpeg", "image/png", "application/pdf"];
        checkFileUploadReturn(formats, this, 5150000);
        return false;
    });

    $(document).on('keyup', 'input#din-dpin', function() {
        var attrVal = $(this).val();
        var regex = new RegExp(/^[0-9]{8}$/);
        if (!regex.test(attrVal)) {
            $(this).closest("td").addClass("has-error").find("span.help-block").first().html("Please add the 8 digit DIN/DPIN number");
        } else {
            $(this).closest("td").removeClass("has-error").find("span.help-block").first().html("");
        }
    })

    /*$(".fileuploadMultipurpose").on('change', "input[type=file]", function (event) {
        var formats = ["image/jpeg", "image/png", "application/pdf"];
        checkFileUpload(formats, this, 5150000);
        return false;
    });*/

    /*$("#moreupload .upload-row").on('change', ".fileUploadField input[type=file]", function (event) {
        event.preventDefault();
        var formats = ["application/pdf", "image/jpeg", "image/png"];
        checkFileUpload(formats, this, 5150000);
        return false;
    });*/

    function validateDpiitFiles(file) {
        var allowedExtensionsForFiles = {
            "image/png": "PNG",
            "image/jpeg": "JPEG",
            "image/jpg": "JPG",
            "application/pdf": "PDF"
        }
        /*["image/png", "image/jpeg", "image/jpg", "application/pdf", "application/vnd.ms-excel",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document", "application/msword",
        "application/vnd.openxmlformats-officedocument.presentationml.presentation", "application/vnd.ms-powerpoint"];*/
        var maxImageSizeInBytes = 1048576 * 5;
        if (!allowedExtensionsForFiles[file.type]) {
            bootbox.alert("Supported Formats for file uploads are: " + Object.values(allowedExtensionsForFiles).join(", "));
            return false;
        }
        if (file.size > maxImageSizeInBytes) {
            bootbox.alert("Maximum file size allowed is 5 MB ");
            return false;
        }
        return true;
    }

    function disableRecognitionForm() {
        $('.startupRecognition .accordion-section-content').addClass('open').show();
        $('.startupRecognition input[type=text],.startupRecognition input[type=email],.startupRecognition select.form-control,.startupRecognition input[type=number],.startupRecognition input[type=radio],.startupRecognition input[type=file], .startupRecognition textarea').attr("disabled", "disabled");
        $('.startupRecognition input[type=button]').hide();
        $('.innovative_product-reset, .info-required-reset').hide();
        setTimeout(function(){ $('#modal-loader').modal('hide'); }, 10);
    }

    function showErrorMessage(closestElement, data) {
        closestElement.closest(".form-group").addClass("has-error record-error").find(".help-block").html(data.message);
    }
    $(document).ready(function () {
        var authToken = store.getItem("token");
        if (authToken) {
            setStates();
            setEntities();
            setIndustries();
            setCategories();
            checkCinAvailabilty();
        }

        function setEntities() {
            $.ajax({
                type: "GET",
                async: false,
                url: SIH.getEndPoint("/api/auth/dpiit/services/list/entities"),
                headers: {"X-Auth-Token": store.getItem("token")}
            }).done(function (data) {
                $.each(data.data, function (i, value) {
                    $("select[name='entity_type']").append("<option orderflag="+value.orderFlag+" value=" + value.id + ">" + value.name + "</option>");
                });
            });
        }
        $('input[name=upload_funded_or_bootstrapped_file]').closest('.fileuploadMultipurpose.baseformfield').addClass('display-n');
        $upload_award_recognization_entity.parents(".fileuploadMultipurpose").addClass("display-n");
        $('.award_recognization_entity_name').addClass('display-n');
        $("input[name='saveCertificate']").attr("disabled", "disabled");
        // $("input[name='SaveEntity']").attr("disabled", "disabled");
        $submitRecognitionForm.attr("disabled", "disabled");

        //section1
        $("input[name=SaveEntity]").on("click", function () {
            checkEntityDetails($(this), true);
        });
        //section2
        $("input[name=saveFullAddress]").on("click", function () {
            checkFullAddress($(this), true);
        });
        //section3
        $("input[name=saveAuthorizedReprezentatives]").on("click", function () {
            checkAuthorizedRepresentatives($(this), true);
        });
        //section4
        $("input[name=saveDirectorDetails]").on("click", function () {
            checkDirectorInfo($(this), true);
        });
        //section5
        $("input[name=saveRequiredInfo]").on("click", function () {
            checkRequiredInfo($(this), true);
        });
        //section6
        $("input[name=saveStartupActivity]").on("click", function () {
            checkStartActivity($(this), true);
        });
        //section7
        $("input[name=saveCertificate]").on("click", function () {
            checkSaveCertificate($(this), true);
        });

        $("#add-file-field").on("click", function () {
            addMoreUploads();
        });

        $submitRecognitionForm.on("click", function () {
            submitCallback();
        });
    });
    function checkCinAvailabilty() {
        $.ajax({
            type: "GET",
            async: false,
            url: SIH.getEndPoint("/api/auth/user/cin"),
            headers: {"X-Auth-Token": store.getItem("token")}
        }).success(function (data) {
            if (data && data.cin) {
                if(data.reg_id) {
                    isDraftedApplication = true;
                    $incorp_number.val(data.cin).trigger("change").attr("disabled", "disabled");;
                }else{
                    setUserDetails(userPData);
                }
            }
            else {
                setUserDetails(userPData);
            }
        }).error(function () {
            setTimeout(function(){ $('#modal-loader').modal('hide'); }, 10);
            setTimeout(function(){ $(".recognition-form-error-message").modal('show'); }, 10);
        });
    }
    $(document).on("change", "select[name='entity_type']", function () {
        if ($('input[name=isNameChange]').is(":checked")) {
            $('.optional-certify').find('input[name=isNameChange]').trigger("click");
        }
        if ($(this).val() === "5f48ce5f2a9bb065cdfa185d") {
            $('.recognition-partner-detail').find('.removable-field').hide();
            $('.recognition-self-certification input[name=isCinChange]').closest('.group-parent').hide();
        } else {
            $('.recognition-partner-detail').find('.removable-field').show();
            $('.recognition-self-certification input[name=isCinChange]').closest('.group-parent').show();
        }
        var cinTypes = $incorp_number.val().substring(12, 15);
        if (cinTypes) {
            $incorp_number.trigger("change");
        }
    })
    // $nature_entity.on("change", function () {
    //     var cinTypes = $incorp_number.val().substring(12, 15);
    //     if (cinTypes) {
    //         $incorp_number.trigger("change");
    //     }
    // });

    $incorp_number.on('paste drop', function () {
        return false;
    })
    $incorp_number.on('keydown', function (evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode === 32 || charCode === 13) {
            return false;
        }
    })

    $incorp_number.on("change", function () {
        $(this).val($(this).val().trim());
        var $this = this;
        var isValid = validateCinWithNOE($this);
        if(isDraftedApplication){
            isValid = true;
        }
        if(isValid) {
            setTimeout(function(){ $('#modal-loader').modal('show'); }, 10);
            $.ajax({
                type: "POST",
                contentType: "application/json",
                dataType: "json",
                data: JSON.stringify({"cin": $(this).val()}),
                headers: {"X-Auth-Token": store.getItem("token")},
                url: SIH.getEndPoint("/api/auth/user/cinRecognitionCheck"),
                success: function (data) {
                    //cin already exists in our records eg. U70102UP2015PTC068532
                    if (data.status === false) {
                        showErrorMessage($incorp_number, data);
                        //disableRecognitionForm();
                    }
                    //entered cin is invalid eg. U70102UP2015PTC968539
                    else if (data.status === false && data.message === "Invalid cin") {
                        showErrorMessage($incorp_number, data)
                    }
                    //entered cin is valid and not registered eg. U74900DL2015NPL2823702
                    else if (data.status === true && data.message === "Valid Cin" || data.message === "Valid cin") {
                        prepopulateMCADetails(data);
                    }
                    //mock API
                    else if (data.status === true && data.message === "Invalid Cin") {
                        showErrorMessage($incorp_number, data)
                        // prepopulateMCADetails(data);
                    }
                    //cin already registered eg. U74900DL2015NPL280702
                    else if (data.status === true && data.message === "Request processed successfully.") {
                        retrieveRecognitionFormStatus(data.data);
                    }
                    setTimeout(function(){ $('#modal-loader').modal('hide'); }, 10);
                },
                error: function () {
                    $($this).parents(".form-group").addClass("has-error").find(".help-block").html("We are facing problems fetching your CIN details. Please try after some time.");
                    setTimeout(function(){ $('#modal-loader').modal('hide'); }, 10);
                }
            });
        }
    });

    function validateCinWithNOE($target) {
        var cinType = $($target).val().substring(12, 15);
        var isValid = false;
        var $nature_entityFlag = $("select[name='entity_type'] option:selected").val();
        if(cinType === "FTC" || cinType === "PLC") {
            let msg =
                cinType === "FTC" ?
                "The above CIN implies a subsidiary of a foreign entity (FTC), which is not eligible for recognition" :
                "The CIN provided is not eligible for DPIIT Recognition. For further information,you may contact <a href='mailto:dipp-startups@nic.in'>dipp-startups[at]nic[dot]in</a>";
            $($target).closest(".form-group").addClass("has-error");
            $($target).closest(".form-group").find('.help-block').removeClass("hidden");
            $($target).closest(".form-group").find('.help-block').html(msg);
        }else{
            if ($nature_entityFlag === "5f48ce5f2a9bb065cdfa185b") {
                if (cinType === "PTC" || cinType === "NPL" || cinType === "OPC") {
                    isValid = true;
                } else {
                    $($target).closest(".form-group").addClass("has-error");
                    $($target).closest(".form-group").find('.help-block')
                        .html("The CIN provided does not belong to the selected nature of entity.");
                    $($target).closest(".form-group").find('.help-block').removeClass("hidden");
                    $("form.persona-profile-form input[name=legalName]").val("");
                }
            } else if ($nature_entityFlag === "5f48ce5f2a9bb065cdfa185c") {
                if (cinType != "FTC" && cinType != "PLC" && cinType != "PTC" && cinType != "OPC" && cinType != "NPL") {
                    isValid = true;
                } else {
                    $($target).closest(".form-group").addClass("has-error");
                    $($target).closest(".form-group").find('.help-block')
                        .html("The CIN provided does not belong to the selected nature of entity.");
                    $($target).closest(".form-group").find('.help-block').removeClass("hidden");
                    $("form.persona-profile-form input[name=legalName]").val("");
                }
            }
        }
        return isValid;
    }

    $industry_id.on("change", function (event, data) {
        var industry_id = $("select[name=industry_id]").val();
        setIndustrySectors(industry_id);
    });
    $("select[name='state_name']").on("change", function (event, data) {
        var state_id = $("select[name=state_name]").val();
        $("select[name='district_id']").empty();
        $("select[name='subdistrict_id']").empty();
        setDistricts(state_id);
    });

    $("select[name='district_id']").on("change", function (event, data) {
        var district_id = $("select[name=district_id]").val();
        setSubDistricts(district_id);
    });

    $("#no_dir").on("change", function () {
        var directorCount = parseInt($(this).val());
        var $tableRows = $("#dataTable tbody tr");
        var directorLength = $tableRows.length;
        if (directorCount > directorLength) {
            var td = $(".tableContent").find("td");
            for (var i = directorLength + 1; i <= directorCount; i++) {
                addDirectorTable(td, i);
            }
        } else {
            $tableRows.slice(directorCount).remove();
        }
    });

    $("#moreupload").on("change", ".selectDoc", function (e) {
        showHideOptions($(this));
    });
    $("input[name='ipr_type']").on("change", function () {
        if ($(this).val() === "1") {
            $(".regiFormSection").removeClass("display-n");
        } else {
            $(".regiFormSection").addClass("display-n");
        }
    });

    $("input[name='patent_type']").on("change, click", function () {
        $("input[name='patent_type']").parents("td").removeClass("has-error");
        if ($("input[name='patent_type']:checked").length > 0) {
            $("input[name='patent_application_no']").parent().removeClass("display-n");
        }
    });

    $("input[name='trademark_type']").on("change, click", function () {
        $("input[name='trademark_type']").parents("td").removeClass("has-error");
        if ($("input[name='trademark_type']:checked").length > 0) {
            $("input[name='trademark_application_no']").parent().removeClass("display-n");
        }
    });

    $("input[name='copyright_type']").on("click", function () {
        $("input[name='copyright_type']").parents("td").removeClass("has-error");
        if ($("input[name='copyright_type']:checked").length > 0) {
            $("input[name='copyright_application_no']").parent().removeClass("display-n");
        }
    });

    $("input[name='design_type']").on("change, click", function () {
        $("input[name='design_type']").parents("td").removeClass("has-error");
        if ($("input[name='design_type']:checked").length > 0) {
            $("input[name='design_application_no']").parent().removeClass("display-n");
        }
    });

    $("input[name='plant_variety_type']").on("click", function () {
        $("input[name='plant_variety_type']").parents("td").removeClass("has-error");
        if ($("input[name='plant_variety_type']:checked").length > 0) {
            $("input[name='plant_variety_application_no']").parent().removeClass("display-n");
        }
    });
    $("div.innovative_product-reset a").on("click", function () {
        $('.innovative_product_service_table').find('.radioInput').prop('checked', false);
    });
    $("input[name='innovative_product_service_type']").on("change", function () {
        if ($('input[name=innovative_product_service_type]:checked').val() === "1") {
            $(".innovative_product_service_table, #emp_note").removeClass("display-n");
            $('span.info-required-error').text("").removeClass("has-error scroll-error");
        } else {
            if ($('input[name=emp_gen_or_wel_create]:checked').val() === "2") {
                $(".innovative_product_service_table, #emp_note").addClass("display-n");
            }
            $(".innovative_product_service_table").addClass("display-n");
        }
    });
    $("input[name='emp_gen_or_wel_create']").on("change", function () {
        if ($('input[name=emp_gen_or_wel_create]:checked').val() === "1") {
            $(".business_model_detail #emp_gen_or_wel_create_emp_welth,  #emp_note").removeClass("display-n");
            $('span.info-required-error').text("").removeClass("has-error scroll-error");
        } else {
            if ($('input[name=innovative_product_service_type]:checked').val() === "2") {
                $(" #emp_note").addClass("display-n");
            }
            $(".business_model_detail #emp_gen_or_wel_create_emp_welth").addClass("display-n");
        }
    });
    $funded_or_bootstrapped.on("change", function () {
        if ($(this).val() == "1") {
            $funded_or_bootstrapped_file.parents(".fileuploadMultipurpose").removeClass("display-n");
        } else {
            $funded_or_bootstrapped_file.parents(".fileuploadMultipurpose").addClass("display-n");
        }
    });
    $awards_or_recognition.on("change", function () {
        if ($(this).val() == "1" ) {
            selectedValue = "1";
            $upload_award_recognization_entity.parents(".fileuploadMultipurpose").removeClass("display-n");
            $('.award_recognization_entity_name').removeClass("display-n");
        } else {
            selectedValue = "2";
            $upload_award_recognization_entity.parents(".fileuploadMultipurpose").addClass("display-n");
            $('.award_recognization_entity_name').addClass("display-n");
            $('textarea[name=award_recognization_entity_name]').val("");
            $("input[name=upload_award_recognization_entity]").val(null);
            $upload_award_recognization_entity.parents(".form-group").find('a').html("");
        }
    });
    // $("input[name='subsidiary-certify']").on("change", function () {
    //     if ($("input[name='subsidiary-certify']:checked").length > 0) {
    //         $("input[name='SaveEntity']").prop("disabled", false);
    //     } else {
    //         $("input[name='SaveEntity']").prop("disabled", true);
    //     }
    // });
    $("input[name='terms']").on("change", function () {
        var authToken = store.getItem("token");
        if (authToken && $("input[name='terms']:checked").length > 0) {
            $submitRecognitionForm.removeAttr("disabled");
        } else {
            $submitRecognitionForm.attr("disabled", "disabled");
        }
    });

    $("input[name='certify']").on("change", function () {
        validateMandatorySelfCertify();
    });

    $("input[name='isMerger']").on("change", function () {
        validateMandatorySelfCertify();
        if ($(this).is(":checked")) {
            if ($("input[name='isMerger']:checked").val() === "yes") {
                $(this).closest('.group-parent').find('.upload-group').slideDown();
            } else {
                $(this).closest('.group-parent').find('.upload-group').removeClass('has-errors has-error').slideUp();
                $(this).closest('.group-parent').find('.upload-group input[type=file]').siblings(".help-block").html("");
            }
        }
    });

    $(".radio-mandatory-certify, .optional-certify").on('change', "input[type=file]", function () {
        const formats = ["image/jpeg", "image/png", "application/pdf"];
        if (!checkFileUploadReturn(formats, this, 5150000, true)) {
            $(this).closest('.form-group').addClass('has-errors'); // using custom error class instead of bootstrap's
        } else {
            $(this).closest('.form-group').removeClass('has-errors');
        }
        return false;
    });
    $(".recognition-self-certification").on('change', "input[name=authorization_letter]", function () {
        const formats = ["image/jpeg", "image/png", "application/pdf"];
        if (!checkFileUploadReturn(formats, this, 5150000, true)) {
            $(this).closest('.form-group').addClass('has-errors'); // using custom error class instead of bootstrap's
        } else {
            $(this).closest('.form-group').removeClass('has-errors');
        }
        return false;
    });

    $(".optional-certify input[type='checkbox']").on("change", function (e) {
        if ($(this).is(":checked")){
            if ($(this).attr('name') === "isNameChange") {
                var entityType = $nature_entity.val();
                if (!entityType || entityType === "") {
                    alert("Please choose the relevant Nature of Entity from the Entity Details section first");
                    $(this).prop('checked', false);
                    return false;
                } else{
                    if (entityType === "5f48ce5f2a9bb065cdfa185d")
                        $(this).closest('.group-parent').find('.pan-group').slideDown();
                    else
                        $(this).closest('.group-parent').find('.upload-group').slideDown();
                }
            } else
                $(this).closest('.group-parent').find('.upload-group').slideDown();
        } else {
            $(this).closest('.group-parent').find('.upload-group, .pan-group').removeClass('has-errors has-error').slideUp();
            $(this).closest('.group-parent').find('.upload-group input[type=file], .pan-group input[type=file]').siblings(".help-block").html("");
        }
    })

    function validateMandatorySelfCertify() {
        var mandatoryCertified = $("input[name='certify']").is(":checked");
        var radioCertified = $("input[name='isMerger']").is(":checked");
        if (mandatoryCertified && radioCertified)
            $("input[name='saveCertificate']").prop("disabled", false);
        else
            $("input[name='saveCertificate']").prop("disabled", true);
    }

    function saveDpiitFormData(formData, recognitionType, status) {
        formData["incorporationNumber"] = $("input[name='incorp_number']").val();
        if(formData["incorporationNumber"] == null || formData["incorporationNumber"] == undefined){
            $("input[name=incorp_number]").parents(".accordion-section").find(".accordion-section-title").trigger("click");
            $("input[name=incorp_number]").focus();
            setTimeout(function(){ $('#modal-loader').modal('hide'); }, 10);
            bootbox.alert("Please fill section 1 - Entity Details");
        } else{
            setTimeout(function () {
                setTimeout(function(){ $('#modal-loader').modal('show'); }, 10);
            }, 10);
            formData["recognitionDetailType"] = recognitionType;
            formData["status"] = status;
            if(status==="SUBMIT"){
                $submitRecognitionForm.attr("disabled", "disabled");
            }
            var response = $.ajax({
                type: "POST",
                url: SIH.getEndPoint("/api/auth/dpiit/services/application/save"),
                data: JSON.stringify(formData),
                dataType: "json",
                contentType: "application/json",
                async: false,
                headers: {"X-Auth-Token": store.getItem("token")},
                success: function (data) {
                    setTimeout(function () {
                        setTimeout(function(){ $('#modal-loader').modal('hide'); }, 10);
                    }, 100);
                    if (data.status == false) {
                        $(".recognition-form-error-message").find(".modal-body").html("<div class='modal-heading'><h3>Error Message</h3></div>" + data.message);
                        $(".recognition-form-error-message").modal('show').addClass("in").css("display","block");
                    }else {
                        return data.data;
                    }
                }
            });

            return response;
        }
    }

    function submitCallback() {
        var secNo, secName;

        checkEntityDetails($("input[name=SaveEntity]"), false);
        if (!isFinalDataValid) {
            secNo = 1;
            secName = "Entity Details";
            showErrorInSection(secNo, secName);
            return;
        }
        checkFullAddress($("input[name=saveFullAddress]"), false);
        if (!isFinalDataValid) {
            secNo = 2;
            secName = "Full Address (Office)";
            showErrorInSection(secNo, secName);
            return;
        }
        checkAuthorizedRepresentatives($("input[name=saveAuthorizedReprezentatives]"), false);
        if (!isFinalDataValid) {
            secNo = 3;
            secName = "Authorized Representative Details";
            showErrorInSection(secNo, secName);
            return;
        }
        checkDirectorInfo($("input[name=saveDirectorDetails]"), false);
        if (!isFinalDataValid) {
            secNo = 4;
            secName = "Director(s) / Partner(s) Details";
            showErrorInSection(secNo, secName);
            return;
        }
        checkRequiredInfo($("input[name=saveRequiredInfo]"), false);
        if (!isFinalDataValid) {
            secNo = 5;
            secName = "Information Required";
            showErrorInSection(secNo, secName);
            return;
        }
        checkStartActivity($("input[name=saveStartupActivity]"), false);
        if (!isFinalDataValid) {
            secNo = 6;
            secName = "Startup Activities";
            showErrorInSection(secNo, secName);
            return;
        }
        checkSaveCertificate($("input[name=saveCertificate]"), false);
        if (!isFinalDataValid) {
            secNo = 7;
            secName = "Self Certification";
            showErrorInSection(secNo, secName);
            return;
        }
        if (isFinalDataValid) {
            isFinalDataValid = saveDpiitFormData(formData, "ALL", "SUBMIT");
        }
        if (isFinalDataValid.responseJSON.status) {
            setTimeout(function () {
                $(".recognition-form-submit-message").modal('show');
                $('#modal-loader').modal('hide');
            },50);
        }
    }

    function showErrorInSection(secNo, secName) {
        $(".recognition-form-error-message").find(".modal-body").html("<div class='modal-heading'><h3>Error Message</h3></div>" +
            "There are some errors in your form. Please check section " + secNo + " - " + secName);

        setTimeout(function () {
            $(".recognition-form-error-message").modal('show').addClass("in").css("display","block");
            setTimeout(function(){ $('#modal-loader').modal('hide'); }, 10);
        },100);
    }

    function unEscapeRegHtml(unsafe) {
        if(!unsafe){
            return "";
        }
        return unsafe
            .replace(/&amp;/g, "&")
            .replace(/&lt;/g, "<")
            .replace(/&gt;/g, ">")
            .replace(/&quot;/g, "\"")
            .replace(/&reg;/g, "®")
            .replace(/&lsquo;/g, "‘")
            .replace(/&rsquo;/g, "’")
            .replace(/&ndash;/g, "–")
            .replace(/&#039;/g, "'");
    }

    function showDocUploadError(responseData){
        var errorMsg = responseData.responseJSON.errors[0].errorMessage;
        bootbox.dialog({
            title: "Error",
            message: errorMsg,
            onEscape: true,
            className: 'view-all-focus-sectors tag-view'
        });
        return false;
    }

}
    var stateRecognitionCount = {};

    var firstTime = true;

    var searchFilter = {
        query: "",
        focusSector:  false,
        industries: [],
        sectors: [],
        states: [],
        cities: [],
        stages: [],
        badges: [],
        roles: ['Startup'],
        page: getParameterByName("page") ? getParameterByName("page") : -1,
        sort: {
            "orders": [
                {"field": "registeredOn", "direction": "DESC"}
            ]
        },
        dpiitRecogniseUser:false,
        internationalUser: false
    };

    var emptySearchFilter = {
        query: "",
        focusSector:  false,
        industries: [],
        sectors: [],
        states: [],
        cities: [],
        stages: [],
        badges: [],
        roles: [],
        page: 0,
        sort: {
            "orders": [
                {"field": "registeredOn", "direction": "DESC"}
            ]
        },
        dpiitRecogniseUser:false,
        internationalUser: false
    };
    var sendSearchQuery = null;

    function savedQueryFn() {
        var savedQuery = location.search.substr(1);
        if (savedQuery) {
            savedQuery = savedQuery.trim();
        }
        if (savedQuery && location.href.indexOf('code') < 0) {
            var queryParam = getUrlParameter('query');
            var pageParam = getUrlParameter('page');
            if (queryParam) {
                queryParam = queryParam.trim();
            }
            if ((queryParam != null && savedQuery.split("&").length == 1) || (pageParam && (savedQuery.split("&").length == 1 || (queryParam != null && savedQuery.split("&").length == 2)))) {
                if (queryParam) {
                    searchFilter.query = queryParam;
                    $("input#search-component").val(queryParam);
                }
            } else {
                var roleParam = getUrlParameter('roles');
                if (roleParam && roleParam.trim()) {
                    searchFilter.roles = roleParam.trim().split(' ');
                }
                if (queryParam) {
                    searchFilter.query = queryParam;
                    $("input#search-component").val(queryParam);
                }
                var industryParam = getUrlParameter('industries');
                if (industryParam && industryParam.length > 0) {
                    searchFilter.industries = industryParam.trim().split(' ');
                }
                var sectorParam = getUrlParameter('sectors');
                if (sectorParam && sectorParam.length > 0) {
                    searchFilter.sectors = sectorParam.trim().split(' ');
                }
                var stateParam = getUrlParameter('states');
                if (stateParam && stateParam.length > 0) {
                    searchFilter.states = stateParam.trim().split(' ');
                }else{
                    if(window.location.host.startsWith('goa') && !$('input#international-search').is(':checked')){
                        searchFilter.states[0] = '5ef60cc2517e7b31ea2452c6';
                    }
                }
                var stageParam = getUrlParameter('stages');
                if (stageParam && stageParam.length > 0) {
                    searchFilter.stages = stageParam.trim().split(' ');
                }
                var badgeParam = getUrlParameter('badges');
                if (badgeParam && badgeParam.length > 0) {
                    searchFilter.badges = badgeParam.trim().split(' ');
                }
                var pageParam = getUrlParameter('page');
                if (pageParam && pageParam.length > 0) {
                    searchFilter.page = pageParam;
                }
            }
        }
    }

    var init = function () {
        savedQueryFn();
        if(store.getItem("international-checkbox") === true){
            $('input#international-search').prop("checked",true);
        }
        setUserTypeList();
        // setBadgesList();
        if($('input#international-search').is(':checked')){
            searchFilter.internationalUser = true;
            $(".search-accordian .location-filter").hide();
            $(".cities-filter").hide();
            $(".dpiit-recognize").hide();
            $("input#80iac-approved-search").parents(".filter-main._80iac-approved").hide();
            $("#persona-results").html('');
            // search();
        }

        $(".industry-accordion").on('change', 'input#checkbox-focus-sector', function () {
            searchFilter.focusSector = $(this).is(":checked");
            $("#persona-results").html('');
            searchFilter.page = 0;
            search();
        });

        if (!store.getItem('token') || store.getItem('role') == 'Individual') {
            //$('.search-accordian .accordion .accordion-section:eq(0) .accordion-section-content').css('display','block');
        } else {
            $('.filter-main, .focusSector').removeClass('display-n');
            //TODO: trigger My industry checkbox if needed
        }
        if (searchFilter.page > 0) {
            var searchBack = searchFilter.page;
            searchFilter.page = -1;
            for (var i = 0; i <= searchBack; i++) {
                searchNext();
            }
        } else {
            searchFilter.page = 0;
            search(true);
        }
        if(window.location.host.startsWith('goa')){
            $('.location-filter .accordion-section-content').addClass('open').show();
        }
    };

    var createSearchQuery = function () {
        var queryParamArr = [];
        if (searchFilter.query) {
            queryParamArr.push('query=' + searchFilter.query);
        }
        var industriesStr = spaceSepartedString(searchFilter.industries);
        if (industriesStr && industriesStr.length > 0) {
            queryParamArr.push("industries=" + industriesStr);
        }
        var sectorsStr = spaceSepartedString(searchFilter.sectors);
        if (sectorsStr && sectorsStr.length > 0) {
            queryParamArr.push("sectors=" + sectorsStr);
        }
        var locationsStr = spaceSepartedString(searchFilter.states);
        if (locationsStr && locationsStr.length > 0) {
            queryParamArr.push("states=" + locationsStr);
        }
        var stagesStr = spaceSepartedString(searchFilter.stages);
        if (stagesStr && stagesStr.length > 0) {
            queryParamArr.push("stages=" + stagesStr);
        }
        var badgesStr = spaceSepartedString(searchFilter.badges);
        if (badgesStr && badgesStr.length > 0) {
            queryParamArr.push("badges=" + badgesStr);
        }
        var rolesStr = spaceSepartedString(searchFilter.roles);
        if (rolesStr && rolesStr.length > 0) {
            queryParamArr.push('roles=' + rolesStr);
        }
        queryParamArr.push('page=' + searchFilter.page);
        if(!store.getItem("token")) {
            (sihAuthToken = getUrlParameter("sih_auth_token")) && queryParamArr.push('sih_auth_token=' + sihAuthToken);
            (loginType = getUrlParameter("login_type")) && queryParamArr.push('login_type=' + loginType);
        }
        var sendQuery = '';
        if (queryParamArr.length > 0) {
            for (var i = 0; i < queryParamArr.length; i++) {
                if (i == 0) {
                    sendQuery = sendQuery + ('?' + queryParamArr[i]);
                } else {
                    sendQuery = sendQuery + ('&' + queryParamArr[i]);
                }
            }
        }
        return sendQuery;
    };

    var spaceSepartedString = function (arr) {
        var str = '';
        if (arr && arr.length > 0) {
            for (var i = 0; i < arr.length; i++) {
                if (i == arr.length - 1) {
                    str += arr[i];
                } else {
                    str += (arr[i] + ' ');
                }
            }
        }
        return str;
    };

    var updateSearchFilter = function (value, filterAttr, isAdd, replaceValue) {
        if (filterAttr != 'personalizedSearch') {
            if (isAdd) {
                if (searchFilter[filterAttr].indexOf(value) == -1) {
                    if(replaceValue){
                        searchFilter[filterAttr] = value;
                    }else{
                        searchFilter[filterAttr].push(value);
                    }
                }
            } else {
                var indexOfElement = searchFilter[filterAttr].indexOf(value);
                if (indexOfElement >= 0) {
                    searchFilter[filterAttr].splice(indexOfElement, 1);
                }
            }
        }
        searchFilter.page = 0;
    };

    var clearSearchFilter = function () {
        searchFilter.states = [];
        searchFilter.industries = [];
        searchFilter.sectors = [];
        searchFilter.roles = [];
        searchFilter.stages = [];
        searchFilter.badges = [];
        searchFilter.cities = [];
        searchFilter.page = -1;
    };

    var getSearchUrl = function () {
        if(store.getItem("token")){
            return SIH.getEndPoint('/api/auth/search/profiles');
        }else{
            return SIH.getEndPoint('/api/noauth/search/profiles');
        }
    };

    function handleSelectedFilterSpans(filterValue, filterText, addFilter, isMyIndustryComp) {
        if (addFilter) {
            if (!$("span.selected-filter[data-value='" + filterValue + "']").length) {
                if(isMyIndustryComp){
                    $("span.selected-filters").append("<span class='selected-filter myIndustryComp' data-value='" + filterValue + "'>" + filterText + "<i class='fa fa-times filterRemove' onclick='removeFilter(this);'></i></span>");
                }else{
                    $("span.selected-filters").append("<span class='selected-filter' data-value='" + filterValue + "'>" + filterText + "<i class='fa fa-times filterRemove' onclick='removeFilter(this);'></i></span>");
                }
            }
        } else {
            var $filterSpan = $(".selected-filter[data-value='" + filterValue + "']");
            if($filterSpan.hasClass("myIndustryComp")){
                $("input#checkbox-focus-sector").prop("checked", false);
                searchFilter.focusSector = false;
            }
            $filterSpan.remove();
        }
        if($("span.selected-filters .selected-filter").length > 0){
            $("span.selected-filter.clear-all").removeClass("hidden");
            $(".tag-filter-block.filter-container button.hidden").removeClass("hidden");
        }else{
            $("span.selected-filter.clear-all").addClass("hidden");
            $(".tag-filter-block.filter-container button.hidden").addClass("hidden");
        }
    }

    var renderSearchData = function(data, setFilter) {
        var url = getSearchUrl();
        $.ajax({
            url: url,
            type: 'POST',
            dataType: 'json',
            data: JSON.stringify(emptySearchFilter),
            beforeSend: setAuthTokenHeader,
            success: function (allData) {
                handleSearchData(data,setFilter,allData)
            },
            error: function (allData) {

                setTimeout(function(){$('#modal-loader').modal("hide");},200);
            }
        });
    }

    var handleSearchData = function (data, setFilters,allData) {
        //Handle data

        var resource = $("#search-result-template").html();
        var template = Handlebars.compile(resource);
        var header;
        var resultText;
        setFilters = true;
        if (data.content.length == 0) {
            if (searchFilter.page == 0) {
                var noResultResource = $("#no-search-result-template").html();
                var noResultTemplate = Handlebars.compile(noResultResource);
                $('.filter-icon , .filter .search-filters-section, .persona-sector thead').css('display', 'none');
                $('#persona-results').html(noResultTemplate());
                $('#search-result-pagination-div').html("");
                header = "";
                $('#loadMore, #loadMoreNew').hide();
            }
        } else {
            setFilters = true;
            $('#persona-results div.page404').hide();
            var queryText = $('.form-control.search').val();
            resultText = $('.search-result-div').attr('result-text');
            if (queryText && resultText) {
                header = queryText + " " + resultText;
            } else {
                header = "";
            }
            // $('.no-search-result').html("");
            $("#persona-results").append(template(data));
            $('.rating').each(function () {
                var ratingEle = "#star" + $(this).attr('data-value');
                $(this).children(ratingEle).prop('checked', true);
            });
        }


        function setFocusSectorFilters(industryFacets) {
            $.each(industryFacets, function (index, facetObj) {
                /*var isMyIndustry = false;
                if(store.getItem("role") === "Startup" && facetObj.value === store.getItem("focusAreas")){
                    isMyIndustry = true;
                }else if(store.getItem("role") != "Startup" && store.getItem("focusAreas").includes(facetObj.value)){
                    isMyIndustry = true;
                }*/
                handleSelectedFilterSpans(facetObj.value, facetObj.field.value, true, true);

                $("input[value='"+facetObj.value+"']").prop("checked", true);
            });
        }

        var filterListResource = $("#filter-list-template").html();
        var filterTemplate = Handlebars.compile(filterListResource);

        //Reset filters only on page-load OR international-change
        if(setFilters){

            if (!store.getItem('token') || store.getItem('role') == 'Individual') {
                $('.filter .search-filters-section').not('.personalizedSearch').show();
            } else {
                $('.filter .search-filters-section').show();
            }
            $("#industry-filter-container").html(filterTemplate(allData.allFacets['0'].content));
            $("#location-filter-container").html(filterTemplate(allData.allFacets['3'].content));

            var userResource = $("#user-list-template").html();
            var userTemplate = Handlebars.compile(userResource);
            $("#user-filter-container").html(userTemplate(allData.allFacets['5'].content));
            var selectedRole = searchFilter.roles[0] ? searchFilter.roles[0] : "Startup";
            //setSearchRole($(".searchRoleLink[data-value='" + selectedRole + "']"), false);
            var stageContent = allData.allFacets['6'].content;
            if (stageContent && stageContent.length > 0) {
                $("#stage-filter-container").html(userTemplate(stageSorting(stageContent)));
            } else {
                $('#stage-filter-container').parent().hide();
            }
            //handle mobile filter
            if ($(window).width() < 767) {
                $('.filter-icon').css('display', 'block');
                $("#states").html(filterTemplate(allData.allFacets['3'].content));
                $("#industries").html(filterTemplate(allData.allFacets['0'].content));
                $("#roles").html(userTemplate(allData.allFacets['5'].content));
                $("#stages").html(userTemplate(stageSorting(stageContent)));
                $('.search-filter-more, .search-filter-less').css('display', 'none');
            }
        }

        //Since sectors dependent on industry: reset sectors' filter on industry change
        var sectorsData;
        if ((searchFilter.industries.length || searchFilter.focusSector) && (data.allFacets['1'].content && data.allFacets['1'].content.length)) {
            sectorsData = filterTemplate(data.allFacets['1'].content);
        } else if (setFilters){
            /*var facetContent = allData.allFacets['1'].content;
            facetContent.sort(function(a, b){
                var nameA = a.field.value.toLowerCase(), nameB = b.field.value.toLowerCase();
                if (nameA < nameB) {
                    return -1;
                } else if (nameA > nameB) {
                    return 1;
                } else {
                    return 0;
                }
            });
            console.log(facetContent);*/
            sectorsData = filterTemplate(allData.allFacets['1'].content);
        }

        $("#sector-filter-container").html(sectorsData);
        $("#sectors").html(sectorsData);

        setBadgesList();
        if(searchFilter.focusSector){
            setFocusSectorFilters(data.allFacets['0'].content);
        }else{
            $("span.myIndustryComp").remove();
        }
        /* =======< Temporary Fix - Start >=======*/
        if (
            (searchFilter.dpiitRecogniseUser === true && searchFilter.is80iacExempted !== true)
            && $('.filter-lists li.active .searchRoleLink').attr('data-value') === 'Startup'
            && searchFilter.industries.length === 0
            && searchFilter.states.length <= 1
            && searchFilter.cities.length === 0
            && searchFilter.sectors.length === 0
            && searchFilter.stages.length === 0
        ) {
            fetchRecognisedCount(true);
        } else if (
            (searchFilter.dpiitRecogniseUser === true || searchFilter.is80iacExempted === true)
            && $('.filter-lists li.active .searchRoleLink').attr('data-value') === 'Startup'
            && searchFilter.industries.length === 0
            && searchFilter.states.length === 0
            && searchFilter.cities.length === 0
            && searchFilter.sectors.length === 0
            && searchFilter.stages.length === 0
        ) {
            fetchRecognisedCount(false);
        } else {
            $(".result-count.count .total").text(data.totalElements ? data.totalElements : 0);
        }
        /* =======< Temporary Fix - Start >=======*/

        setSearchCities(searchFilter.states.length ? data.allFacets['4'].content : allData.allFacets['4'].content);

        //$('table.persona-table, table.other-table').tablesorter();
        //sorting filter list
        sortSearchFilter();
        //Pagination
        /* var pagination = {
         pages: data.totalPages,
         number: data.number + 1,
         last: data.last,
         first: data.first
         }*/
        /*  var paginationResource = $('#pagination-template').html();
         var paginationTemplate = Handlebars.compile(paginationResource);
         $('#search-result-pagination-div').html(paginationTemplate(pagination));

         if (pagination.pages > 5) {
         $('span.first-page,span.last-page').css('display','block');
         if ($('.pagination li.active').index() == 0)
         $('span.first-page').css('display', 'none');
         if ($('.pagination li.active').index() == 4)
         $('span.last-page').css('display', 'none');
         } else {
         $('span.first-page, span.last-page').css('display', 'none');
         }*/
        if (searchFilter.page < data.totalPages - 1) {
            $('#loadMore, #loadMoreNew').show();
            $('.search-load-more').show();
            $('.search-no-more').hide();
        } else {
            $('.search-load-more').hide();
            $('.search-no-more').show();
            $('#loadMore, #loadMoreNew').hide();
        }
        $(".search-heading h2").text(header);

        equalHeights();
        searchWrapHeight = $('.new-search-wrapper').outerHeight();
        $('.left-search-filter').css('min-height',searchWrapHeight);
        $('.new-eco-card.category-card').each(function(){
            marginTop = $(this).outerHeight() - ($(this).find('.top').outerHeight() + $(this).find('.down-dept').outerHeight());
            $(this).find('.down-dept').css('margin-top',marginTop);
        });

        scrollFilters();
    };
    /* =======< Temporary Fix - Start >=======*/
    function fetchRecognisedCount(isStateCount) {
        if (searchFilter.states.length === 0) {
            $.ajax({
                type: "GET",
                url: SIH.getEndPoint('/api/noauth/dpiit/services/recognition/recent-statistics?stateId=all')
            }).done(function (response) {
                if (response.status === true && response.data) {
                    if (searchFilter.is80iacExempted === true)
                        $(".result-count.count .total").text(response.data.approved80IacTillDate);
                    else if (searchFilter.dpiitRecogniseUser === true)
                        $(".result-count.count .total").text(response.data.startupTillDate);
                } else {
                    $(".result-count.count .total").text(0);
                }
            })
        } else if (searchFilter.states.length === 1) {
            if (Object.keys(stateRecognitionCount).length === 0) {
                $.ajax({
                    type: "GET",
                    url: SIH.getEndPoint('/api/noauth/statesPolicy/startup/recognized/count'),
                    async: false
                }).done(function (response) {
                    if (response.status === true && response.data) {
                        response.data.forEach(item => {
                            stateRecognitionCount[item.stateId] = item.totalCount;
                        })
                    } else {
                        $(".result-count.count .total").text(0);
                    }
                })
            }
            if (searchFilter.dpiitRecogniseUser === true)
                $(".result-count.count .total").text(stateRecognitionCount[searchFilter.states[0]]);
        }
    }
    /* =======< Temporary Fix - End >=======*/

    function getPersonaRoles() {
        var personaRoles = {};
        personaRoles["national"] = ["Startup", "Mentor", "Investor", "Accelerator","Corporate", "Incubator", "Government Body"];
        personaRoles["international"] = ["Startup", "Accelerator", "Investor","Corporate"];
        return personaRoles;
    }
    function setUserTypeList() {
        var personaRoles = getPersonaRoles();
        var nationality = $("input[name='internationalUser']:checkbox").is(":checked") ? "international" : "national";
        //var $selectionList = $("#searchRole").find(".dropdown-content");
        var $selectionSpan = $("#searchRole").find("#searchRoleName");
        $selectionSpan.text("Select");
        //$selectionList.find('li').remove();

        $.each(personaRoles[nationality], function (index, persona) {
            var li = "<li><a class='searchRoleLink' href='#' data-value='" + persona + "'>"
                + (persona === "Government Body" ? "Government Bodies" : persona +"s") + "<span class='result-count'> (<span class='total'>0</span>)</span></a></li>";
            //$selectionList.append(li);
            $('.filter-lists ul').append(li);
        });

        if(searchFilter.roles.length){
            if(searchFilter.roles[0]){

                $(".searchRoleLink[data-value='"
                    + (searchFilter.roles[0] === "GovernmentBody" ? "Government Body" : searchFilter.roles[0])
                    + "']").parent().addClass('active');
                $(".searchRoleLink[data-value='"
                    + (searchFilter.roles[0] === "GovernmentBody" ? "Government Body" : searchFilter.roles[0])
                    + "']").find('.result-count').addClass('count')
            }
            //$selectionSpan.text(searchFilter.roles[0] === "GovernmentBody" ? "Government Bodies" : searchFilter.roles[0] +"s");
        }
        $(".searchRoleLink").click(function () {
            $(".filter-lists ul li").removeClass('active');
            $(".filter-lists ul li .result-count.count").removeClass('count');
            $(this).parent().addClass('active');
            $(this).find('.result-count').addClass('count');
            if($(".filter-lists li.active .searchRoleLink").data("value") == "Startup") {
                if(!$('input#international-search').is(":checked")) {
                    $("input#dpiit-recognize-search").parents(".filter-main.dpiit-recognize").show();
                    $("input#80iac-approved-search").parents(".filter-main._80iac-approved").show();
                }
            } else {
                searchFilter.dpiitRecogniseUser = false;
                $('input#dpiit-recognize-search').prop("checked",false);
                $("input#dpiit-recognize-search").parents(".filter-main.dpiit-recognize").hide();
                searchFilter.is80iacExempted = false;
                $('input#80iac-approved-search').prop("checked",false);
                $("input#80iac-approved-search").parents(".filter-main._80iac-approved").hide();
            }
            setSearchRole($(this), true);
        });
    }


    function setBadgesList() {
        var data = {};
        $.ajax({
            url: SIH.getEndPoint("/api/noauth/search/badge/get"),
            data: JSON.stringify(data),
            type: 'POST',
            dataType: "json",
            contentType: "application/json",
            success: function (response) {
                if(response){
                    response.sort((badge1, badge2) => { if(badge1.title.toLowerCase() > badge2.title.toLowerCase()) return 1;
                else if(badge1.title.toLowerCase() < badge2.title.toLowerCase()) return -1; else return 0;});
                    var badgesSize = response.length;
                    var filterHtml = '<ul class="filter-container search-filters-list list-unstyled">';
                    $.each(response, function (idx, badgeObj) {
                        filterHtml+= '<li><label class="control control--checkbox">' +
                            badgeObj.title + '<input type="checkbox" value="'+badgeObj.id+'">' +
                            '<div class="control__indicator"></div>' +
                            '</label></li>';
                    });
                    filterHtml+='</ul>';

                    /*if(badgesSize > 5){
                        filterHtml+='<span class="search-filter-more" onclick="expandFilter(this)"> + ' +
                            'View more</span>' +
                            '<span class="search-filter-less display-n" onclick="contractFilter(this)"> - ' +
                            'View less</span>';
                    }*/
                    $("#badge-filter-container").html(filterHtml);
                    scrollFilters();
                }else {
                    $(".badgeFilters").hide();
                }
                if(searchFilter.badges.length){
                    $.each(searchFilter.badges, function (idx, val) {
                        $("input[type=checkbox][value='"+val+"']").prop("checked",true);
                    });

                    $("#badge-filter-container .search-filters-list").find('li').sort(function (firstElement, secondElement) {
                        var $firstElement = $(firstElement).find(':checkbox'),
                            $secondElement = $(secondElement).find(':checkbox');

                        if ($firstElement.is(':checked') && !$secondElement.is(':checked'))
                            return -1;
                        else if (!$firstElement.is(':checked') && $secondElement.is(':checked'))
                            return 1;

                        if ($(firstElement).find('label').text().trim().toLowerCase() < $(secondElement).find('label').text().trim().toLowerCase())
                            return -1;
                        else if ($(firstElement).find('label').text().trim().toLowerCase() > $(secondElement).find('label').text().trim().toLowerCase())
                            return 1;

                        return 0;
                    }).appendTo("#badge-filter-container .search-filters-list");
                    $("#badge-filter-container .search-filters-list").mCustomScrollbar('destroy');

                    $("#badge-filter-container .search-filters-list").mCustomScrollbar({
                        theme: "dark",
                        scrollButtons: {
                            enable: true
                        }
                    });
                }
            },
            error: function () {
                bootbox.alert("Unable to fetch badge filters.");
            }
        });
    }

    function sortFacetArray(facetArray, sortOrder) {
        if(facetArray && facetArray.length){
            if (sortOrder === "DESC"){
                return facetArray.sort(function(a, b){
                    var facetA = (a["field"]["value"]).toLowerCase();
                    var facetB = (b["field"]["value"]).toLowerCase();
                    return (facetB < facetA) ? -1 : (facetB > facetA) ? 1 : 0;
                });
            } else {
                return facetArray.sort(function(a, b){
                    var facetA = (a["field"]["value"]).toLowerCase();
                    var facetB = (b["field"]["value"]).toLowerCase();
                    return (facetA < facetB) ? -1 : (facetA > facetB) ? 1 : 0;
                });
            }
        }
    }

    function setSearchCities(citiesArray) {
        var $citySelect = $("#searchCity");
        $citySelect.empty();
        var defaultOption = new Option("Select", "");
        $(defaultOption).html("Select");
        $citySelect.append(defaultOption);
        citiesArray = sortFacetArray(citiesArray, "ASC");
        $.each(citiesArray, function (index, cityObj) {
            var option = new Option(cityObj["field"]["value"], cityObj["value"]);
            $(option).html(cityObj["field"]["value"]);
            $citySelect.append(option);
        });
        if(searchFilter.cities.length){
            $citySelect.val(searchFilter.cities);
        }
    }
    function setSearchRole($selectedHeaderRole, loadResults) {
        //$(".searchRoleLink").show();
        var role = $selectedHeaderRole.data("value");
        var roleValue = role === "Government Body" ? "GovernmentBody" : role;
        role = (role === "Government Body" ? "Government Bodies" : role+"s");
        //$selectedHeaderRole.hide();
        $("#searchRoleName").html(role);
        if (loadResults){
            updateSearchFilter([roleValue], "roles", true, true);
            $('#persona-results').html("");
            search(true);
        }
    }
    function stageSorting(stageContent) {
        var newContent = [];
        for (var i = 0; i < stageContent.length; i++) {
            switch (stageContent[i].value) {
                case 'Prototype':
                    newContent[0] = stageContent[i];
                    break;
                case 'Validation' :
                    newContent[1] = stageContent[i];
                    break;
                case 'EarlyTraction' :
                    newContent[2] = stageContent[i];
                    break;
                case 'Scaling' :
                    newContent[3] = stageContent[i];
                    break;
                default:
                    newContent[4] = stageContent[i];
            }
        }
        return newContent;
    }

    var setAuthTokenHeader = function (xhr) {
        var token = store.getItem('token');
        if (token) {
            xhr.setRequestHeader('X-Auth-Token', token);
            xhr.setRequestHeader('Content-Type', 'application/json');
        } else {
            xhr.setRequestHeader('Content-Type', 'application/json');
        }
    };

    /*
     var searchLoadPage = function (page) {
     var pageNumber = parseInt($(page).html());
     searchFilter.page = pageNumber - 1;
     search();
     }
     */

    var searchNext = function () {
        searchFilter.page = parseInt(searchFilter.page) + 1;
        search();
    };

    /*
     var searchPrevious = function (elem) {
     var currentPage = parseInt($(elem).siblings('ul').find('li.active').html());
     searchFilter.page = currentPage - 2;
     search();
     }

     var searchFirst = function () {
     searchFilter.page = 0;
     search();
     }

     var searchLast = function (pages) {
     searchFilter.page = pages - 1;
     search();
     }
     */

    var sortSearchFilter = function () {
        $('.search-filters-section .search-filters-list').each(function () {
            if ($(this).parent('div').attr("id") != 'stage-filter-container') {
                $(this).find('li').sort(function (firstElement, secondElement) {
                    var $firstElement = $(firstElement).find(':checkbox'),
                        $secondElement = $(secondElement).find(':checkbox');

                    if ($firstElement.is(':checked') && !$secondElement.is(':checked'))
                        return -1;
                    else if (!$firstElement.is(':checked') && $secondElement.is(':checked'))
                        return 1;

                    if ($(firstElement).find('label').text().trim().toLowerCase() < $(secondElement).find('label').text().trim().toLowerCase())
                        return -1;
                    else if ($(firstElement).find('label').text().trim().toLowerCase() > $(secondElement).find('label').text().trim().toLowerCase())
                        return 1;

                    return 0;
                }).appendTo(this);
            }
        })
    };

    var search = function (setFilters) {
        setTimeout(function(){$('#modal-loader').modal("show");},50);
        sendSearchQuery = createSearchQuery();
        var url = getSearchUrl();
        window.history.replaceState(window.location.pathname, "", sendSearchQuery);

        $.ajax({
            url: url,
            type: 'POST',
            dataType: 'json',
            data: JSON.stringify(searchFilter),
            beforeSend: setAuthTokenHeader,
            success: function (data) {
                //handleSearchData(data, setFilters);
                renderSearchData(data, setFilters);
                setTimeout(function(){$('#modal-loader').modal("hide");},200);

            },
            error: function (data) {

                setTimeout(function(){$('#modal-loader').modal("hide");},200);
            }
        });
    };

    /* Display filters for mobile */
    function displayFilters() {
        if (!$('.filter-menu').hasClass('display-b')) {
            $('.filters-tab-content input').each(function () {
                if ($(this).prop("checked")) {
                    $(this).addClass('checked-filters')
                }
            });
        } else {
            $('.filters-tab-content input').each(function () {
                if ($(this).hasClass("checked-filters")) {
                    $(this).prop('checked', true);
                } else {
                    $(this).prop('checked', false);
                }
            });
            $('.filters-tab-content input').removeClass("checked-filters");
        }
        $('.filter-menu').toggleClass('display-b');
    }

    $(document).ready(function () {

        var searchResultPage = $('.search-path').attr('search-result-path');
        Handlebars.registerHelper('isFilterChecked', function (filterAttr, value, fieldValue,options) {
            if (filterAttr === 'state') {
                var arr = searchFilter['states'];
            } else if (filterAttr === 'role') {
                var arr = searchFilter['roles'];
            }
            else {
                var arr = searchFilter[filterAttr];
            }
            if (arr && arr.length > 0) {
                for (var i = 0; i < arr.length; i++) {
                    if (arr[i] === value) {
                        if(filterAttr !== 'role') {
                            handleSelectedFilterSpans(value, fieldValue, true);
                        }
                        return options.fn(this);
                    }
                }
            }
            return options.inverse(this);
        });
        Handlebars.registerHelper('getStage', function (stage) {
            return stage == 'Prototype' ? "Ideation" : stage;
        });

        Handlebars.registerHelper('concat', function (role, fileName) {
            return $('.search-path').attr('image-path-api') + role + '?fileName=' + fileName;
        });

        Handlebars.registerHelper('isDisabled', function (options) {
            return options.inverse(this);
        });

        $("span#search-icon span:not(.search-icon-ams)").click(function () {
            doSearch();
        });

        $(".apply-button").click(function () {
            $('.filter-menu').toggleClass('display-b');
            $('.filters-tab-content input').each(function () {
                if ($(this).prop("checked")) {
                    var checked = true;
                } else {
                    checked = false;
                }
                updateSearchFilter($(this).val(), $(this).parents('div.tab-pane').attr('id'), checked);
            });
            search();
        });


        $(".clear-button").click(function () {
            $(".filters-tab-content input[type='checkbox']").removeAttr('checked');
            clearSearchFilter();
        });

        $("input#search-component").keypress(function (event) {
            if (event.which == 13) {
                doSearch();
            }
        });

        function doSearch() {
            if (isForumSearch()) {
                if ($('input.search').val().trim()) {
                    if (window.location.pathname != searchResultPage) {
                        window.location = searchResultPage + '?query=' + $('input.search').val();
                    } else {
                        forumSearchQuery.page = 0;
                        getForumSearchResults();
                    }
                }
            }
            else {
                if (window.location.pathname != searchResultPage) {
                    window.location = searchResultPage + '?query=' + $('.search').val();
                } else {
                    if (searchFilter.page == -1) {
                        searchFilter.page = 0;
                    }
                    $('#persona-results').html("");
                    search();
                }
            }
        }

        $("input#search-component").keyup(function (event) {
            if (isForumSearch()) {
                forumSearchQuery.query = $("input#search-component").val();
            } else {
                searchFilter.query = $("input#search-component").val();
            }
        });

        function isForumSearch() {
            return $('.search-path').attr('search-type') == 'forum-search';
        }

        $(".search-filters-section").on('change', 'label.control--checkbox', function () {
            var checked = $(this).find('input').is(':checked');
            var value = $(this).find('input').val();
            var text = $(this).text().trim();
            var filterAttr = $(this).parents('ul').parents('.search-filters-section').data('filter');
            updateSearchFilter(value, filterAttr, checked);
            $('#persona-results').html("");
            handleSelectedFilterSpans(value, text, checked);
            search();
            $(".search-input").val("");
        });

        $(".selected-filters").on("click", "i.filterRemove", function () {
            removeFilter(this);
        });

        $("select[name='searchCity']").change(function () {
            var selectedCities = $(this).val();
            selectedCities = selectedCities === null ? [] : selectedCities;
            updateSearchFilter(selectedCities, "cities", true, true);
            $('#persona-results').html("");
            search(false);
        });

        $("ul.search-table").on('click', 'li.sort-header', function () {
            var column = $(this).attr('data-value');
            var currentSortEle = $(this);
            var span = $(this).find("span");
            if (column !== undefined) {
                if ($(currentSortEle).hasClass("active")) {
                    currentSortEle.removeClass("active");
                    $(span).removeClass('desc-sort asc-sort').addClass('no-sort');
                } else {
                    $('.search-table li.active').each(function () {
                        $(this).removeClass('active');
                        $(this).find('span').removeClass('asc-sort desc-sort').addClass('no-sort');
                    });
                    currentSortEle.addClass("active");
                    span.addClass(span.data('order'));
                }
                searchFilter.sort.orders.splice(0, searchFilter.sort.orders.length);
                if (typeof span !== typeof undefined && span !== false) {
                    var sortClass = $(span).attr('class').split(' ');
                    var columnArray = ['registeredOn','title', 'role', 'city', 'rating'];
                    var sortingArray = ['asc-sort', 'desc-sort' , 'no-sort'];
                    if (columnArray.indexOf(column) !== -1) {
                        $.grep(sortClass, function (element) {
                            if ($.inArray(element, sortingArray) !== -1) {
                                switch (element) {
                                    case "asc-sort":
                                        searchFilter.sort.orders.push({"field": column, "direction": "ASC"});
                                        break;
                                    case "desc-sort":
                                        searchFilter.sort.orders.push({"field": column, "direction": "DESC"});
                                        break;
                                    case "no-sort":
                                        if (searchFilter.sort.orders.length > 0) {
                                            $.each(searchFilter.sort.orders, function (index, item) {
                                                if (item && item.field == column) {
                                                    searchFilter.sort.orders.splice(index, 1);
                                                }
                                            });
                                        }
                                        break;
                                }
                            }
                        });
                    }
                    searchFilter.page = 0;
                    $('#persona-results').html("");
                    search();
                }
            }
        });

        $("select#searchSort").change(function () {
            var column = $(this).val();
            if (column) {
                searchFilter.sort.orders.splice(0, searchFilter.sort.orders.length);
                var columnArray = ['rating', 'registeredOn', 'title'];
                switch (column) {
                    case "rating":
                        searchFilter.sort.orders.push({"field": column, "direction": "DESC"});
                        break;
                    case "registeredOn":
                        searchFilter.sort.orders.push({"field": column, "direction": "DESC"});
                        break;
                    case "title":
                        searchFilter.sort.orders.push({"field": column, "direction": "ASC"});
                        break;
                    case "name-asc":
                        searchFilter.sort.orders.push({"field": "name", "direction": "ASC"});
                        break;
                    case "name-desc":
                        searchFilter.sort.orders.push({"field": "name", "direction": "DESC"});
                        break;
                    case "no-sort":
                        if (searchFilter.sort.orders.length > 0) {
                            searchFilter.sort.orders.splice(0, searchFilter.sort.orders.length);
                        }
                        break;
                }
                searchFilter.page = 0;
                $('#persona-results').html("");
                search();
            }
        });

        $(".filter-main").on("change", 'input#international-search' , function(){
            if($(this).is(":checked")) {
                $(".search-accordian .location-filter").hide();
                $(".cities-filter").hide();
                $(".dpiit-recognize").hide();
                $("input#80iac-approved-search").parents(".filter-main._80iac-approved").hide();
                store.setItem("international-checkbox",true);
            }
            else{
                $(".search-accordian .location-filter").show();
                $(".cities-filter").show();
                $(".dpiit-recognize").show();
                $("input#80iac-approved-search").parents(".filter-main._80iac-approved").show();
                store.setItem("international-checkbox",false);
            }
            searchFilter.internationalUser = $('input#international-search').is(':checked');
            $("#persona-results").html('');
            searchFilter.page = 0;
            searchFilter.states=[];
            var queryParam = createSearchQuery();
            window.location.href = window.location.origin + window.location.pathname + queryParam;
            // savedQueryFn();
            // search();
        });
        $(".filter-main").on("change", 'input#dpiit-recognize-search' , function(){
            searchFilter.dpiitRecogniseUser = $('input#dpiit-recognize-search').is(':checked');
            $("#persona-results").html('');
            searchFilter.page = 0;
            search();
        });

        $(".filter-main").on("change", 'input#80iac-approved-search' , function(){
            searchFilter.is80iacExempted = $('input#80iac-approved-search').is(':checked');
            $("#persona-results").html('');
            searchFilter.page = 0;
            search();
        });

        try {
            var tabText = $(".searchRoleLink[data-value='Startup']").html();
            var actualText = tabText;
            var replacedTabText = tabText.substring(0, tabText.indexOf("<")).replace("Startups","Entrepreneur");
            replacedTabText = replacedTabText + tabText.substring(tabText.indexOf("<"), tabText.lastIndexOf(">"));
            if($('input#international-search').is(":checked")) {
                $(".searchRoleLink[data-value='Startup']").html(replacedTabText);
            } else {
                $(".searchRoleLink[data-value='Startup']").html(actualText);
            }
            if($(".filter-lists li.active .searchRoleLink").data("value") == "Startup") {
                if(!$('input#international-search').is(":checked")) {
                    $("input#dpiit-recognize-search").parents(".filter-main.dpiit-recognize").show();
                    $("input#80iac-approved-search").parents(".filter-main._80iac-approved").show();
                }
            } else {
                $("input#dpiit-recognize-search").parents(".filter-main.dpiit-recognize").hide();
                $("input#80iac-approved-search").parents(".filter-main._80iac-approved").hide();
            }
        } catch (e) {
            console.log(e);
        }
    });

    function more_less() {
        $('ul.filter-container').each(function (index, value) {
            if ($(this).find('li').length < 5) {
                $(this).siblings('.search-filter-more').css('display', 'none');
            } else {
                $(this).siblings('.search-filter-more ').css('display', 'block');
            }
        });
    }
    $(window).load(function(){

        searchWrapHeight = $('.new-search-wrapper').outerHeight();
        $('.left-search-filter').css('min-height',searchWrapHeight);
        $('.new-eco-card.category-card').each(function(){
            marginTop = $(this).outerHeight() - ($(this).find('.top').outerHeight() + $(this).find('.down-dept').outerHeight());
            $(this).find('.down-dept').css('margin-top',marginTop);
        });
    });

    function removeFilter(obj, clearAll) {
        if(clearAll){
            $("span.selected-filters").empty();
            $(".scheme-filters-section, .search-filters-section, .industry-accordion," +
                ".international-search").find("input:checkbox").prop("checked", false);
            $("input[name=80iacApproved]").prop("checked", false);
            $("input[name=dpiitRecognize]").prop("checked", false);
            searchFilter["industries"] = [];
            searchFilter["sectors"] = [];
            searchFilter["states"] = [];
            searchFilter["stages"] = [];
            searchFilter["cities"] = [];
            searchFilter["badges"] = [];
            searchFilter.focusSector = false;
            searchFilter.internationalUser = false;
            searchFilter.dpiitRecogniseUser = false;
            search(true);
            $("span.selected-filter.clear-all").addClass("hidden");
            $(".search-input").val("");
        }else{
            var $filter = $(obj).closest("span.selected-filter");
            var filterValue = $filter.data("value");
            // $filter.remove();
            $("input[value='"+filterValue+"']").parents(".accordion-section-content").find(".search-input").val("");
            $("input[value='"+filterValue+"']").prop("checked", false).trigger("change");
            search(true);
        }
    }

    /*
    * filterSectionList() is also utilized in online-course-filter.html
    * */
    function filterSectionList(event) {
        var input = event.target, filter, divUl, li, label, i, txtValue;
        filter = input.value.toUpperCase();
        divUl = $(input).siblings('.search-filters-section').find("ul");
        li = $(divUl).find("li");
        for (i = 0; i < li.length; i++) {
            label = li[i].getElementsByTagName("label");
            if (label) {
                txtValue = $(label).find("span").text();
                if (txtValue.toUpperCase().indexOf(filter) > -1) {
                    li[i].style.display = "";
                } else {
                    li[i].style.display = "none";
                }
            }
        }
    }

   /* $(document).ready(function(){
        $( "#search-component" ).autocomplete({
            source: function( request, response ) {
                $.ajax({
                    url: SIH.getEndPoint("/api/noauth/sihUser/search-by-name/" + request.term),
                    dataType: "json",
                    success: function( data ) {
                        console.log(data);
                        response( data.data.slice(0,10) );
                    }
                });
            },
            minLength: 3,
            select: function( event, ui ) {
                filterAttr = "query";
                searchFilter[filterAttr] = ui.item.value;
                $("#persona-results").html('');
                searchFilter.page = 0;
                search();
            }
        });
    });

    */

$(document).ready(function(){
    const classExists = document.getElementsByClassName('govt-scheme').length > 0;
    if (classExists) {
        $( "#search-component" ).autocomplete({
            source: function( request, response ) {
                $.ajax({
                    url: SIH.getEndPoint("/api/noauth/sihUser/search-by-name/" + request.term),
                    dataType: "json",
                    success: function( data ) {
                        console.log(data);
                        response( data.data.slice(0,0) );
                    }
                });
            },
        });
       // console.log("class found.")
    }
    else{
        $( "#search-component" ).autocomplete({
            source: function( request, response ) {
                $.ajax({
                    url: SIH.getEndPoint("/api/noauth/sihUser/search-by-name/" + request.term),
                    dataType: "json",
                    success: function( data ) {
                        console.log(data);
                        response( data.data.slice(0,10) );
                    }
                });
            },
            minLength: 3,
            select: function( event, ui ) {
                filterAttr = "query";
                searchFilter[filterAttr] = ui.item.value;
                $("#persona-results").html('');
                searchFilter.page = 0;
                search();
            }
        });
    }
});
var floatPanel = new McFloatPanel();

/* Float Panel v2016.10.28. Copyright www.menucool.com */
function McFloatPanel() {
    var i = [], s = [], h = "className", t = "getElementsByClassName", d = "length", l = "display", C = "transition",
        m = "style", B = "height", c = "scrollTop", k = "offsetHeight", a = "fixed", e = document,
        b = document.documentElement, j = function (a, c, b) {
            if (a.addEventListener) a.addEventListener(c, b, false); else a.attachEvent && a.attachEvent("on" + c, b)
        }, o = function (c, d) {
            if (typeof getComputedStyle != "undefined") var b = getComputedStyle(c, null); else b = c.currentStyle;
            return b ? b[d] : a
        }, L = function () {
            var a = e.body;
            return Math.max(a.scrollHeight, a[k], b.clientHeight, b.scrollHeight, b[k])
        }, O = function (a, c) {
            var b = a[d];
            while (b--) if (a[b] === c) return true;
            return false
        }, g = function (b, a) {
            return O(b[h].split(" "), a)
        }, q = function (a, b) {
            if (!g(a, b)) if (!a[h]) a[h] = b; else a[h] += " " + b
        }, p = function (a, f) {
            if (a[h] && g(a, f)) {
                for (var e = "", c = a[h].split(" "), b = 0, i = c[d]; b < i; b++) if (c[b] !== f) e += c[b] + " ";
                a[h] = e.replace(/^\s+|\s+$/g, "")
            }
        }, n = function () {
            return window.pageYOffset || b[c]
        }, z = function (a) {
            return a.getBoundingClientRect().top
        }, F = function (b) {
            var c = n();
            if (c > b.oS && !g(b, a)) q(b, a); else g(b, a) && c < b.oS && p(b, a)
        }, x = function () {
            for (var a = 0; a < s[d]; a++) J(s[a])
        }, J = function (a) {
            if (a.oS) {
                a.fT && clearTimeout(a.fT);
                a.fT = setTimeout(function () {
                    if (a.aF) F(a); else y(a)
                }, 50)
            } else y(a)
        }, w = function (d, c, b) {
            p(d, a);
            c[l] = "none";
            b.position = b.top = ""
        }, y = function (c) {
            var j = z(c), f = c[k], e = c[m], d = c.pH[m], h = n();
            if (j < c.oT && h > c.oS && !g(c, a) && (window.innerHeight || b.clientHeight) > f) {
                c.tP = h + j - c.oT;
                var p = L();
                if (f > p - c.tP - f) var i = f; else i = 0;
                d[l] = "block";
                d[C] = "none";
                d[B] = f + 1 + "px";
                c.pH[k];
                d[C] = "height .3s";
                d[B] = i + "px";
                q(c, a);
                e.position = a;
                e.top = c.oT + "px";
                if (o(c, "position") != a) d[l] = "none"
            } else if (g(c, a) && (h < c.tP || h < c.oS)) {
                var s = o(c, "animation");
                if (c.oS && c.classList && s.indexOf("slide-down") != -1) {
                    var r = o(c, "animationDuration");
                    c.classList.remove(a);
                    e.animationDirection = "reverse";
                    e.animationDuration = "1000ms";
                    void c[k];
                    c.classList.add(a);
                    setTimeout(function () {
                        w(c, d, e);
                        e.animationDirection = "normal";
                        e.animationDuration = r
                    }, 300)
                } else w(c, d, e)
            }
        }, I = function () {
            var f = [], c, b;
            if (e[t]) {
                f = e[t]("float-panel");
                i = e[t]("slideanim")
            } else {
                var k = e.getElementsByTagName("*");
                c = k[d];
                while (c--) g(k[c], "float-panel") && f.push(k[c])
            }
            c = f[d];
            for (var h = 0; h < c; h++) {
                b = s[h] = f[h];
                b.oT = parseInt(b.getAttribute("data-top") || 0);
                b.oS = parseInt(b.getAttribute("data-scroll") || 0);
                if (b.oS > 20 && o(b, "position") == a) b.aF = 1;
                b.pH = e.createElement("div");
                b.pH[m].width = b.offsetWidth + "px";
                b.pH[m][l] = "none";
                b.parentNode.insertBefore(b.pH, b.nextSibling)
            }
            if (s[d]) {
                setTimeout(x, 160);
                j(window, "scroll", x)
            }
        }, f, D = 200, E = 0, r, u, H = function () {
            return window.innerWidth || b.clientWidth || e.body.clientWidth
        };

    function K() {
        if (!r) r = setInterval(function () {
            var a = e.body;
            if (a[c] < 3) a[c] = 0; else a[c] = a[c] / 1.3;
            if (b[c] < 3) b[c] = 0; else b[c] = b[c] / 1.3;
            if (!n()) {
                clearInterval(r);
                r = null
            }
        }, 14)
    }

    function A() {
        clearTimeout(u);
        if (n() > D && H() > E) {
            u = setTimeout(function () {
                p(f, "mcOut")
            }, 60);
            f[m][l] = "block"
        } else {
            q(f, "mcOut");
            u = setTimeout(function () {
                f[m][l] = "none"
            }, 500)
        }
    }

    var N = function () {
        f = e.getElementById("backtop");
        if (f) {
            var a = f.getAttribute("data-v-w");
            if (a) {
                a = a.replace(/\s/g, "").split(",");
                D = parseInt(a[0]);
                if (a[d] > 1) E = parseInt(a[1])
            }
            j(f, "click", K);
            j(window, "scroll", A);
            A()
        }
    }, v = function () {
        for (var c = n(), e = c + window.innerHeight, g = i[d], b, f, a = 0; a < g; a++) {
            b = c + z(i[a]), f = b + i[a][k];
            if (b < e) q(i[a], "slide"); else p(i[a], "slide")
        }
    }, G = function () {
        if (i[d]) {
            j(window, "scroll", v);
            v()
        }
    }, M = function () {
        I();
        N();
        G()
    };
    j(window, "load", M);
    j(document, "touchstart", function () {
    })
}
function fetchNewsfeed(source, isRssNewstemplate, noOfTopNews, newsfeedPath, showLoadMore) {
    //var limit = (showLoadMore === "true") ? "" : noOfTopNews;
    var limit = "";
    $.ajax({
        type: "GET",
        url: "/services/newsfeed/show.json" + "?limit=" + limit + "&newsfeedPath=" + newsfeedPath
    }).done(function (data) {
        if (isRssNewstemplate)
            newsfeed(source, data, noOfTopNews, newsfeedPath);
        else
            newsfeedtopListing(source, data, noOfTopNews);
    }).fail(function () {
        console.log("error");
    });
}

// for rss-newsfeed component
function newsfeed(source, data, noOfTopNews, newsfeedPath) {
    var template = Handlebars.compile(source);
    if (noOfTopNews === "3" || noOfTopNews === "4") {
        $('.rss-newsfeed .news').prepend(template(data.slice(0, noOfTopNews)));
    }
    else {
        $('.rss-newsfeed .news').prepend(template(data));
        lazyloader(6, null, null, newsfeedPath);
    }
    equalHeightsForNewsfeedCards();
    return false;
}

// for top-newsfeed component
function newsfeedtopListing(source, data, noOfTopNews) {
    var template = Handlebars.compile(source);
    $('ul.topNewsfeed').append(template(data.slice(0, noOfTopNews)));
    if(data.length > 0){
        $(".topNewsfeedSideCard").removeClass("hidden");
    }else{
        $(".topNewsfeedSideCard").addClass("hidden");
    }
    return false;
}

function fetchNewsfeedStack(source, newsRows, newsColumns, newsfeedPath, stackBackground) {
    var limit = "";
    var numberOfNewsListing = newsRows * newsColumns;
    $.ajax({
        type: "GET",
        url: "/services/newsfeed/show.json" + "?limit=" + limit + "&newsfeedPath=" + newsfeedPath
    }).done(function (data) {
        topNewsStack(source, data, newsRows, newsColumns);
    }).fail(function () {
        console.log("Error in loading news stack");
    });
}

function topNewsStack(source, data, newsRows, newsColumns) {
    var template = Handlebars.compile(source);
    var table = [], newRow;
    var dataIdx = 0;
    for (r = 0; r < newsRows; r++) {
        newRow = [];
        for (c = 0; c < newsColumns; c++) {
            newRow.push(data[dataIdx]);
            dataIdx++;
        }
        table.push(newRow);
    }
    $('.news-stack').append(template(table));
}

var forum = {
    reportAbuseId: null,
    reportType: null,
    quesId: null,
    page: 0,
    currentTabIndex: 0,
    maxLength: 300,
    textarea: $('#report-abuse-comment'),
    buttonData: null,
    adminToken: null,
    isAuthor: false,
    urlHash: window.location.hash,
    abuseId: null,
    count: 0,

};
var forumSearchQuery = {
    page: 0,
    query: "",
    sort: {}
};
var temp = {};
var emailDetails = [];
var page = 0;
var totalCount;
var liSelected;
var profileUrl;
var forumCategories;
var summmernoteRange;
var li;
var questionTitle;

var getQueryUrl = function (index) {
    if (index == 0) {
        var apiPath = "/api/common/category/questions?offset=" + forum.page
            + "&state=" + (sessionStorage.getItem("state") ? sessionStorage.getItem("state") : "")
            + "&city=" + (sessionStorage.getItem("city") ? sessionStorage.getItem("city") : "");
        var viewAll = getParam("view");
        //console.log(viewAll);
        if (isUserPublishedAndLoggedIn()) {
            apiPath = "/api/auth/forum/category/questions?offset=" + forum.page
                + "&state=" + (sessionStorage.getItem("state") ? sessionStorage.getItem("state") : "")
                + "&city=" + (sessionStorage.getItem("city") ? sessionStorage.getItem("city") : "");
            if (sessionStorage.getItem("subCategory") && !viewAll) {
                apiPath = apiPath + "&category=" + sessionStorage.getItem("subCategory");
                return SIH.getEndPoint(apiPath);
            } else if (sessionStorage.getItem("category")) {
                apiPath = apiPath + "&category=" + sessionStorage.getItem("category");
                return SIH.getEndPoint(apiPath);
            } else {
                return SIH.getEndPoint("/api/auth/forum/questions?offset=" + forum.page);
            }
        } else {
            if (sessionStorage.getItem("subCategory") && !viewAll) {
                apiPath = apiPath + "&category=" + sessionStorage.getItem("subCategory");
                return SIH.getEndPoint(apiPath);
            } else if (sessionStorage.getItem("category")) {
                apiPath = apiPath + "&category=" + sessionStorage.getItem("category");
                return SIH.getEndPoint(apiPath);
            } else {
                return SIH.getEndPoint("/api/common/questions?offset=" + forum.page);
            }
        }
    } else {
        return SIH.getEndPoint("/api/auth/forum/subscriptions?offset=" + forum.page);
    }
}

function getParam(name) {
    if (name = (new RegExp('[?&]' + encodeURIComponent(name) + '=([^&]*)')).exec(location.search))
        return decodeURIComponent(name[1]);
}

function getQueryList(replaceContent) {
    $("#modal-loader").modal("show");
    var path = getQueryUrl(forum.currentTabIndex);
    $.ajax({
        type: "GET",
        url: path,
        contentType: "application/json",
        beforeSend: setAuthTokenHeader
    }).done(function (data) {
        if (data.content.length) {
            handleQueryData(data, replaceContent);
        } else {
            showSnackbar('<i class="fa-2x fa-info-circle"></i>No more discussions are available.', "alert-info");
        }

        if (data.totalPages > 1) {
            $("button[name=loadMoreThreads]").removeClass("hidden");
        }

        $("#modal-loader").modal("hide");
    }).fail(function () {
        $('.pagination').hide();
        $("#modal-loader").modal("hide");
    });
}

function forumPagination(data) {

    var pagination = {
        pages: data.totalPages,
        number: data.number + 1,
        last: data.last,
        first: data.first
    }
    var paginationResource = $('#pagination-template').html();
    if (paginationResource) {
        var paginationTemplate = Handlebars.compile(paginationResource);
        $('#pagination-div').html(paginationTemplate(pagination));
    }

    if (pagination.pages > 5) {
        $('span.first-page,span.last-page').css('display', 'block');
        if ($('.pagination li.active').index() == 0)
            $('span.first-page').css('display', 'none');
        if ($('.pagination li.active').index() == 4)
            $('span.last-page').css('display', 'none');
    } else {
        $('span.first-page, span.last-page').css('display', 'none');
    }
}

$(document).on('click', 'button[name=loadMoreThreads]', function () {
    loadQueryPage();
})

var loadQueryPage = function (page) {
    //var pageNumber = parseInt($(page).html());
    forum.page = forum.page + 1;
    getQueryList();
    //paginationScrollTop();
}

var nextQueryPage = function (elem) {
    var currentPage = parseInt($(elem).siblings('ul').find('li.active').html());
    forum.page = currentPage;
    getQueryList();
    paginationScrollTop();
}

var previousQueryPage = function (elem) {
    var currentPage = parseInt($(elem).siblings('ul').find('li.active').html());
    forum.page = currentPage - 2;
    getQueryList();
    paginationScrollTop();
}

var forumFirst = function () {
    forum.page = 0;
    getQueryList();
    paginationScrollTop();
}

var forumLast = function (pages) {
    forum.page = pages - 1;
    getQueryList();
    paginationScrollTop();
}

function paginationScrollTop() {
    if (forum.currentTabIndex == 0) {
        $('html, body').animate({
            scrollTop: $('#all-list').offset().top - 150
        }, 500);
    }
    else {
        $('html, body').animate({
            scrollTop: $('#subscription-list').offset().top - 150
        }, 500);
    }
}

$(document).on("click", "ul.nav-tabs li.query-tab-pane", function () {
    var tabId = $(this).find('a').data('id');
    if (tabId == 'all') {
        forum.currentTabIndex = 0;
        forum.page = 0;
    } else {
        forum.currentTabIndex = 1;
        forum.page = 0;
    }
    getQueryList();
});

function submitQuery() {
    //$('#post-query-btn').attr('disabled', 'disabled');
    var path = SIH.getEndPoint("/api/auth/forum/question/ask");
    var title = $("#query-title").val();
    var description = $("#query-description").val();//replace(/<[^>]*>/g, "").trim();
    //var note = des.summernote('code').replace(/<\/?[^>]+(>|$)/g, "");
    var category = $("#category").val();
    var subCategory = $("#sub-category").val();
    var attachments = [];
    $.each($("input[name=attachment]"), function (i, v) {
        attachments.push({
            title: $(v).val(),
            fileName: $(v).data("originalname")
        });
    });
    if (validateCreateQuestionForm()) {
        var question = {
            description: description,
            title: title,
            category: category,
            subCategory: subCategory,
            attachment: attachments,
            state: store.getItem("state"),
            city: store.getItem("city"),

        };
        /*
        * Commenting below AJAX call for temporarily disabling forum question submissions (as per request)
        * */
        // $.ajax({
        //     type: "POST",
        //     url: path,
        //     data: JSON.stringify(question),
        //     contentType: "application/json",
        //     beforeSend: setAuthTokenHeader
        // }).done(function (data) {
        //     if (data) {
        //         //console.log(data);
        //         //getQueryList();
        //         $("#query-title").val('');
        //         $("#query-description").val('');
        //         $('.note-editor.note-frame').removeClass('note-has-error');
        //         $("#query-description").summernote('reset');
        //         $("#category").val('').trigger("change");
        //         $("#sub-category").val('').trigger("change");
        //         $(".ask-now-template").hide();
        //
        //         emailDetails = emailDetails.map(function (v, i, arr) {
        //             v.threadUrl = window.location.origin + window.location.pathname.split(".")[0] + "/forum-details." + data + ".html";
        //             v.thread = title;
        //             return v;
        //         });
        //
        //         sendEmail();
        //
        //         /*
        //         * Updated location.href to be compatible with forum.html as well as forum/forum-details.{id}.html
        //         */
        //         //location.href = window.location.pathname.split(".")[0] + "/forum-details." + data + ".html";
        //         location.href = window.location.pathname.split("forum")[0] + "forum" + "/forum-details." + data + ".html";
        //
        //         //getForumStats($("button[name=applyFilter]"));
        //         //getQueryList(true);
        //     }
        // });
        $('.modal-backdrop.in').remove();
    } else {
        if (description.length == 0) {
            $('.note-editor.note-frame').addClass('note-has-error');
            $("#query-description").siblings(".text-danger").removeClass("display-n");
        }
    }

    return false;
}

function validateCreateQuestionForm() {
    var valid = true;
    $(':input.question-field', "form.create-discussion-form").each(function () {

        valid = $(this).val() ? true : false;

        if (!valid) {
            if ($(this).siblings(".text-danger").length) {
                $(this).siblings(".text-danger").removeClass("display-n");
            } else if ($(this).closest('.form-group').siblings(".text-danger")) {
                $(this).closest('.form-group').siblings(".text-danger").removeClass("display-n");
            }
        }
        //return false;
    });
    return valid;
}

function handleBackspaceOnAnchor(e) {
    //var range = $("#comment_box").summernote("createRange");
    var code = e.keyCode ? e.keyCode : e.which;
    if (code == 8 || code == 46) {
        /*range = range.getWordRange();
        //console.log(range);
        if(range.isOnAnchor()) {
            range.insertNode(document.createTextNode( '\u00A0' ));
        }*/
        var target = window.getSelection().focusNode;
        if (target && target.parentNode && $(target.parentNode).hasClass('profile-link')) {
            var email = $(target.parentNode).data('email');
            //var name = $(target.parentNode).text();
            //var removeElem = {"email": email, "name": name};
            emailDetails = emailDetails.filter(function(v, i, arr){
                return v.email != email;
            });
            //emailDetails.pop(removeElem);
            $(target.parentNode).remove();
            range = $("#comment_box").summernote("createRange");
            range = range.getWordRange();
            range.insertNode(document.createTextNode( '\u00A0' ));
        }
    }
}

function handleLeftRightArrow(e) {
    var code = e.keyCode ? e.keyCode : e.which;
    if (code == 37 || code == 39) {

        range = $("#comment_box").summernote("createRange");
        //$("#comment_box").summernote("saveRange");
        range = range.getWordRange();
        if(range.isOnAnchor()){
            e.preventDefault();
            var target = window.getSelection();
            let newrange = document.createRange();
            newrange.setStartBefore(range.nodes()[0]);
            newrange.setEndBefore(range.nodes()[0]);
            target.addRange(newrange);
           // window.getSelection().addRange(range.nativeRange());
            //range.createFromNodeBefore(range.nodes()[0]).select();
            //$("#comment_box").summernote("restoreRange");
        }else{
            return true;
        }
    }
}
var keyFlag = 0;
function  keyEvents(e) {
    var keypressed = e.which || e.keyCode;
    if (keypressed === 40) {
        e.preventDefault();
        keyFlag++;
        if(keyFlag <= 1){
            if (liSelected) {
                liSelected.removeClass('selected');
                var nextElement = liSelected.next("li");
                if (nextElement.length > 0) {
                    liSelected = nextElement.addClass('selected');
                } else {
                    liSelected = li.eq(0).addClass('selected');
                    $('.user-searchbox').animate({
                        scrollTop: 0
                    });
                    scrollAmt = 0;
                }
            } else {
                liSelected = li.eq(0).addClass('selected');
            }
            if (liSelected.position().top > 66) {
                $('.user-searchbox').animate({ scrollTop: liSelected.index() * 22 });
            }else if($('.user-searchbox  ul li:last-child').hasClass("selected")){
                $('.user-searchbox').animate({ scrollTop: 0 });
            }
        }

        // to stop scrolling of page
        e.stopPropagation();
        return false;
    } else if (keypressed === 38) {
        e.preventDefault();
        keyFlag++;
        if(keyFlag <= 1) {
            if (liSelected) {
                liSelected.removeClass('selected');
                var prevElement = liSelected.prev("li");
                if (prevElement.length > 0) {
                    liSelected = prevElement.addClass('selected');
                } else {
                    liSelected = li.last().addClass('selected');
                }
            } else {
                liSelected = li.last().addClass('selected');
            }
            if (liSelected.position().top <= -10) {
                $('.user-searchbox').animate({scrollTop: (liSelected.index() + 1) * 22 - 88});
            } else if ($('.user-searchbox  ul li:last-child').hasClass("selected")) {
                $('.user-searchbox').animate({scrollTop: (li.last().index() + 1) * 22});
            }
        }
        // to stop scrolling of page
        e.stopPropagation();
        return false;
    } else if (keypressed === 13 && $('.user-searchbox li.selected').length > 0) {
        e.preventDefault();
        $('.user-searchbox li.selected').find(".username").trigger("click");
        e.stopPropagation();
        return false;
    }else{
        return true;
    }
}

function summernoteKeyDown(e){

    handleBackspaceOnAnchor(e);
    //handleLeftRightArrow(e);

    var targetTextArea = $(e.currentTarget).closest(".form-group").children("textarea.form-control");
    summmernoteRange = $(targetTextArea).summernote("createRange");
    summmernoteRange = summmernoteRange.getWordRange();
    var name = summmernoteRange.toString().trim();
    var splChar;
    if (name && name.length > 0) {
        splChar = name.lastIndexOf("@");
    }

    if (splChar > -1) {
        keyEvents(e);
    }else{
        return true;
    }
}

function summernoteKeyUp(e) {
    keyFlag = 0;
    var code = e.keyCode ? e.keyCode : e.which;
    //if ((code <= 90 && code>= 48 || code>= 96 && code <= 105)||(code==8) && (code!=24|| code!=25)) {
    var targetTextArea = $(e.currentTarget).closest(".form-group").children("textarea.form-control");

    /*var top;
    var left;*/
    summmernoteRange = $(targetTextArea).summernote("createRange");
    summmernoteRange = summmernoteRange.getWordRange();
    //To get the current cursor position and set to userlist box
    /*if ($(targetTextArea).attr("id") == "query-description") {
        top = range.getClientRects()[0].top - 72;
        left = range.getClientRects()[0].left - e.currentTarget.getBoundingClientRect().left + 22;
    } else {
        top = (range.getClientRects()[0].top - e.currentTarget.getBoundingClientRect().top) + 18;
        left = range.getClientRects()[0].left - e.currentTarget.getBoundingClientRect().left;
    }
    $('.user-searchbox').css({"top": top, "left": left});*/
    //$(targetTextArea).summernote('saveRange');
    var keyTimer = null;

    var name = summmernoteRange.toString().trim();
    var apiPath = SIH.getEndPoint("/api/auth/user/getUsers/" + page);
    var splChar;
    if (name && name.length > 0) {
        splChar = name.lastIndexOf("@");
    }

    if (splChar > -1) {
        if(code === 40 || code === 38 || code === 13){
            e.preventDefault();
            //keyEvents(e);
            return false;
        }
        page = 0;
        user = name;
        user = user.split("@")[1];
        if (user.length > 2 && (code!=37 && code!=39)) {
            apiPath = apiPath + "?name=" + user;
            $('.user-searchbox').data("scrolling", true);
            userListScroller(apiPath, 0, summmernoteRange, targetTextArea);
            $('.user-searchbox').off('scroll').on('scroll', function () {
                var scrollValue = $('.user-searchbox').data("scrolling");
                var scrollBottom = $(".user-searchbox ul").height() - $(".user-searchbox").height() - $(this).scrollTop();

                if (scrollBottom < 35 && String(scrollValue) === 'true') {
                    apiPath = SIH.getEndPoint("/api/auth/user/getUsers/" + ++page);
                    apiPath = apiPath + "?name=" + user;
                    $('.user-searchbox').data("scrolling", "false");
                        if(totalCount > 10) {
                            userListScroller(apiPath, 0, summmernoteRange, targetTextArea);
                        }

                }
            });
        } else if (user.length < 3) {
            $('.user-searchbox ul').html('');
        }
    } else {
        $('.user-searchbox ul').html('');
    }

}

function userListScroller(apiPath, pageNum, range, targetTextArea) {
    $.ajax({
        type: "GET",
        async: false,
        url: apiPath,
        contentType: "application/json",
        headers: {
            "X-Auth-Token": store.getItem("token")
        },
        success: function (data) {
            var source = $("#user-tagging").html();
            if (source) {
                var template = Handlebars.compile(source);
                if (data && data.length > 0) {
                    if ($(".user-searchbox .user-detail").length == 0) {
                        $('.user-searchbox').append("<div class='user-detail'><ul></ul></div>");
                    }

                    totalCount=data[0].total;

                    var userArr = [];
                    $('.user-searchbox ul').addClass('active');
                    $.each(data, function (i, v) {
                        userArr.push(`<li><span class ="username">${data[i].name} (${data[i].role})</span>
                                                         <span class ="user-entityname hidden"> ${data[i].name}</span>                                       
                                                    <span class ="user-email hidden"> ${data[i].emailId}</span>
                                                  <span class="user-role hidden">${data[i].role}</span> 
                                                   <span class ="user-uniqueId hidden">${data[i].id}</span></li>`);
                    });
                    $(this).addClass('hidden');

                    if (page > 0) {
                        $('.user-searchbox  ul').append(userArr);
                        userListIntelligentPosition();
                    } else if (page == 0) {
                        $('.user-searchbox  ul').html(userArr);
                        userListIntelligentPosition();
                    }
                    if (page * 10 + data.length < data[0].total) {
                        $('.user-searchbox').data("scrolling", "true");
                    }
                    //$(".note-editable").blur();
                    li = $('.user-searchbox  ul li');
                    if (page <= 0) {
                        liSelected = li.eq(0).addClass('selected');
                    }

                    $('li .username').css('cursor', 'pointer');

                    $('.user-searchbox li .username').off("click").on('click', function (e) {
                        //$(targetTextArea).summernote('saveRange');
                        var temp = {};
                        var entity_name = $(this).siblings('.user-entityname').text();
                        var role = $(this).siblings('.user-role').text();
                        var username = $(this).siblings('.username').text();
                        var emailId = $(this).siblings('.user-email').text();
                        var uniqueId = $(this).siblings('.user-uniqueId').text();
                        profileUrl = window.location.protocol + "//" + window.location.host + "/content/sih/en/profile" + "." + role + "." + uniqueId + ".html";
                        temp["email"] = emailId.trim();
                        temp["name"] = entity_name;
                        temp["threadUrl"] = window.location.href;
                        temp["thread"] = questionTitle;
                        emailDetails.push(temp);
                        $(targetTextArea).summernote("createLink", {
                            text: "&nbsp;"+entity_name.trim()+"&nbsp;",
                            url: profileUrl,
                            class: 'profile-link',
                            range: range,
                            email: emailId,
                            editable: true,
                            doNotHighlight: true
                        });
                        $(targetTextArea).summernote('restoreRange');
                        range = $(targetTextArea).summernote("createRange");
                        //$(targetTextArea).summernote('saveRange');
                        range.insertNode(document.createTextNode( '\u00A0' ));
                        $(this).addClass('hidden');
                        $('.user-searchbox  ul').empty();
                        page = 0;
                        $(targetTextArea).summernote('restoreRange');
                        //$('.note-editable').trigger('focus');
                    });

                } else {
                    $('.user-searchbox ul').html('');
                    //$(".note-editable").off("keydown").keydown(function(e) {return true;});
                }
            }
        }
    });
}


function userListIntelligentPosition(){

    var boxElement = $('.forum-detail-cta .forum-comment-container .form-group .note-editor, .create-discussion-popup .description .note-editor');
    var boxHeight = boxElement.height();
    var eTop = boxElement.offset().top;

    if((($(window).height() - boxHeight)/2) < (eTop - $(window).scrollTop())){
        // console.log("top");
        $(".user-searchbox").addClass("top");
    }
    else{
        // console.log("down");
        $(".user-searchbox").removeClass("top");

    }
    $(window).scroll(function() { //when window is scrolled
        var boxHeight = boxElement.height();
        if((($(window).height() - boxHeight)/2) < (eTop - $(window).scrollTop())){
            $(".user-searchbox").addClass("top");
        }
        else{
            // console.log("down");
            $(".user-searchbox").removeClass("top");

        }

    });
}
function postComment(questionId) {
    $('.btn-comment').attr('disabled', 'disabled');
    var path = SIH.getEndPoint("/api/auth/forum/question/" + questionId + "/comment");
    var comment_box = $("#comment_box");
    var comment = comment_box.val();
    var note = comment_box.summernote('code').replace(/<\/?[^>]+(>|$)/g, "");
    //comment = comment.replace(/\n/g, '<br>\n');
    if (note.length > 0) {
        var commentJson = {
            comment: comment,
        };
        $.ajax({
            type: "POST",
            url: path,
            data: JSON.stringify(commentJson),
            contentType: "application/json",
            headers: {
                "X-Auth-Token": store.getItem("token")
            }
        }).done(function (data) {
            $('.btn-comment').removeAttr('disabled');
            var jsonArr = [];
            jsonArr.push(data.comments[data.comments.length - 1]);
            addComment({
                "question": {"answered": data.question.answered, "owner": data.question.owner},
                "comments": jsonArr
            });
            $('.forum-response-answer .comments-button').html("(" + data.question.numberOfComments + ")");
            $('.note-editor.note-frame').removeClass('note-has-error');
            $('.forum-replies').show();
            $('.forum-replies').addClass('forum-replies-loggedin');
            sendEmail();
        });
    }
    else {
        $('.btn-comment').removeAttr('disabled');
        if (note.length == 0) {
            $('.note-editor.note-frame').addClass('note-has-error');
        }
    }
}

function sendEmail() {
    var path = SIH.getEndPoint("/api/auth/user/shootMail");
    $.ajax({
        type: "POST",
        url: path,
        data: JSON.stringify(emailDetails),
        contentType: "application/json",
        headers: {
            "X-Auth-Token": store.getItem("token")
        }
    }).success(function (data) {
        console.log("emailSend");
    })

}

function addComment(data) {
    var source = $("#comment-template").html();
    if (source) {
        var template = Handlebars.compile(source);
        $('#comment-detail').append(template(data));
        var comment_box = $("#comment_box");
        comment_box.summernote('reset');
        if (isUserPublishedAndLoggedIn()) {
            $('.forum-comment-share').show();
        }
        //Read More
        forumReadMoreText();
    }
    return false;
}

$(document).on('click', '.like-reply-share .reply', function () {

    $('.note-editable').focus();

});
$(document).on('click', '.like-head .like', function () {
    var question_id = $('.like').attr('data-id');
    if (store.getItem("token") && store.getItem("published")) {
        likeIncrement(question_id);
    } else if (store.getItem("token") && !store.getItem("published")) {
        $(".under-moderation-modal").modal("show");
    } else if (store.getItem("no-profile")) {
        $('.complete-profile-modal').modal('show');
    } else {
        $("#loginModal").modal("show");
    }

})


function likeIncrement(question_id) {

    var path = SIH.getEndPoint("/api/auth/forum/question/like/" + question_id);
    $.ajax({
        type: "POST",
        url: path,
        contentType: "application/json",
        beforeSend: setAuthTokenHeader
    }).done(function (data) {
        if (data) {
            console.log("success status" + data.likes);
            /*var source = $('#comment-template').html();
            if(source){
                var template =Handlebars.compile(source);
                $('#comment-detail').html(template(data));
            }*/
            $('[data-id=' + question_id + ']').html(data.likes + ' Likes');
        }
        else {
            console.log("error while fetching the data");
        }
    })
}

$(document).on("click", ".report-model", function () {
    var reportId = $(this).data('id');
    forum.reportAbuseId = reportId.split('_')[0]
    forum.reportType = reportId.split('_')[1]
    forum.textarea.val('');
    if (forum.textarea.parent().hasClass('has-error')) {
        forum.textarea.parent().removeClass('has-error');
        forum.textarea.parent().removeClass('has-danger');
    }
});

$(document).on("click", ".query-not-found-btn", function () {
    redirectPageOnReportAbuse();
});

function markAsAbuse(abuseHeading, abuseMsg) {
    var path;
    if (forum.reportType == 'question') {
        path = SIH.getEndPoint("/api/auth/forum/question/" + forum.reportAbuseId + "/abuse");
    }
    else {
        path = SIH.getEndPoint("/api/auth/forum/answer/" + forum.reportAbuseId + "/abuse");
    }
    var comment = $("#report-abuse-comment").val();
    var reportAbuse = {
        message: comment
    };
    if (comment) {
        $.ajax({
            type: "POST",
            url: path,
            data: JSON.stringify(reportAbuse),
            contentType: "application/json",
            beforeSend: setAuthTokenHeader
        }).done(function (data) {
            if (data) {
                $('.report-abuse-modal').modal('hide');
                $('.thankyou-modal .modal-body .heading').html(abuseHeading);
                $('.thankyou-modal .modal-body p').html(abuseMsg);
                $('.thankyou-modal').modal('show');
                $(document).on("click", ".forum-report-abuse", function () {
                    if (forum.reportType == 'question') {
                        redirectPageOnReportAbuse();
                    }
                });
                $('#report-abuse-comment').val('');
                if (forum.reportType != 'question') {
                    var commentDiv = "#" + forum.reportAbuseId;
                    $(commentDiv).hide();
                    var noOfComments = $('.forum-response-answer .comments-button').text();
                    $('.forum-response-answer .comments-button').html(noOfComments - 1);
                }
            }
        });
    } else {
        forum.textarea.parent().addClass('has-error');
        forum.textarea.parent().addClass('has-danger');
    }
    return false;
}

var forumSetAuthTokenHeader = function (xhr) {
    var token = store.getItem('token');
    if (token) {
        xhr.setRequestHeader('X-Auth-Token', token);
    } else if (forum.isAuthor == 'true' && forum.adminToken) {
        xhr.setRequestHeader('X-Auth-Token', forum.adminToken);
    }
    xhr.setRequestHeader('Content-Type', 'application/json');
}

function getQueryDetail(questionId, msg, spamMsg, isAuthor, token) {
    var path;
    forum.isAuthor = isAuthor;
    forum.adminToken = token;
    if (!ContextHub.getStore("sih_user").getItem('token') || !ContextHub.getStore("sih_user").getItem('published')) {
        path = SIH.getEndPoint("/api/common/question/" + questionId);
        forum.abuseId = getParameterByName("abuseId");
        if (forum.isAuthor == 'true' && forum.adminToken && forum.abuseId) {
            path = SIH.getEndPoint("/api/auth/admin/question/" + questionId + "?abuseId=" + forum.abuseId);
        }
    }
    else {
        path = SIH.getEndPoint("/api/auth/forum/question/" + questionId);
    }
    $.ajax({
        type: "GET",
        url: path,
        contentType: "application/json",
        beforeSend: forumSetAuthTokenHeader,
    }).done(function (data) {
        forum.quesId = data.question.id;
        queryDetail(data);
        initializeGA(data.question.title);
        questionTitle = data.question.title;
    }).fail(function (data) {
        if (data.status == '404') {
            $('.modal-body p').html(msg);
            $('.query-not-found').modal({
                backdrop: 'static',
                keyboard: true,
            });
        }
        if (data.status == '400') {
            $('.modal-body p').html(spamMsg);
            $('.query-not-found').modal({
                backdrop: 'static',
                keyboard: true,
            });
        }
    });
}

function updateViewCount(questionId) {
    $.ajax({
        type: "GET",
        url: SIH.getEndPoint("/api/auth/forum/updateviews/question/" + questionId),
        contentType: "application/json",
        beforeSend: forumSetAuthTokenHeader
    });
}

function queryDetail(data) {
    populateThreadHeader(data);
    var source = $("#query-detail-template").html();
    var commentSource = $('#comment-template').html();
    if (source) {
        var template = Handlebars.compile(source);
        $('#query-detail').prepend(template(data.question));
        var commentTemplate = Handlebars.compile(commentSource);
        $('#comment-detail').prepend(commentTemplate(data));
        if (data.question.answered) {
            // $('ul#comment-detail li ul.dropdown-menu li a.markAsAnswer').parent().css('display', 'none');
            var answer = $(".forum-replies .forum-item-info .forum-item-mark-answer").parents().eq(0);
            answer.prependTo(answer.parent());
        }
        $('.forum-response-answer .comments-button').html("(" + data.question.numberOfComments + ")");
        if (isUserPublishedAndLoggedIn()) {
            $('.forum-share').show();
            $('.forum-comment-share').show();
            $('#comment_box ~ .note-editor .note-editing-area,#comment_box ~ .note-editor .note-toolbar').wrapAll('<div class="clearfix summernote-query"></div>');
            $('.summernote-query').children('.note-toolbar').addClass('pull-right');
            $('.summernote-query').children('.note-editing-area').addClass('pull-left');

        }

        //Read More
        forumReadMoreText();
        if (forum.isAuthor == 'true' && forum.adminToken && forum.abuseId && !data.reviewed) {
            $('.forum-comment-share').hide();
            $('.forum-share').hide();
            if (forum.urlHash) {
                var scrollPos = $(forum.urlHash + "_comment").parent('li').offset().top;
                $(window).scrollTop(scrollPos);
                $('#comment-detail ' + forum.urlHash + ' .forum-comment-content').append("<p class='text-center'> "
                    + "<button type='button' class='btn btn-success forum-accept-button' data-id='accept_comment' "
                    + "data-toggle='modal' data-target='.admin-app" +
                    "roval-modal'>Accept</button>"
                    + "  <button type='button' class='btn btn-danger forum-reject-button' data-id='reject_comment' "
                    + "data-toggle='modal' data-target='.admin-approval-modal'>Reject</button></p>");
            } else {
                $('#query-detail .forum-question-content').append("<p class='text-center'> "
                    + "<button type='button' class='btn btn-success forum-accept-button' data-id='accept_question' "
                    + "data-toggle='modal' data-target='.admin-approval-modal'>Accept</button>"
                    + "  <button type='button' class='btn btn-danger forum-reject-button' data-id='reject_question' "
                    + "data-toggle='modal' data-target='.admin-approval-modal'>Reject</button></p>");
            }
        }
    }
    return false;
}

$(document).on("click", ".forum-comment-share ul.dropdown-menu li a.markAsAnswer", function () {
    var commentId = $(this).parents().eq(3).siblings('input').val();
    var markedAsAnswer_label = $(this).data('id');
    var path = SIH.getEndPoint("/api/auth/forum/question/" + forum.quesId + "/mark-as-answer/" + commentId);
    $.ajax({
        type: "POST",
        url: path,
        contentType: "application/json",
        beforeSend: setAuthTokenHeader
    }).done(function (data) {
        var commentDiv = "#" + commentId + " .forum-item-body";
        $(commentDiv).append('<span class="forum-item-mark-answer pull-right">' + markedAsAnswer_label + '</span>');
        $(commentDiv).find('li.report-abuse-li').parents('.forum-comment-share').hide();
        var answer = $(".forum-replies .forum-item-info .forum-item-mark-answer").parents().eq(1);
        answer.prependTo(answer.parent());
        $('ul.forum-more-dropdown').each(function () {
            if ($(this).find('li').length > 1) {
                $(this).find('li:first').hide();
            } else {
                $(this).parent().hide();
            }
        });
    }).fail(function (data) {
        $('.modal-body p').html(data.responseText);
        $('.error-modal').modal('show');
    });
});

$(document).on("click", "a.category-follow", function () {
    if (isUserPublishedAndLoggedIn()) {
        //$("#modal-loader").modal("show");
        var subscriptionId = $(this).data('follow');
        var id = subscriptionId.split('_')[0];
        var subscriptionType = subscriptionId.split('_')[1];
        var subscriptionMsg = subscriptionId.split('_')[2];
        var subscriptionHeading = subscriptionId.split('_')[3];
        var subscriptionIdType = subscriptionId.split('_')[4];
        var path;
        if (subscriptionType == 'follow') {
            path = SIH.getEndPoint("/api/auth/forum/question/subscribe?targetId=" + id + "&subscriptionIdType=" + subscriptionIdType);
        } else {
            path = SIH.getEndPoint("/api/auth/forum/question/unsubscribe?targetId=" + id + "&subscriptionIdType=" + subscriptionIdType);
        }
        $.ajax({
            type: "POST",
            url: path,
            contentType: "application/json",
            beforeSend: setAuthTokenHeader
        }).done(function (data) {
            if (data == true) {
                getFollowedCategories();
                getForumStats($("button[name=applyFilter]"));

                $("#modal-loader").modal("hide");
            }
        });
    } else if (store.getItem("token") && !store.getItem("published")) {
        $(".under-moderation-modal").modal("show");
    } else if (store.getItem("no-profile")) {
        $('.complete-profile-modal').modal('show');
    } else {
        $("#loginModal").modal('show');
    }
});

function forumReadMoreText() {
    $(".forum-item-info").find(".more-content").each(function () {
        var myStr = $(this).html();
        $(this).empty().html(myStr);
        $(this).siblings(".read-more").addClass('hidden');
        $(this).siblings(".less").addClass('hidden');
        if ($(this).height() > 150) {
            $(this).addClass('more-content-height-fixed');
            $(this).siblings(".read-more").removeClass('hidden');
            $(this).siblings(".read-more").css('display', 'inline');
            $(this).append('<div class="more-content-foot"></div>');
        }
    });
    $(".read-more").click(function (e) {
        e.stopPropagation();
        $(this).addClass('hidden');
        $(this).siblings(".more-content").removeClass('more-content-height-fixed');
        $(this).siblings(".less").removeClass('hidden');
        $(this).siblings(".more-content").children('.more-content-foot').css('display', 'none');
    });
    $(".less").click(function (e) {
        e.stopPropagation();
        $(this).addClass('hidden');
        $(this).siblings(".read-more").removeClass('hidden');
        $(this).siblings(".more-content").addClass('more-content-height-fixed');
        $(this).siblings(".more-content").children('.more-content-foot').css('display', 'block');
        $('html, body').animate({
            scrollTop: $(this).parent().offset().top - 200
        }, 500);
    });
}

function redirectPageOnReportAbuse() {
    var redirectPage = $('.forum-report-abuse').data('id').split('_')[0]
    var currentPage = $('.forum-report-abuse').data('id').split('_')[1]
    if (redirectPage == currentPage) {
        getQueryList();
    }
    else {
        window.location = redirectPage + ".html";
    }
}

$(document).on("click", ".admin-approval-btn", function () {
    var reportType = forum.buttonData.split('_')[0]
    var abuseType = forum.buttonData.split('_')[1]
    var path;
    var verify = false;
    if (reportType == 'accept') {
        verify = true;
    }
    var comment_box = $("#admin-approval-comment");
    var message = comment_box.val();
    if (message) {
        if (abuseType == 'question') {
            path = SIH.getEndPoint("/api/auth/admin/review/question/" + forum.abuseId);
        }
        else {
            path = SIH.getEndPoint("/api/auth/admin/review/comment/" + forum.abuseId);
        }
        $.ajax({
            type: "GET",
            url: path,
            contentType: "application/json",
            data: {"verify": verify, "message": message},
            headers: {'X-Auth-Token': forum.adminToken}
        }).done(function (data) {
            if (data) {
                $('.admin-approval-modal').modal('hide');
                $('.thankyou-modal .modal-body .heading').html("Thank You!!");
                $('.thankyou-modal .modal-body p').html("Your response has been recorded ");
                $('.thankyou-modal').modal('show');
                $('.forum-accept-button , .forum-reject-button').hide();
            }
        });
    } else {
        comment_box.parent().addClass('has-error');
        comment_box.parent().addClass('has-danger');
    }
});
$(document).on("click", ".forum-accept-button , .forum-reject-button", function () {
    forum.buttonData = $(this).data('id');
    var comment_box = $("#admin-approval-comment");
    comment_box.val('');
    if (comment_box.parent().hasClass('has-error')) {
        comment_box.parent().removeClass('has-error');
        comment_box.parent().removeClass('has-danger');
    }
});

function initializeGA(title) {
    $("title").text(title);
    var $headNoScript = $("noscript#ga-script");
    if ($headNoScript.length) {
        var gaHeadScript = $headNoScript.html();
        var src = $("noscript#ga-body").data("src");
        var $gaIframe = $($("noscript#ga-body").text());
        $gaIframe.attr("src", src);
        $("<script>").text(gaHeadScript).prependTo("head");
        $("<noscript>").append($gaIframe).prependTo("body");
    }
}

var forumInit = function () {
    var savedQuery = location.search.substr(1);
    if (savedQuery) {
        savedQuery = savedQuery.trim();
    }
    if (savedQuery && location.href.indexOf('code') < 0) {
        var queryParam = getUrlParameter('query');
        var pageParam = getUrlParameter('page');
        if (queryParam) {
            queryParam = queryParam.trim();
        }
        if ((queryParam != null && savedQuery.split("&").length == 1) || (pageParam && (savedQuery.split("&").length == 1 || (queryParam != null && savedQuery.split("&").length == 2)))) {
            if (queryParam) {
                forumSearchQuery.query = queryParam;
                $("input#search-component").val(queryParam);
            }
        } else {
            if (queryParam) {
                forumSearchQuery.query = queryParam;
                $("input#search-component").val(queryParam);
            }

            var pageParam = getUrlParameter('page');
            if (pageParam && pageParam.length > 0) {
                forumSearchQuery.page = pageParam;
            }
        }
    }
}

var createForumSearchQuery = function () {
    var queryParamArr = [];
    if (forumSearchQuery.query) {
        queryParamArr.push('query=' + forumSearchQuery.query);
    }
    if (location.href.indexOf('code') < 0) {
        queryParamArr.push('page=' + forumSearchQuery.page);
    }
    var sendQuery = '';
    if (queryParamArr.length > 0) {
        for (var i = 0; i < queryParamArr.length; i++) {
            if (i == 0) {
                sendQuery = sendQuery + ('?' + queryParamArr[i]);
            } else {
                sendQuery = sendQuery + ('&' + queryParamArr[i]);
            }
        }
    }
    return sendQuery;
}

var getForumSearchResults = function () {
    $('#modal-loader').modal('show');
    var sendSearchQuery = createForumSearchQuery();
    window.history.replaceState(window.location.pathname, "", sendSearchQuery);
    var forumQuery = location.search.substr(1);
    if (forumQuery && forumQuery.trim()) {
        $.ajax({
            url: SIH.getEndPoint("/api/noauth/search/forum"),
            type: 'POST',
            dataType: 'json',
            data: JSON.stringify(forumSearchQuery),
            beforeSend: setAuthTokenHeader,
        }).done(function (data) {
            if (data.highlighted && data.highlighted.length > 0) {
                var source = $("#forum-search-template").html();
                if (source) {
                    var template = Handlebars.compile(source);
                    $('.no-search-result').html('');
                    $('#forum-search').html(template(data.highlighted));
                    //Pagination
                    forumPagination(data);
                    $('html, body').animate({
                        scrollTop: 0
                    }, 500);
                }
            }
            else {
                $('#forum-search').html('');
                $('#pagination-div').html('');
                var noResultResource = $("#no-search-result-template").html();
                var noResultTemplate = Handlebars.compile(noResultResource);
                $('.no-search-result').html(noResultTemplate());
            }
            $('#modal-loader').modal('hide');
        }).fail(function (data) {
            $('#modal-loader').modal('hide');
        });
    }
}

var loadForumSearchPage = function (page) {
    var pageNumber = parseInt($(page).html());
    forumSearchQuery.page = pageNumber - 1;
    getForumSearchResults();
}

var forumSearchNext = function (elem) {
    var currentPage = parseInt($(elem).siblings('ul').find('li.active').html());
    forumSearchQuery.page = currentPage;
    getForumSearchResults();
}

var forumSearchPrevious = function (elem) {
    var currentPage = parseInt($(elem).siblings('ul').find('li.active').html());
    forumSearchQuery.page = currentPage - 2;
    getForumSearchResults();
}

var forumSearchFirst = function () {
    forumSearchQuery.page = 0;
    getForumSearchResults();
}

var forumSearchLast = function (pages) {
    forumSearchQuery.page = pages - 1;
    getForumSearchResults();
}

function isUserPublishedAndLoggedIn() {
    return ContextHub.getStore("sih_user").getItem('token') && ContextHub.getStore("sih_user").getItem('published');
}

$(document).ready(function () {

    if (isUserPublishedAndLoggedIn()) {
        $('.ask-now').removeClass('hidden');
    }
    var count = 0;
    $("#query-description").summernote(personaJSON);

    $(document).on('click', '.ask-now,.ask-question-now', function () {
        if (store.getItem("token") && store.getItem("published")) {
            $('.ask-now-template').removeClass('hidden');
            $('<div class="modal-backdrop in">').appendTo('body');
            displayAskNow();
            $('html').css('overflow', 'hidden');
        } else if (store.getItem("token") && !store.getItem("published")) {
            $(".under-moderation-modal").modal('show');
        } else if (store.getItem("no-profile")) {
            $('.complete-profile-modal').modal('show');
        } else {
            $("#loginModal").modal('show');
        }
    });

    $(document).on('click', '.close.fa.fa-times', function () {
        $('.ask-now-template').addClass('hidden');
        $('.ask-now').removeClass('hidden');
        //$("#create-discussion-form").trigger( "reset" );
        // $("#query-description").summernote('reset');
        $("#query-description").siblings(".text-danger").addClass("display-n");
        $('.note-editor').removeClass('note-has-error');
        $("#query-title").siblings(".text-danger").addClass("display-n");
        $('.form-group').siblings('.text-danger').addClass('display-n')
        $('.modal-backdrop.in').remove();
        resetQuestionForm();
        $('html').css('overflow', 'auto');
    });

});

// getFollowedCategories();

var followedCategories;

function getFollowedCategories() {
    $.ajax({
        type: "GET",
        url: SIH.getEndPoint("/api/auth/forum/category/followed"),
        beforeSend: setAuthTokenHeader,
        async: false,
        success: function (data) {
            followedCategories = data;
        },
        error: function (response) {
            console.log("Error occurred", response);
        }
    });
}

function resetQuestionForm() {
    $(':input.question-field', "form.create-discussion-form").each(function () {
        if ($(this).attr("id") === "query-description") {
            $(this).summernote('code', '');
        }
        $(this).val("").trigger("change");
    });
    $(".attachedFile ul li").text("");
}

function displayAskNow() {
    $("#category").on('change', function () {
        var subCategoryId = $("#category").val();

        $("#sub-category").find('option').not(":first").remove();

        $.ajax({
            type: "GET",
            url: "/services/tags/children.json?tag=" + subCategoryId,
        }).done(function (data) {
            $(".sub-category").append('<option value="" disabled="" selected="">SubCategory</option>');
            data.sort(function (a, b) {
                return a.text > b.text ? 1 : a.text < b.text ? -1 : 0
            });

            $.each(data, function (index, item) {
                var o = new Option(item.text, item.value);
                $("#sub-category").append(o);
            });
        });
    });
}


function bindAccordionClickEvent() {
    $('.forum-category-accordion .acc-item').on('click', function () {
        $(this).toggleClass('open');
        $(this).children('.acc-content').slideToggle();
        $(this).siblings('.acc-item').removeClass('open');
        $(this).siblings('.acc-item').find('.acc-content').slideUp('fast');
    });
}

function setForumCategoris() {
    $("#discussion-category").find('option').not(":first").remove();
    var apiPath = $("#discussion-category").data('path') || "/services/tags/children.json";
    if (apiPath) {
        $.ajax({
            url: apiPath,
            type: 'GET',
            data: {
                tag: "sih:forum",
                filterEnabled: false,
                path: "sih:forum"
            },
            async: false,
            success: function (data) {
                if (typeof data == "string") {
                    data = JSON.parse(data);
                }
                data.sort(function (a, b) {
                    return a[1] - b[1]
                });
                data.reverse();
                forumCategories = data;
                $.each(data, function (index, item) {
                    var o = new Option(item.text, item.value);
                    $("#discussion-category").append(o);
                });
            }, error: function (data) {
                console.log("Error while loading options");
            }
        });
    }
}

function populateForumCategoriesThread() {
    getForumStats($("button[name=applyFilter]"));
}

function onStateChange() {
    var targetObj = $(".forum-wrapper #state");
    var value = $(targetObj).val();
    var text = $(targetObj).children(':selected').text().trim();
    handleFilterSpans(value, text, $(targetObj).attr("id"));
}

function onCityChange() {
    var targetObj = $(".forum-wrapper #city");
    var value = $(targetObj).val();
    var text = $(targetObj).children(':selected').text().trim();
    handleFilterSpans(value, text, $(targetObj).attr("id"));
}

function onCategoryChange() {
    var targetObj = $(".forum-wrapper #discussion-category");
    var value = $(targetObj).val();
    var text = $(targetObj).children(':selected').text().trim();
    handleFilterSpans(value, text, $(targetObj).attr("id"));
    //forumSearchQuery.query = text;
}

$(document).on('click', '.forum-filter-wrapper .filterRemove', function () {
    if ($(this).parents('.state-filters').length) {
        $('#state').val("").trigger('change');
        $("#city").val("").trigger('change');
        onStateChange();
        onCityChange();
        sessionStorage.removeItem("state");
        sessionStorage.removeItem("city");
    } else if ($(this).parents('.city-filters').length) {
        $("#city").val("").trigger('change');
        onCityChange();
        sessionStorage.removeItem("city");
    } else if ($(this).parents('.discussion-category-filters').length) {
        $('#discussion-category').val("").trigger('change');
        onCategoryChange();
        sessionStorage.removeItem("category");
    }

    getForumStats($("button[name=applyFilter]"));
});

$(document).on('click', '.forum-filter-wrapper .clear-all', function () {
    $('#state').val("").trigger('change');
    $("#city").val("").trigger('change');
    $('#discussion-category').val("").trigger('change');
    onStateChange();
    onCityChange();
    onCategoryChange();

    sessionStorage.removeItem("state");
    sessionStorage.removeItem("city");
    sessionStorage.removeItem("category");
    sessionStorage.removeItem("subCategory");

    getForumStats($("button[name=applyFilter]"));
});

function handleFilterSpans(filterValue, filterText, target) {
    if (filterValue && !$("." + target + "-filters").children().length) {
        $("span." + target + "-filters").append("<span class='selected-filter' data-value='" + filterValue + "'>" + filterText + "<i class='fa fa-times filterRemove'></i></span>");
    } else if (filterValue) {
        $("." + target + "-filters").children().remove();
        $("span." + target + "-filters").append("<span class='selected-filter' data-value='" + filterValue + "'>" + filterText + "<i class='fa fa-times filterRemove'></i></span>");
    } else {
        $("." + target + "-filters").children().remove();
    }

    if ($(".forum-filter-wrapper .state-filters").children().length
        || $(".forum-filter-wrapper .city-filters").children().length
        || $(".forum-filter-wrapper .discussion-category-filters").children().length) {

        $(".forum-filter-wrapper .clear-all").removeClass("display-n");
    } else {
        $(".forum-filter-wrapper .clear-all").addClass("display-n");
    }
}

function getCategoryThreads() {
    $("#modal-loader").modal("show");
    var path = getQueryUrl(forum.currentTabIndex);
    $.ajax({
        type: "GET",
        url: path,
        contentType: "application/json",
        beforeSend: setAuthTokenHeader
    }).done(function (data) {
        handleQueryData(data);
        $("#modal-loader").modal("hide");
    }).fail(function () {
        $('.pagination').hide();
        $("#modal-loader").modal("hide");
    });
}

function handleQueryData(data, replaceContent) {
    if (forum.currentTabIndex == 0) {
        var source = $("#all-list-template").html();
        if (source) {
            var template = Handlebars.compile(source);
            if (replaceContent) {
                $('#all-list').html(template(data));
            } else {
                $('#all-list').append(template(data));
            }
        }

        source = $("#threads-list-header-template").html();
        if (source) {
            if (getParam("view")) {
                data.heading = "All Threads";
            }
            var template = Handlebars.compile(source);
            $("#threads-list-header").html(template(data));
        }
    }
    else {
        var source = $("#subscription-list-template").html();
        if (source) {
            var template = Handlebars.compile(source);
            $('#subscription-list').html(template(data.content));
        }
    }
    if (isUserPublishedAndLoggedIn()) {
        $('.forum-share').show();
        $('#query-description ~ .note-editor .note-editing-area,#query-description ~ .note-editor .note-toolbar').wrapAll('<div class="clearfix summernote-query"></div>');
        $('.summernote-query').children('.note-toolbar').addClass('pull-right');
        $('.summernote-query').children('.note-editing-area').addClass('pull-left');
    }
    //Read More
    forumReadMoreText();

    //Pagination
    //forumPagination(data);
    return false;
}

function populateThreadHeader(data) {
    var source = $("#threads-header-template").html();
    if (source) {
        var template = Handlebars.compile(source);
        $("#threads-header").html(template(data));
    }
}

$(document).on('click', 'button[name=applyFilter]', function () {
    sessionStorage.setItem("category", $("#discussion-category").val());
    sessionStorage.setItem("state", $("#state").val());
    sessionStorage.setItem("city", $("#city").val());

    onStateChange();
    onCityChange();
    onCategoryChange();

    getForumStats($(this));
});

function getForumStats(apiPathHolder) {
    $("#modal-loader").modal("show");
    var apiPath = $(apiPathHolder).data('path');

    var template = Handlebars.compile($("#list-category-thread-template").html());

    $.ajax({
        type: "GET",
        url: SIH.getEndPoint(apiPath),
        data: {
            "state": $("#state").val() ? $("#state").val() : sessionStorage.getItem("state") ? sessionStorage.getItem("state") : "",
            "city": $("#city").val() ? $("#city").val() : sessionStorage.getItem("city") ? sessionStorage.getItem("city") : "",
            "category": $("#discussion-category").val() ? $("#discussion-category").val() : sessionStorage.getItem("category") ? sessionStorage.getItem("category") : ""
        },
        contentType: "application/json",
        beforeSend: setAuthTokenHeader
    }).done(function (data) {
        if (typeof data == "string") {
            data = JSON.parse(data);
        }
        const orderedData = {};
        Object.keys(data).sort().forEach(function (key) {
            orderedData[key] = data[key];
        });
        $("#list-category-threads").html(template(orderedData));

        bindAccordionClickEvent();

        $("#modal-loader").modal("hide");
    }).fail(function () {

        $("#modal-loader").modal("hide");
    });
}

$(document).on("click", ".forum-sub-category-card .head h3", function () {

    var pageUrl = $(this).closest(".forum-sub-category-card").data("cate-page-url");
    var subCatId = $(this).data("id");
    sessionStorage.setItem("subCategory", subCatId);
    location.href = pageUrl;//+"?wcmmode=disabled";

    //window.history.replaceState(window.location.pathname, "", "cateId="+subCatId);
});
/*
* Added validateForumAttachmentFile() and checkForumAttachmentMimetype() to validate file attachments.
*/
$(document).on('change', '#post-img', function (event) {

    var target = event.target;
    var $target = $(target);
    var file;

    if (file = this.files[0]){
        if (!validateForumAttachmentFile(event, file)){
            return false;
        } else {
            var data = new FormData();
            data.append("file", file, file.name);
            // Can move below line to .success of ajax. Also, can add modal.show here.
            $('<li/>').text(file.name).appendTo($("#post-img").siblings(".attachedFile").children("ul"));
            $.ajax({
                url: SIH.getEndPoint("/api/file/forum/attachments"),
                type: 'POST',
                data: data,
                cache: false,
                contentType: false,
                processData: false,
                success: function (fileInfos) {
                    if (fileInfos) {
                        $.each(fileInfos, function (i, fileInfo) {
                            $("<input type='hidden' name='attachment' data-originalname='" + fileInfo.compressedName + "' value='" + fileInfo.name + "'>").insertAfter($("#post-img"));
                        });
                    }
                }, error: function (data) {
                    alert("Error while uploading files");
                }
            });
        }
    }

});

function validateForumAttachmentFile(event, file) {
    //var allowedExtensionsForImage = ["image/png", "image/jpeg", "image/jpg"];
    var allowedExtensionsForFile = ["image/png", "image/jpeg", "image/jpg", "application/pdf"];
    var maxFileSizeInBytes = 5242880;
    //var maxImageSizeInBytes = 1048576;
    if ($.inArray(file.type, allowedExtensionsForFile) < 0) {
        alert("Invalid Format. Supported formats are: " + allowedExtensionsForFile.join(" , "));
        event.target.value = null;
        return false;
    }
    if (file.size > maxFileSizeInBytes) {
        alert("Maximum file size allowed is 5 MB ");
        event.target.value = null;
        return false;
    }
    checkForumAttachmentMimetype(event, file);
    return true;
}

function checkForumAttachmentMimetype(event, file) {
    var uploads = [];
    var fileReader = new FileReader();
    var ext = "";
    fileReader.onloadend = function (evt) {
        if (evt.target.readyState === FileReader.DONE) {
            var uint = new Uint8Array(evt.target.result);
            var bytes = [];
            uint.forEach(function (byte) {
                bytes.push(byte.toString(16));
            });
            var hex = bytes.join('').toUpperCase();

            ext = getMimetype(hex);
            var allowedExtensionsForFile = ["image/png", "image/jpeg", "image/jpg", "application/pdf"];
            if (!allowedExtensionsForFile.includes(ext)) {
                alert("Invalid Format. Supported formats are: " + allowedExtensionsForFile.join(" , "));
                event.target.value = null;
                return false;
            }
        }
    };

    var blob = file.slice(0, 4);
    fileReader.readAsArrayBuffer(blob);

    var getMimetype = function(signature) {
        switch (signature) {
            case '89504E47':
                return 'image/png';
            case '25504446':
                return 'application/pdf';
            case 'FFD8FFDB':
            case 'FFD8FFE0':
            case "FFD8FFE1":
            case "FFD8FFE2":
            case "FFD8FFE3":
            case "FFD8FFE8":
                return 'image/jpeg';
            default:
                return 'Unknown filetype';
        }
    }
}

function viewAttachments(e) {
    $(e).siblings(".attachedDocs").removeClass("hidden");
}
$(window).on('load resize',function(){
  searchComp = $('.search-component');
  if($(window).width() < 768){
    $('.forum-wrapper .forum-discussion .col-md-8 .columnizer').prepend(searchComp);
    $('.forum-wrapper .forum-discussion .col-md-4 .search-component').remove();
  }
  else{
    if($('.forum-wrapper .forum-discussion .col-md-8 .columnizer .search-component').length){
      $('.forum-wrapper .forum-discussion .col-md-8 .columnizer .search-component').remove();
      $('.forum-wrapper .forum-discussion .col-md-4').prepend(searchComp);
    }
  }
});

$(document).on('click', $('.comment-content').find('.profile-link'), function (e) {
    var link = $(e.target).data('link');
    if (link) {

        window.location.href = link;
    }
});




$.israel_form = function (challangeDetails) {
    var formData = {};
    var isValidated = true;
    var isUserAplicable = false;

    var $firstChallenge = $("input#challenge1");
    var $secondChallenge = $("input#challenge2");
    var $applicantName = $("input[name='applicantName']");
    var $email = $("input[name='email']");
    var $mobile = $("input[name='mobile']");
    var $qualification = $("input[name='qualification']");
    var $occupation = $("input[name='occupation']");
    var $experience = $("input[name='experience']");
    var $address = $("input[name='address']");
    var $city = $("input[name='city']");
    var $pincode = $("input[name='pincode']");
    var $state = $("input[name='state']");
    var $country = $("input[name='country']");
    var $theme = $("input[name='theme']");

    var $ideaStage = $("input[name='ideaStage']");
    var $fieldTrial = $("input[name='fieldTrial']");

    var $fieldTrialDetail = $("textarea[name='fieldTrialDetail']");
    var $howConducted = $("textarea[name='howConducted']");
    var $challengesFaced = $("textarea[name='challengesFaced']");
    var $successCriteria = $("textarea[name='successCriteria']");
    var $fieldResults = $("textarea[name='fieldResults']");
    var $whatWentRightWrong = $("textarea[name='whatWentRightWrong']");
    var $userFeedback = $("textarea[name='userFeedback']");
    var $learning = $("textarea[name='learning']");
    var $needToModify = $("textarea[name='needToModify']");

    var $fieldTrialPlan = $("textarea[name='fieldTrialPlan']");
    var $ecosystemDetail = $("textarea[name='ecosystemDetail']");
    var $challengeFacedPrototyping = $("textarea[name='challengeFacedPrototyping']");
    var $supportNeededDescription = $("textarea[name='supportNeededDescription']");

    var $problem = $("textarea[name='problem']");
    var $solutionSteps = $("textarea[name='solutionSteps']");
    var $idea = $("textarea[name='idea']");
    var $businessModel = $("textarea[name='businessModel']");
    var $teamInfo = $("textarea[name='teamInfo']");
    var $confidence = $("textarea[name='confidence']");
    var $impact = $("textarea[name='impact']");
    var $videoFileName = $("input[name='videoFileName']");
    var $id = $("input[name='id']");

    var $submitChallengeForm = $("input[name='challengeFormSubmit']");

    $.urlParam = function (name) {
        var results = new RegExp('[\?&]' + name + '=([^&#]*)').exec(window.location.href);
        return results ? results[1] : 0;
    };

    var theme = $.urlParam('theme');
    if (theme !== "0") {
        $theme.prop("disabled", "disabled");
        $("input[value='" + theme + "']").attr("checked", "checked").removeAttr("disabled");
        var challDetail = challangeDetails[0];
        if (theme === "water") {
            challDetail = challangeDetails[0];
        } else if (theme === "agriculture") {
            challDetail = challangeDetails[1];
        } else if (theme === "digital_health") {
            challDetail = challangeDetails[2];
        }
        $firstChallenge.prop("value", challDetail.value1);
        $firstChallenge.siblings("label").text(challDetail.description1);
        $secondChallenge.prop("value", challDetail.value2);
        $secondChallenge.siblings("label").text(challDetail.description2);
    }

    $ideaStage.on("change", function () {
        var $additionalQuestion = $(".additionalQuestion");
        if ($(this).val() === "ready_for_field_trial") {
            $additionalQuestion.removeClass("display-n");
            $additionalQuestion.find("input[name='fieldTrial']").addClass("form-control");
        } else {
            $additionalQuestion.addClass("display-n");
            $additionalQuestion.find("input[name='fieldTrial']").removeClass("form-control");
            $(".yesFieldTrial").find("input, textarea").removeClass("form-control");
            $(".noFieldTrial").find("input, textarea").removeClass("form-control");
        }
    });

    $fieldTrial.on("change", function () {
        var $yesFieldTrial = $(".yesFieldTrial");
        var $noFieldTrial = $(".noFieldTrial");
        if ($(this).val() === "true") {
            $yesFieldTrial.removeClass("display-n");
            $yesFieldTrial.find("input, textarea").addClass("form-control");
            $noFieldTrial.addClass("display-n");
            $noFieldTrial.find("input, textarea").removeClass("form-control");
        } else {
            $yesFieldTrial.addClass("display-n");
            $yesFieldTrial.find("input, textarea").removeClass("form-control");
            $noFieldTrial.removeClass("display-n");
            $noFieldTrial.find("input, textarea").addClass("form-control");
        }
    });

    if (store.getItem("token")) {
        prePopulateForm();
        getEligible();
    } else {
        //$(".israel-challenge-error-message").modal("show");
        $(".login .sign-in").trigger('click');
    }

    function prePopulateForm() {
        $.ajax({
            type: "GET",
            async: false,
            url: SIH.getEndPoint("/api/auth/user/profile"),
            headers: {"X-Auth-Token": store.getItem("token")}
        }).done(function (data) {
            if (data.user.name) {
                $applicantName.val(data.user.name).attr("readonly", "readonly");
            }
            if (data.user.email) {
                $email.val(data.user.email).attr("readonly", "readonly");
            }
            if (data.user.phone) {
                $mobile.val(data.user.phone).attr("readonly", "readonly");
            }
            if (data.user.startup) {
                var startupData = data.user.startup;

                if (startupData.location.city && startupData.location.city.text) {
                    $city.val(startupData.location.city.text).attr("readonly", "readonly");
                }
                if (startupData.location.state && startupData.location.state.text) {
                    $state.val(startupData.location.state.text).attr("readonly", "readonly");
                }
                if (startupData.location.country && startupData.location.country.text) {
                    $country.val(startupData.location.country.text).attr("readonly", "readonly");
                }
            } else {
                var userData = data.user;

                if (userData.location.city && userData.location.city.text) {
                    $city.val(userData.location.city.text).attr("readonly", "readonly");
                }
                if (userData.location.state && userData.location.state.text) {
                    $state.val(userData.location.state.text).attr("readonly", "readonly");
                }
                if (userData.location.country && userData.location.country.text) {
                    $country.val(userData.location.country.text).attr("readonly", "readonly");
                }
            }
        });
    }

    function getFormData() {
        formData = {};
        isValidated = true;
        var attrValue = "";
        $.each($(".textBoxOut .extraFiles input[type='file']"), function (index, inputSel) {
            if ($(inputSel).val() === "") {
                $(inputSel).parents(".extraFiles").remove();
            }
        });
        var inputField = $("#israelChallengeForm").find(".form-control");
        $.each(inputField, function (index, inputSel) {

            var key = $(inputSel).attr("name");
            if (typeof key != "undefined") {
                attrValue = $(inputSel).attr("type") === "radio" ? $('input[name="' + inputSel.name + '"]:checked').val() : $(inputSel).val();
                if (attrValue) {
                    formData[key] = attrValue.toString();
                }
                checkRequiredField(attrValue, inputSel);
            }
        });
        var $challengeInput = $("input[name='challengeCode']:checked");
        if ($challengeInput.length > 0) {
            formData["challengeDescription"] = $challengeInput.siblings("label").text();
        }
        var $docNames = $(".israel-challenge-form").find(".textBoxOut .fileUploadField input[type='hidden']");
        if ($videoFileName) {
            var videoLinkVal = $videoFileName.val();
            if (videoLinkVal.trim().length > 0) {
                if (videoLinkVal.startsWith("https") || videoLinkVal.startsWith("http")) {
                    $videoFileName.siblings('span.help-block').html("").parents(".form-group").removeClass("has-error");
                }
                else {
                    $videoFileName.siblings('span.help-block').html("Video Link should start with either http or https").parents(".form-group").addClass("has-error");
                    isValidated = false;
                }
            }
        }
        var docfileList = [];
        $.each($docNames, function (index, inputSel) {
            attrValue = $(inputSel).val();
            if (attrValue) {
                docfileList.push(attrValue);
            }
        });
        if (docfileList.length > 0) {
            formData['docFileName'] = docfileList;
            $(".textBoxOut#docFileName").find("span.help-block").html("").parents(".form-group").removeClass("has-error");
        } else {
            isValidated = false;
            $(".textBoxOut#docFileName").find("span.help-block").last().html("Atleast 1 file should be uploaded.").parents(".form-group").addClass("has-error");
        }
    }

    function checkRequiredField(attrValue, inputSel) {
        var requiredField = $(inputSel).closest(".form-group").find("sup.required");
        if (requiredField && requiredField.length > 0 && (!attrValue || attrValue === "")) {
            isValidated = false;
            $(inputSel).closest(".form-group").addClass("has-error").find("span.help-block").first().html("This field cannot be left Blank.");
        } else {
            $(inputSel).closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
        }
    }

    function getEligible() {
        $.ajax({
            type: "GET",
            async: "false",
            url: SIH.getEndPoint("/api/auth/indoIsraelChallenge/applicable"),
            headers: {"X-Auth-Token": store.getItem("token")}
        }).done(function (data) {
            isUserAplicable = data;
            if (isUserAplicable) {
                prepopulateAllForm();
            } else {
                $(".israel-challenge-eligiblity-check").modal("show");
            }
        });
    }

    function prepopulateAllForm() {
        $.ajax({
            type: "GET",
            async: "false",
            url: SIH.getEndPoint("/api/auth/indoIsraelChallenge/get/application"),
            headers: {"X-Auth-Token": store.getItem("token")}
        }).done(function (data) {
            if (data.theme === "water") {
                $firstChallenge.siblings("label").text(challangeDetails[0].description1);
                $secondChallenge.siblings("label").text(challangeDetails[0].description2);
            } else if (data.theme === "agriculture") {
                $firstChallenge.siblings("label").text(challangeDetails[1].description1);
                $secondChallenge.siblings("label").text(challangeDetails[1].description2);
            } else if (data.theme === "digital_health") {
                $firstChallenge.siblings("label").text(challangeDetails[2].description1);
                $secondChallenge.siblings("label").text(challangeDetails[2].description2);
            }
            if (data.challengeCode === "w01" || data.challengeCode === "ag01" || data.challengeCode === "dh01") {
                $("input[name='challengeCode']").prop("disabled", "disabled");
                $firstChallenge.prop("checked", "checked").removeAttr("disabled");
            } else if (data.challengeCode === "w02" || data.challengeCode === "ag02" || data.challengeCode === "dh02") {
                $("input[name='challengeCode']").prop("disabled", "disabled");
                $secondChallenge.prop("checked", "checked").removeAttr("disabled");
            }
            if ($applicantName.attr('readonly') !== "readonly") {
                $applicantName.val(data.applicantName);
            }
            if ($email.attr('readonly') !== "readonly") {
                $email.val(data.email);
            }
            if ($mobile.attr('readonly') !== "readonly") {
                $mobile.val(data.mobile);
            }
            if ($qualification.attr('readonly') !== "readonly") {
                $qualification.val(data.qualification);
            }
            if ($occupation.attr('readonly') !== "readonly") {
                $occupation.val(data.occupation);
            }
            $experience.val(data.experience);
            $address.val(data.address);
            if ($city.attr('readonly') !== "readonly") {
                $city.val(data.city);
            }
            if ($pincode.attr('readonly') !== "readonly") {
                $pincode.val(data.pincode);
            }
            if ($state.attr('readonly') !== "readonly") {
                $state.val(data.state);
            }
            if ($country.attr('readonly') !== "readonly") {
                $country.val(data.country);
            }

            $theme.prop("disabled", "disabled");
            $("input[name='theme'][value='" + data.theme + "']").prop("checked", "checked").removeAttr("disabled");

            $("input[name='ideaStage'][value='" + data.ideaStage + "']").prop("checked", "checked").trigger("change");
            if ("ready_for_field_trial" === data.ideaStage) {
                $(".additionalQuestion").removeClass("display-n");
                $("input[name='fieldTrial'][value='" + data.fieldTrial + "']").prop("checked", "checked").trigger("change");
                if ("true" === data.fieldTrial || true === data.fieldTrial) {

                    $(".yesFieldTrial").removeClass("display-n").find("textarea").addClass("form-control");
                    $fieldTrialDetail.val(data.fieldTrialDetail);
                    $howConducted.val(data.howConducted);
                    $challengesFaced.val(data.challengesFaced);
                    $successCriteria.val(data.successCriteria);
                    $fieldResults.val(data.fieldResults);
                    $whatWentRightWrong.val(data.whatWentRightWrong);
                    $userFeedback.val(data.userFeedback);
                    $learning.val(data.learning);
                    $needToModify.val(data.needToModify);
                } else {

                    $(".noFieldTrial").removeClass("display-n").find("textarea").addClass("form-control");
                    $fieldTrialPlan.val(data.fieldTrialPlan);
                    $ecosystemDetail.val(data.ecosystemDetail);
                    $challengeFacedPrototyping.val(data.challengeFacedPrototyping);
                    $supportNeededDescription.val(data.supportNeededDescription);
                }
            }
            $problem.val(data.problem);
            $solutionSteps.val(data.solutionSteps);
            $idea.val(data.idea);
            $businessModel.val(data.businessModel);
            $teamInfo.val(data.teamInfo);
            $confidence.val(data.confidence);
            $impact.val(data.impact);
            $videoFileName.val(data.videoFileName);
            $id.val(data.id);
        });

    }

    function addmoreupload() {
        var demoLink = $(".docArea");
        var $uploadRow = $("#docFileName");
        var length = parseInt($uploadRow.children().length) + 1;
        var linknDocTemplate = $(demoLink).first().html();

        if (length > 6) {
            $uploadRow.find(".fileUploadField:last span.help-block").html("Only 5 documents can be uploaded.");
            $("#add-file-field").prop("disabled", "disabled");
        } else {
            $uploadRow.append(linknDocTemplate);
            $.each($uploadRow.find(".fileUploadField"), function (index, fileuploadDiv) {
                $(this).find("input[type='file']").attr("name", "docFile[" + (index + 1) + "]").addClass("form-control");
                $(this).find("input[type='hidden']").attr("name", "docFileName[" + (index + 1) + "]");
            })
        }
    }

    function checkFileUpload(selectedFormats, fileToValidate, fileSize, extensions) {

        var message = "";
        if ($(fileToValidate).val() !== "") {
            if (fileToValidate.files[0].size > fileSize) {
                message = "File Should not be greater then " + Math.floor(fileSize / 1000000) + " MB.";
            }
            if (jQuery.inArray(fileToValidate.files[0].type, selectedFormats) === -1) {
                message = message + " Please upload " + extensions.toString() + " file formats.";
            }
            if (message !== "") {
                isValidated = false;
                $(fileToValidate).siblings(".help-block").html(message).parents(".form-group").addClass("has-error");
                $(fileToValidate).val("");
            } else {
                $(fileToValidate).siblings(".help-block").html("").parents(".form-group").removeClass("has-error");
                var data = new FormData();
                data.append("file", fileToValidate.files[0]);
                $(".modal.loader").modal("show");
                $.ajax({
                    type: "POST",
                    data: data,
                    dataType: 'json',
                    contentType: false,
                    processData: false,
                    url: SIH.getEndPoint("/api/file/indoIsraelChallenge/doc"),
                    headers: {"X-Auth-Token": store.getItem("token")}
                }).done(function (data) {
                    $(".modal.loader").modal("hide");
                    $(fileToValidate).siblings("input[type='hidden']").val(data.name);
                }).error(function () {
                    $(".modal.loader").modal("hide");
                    $(".israel-challenge-error-message").modal("show");
                    return false;
                });
            }
        }
        return false;
    }

    $(".israel-challenge-form .textBoxOut").on("change", ".fileUploadField input[type='file']", function () {
        var formats = ["application/vnd.ms-powerpoint", "application/vnd.openxmlformats-officedocument.presentationml.presentation", "application/pdf"];
        var extensions = ["ppt", "pptx", "pdf"];
        checkFileUpload(formats, this, 2062594, extensions);
        return false;
    });

    $submitChallengeForm.on("click", function () {
        getFormData();
        if (isValidated && isUserAplicable) {
            $(this).parents(".form-group").removeClass("has-error").find("span.help-block").addClass("display-n");
            $.ajax({
                type: "POST",
                data: JSON.stringify(formData),
                contentType: "application/json",
                dataType: "json",
                url: SIH.getEndPoint("/api/auth/indoIsraelChallenge/apply"),
                headers: {"X-Auth-Token": store.getItem("token")}
            }).done(function () {
                // $(".israel-challenge-submit-message").modal('show');
                window.location = $submitChallengeForm.attr("data-path") + ".html";
            }).error(function () {
                $(".israel-challenge-error-message").modal("show");
            });
        } else {
            $(this).parents(".form-group").addClass("has-error").find("span.help-block").removeClass("display-n");
        }
    });

    $("#add-file-field").click(function () {
        addmoreupload();
    });

    $(".form-group .textBoxOut").on("click", ".extraFiles a.removeFile", function () {
        $(this).closest(".fileUploadField").remove();
    });
    $("#israelChallengeForm").find('#state').on("change", function (event) {
        event.stopPropagation();
    });
};

$.agriculture_form = function (msg1, msg2, problemPage) {
    var formData = {};
    var isValidated = true;
    var isUserAplicable = false;
    var $applicantName = $("input[name='applicantName']");
    var $email = $("input[name='email']");
    var $mobile = $("input[name='mobile']");
    var $videoFileName = $("input[name='videoLink']");
    var $submitChallengeForm = $("input[name='agricultureFormSubmit']");
    if (store.getItem("token")) {
        /*  if (!store.getItem("published")) {
              disableAGCForm();
              $('.under-moderation-modal').modal('show');
          } else {
              $('#agricultureChallengeForm input[type=text],#agricultureChallengeForm select.form-control,#agricultureChallengeForm input[type=number],#agricultureChallengeForm textarea,#agricultureChallengeForm input[type=radio],#agricultureChallengeForm input[type=button], #agricultureChallengeForm input[type=file]').removeAttr("disabled", "disabled");
              if (!(store.getItem('role') && (store.getItem('role').toLowerCase() == 'startup'|| store.getItem('role').toLowerCase() == 'individual'))){
                  $('.agriculture-error-modal .modal-description').html(msg1 ? msg1 : "You need to be a startup or individual to apply for this challenge");
                  $('.agriculture-error-modal').modal('show');
                  $('.agriculture-error-modal').on('hidden.bs.modal', function () {
                      window.location = $('.logo').attr('href');
                  });
              } else {
                  if (!store.getItem('themeCode')) {
                      $('.agriculture-error-modal .modal-description').html(msg2 ? msg2 : "Please select Problem description to apply for this challenge");
                      $('.agriculture-error-modal').modal('show');
                      $('.agriculture-error-modal').on('hidden.bs.modal', function () {
                          window.location = problemPage;
                      });
                  } else {
                      getEligible();
                  }
              }
          }*/

        getApplicationForm();

    } else {
        disableAGCForm();
        store.getItem("no-profile") ? $('.complete-profile-modal').modal('show') : $(".login .sign-in").trigger('click');
    }

    function getApplicationForm() {
        $.ajax({
            type: "GET",
            url: SIH.getEndPoint("/api/auth/agricultureChallenge/" + store.getItem("uniqueId")),
            headers: {"X-Auth-Token": store.getItem("token")}
        }).done(function (data) {
            if (data) {
                setFormData(data);

            } else {
                disableAGCForm();
            }
        });
    }

    function disableAGCForm() {
        $('#agricultureChallengeForm input[type=text],#agricultureChallengeForm select.form-control,#agricultureChallengeForm input[type=number],#agricultureChallengeForm textarea,#agricultureChallengeForm input[type=radio],#agricultureChallengeForm input[type=button],#agricultureChallengeForm input[type=file]').attr("disabled", "disabled");
    }

    function getChallengeCountryList(d) {
        $.ajax({
            type: "GET",
            url: "/services/tags/countries.json",
        }).done(function (data) {
            $.each(data, function (index, result) {
                var options = "<option  id='" + result.id + "' value='" + result.id + "'>" + result.text + "</option>";
                $("#countryList").append(options + "<br>")
            });
            $('select[name=country]').val(d['country']);
        });
    }

    function getFormData() {
        formData = {};
        isValidated = true;
        var attrValue = "";
        var inputField = $("#agricultureChallengeForm").find(".form-control");
        $.each(inputField, function (index, inputSel) {

            var key = $(inputSel).attr("name");
            if (typeof key != "undefined") {
                attrValue = $(inputSel).attr("type") === "radio" ? $('input[name="' + inputSel.name + '"]:checked').val() : $(inputSel).val();
                if (attrValue) {
                    formData[key] = attrValue.toString();
                }
                checkRequiredField(attrValue, inputSel);
            }
        });
        if ($videoFileName) {
            var videoLinkVal = $videoFileName.val();
            if (videoLinkVal.trim().length > 0) {
                if (videoLinkVal.startsWith("https") || videoLinkVal.startsWith("http")) {
                    $videoFileName.siblings('span.help-block').html("").parents(".form-group").removeClass("has-error");
                }
                else {
                    $videoFileName.siblings('span.help-block').html("Video Link should start with either http or https").parents(".form-group").addClass("has-error");
                    isValidated = false;
                }
            }
        }
        formData['additionalDocuments'] = $('input[type=hidden][name=additionalDocuments]').val();
        formData['problemCode'] = store.getItem('themeCode');
        formData['problemDescription'] = store.getItem('themeTitle');
    }

    function checkRequiredField(attrValue, inputSel) {
        var requiredField = $(inputSel).closest(".form-group").find("sup.required");
        if (requiredField && requiredField.length > 0 && (!attrValue || attrValue === "")) {
            isValidated = false;
            $(inputSel).closest(".form-group").addClass("has-error").find("span.help-block").first().html("This field cannot be left Blank.");
        } else {
            $(inputSel).closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
        }
    }

    function getEligible() {
        $.ajax({
            type: "GET",
            async: "false",
            url: SIH.getEndPoint("/api/auth/agricultureChallenge/applicable"),
            headers: {"X-Auth-Token": store.getItem("token")}
        }).done(function (data) {
            isUserAplicable = data;
            if (isUserAplicable) {
                getChallengeCountryList();
                prepopulateAllForm();
            } else {
                $(".agriculture-challenge-eligiblity-check").modal("show");
            }
        });
    }

    function checkFileUpload(selectedFormats, fileToValidate, fileSize, extensions) {

        var message = "";
        if ($(fileToValidate).val() !== "") {
            if (fileToValidate.files[0].size > fileSize) {
                message = "File Should not be greater then " + Math.floor(fileSize / 1000000) + " MB.";
            }
            if (jQuery.inArray(fileToValidate.files[0].type, selectedFormats) === -1) {
                message = message + " Please upload " + extensions.toString() + " file formats.";
            }
            if (message !== "") {
                isValidated = false;
                $(fileToValidate).siblings(".help-block").html(message).parents(".form-group").addClass("has-error");
                $(fileToValidate).val("");
            } else {
                $(fileToValidate).siblings(".help-block").html("").parents(".form-group").removeClass("has-error");
                var data = new FormData();
                data.append("file", fileToValidate.files[0]);
                $(".modal.loader").modal("show");
                $.ajax({
                    type: "POST",
                    data: data,
                    dataType: 'json',
                    contentType: false,
                    processData: false,
                    url: SIH.getEndPoint("/api/file/agricultureChallenge/doc"),
                    headers: {"X-Auth-Token": store.getItem("token")}
                }).done(function (data) {
                    $(".modal.loader").modal("hide");
                    $(fileToValidate).siblings("input[type='hidden']").val(data.name);
                }).error(function () {
                    $(".modal.loader").modal("hide");
                    $(".agriculture-challenge-error-message").modal("show");
                    return false;
                });
            }
        }
        return false;
    }

    $("#agricultureChallengeForm .textBoxOut").on("change", ".fileUploadField input[type='file']", function () {
        var formats = ["application/vnd.ms-powerpoint", "application/vnd.openxmlformats-officedocument.presentationml.presentation", "application/pdf"];
        var extensions = ["ppt", "pptx", "pdf"];
        checkFileUpload(formats, this, 2062594, extensions);
        return false;
    });

    function prepopulateAllForm() {
        $('#agricultureChallengeForm .problem-statement-wrapper img').attr('src', store.getItem('themeImage'))
        $('#agricultureChallengeForm .problem-statement-wrapper .static-heading').html(store.getItem('themeTitle'));
        $('#agricultureChallengeForm .problem-statement-wrapper .description').html(store.getItem('themeDescription'));
        $.ajax({
            type: "GET",
            async: false,
            url: SIH.getEndPoint("/api/auth/user/profile"),
            headers: {"X-Auth-Token": store.getItem("token")}
        }).done(function (data) {
            if (data.user.name) {
                $applicantName.val(data.user.name).attr("readonly", "readonly");
            }
            if (data.user.email) {
                $email.val(data.user.email).attr("readonly", "readonly");
            }
        });
    }

    $submitChallengeForm.on("click", function () {
        getFormData();
        if (isValidated && isUserAplicable) {
            $(this).parents(".form-group").removeClass("has-error").find("span.help-block").addClass("display-n");
            $.ajax({
                type: "POST",
                data: JSON.stringify(formData),
                contentType: "application/json",
                dataType: "json",
                url: SIH.getEndPoint("/api/auth/agricultureChallenge/apply"),
                headers: {"X-Auth-Token": store.getItem("token")}
            }).done(function () {
                // $(".israel-challenge-submit-message").modal('show');
                window.location = $submitChallengeForm.attr("data-path") + ".html";
            }).error(function () {
                $(".agriculture-error-message").modal("show");
            });
        } else {
            $(this).parents(".form-group").addClass("has-error").find("span.help-block").removeClass("display-n");
        }
    });
    $("#agricultureChallengeForm").find('#state').on("change", function (event) {
        event.stopPropagation();
    });

    function setFormData(data) {
        $.each(data, function (index, val) {
            var field = $('#agricultureChallengeForm input[name=' + index + '], #agricultureChallengeForm select[name=' + index + '], #agricultureChallengeForm textarea[name=' + index + ']');
            var isList = Boolean(field.closest(".repeat-container").length);
            var type = field.attr("type");
            if (type === 'radio') {
                $.each($('input[name=' + index + ']'), function (index, value) {
                    if (val === $(this).val()) {
                        $(this).prop('checked', true);
                        return true;
                    }
                });
            } else if (type === 'checkbox') {
                $.each($('input[name=' + index + ']'), function (index, value) {
                    var inputVal = $(this).val();
                    $.each(val, function (index, value1) {
                        if (value1 === inputVal) {
                            $(value).attr('checked', true);
                        }
                    })
                });
            }
            else if (isList && Array.isArray(val)) {
                val.forEach(function (value, idx) {
                    field = $('#agricultureChallengeForm input[name=' + index + '], #agricultureChallengeForm select[name=' + index + '], #agricultureChallengeForm textarea[name=' + index + ']');
                    var currentField = $(field).eq(idx);
                    currentField.val(value);
                    if (field.length < val.length) {
                        var parent = currentField.closest(".repeat-container");
                        var button = parent.find(".repeat-add");
                        if (button.length > 0) {
                            button.trigger("click");
                        }
                    }
                })
            } else if (type === "file") {
            } else {
                field.val(val)
            }
        });
        getChallengeCountryList(data);
        //$('#agricultureChallengeForm .problem-statement-wrapper img').attr('src', store.getItem('themeImage'))
        // $('#agricultureChallengeForm .problem-statement-wrapper .static-heading').html(store.getItem('themeTitle'));
        $('#agricultureChallengeForm .problem-statement-wrapper .description').html(data['problemDescription']);
        if (data['startupStage']) {
            if (data['startupStage'] === 'Idea Stage') {
                $("#ideaStage").prop("checked", true);
            } else {
                $("#enterpriseStage").prop("checked", true);
            }
        }

        if (data['willingToRelocate'] === true || data['willingToRelocate'] === 'true') {
            $("#relocate-yes").prop("checked", true);
        } else if (data['willingToRelocate'] === false || data['willingToRelocate'] === 'false') {
            $("#relocate-no").prop("checked", true);
        }
        if (data['additionalDocuments']) {
            $('.presentationLink').attr("href", SIH.getEndPoint("/api/file/challenge/doc/agc/" + data['additionalDocuments'] + "/get")).html(data['additionalDocuments']).removeClass("display-n");
        }
        disableAGCForm();
    }
};

$.singapore_form = function (challangeDetails) {
    var formData = {};
    var isValidated = true;
    var isUserAplicable = false;

    var $firstChallenge = $("input#challenge1");
    var $secondChallenge = $("input#challenge2");
    var $applicantName = $("input[name='applicantName']");
    var $email = $("input[name='email']");
    var $mobile = $("input[name='mobile']");
    var $qualification = $("input[name='qualification']");
    var $occupation = $("input[name='occupation']");
    var $experience = $("input[name='experience']");
    var $address = $("input[name='address']");
    var $city = $("input[name='city']");
    var $pincode = $("input[name='pincode']");
    var $state = $("input[name='state']");
    var $country = $("input[name='country']");
    var $theme = $("input[name='theme']");

    var $ideaStage = $("input[name='ideaStage']");
    var $fieldTrial = $("input[name='fieldTrial']");

    var $fieldTrialDetail = $("textarea[name='fieldTrialDetail']");
    var $howConducted = $("textarea[name='howConducted']");
    var $challengesFaced = $("textarea[name='challengesFaced']");
    var $successCriteria = $("textarea[name='successCriteria']");
    var $fieldResults = $("textarea[name='fieldResults']");
    var $whatWentRightWrong = $("textarea[name='whatWentRightWrong']");
    var $userFeedback = $("textarea[name='userFeedback']");
    var $learning = $("textarea[name='learning']");
    var $needToModify = $("textarea[name='needToModify']");

    var $fieldTrialPlan = $("textarea[name='fieldTrialPlan']");
    var $ecosystemDetail = $("textarea[name='ecosystemDetail']");
    var $challengeFacedPrototyping = $("textarea[name='challengeFacedPrototyping']");
    var $supportNeededDescription = $("textarea[name='supportNeededDescription']");

    var $problem = $("textarea[name='problem']");
    var $solutionSteps = $("textarea[name='solutionSteps']");
    var $idea = $("textarea[name='idea']");
    var $businessModel = $("textarea[name='businessModel']");
    var $teamInfo = $("textarea[name='teamInfo']");
    var $confidence = $("textarea[name='confidence']");
    var $impact = $("textarea[name='impact']");
    var $videoFileName = $("input[name='videoFileName']");
    var $id = $("input[name='id']");

    var $submitChallengeForm = $("input[name='challengeFormSubmit']");

    $.urlParam = function (name) {
        var results = new RegExp('[\?&]' + name + '=([^&#]*)').exec(window.location.href);
        return results ? results[1] : 0;
    };

    $ideaStage.on("change", function () {
        var $additionalQuestion = $(".additionalQuestion");
        if ($(this).val() === "ready_for_field_trial") {
            $additionalQuestion.removeClass("display-n");
            $additionalQuestion.find("input[name='fieldTrial']").addClass("form-control");
        } else {
            $additionalQuestion.addClass("display-n");
            $additionalQuestion.find("input[name='fieldTrial']").removeClass("form-control");
            $(".yesFieldTrial").find("input, textarea").removeClass("form-control");
            $(".noFieldTrial").find("input, textarea").removeClass("form-control");
        }
    });

    $fieldTrial.on("change", function () {
        var $yesFieldTrial = $(".yesFieldTrial");
        var $noFieldTrial = $(".noFieldTrial");
        if ($(this).val() === "true") {
            $yesFieldTrial.removeClass("display-n");
            $yesFieldTrial.find("input, textarea").addClass("form-control");
            $noFieldTrial.addClass("display-n");
            $noFieldTrial.find("input, textarea").removeClass("form-control");
        } else {
            $yesFieldTrial.addClass("display-n");
            $yesFieldTrial.find("input, textarea").removeClass("form-control");
            $noFieldTrial.removeClass("display-n");
            $noFieldTrial.find("input, textarea").addClass("form-control");
        }
    });

    if (!store.getItem("published") && store.getItem("token")) {
        $('.under-moderation-modal').modal('show');
        $submitChallengeForm.attr("disabled", true);
    } else if (store.getItem("no-profile")) {
        $('.complete-profile-modal').modal('show');
        $submitChallengeForm.attr("disabled", true);
    } else if (!store.getItem('token')) {
        $(".login .sign-in").trigger('click');
        $submitChallengeForm.attr("disabled", true);
    } else if (store.getItem("token")) {
        prePopulateForm();
        getEligible();
    } else {
        $($submitChallengeForm).attr("disabled", true);
        $(".login .sign-in").trigger('click');
    }

    function prePopulateForm() {
        $.ajax({
            type: "GET",
            async: false,
            url: SIH.getEndPoint("/api/auth/user/profile"),
            headers: {"X-Auth-Token": store.getItem("token")}
        }).done(function (data) {
            if (data.user.name) {
                $applicantName.val(data.user.name).attr("readonly", "readonly");
            }
            if (data.user.email) {
                $email.val(data.user.email).attr("readonly", "readonly");
            }
            if (data.user.phone) {
                $mobile.val(data.user.phone).attr("readonly", "readonly");
            }
            if (data.user.startup) {
                var startupData = data.user.startup;
                if (startupData.location.city && startupData.location.city.text) {
                    $city.val(startupData.location.city.text).attr("readonly", "readonly");
                }
                if (startupData.location.state && startupData.location.state.text) {
                    $state.val(startupData.location.state.text).attr("readonly", "readonly");
                }
                if (startupData.location.country.text) {
                    $country.val(startupData.location.country.text).attr("readonly", "readonly");
                }
            } else {
                var userData = data.user;
                if (userData.location.city && userData.location.city.text) {
                    $city.val(userData.location.city.text).attr("readonly", "readonly");
                }
                if (userData.location.state && userData.location.state.text) {
                    $state.val(userData.location.state.text).attr("readonly", "readonly");
                }
                if (userData.location.country.text) {
                    $country.val(userData.location.country.text).attr("readonly", "readonly");
                }
            }
        });
    }

    function getFormData() {
        formData = {};
        isValidated = true;
        var attrValue = "";
        $.each($(".textBoxOut .extraFiles input[type='file']"), function (index, inputSel) {
            if ($(inputSel).val() === "") {
                $(inputSel).parents(".extraFiles").remove();
            }
        });
        var inputField = $("#singaporeChallengeForm").find(".form-control");
        $.each(inputField, function (index, inputSel) {

            var key = $(inputSel).attr("name");
            if (typeof key != "undefined") {
                attrValue = $(inputSel).attr("type") === "radio" ? $('input[name="' + inputSel.name + '"]:checked').val() : $(inputSel).val();
                if (attrValue) {
                    formData[key] = attrValue.toString();
                }
                checkRequiredField(attrValue, inputSel);
            }
        });
        var $challengeInput = $("input[name='challengeCode']:checked");
        if ($challengeInput.length > 0) {
            formData["challengeDescription"] = $challengeInput.siblings("label").text();
        }
        var $docNames = $(".singapore-challenge-form").find(".textBoxOut .fileUploadField input[type='hidden']");
        if ($videoFileName) {
            var videoLinkVal = $videoFileName.val();
            if (videoLinkVal.trim().length > 0) {
                if (videoLinkVal.startsWith("https") || videoLinkVal.startsWith("http")) {
                    $videoFileName.siblings('span.help-block').html("").parents(".form-group").removeClass("has-error");
                }
                else {
                    $videoFileName.siblings('span.help-block').html("Video Link should start with either http or https").parents(".form-group").addClass("has-error");
                    isValidated = false;
                }
            }
        }
        var docfileList = [];
        $.each($docNames, function (index, inputSel) {
            attrValue = $(inputSel).val();
            if (attrValue) {
                docfileList.push(attrValue);
            }
        });
        if (docfileList.length > 0) {
            formData['docFileName'] = docfileList;
            $(".textBoxOut#docFileName").find("span.help-block").html("").parents(".form-group").removeClass("has-error");
        } else {
            isValidated = false;
            $(".textBoxOut#docFileName").find("span.help-block").last().html("Atleast 1 file should be uploaded.").parents(".form-group").addClass("has-error");
        }
    }

    function checkRequiredField(attrValue, inputSel) {
        var requiredField = $(inputSel).closest(".form-group").find("sup.required");
        if (requiredField && requiredField.length > 0 && (!attrValue || attrValue === "")) {
            isValidated = false;
            $(inputSel).closest(".form-group").addClass("has-error").find("span.help-block").first().html("This field cannot be left Blank.");
        } else {
            $(inputSel).closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
        }
    }

    function getEligible() {
        $.ajax({
            type: "GET",
            async: "false",
            url: SIH.getEndPoint("/api/auth/indoSingaporeChallenge/applicable"),
            headers: {"X-Auth-Token": store.getItem("token")}
        }).done(function (data) {
            isUserAplicable = data;
            if (isUserAplicable) {
                // prepopulateAllForm();
            } else {
                $(".singapore-challenge-eligiblity-check").modal("show");
            }
        });
    }

    function prepopulateAllForm() {
        $.ajax({
            type: "GET",
            async: "false",
            url: SIH.getEndPoint("/api/auth/indoSingaporeChallenge/get/application"),
            headers: {"X-Auth-Token": store.getItem("token")}
        }).done(function (data) {
            if (data.theme === "water") {
                $firstChallenge.siblings("label").text(challangeDetails[0].description1);
                $secondChallenge.siblings("label").text(challangeDetails[0].description2);
            } else if (data.theme === "agriculture") {
                $firstChallenge.siblings("label").text(challangeDetails[1].description1);
                $secondChallenge.siblings("label").text(challangeDetails[1].description2);
            } else if (data.theme === "digital_health") {
                $firstChallenge.siblings("label").text(challangeDetails[2].description1);
                $secondChallenge.siblings("label").text(challangeDetails[2].description2);
            }
            if (data.challengeCode === "w01" || data.challengeCode === "ag01" || data.challengeCode === "dh01") {
                $("input[name='challengeCode']").prop("disabled", "disabled");
                $firstChallenge.prop("checked", "checked").removeAttr("disabled");
            } else if (data.challengeCode === "w02" || data.challengeCode === "ag02" || data.challengeCode === "dh02") {
                $("input[name='challengeCode']").prop("disabled", "disabled");
                $secondChallenge.prop("checked", "checked").removeAttr("disabled");
            }
            if ($applicantName.attr('readonly') !== "readonly") {
                $applicantName.val(data.applicantName);
            }
            if ($email.attr('readonly') !== "readonly") {
                $email.val(data.email);
            }
            if ($mobile.attr('readonly') !== "readonly") {
                $mobile.val(data.mobile);
            }
            if ($qualification.attr('readonly') !== "readonly") {
                $qualification.val(data.qualification);
            }
            if ($occupation.attr('readonly') !== "readonly") {
                $occupation.val(data.occupation);
            }
            $experience.val(data.experience);
            $address.val(data.address);
            if ($city.attr('readonly') !== "readonly") {
                $city.val(data.city);
            }
            if ($pincode.attr('readonly') !== "readonly") {
                $pincode.val(data.pincode);
            }
            if ($state.attr('readonly') !== "readonly") {
                $state.val(data.state);
            }
            if ($country.attr('readonly') !== "readonly") {
                $country.val(data.country);
            }

            $theme.prop("disabled", "disabled");
            $("input[name='theme'][value='" + data.theme + "']").prop("checked", "checked").removeAttr("disabled");

            $("input[name='ideaStage'][value='" + data.ideaStage + "']").prop("checked", "checked").trigger("change");
            if ("ready_for_field_trial" === data.ideaStage) {
                $(".additionalQuestion").removeClass("display-n");
                $("input[name='fieldTrial'][value='" + data.fieldTrial + "']").prop("checked", "checked").trigger("change");
                if ("true" === data.fieldTrial) {

                    $(".yesFieldTrial").removeClass("display-n").find("textarea").addClass("form-control");
                    $fieldTrialDetail.val(data.fieldTrialDetail);
                    $howConducted.val(data.howConducted);
                    $challengesFaced.val(data.challengesFaced);
                    $successCriteria.val(data.successCriteria);
                    $fieldResults.val(data.fieldResults);
                    $whatWentRightWrong.val(data.whatWentRightWrong);
                    $userFeedback.val(data.userFeedback);
                    $learning.val(data.learning);
                    $needToModify.val(data.needToModify);
                } else {

                    $(".noFieldTrial").removeClass("display-n").find("textarea").addClass("form-control");
                    $fieldTrialPlan.val(data.fieldTrialPlan);
                    $ecosystemDetail.val(data.ecosystemDetail);
                    $challengeFacedPrototyping.val(data.challengeFacedPrototyping);
                    $supportNeededDescription.val(data.supportNeededDescription);
                }
            }
            $problem.val(data.problem);
            $solutionSteps.val(data.solutionSteps);
            $idea.val(data.idea);
            $businessModel.val(data.businessModel);
            $teamInfo.val(data.teamInfo);
            $confidence.val(data.confidence);
            $impact.val(data.impact);
            $videoFileName.val(data.videoFileName);
            $id.val(data.id);
        });

    }

    function addmoreupload() {
        var demoLink = $(".docArea");
        var $uploadRow = $("#docFileName");
        var length = parseInt($uploadRow.children().length) + 1;
        var linknDocTemplate = $(demoLink).first().html();

        if (length > 6) {
            $uploadRow.find(".fileUploadField:last span.help-block").html("Only 5 documents can be uploaded.");
            $("#add-file-field").prop("disabled", "disabled");
        } else {
            $uploadRow.append(linknDocTemplate);
            $.each($uploadRow.find(".fileUploadField"), function (index, fileuploadDiv) {
                $(this).find("input[type='file']").attr("name", "docFile[" + (index + 1) + "]").addClass("form-control");
                $(this).find("input[type='hidden']").attr("name", "docFileName[" + (index + 1) + "]");
            })
        }
    }

    function checkFileUpload(selectedFormats, fileToValidate, fileSize, extensions) {

        var message = "";
        if ($(fileToValidate).val() !== "") {
            if (fileToValidate.files[0].size > fileSize) {
                message = "File Should not be greater then " + Math.floor(fileSize / 1000000) + " MB.";
            }
            if (jQuery.inArray(fileToValidate.files[0].type, selectedFormats) === -1) {
                message = message + " Please upload " + extensions.toString() + " file formats.";
            }
            if (message !== "") {
                isValidated = false;
                $(fileToValidate).siblings(".help-block").html(message).parents(".form-group").addClass("has-error");
                $(fileToValidate).val("");
            } else {
                $(fileToValidate).siblings(".help-block").html("").parents(".form-group").removeClass("has-error");
                var data = new FormData();
                data.append("file", fileToValidate.files[0]);
                $(".modal.loader").modal("show");
                $.ajax({
                    type: "POST",
                    data: data,
                    dataType: 'json',
                    contentType: false,
                    processData: false,
                    url: SIH.getEndPoint("/api/file/indoSingaporeChallenge/doc"),
                    headers: {"X-Auth-Token": store.getItem("token")}
                }).done(function (data) {
                    $(".modal.loader").modal("hide");
                    $(fileToValidate).siblings("input[type='hidden']").val(data.name);
                }).error(function () {
                    $(".modal.loader").modal("hide");
                    $(".singapore-challenge-error-message").modal("show");
                    return false;
                });
            }
        }
        return false;
    }

    $(".singapore-challenge-form .textBoxOut").on("change", ".fileUploadField input[type='file']", function () {
        var formats = ["application/vnd.ms-powerpoint", "application/vnd.openxmlformats-officedocument.presentationml.presentation", "application/pdf"];
        var extensions = ["ppt", "pptx", "pdf"];
        checkFileUpload(formats, this, 2062594, extensions);
        return false;
    });

    $submitChallengeForm.on("click", function () {
        getFormData();
        if (isValidated && isUserAplicable) {
            $(this).parents(".form-group").removeClass("has-error").find("span.help-block").addClass("display-n");
            $.ajax({
                type: "POST",
                data: JSON.stringify(formData),
                contentType: "application/json",
                dataType: "json",
                url: SIH.getEndPoint("/api/auth/indoSingaporeChallenge/apply"),
                headers: {"X-Auth-Token": store.getItem("token")}
            }).done(function () {
                $(".singapore-challenge-submit-message").modal('show');
            }).error(function () {
                $(".singapore-challenge-error-message").modal("show");
            });
        } else {
            $(this).parents(".form-group").addClass("has-error").find("span.help-block").removeClass("display-n");
        }
    });

    $("#add-file-field").click(function () {
        addmoreupload();
    });

    $(".form-group .textBoxOut").on("click", ".extraFiles a.removeFile", function () {
        $(this).closest(".fileUploadField").remove();
    });
    $("#singaporeChallengeForm").find('#state').on("change", function (event) {
        event.stopPropagation();
    });
};

$.fbApplication = function () {
    var formData = {};
    var isValidated = true;

    var $submitApplicationForm = $("input[name='fbApplicationFormSubmit']");

    var $submitSuccessfulModal = $(".fb-application-modals .fb-application-submit-message");
    var $errorModal = $(".fb-application-modals .fb-application-error-message");

    function getFormData() {
        formData = {};
        isValidated = true;
        var attrValue = "";
        var inputField = $("#fbApplicationForm").find(".form-control");
        $.each(inputField, function (index, inputSel) {
            var key = $(inputSel).attr("name");
            var type = $(inputSel).attr("type");
            if (typeof key != "undefined") {
                attrValue = $(inputSel).attr("type") === "radio" ? $('input[name="' + inputSel.name + '"]:checked').val() : $(inputSel).val();
                if (attrValue) {
                    formData[key] = attrValue;
                }
                checkRequiredField(attrValue, inputSel);
            }
            if ($('input[name=firstSourceOfCapital]:checked').val() === 'Other') {
                formData['firstSourceOfCapital'] = $('input[type=text][name=firstSourceOfCapital]').val();
            } else {
                formData['firstSourceOfCapital'] = $('input[name=firstSourceOfCapital]:checked').val();
            }
            if ($('input[name=secondSourceOfCapital]:checked').val() === 'Other') {
                formData['secondSourceOfCapital'] = $('input[type=text][name=secondSourceOfCapital]').val();
            } else {
                formData['secondSourceOfCapital'] = $('input[name=secondSourceOfCapital]:checked').val();
            }
        });
    }

    function checkRequiredField(attrValue, inputSel) {
        var requiredField = $(inputSel).closest(".form-group").find("sup.required");
        var attrName = $(inputSel).attr('name');
        if ((attrName === 'firstSourceOfCapital' || attrName === 'secondSourceOfCapital')) {
            if ($(inputSel).attr('type') === 'text') {
                return;
            } else if (attrValue == 'Other' && $(inputSel).attr('type') === 'radio') {
                if (!$("input[type=text][name=" + attrName + "]").val()) {
                    isValidated = false;
                    $(inputSel).closest(".form-group").addClass("has-error").find("span.help-block").first().html("This field cannot be left Blank.");
                } else {
                    $(inputSel).closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
                }
            } else if (!attrValue) {
                isValidated = false;
                $(inputSel).closest(".form-group").addClass("has-error").find("span.help-block").first().html("This field cannot be left Blank.");
            } else {
                $(inputSel).closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
            }
            return;
        }
        if ((!attrValue || attrValue === "") && requiredField && requiredField.length > 0) {
            isValidated = false;
            $(inputSel).closest(".form-group").addClass("has-error").find("span.help-block").first().html("This field cannot be left Blank.");
        } else {
            if (inputSel.hasAttribute("pattern") && attrValue !== "" && !attrValue.match($(inputSel).attr("pattern"))) {
                isValidated = false;
                $(inputSel).closest(".form-group").addClass("has-error").find("span.help-block").first().html("Please enter valid input.");
            } else {
                $(inputSel).closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
            }
        }
    }

    $submitApplicationForm.on("click", function () {
        getFormData();
        if (isValidated) {
            $(this).parents(".form-group").removeClass("has-error").find("span.help-block").addClass("display-n");
            $.ajax({
                type: "POST",
                data: JSON.stringify(formData),
                contentType: "application/json",
                dataType: "json",
                url: SIH.getEndPoint("/api/noauth/fbApplication/apply")
            }).done(function () {
                $submitApplicationForm.parents(".form-group").find("span.help-block").addClass("display-n");
                $submitSuccessfulModal.modal('show');
            }).error(function (data) {
                $errorModal.find(".modal-body").html(data.responseText);
                $errorModal.modal("show");
            });
        } else {
            $(this).parents(".form-group").addClass("has-error").find("span.help-block").removeClass("display-n");
        }
        return false;
    });

    function checkFileUpload(fileToValidate, fileSize) {

        var message = "";
        if ($(fileToValidate).val() !== "") {
            if (fileToValidate.files[0].size > fileSize) {
                message = "File Should not be greater then " + Math.floor(fileSize / 1000000) + " MB.";
            }
            if (message !== "") {
                isValidated = false;
                $(fileToValidate).siblings(".help-block").html(message).parents(".form-group").addClass("has-error");
                $(fileToValidate).val("");
            } else {
                $(fileToValidate).siblings(".help-block").html("").parents(".form-group").removeClass("has-error");
                var data = new FormData();
                data.append("file", fileToValidate.files[0]);
                $(".modal.loader").modal("show");
                $.ajax({
                    type: "POST",
                    data: data,
                    dataType: 'json',
                    contentType: false,
                    processData: false,
                    url: SIH.getEndPoint("/api/file/fbApplication/doc")
                }).done(function (data) {
                    $(".modal.loader").modal("hide");
                    $(fileToValidate).siblings("input[type='hidden']").val(data.name);
                }).error(function () {
                    $(".modal.loader").modal("hide");
                    $errorModal.find(".modal-body").html("There are some error while uploading file. Please try again later!!!");
                    $errorModal.modal("show");
                    return false;
                });
            }
        }
        return false;
    }

    $("form.fbApplicationForm").on("change", ".textBoxOut input[type='file']", function () {
        checkFileUpload(this, 2062594);
        return false;
    });

};
var startupFileNames = {};
var slideWrapWidth = 0;
var portfolioImages={};
var images = {};
var fileuploads = {};
var profileData = {};
var role = null;
var $mentorshipCityTrigger;
var validatePersona=true;
var enableTNC;
const ENTITY_PTC = "5f48ce5f2a9bb065cdfa185b";
const ENTITY_LLP = "5f48ce5f2a9bb065cdfa185c";
const ENTITY_RP = "5f48ce5f2a9bb065cdfa185d";


var personaMap = {
    "incubator": "Incubator",
    "accelerator": "Accelerator",
    "corporate":"Corporate",
    "institutional-investor": "Investor",
    "individual-investor": "Investor",
    "organization-service-provider": "ServiceProvider",
    "freelancer-service-provider": "ServiceProvider",
    "academia": "Academia",
    "government-body": "GovernmentBody",
    "individual": "Individual",
    "startup": "Startup",
    "mentor": "Mentor"
};
var enablerRole = ["Incubator", "Accelerator","Corporate", "Investor", "ServiceProvider", "Academia", "GovernmentBody", "Mentor"];
var switchProfile = false;
var personaJSON = {
    dialogsInBody: true,
    dialogsFade: true,
    minHeight: 50,
    disableDragAndDrop: true,
    toolbar: [
        ['insert', ['link']]
    ], callbacks: {
        onKeydown: function (e) {
            var t = e.currentTarget.innerText;
            if (t.trim().length >= $(this).attr("maxlength")) {
                if (e.keyCode != 8)
                    e.preventDefault();
            }
        },
        onKeyup: function (e) {
            var t = e.currentTarget.innerText;
            $('#maxContentPost').text($(this).attr("maxlength") - t.trim().length);
        },
        onPaste: function (e) {
            var max = parseInt($(this).attr("maxlength"));
            var t = e.currentTarget.innerText.trim();
            var bufferText = ((e.originalEvent || e).clipboardData || window.clipboardData).getData('Text').trim();
            e.preventDefault();
            document.execCommand('insertText', false, bufferText.substring(0, max - t.length + 1));
        },
        onImageUpload: function (data) {
            data.pop();
        }
    },
    dialogsInBody:true
};
var errorMappingObj = {};
$(document).on("ready", function(){
    if($(".persona-body").length){
        $("body").addClass('step-one');
    }
})

function doProcessingForTNC() {
    var tncWrapper = $("div.terms-condition-wrapper");
    if (tncWrapper && tncWrapper.length > 0) {
        var $submitCTA = tncWrapper.find("input.submit-cta");
        if (!tncWrapper.find("input[type=checkbox][name=enableTNC]").prop("checked")) {
            $submitCTA.attr("disabled", "disabled");
        } else {
            $submitCTA.removeAttr("disabled");
        }
    }
    //$("div.modal-backdrop.fade").remove();
}

function cloneFileUploads() {
    var repeatFileUploads = $(".repeat-container .file-upload");
    $.each(repeatFileUploads, function (index, item) {
        var $item = $(item);
        if (!fileuploads[$item.data('name')]) {
            fileuploads[$item.data('name')] = $item.clone();
        }
    });
}

//On change Term and Condition only for startup profile.
$(document).on("change", "input[type=checkbox][name=enableTNC]", function (event) {
    var $target = $(event.target);
    // var submitBtn = $target.find('.step-next-wrap input.submit-cta');
    if ($target.prop("checked")) {
        enableTNC =true;
        $('.step-next-wrap input.submit-cta').removeAttr("disabled");
    } else {
        enableTNC =false;
        $('.step-next-wrap input.submit-cta').attr("disabled", "disabled");
    }
});
//for other persona as per old design
$(document).on("change", "input[type=checkbox][name=enableTNC]", function (event) {
    var $target = $(event.target);
    var submitBtn = $target.closest("div.terms-condition-wrapper").find("input.submit-cta");
    if ($target.prop("checked")) {
        submitBtn.removeAttr("disabled");
    } else {
        submitBtn.attr("disabled", "disabled");
    }
});

$(document).on('change', '#persona-countries', function (event) {
    store.removeItem("startupEntity");
    $('#modal-loader').modal("show");
    $('.international-persona,.indian-persona').parents('.persona-chooser').hide();

    var selectedCountry = $("#persona-countries").val();
    store.setItem("personaCountry", selectedCountry);
    store.setItem("country", selectedCountry);
    if (selectedCountry === INDIA_COUNTRY_ID) {
        $('.international-persona').parents('.persona-chooser').hide();
        $('.indian-persona').parents('.persona-chooser').show().children('.row').removeClass('display-n');
    } else {
        $('.international-persona').parents('.persona-chooser').show().children('.row').removeClass('display-n');
        $('.indian-persona').parents('.persona-chooser').hide();
    }
    setTimeout(function () {
        $('#modal-loader').modal("hide");
    }, 2000);
});

//TODO: seems obsolete code - confirm & remove
function filterPersonaForCountry() {
    if (store.getItem('country') && store.getItem('country').toUpperCase() === 'SWEDEN') {
        $('.persona-profile-form div[data-personatype=individual]').closest('.col-xs-4').find('.thumbnail .caption h3').html("Swedish User");
        $('.persona-profile-form div[data-personatype=individual]').closest('.col-xs-4').find('.thumbnail .caption p').html("Entrepreneurs/Investors/Incubators/Mentors");
        $('.persona-profile-form .accordion-section-title').html("<span class='number'>1</span>Users from Sweden?");
        $('.persona-profile-form div[data-personatype=startup], .persona-profile-form div[data-personatype=enabler]').closest('.col-xs-4').hide()
    }
}

function isUpdateProfile() {
    return getSelector(location.pathname, 0) === "update";
}

function setHeaderFields() {
    var country = store.getItem("personaCountry") ? store.getItem("personaCountry") : INDIA_COUNTRY_ID;
    setHeaderCountry($(".headerCountryLink[data-value='" + country + "']"));

    setHeaderRolesList(country);
    var role = store.getItem("personatype");
    setHeaderRole($(".headerRoleLink[data-value='" + role + "']"), false, false);
}

$(document).ready(function () {


    //TODO: seems obsolete method - confirm & remove
    filterPersonaForCountry();
    var noDashboardPersonas = ["freelancer-service-provider", "organization-service-provider", "academia"];
    var enablers = ["government-body", "academia", "incubator", "accelerator","corporate", "institutional-investor", "individual-investor", "organization-service-provider", "freelancer-service-provider", "mentor"];

    var store = store || ContextHub.getStore("sih_user");
    store.removeItem("startupEntity");
    $(".btn-next-step").attr("disabled", "disabled");
    setHeaderCountryList();
    if (!isUpdateProfile()) setCountryList();

    if(store.getItem("socialLogin") == true && !getParameterByName("applicationId")){
        setTimeout(function () {
            $("input[name=email]").val(store.getItem('email')).prop("disabled",true);
        },1000);

    }

    function setCountryList() {
        var params = {};
        var $selection = $("#persona-countries");
        if ($selection && $selection.length > 0) {
            setList(params, $selection.data("path"), $selection, countryChangeCallback);
        }
    }

    //Commment the below code to disappear dropdown from the role and country on persona/{role}.html

    /*if (!isUpdateProfile() || (store.getItem("personatype")==="individual" && isUpdateProfile())) {
    $("#headerRole").each(function(){
        $(this).on('mouseover', function(){
            $(this).find(".dropdown-content").show();
        });
        $(this).on('mouseout', function(){
            $(this).find(".dropdown-content").hide();
        });
    });
}    if(store.getItem("no-profile")==true){
        $("#headerCountry").each(function(){
            $(this).on('mouseover', function(){
                $(this).find(".dropdown-content").show();
            });
            $(this).on('mouseout', function(){
                $(this).find(".dropdown-content").hide();
            });
        });
}*/
    var personaStepsPath;
    //TODO: check if 'triggered' check now needed?
    $(document).on('click', '.persona-radio-wrap', function (event, triggered) {
        if (isUpdateProfile() && store.getItem("role").toLowerCase() === "individual"
            && $(this).children("div.persona-container").data("personatype") === "startup" && !triggered) {
        } else {
            var $target = $(this).children("div.persona-container");
            var personaType = $target.data("personatype");
            personaStepsPath = $target.data("personaStepsPath");
            store.setItem("personatype", personaType);

            // finding for the suboptions
            var $option = $(".persona-chooser select[name=" + personaType + "-option]");
            if ($option && $option.length > 0) {
                $option.closest("div.row").css("display", "block");
                $(".btn-next-step").attr("disabled", "disabled");
            } else {
                $(".row.first-level-category").hide();
                $(".row.first-level-category .persona-sub-option").find("option:first").prop("selected", true);
                $(".row.second-level-category").hide().end().find("input[type=radio]").prop('checked', false);
                $(".btn-next-step").attr("disabled", false);
            }
        }
    });

    $(document).on('change', 'select.persona-sub-option', function (event) {
        store.removeItem('hasStories');
        store.removeItem('TiEOrLetsVenture');
        var $target = $(event.target);
        var $selectedTarget = $target.find("option:selected");
        var persona = $target.val();
        if (persona == "") {
            alert("select Type");
        } else {
            store.setItem("personatype", persona);
            personaStepsPath = $selectedTarget.data("personaStepsPath");

            // check for second level options
            var subOption = $(".persona-chooser input[name=" + persona + "-option]");
            $(".row.second-level-category").hide();
            if (subOption && subOption.length > 0) {
                subOption.closest("div.row").css("display", "block");
                $(".btn-next-step").attr("disabled", "disabled");
            } else {
                $(".btn-next-step").attr("disabled", false);
            }
        }
    });

    $(document).on("change", ".persona-sub-option:radio", function (event) {
        var $target = $(event.target);
        var persona = store.getItem("personatype").toLowerCase();
        if (persona === 'individual-investor' || persona === 'institutional-investor') {
            persona = "investor";
        } else if (persona === "organization-service-provider" || persona === "freelancer-service-provider") {
            persona = "service-provider";
        }
        var value = $(".persona-chooser input[name=" + persona + "-option]:checked").val();
        store.setItem("personatype", value);
        personaStepsPath = $target.data("personaStepsPath");
        $(".btn-next-step").attr("disabled", false);
    });

    $(document).on('click', '.btn-next-step', function (event, triggered) {
        store.setItem("personaStepsPath", personaStepsPath);
        personaSelection(personaStepsPath);
    });

    $(document).on('change', '#header-countries', function (event) {
        store.removeItem("startupEntity");
        $('#modal-loader').modal("show");
        store.setItem("personaCountry", $("#persona-countries").val());
        store.setItem("country", $("#persona-countries").val());
        setTimeout(function () {
            $('#modal-loader').modal("hide");
        }, 2000);
    });

    $(document).on('change', 'input.personalized-content, select.personalized-content', function (event) {
        var $target = $(event.target);
        var type = $target.attr("type");
        var store = ContextHub.getStore('sih_user');
        if (type == "checkbox" || type == "radio") {
            var value = $target.attr("value");
            if (value) {
                store.setItem($target.attr("name"), value);
            } else {
                store.setItem($target.attr("name"), $target.is(":checked"));
            }
        } else {
            store.setItem($target.attr("name"), $target.val());
        }
        cloneFileUploads();
        setTimeout(function () {
            cloneFileUploads();
        }, 1000);
    });

    var stageIntervalId;
    function getRedirectPath(formDataAttr, personatype) {
        if (!personaMap[personatype]) {
            return null;
        }
        if (store.getItem("country") === INDIA_COUNTRY_ID) {
            return formDataAttr["redirectPath"] + "/" + personaMap[personatype];
        } else {
            return formDataAttr["redirectPath"] + "/Int-" + personaMap[personatype];
        }
    }

    $(document).on("click", ".persona-profile-form .submit-cta, .skip-cta", function (event) {
        if(validateNext()) {
            $('#modal-loader').modal('show');
            var $target = $(event.target);
            if (isUpdateProfile() || $(this).attr("name").toLowerCase() === "saveprofile") {
                validateUpdateFlow($target);
            } else {
                validate($target, true);
            }
        }
    });


    $(document).on('click', '.btn-validate-step', function (event) {
        validate($(event.target));
    });

    var isValidated = true;
    function validate($target, submitCta) {
        isValidated = true;
        var currentTarget = $target.closest('div.section-block');
        var validateSections = [];
        validateSections.push($(currentTarget));
        $(currentTarget).attr("validate", "1");
        $(currentTarget).prevAll().each(function () {
            $(this).attr("validate", "1");
            validateSections.push($(this));
        });

        var requiredFields = $('div.section-block sup.required');
        $.each(requiredFields, function (index, item) {
            if (($(item).closest("div.section-block")).attr("validate") === "1") {
                var element = $(item).closest('.form-group').find(".form-control:not(.richTextarea,.customised-dropdown):visible");
                if (element && element.length > 0 && !element.closest(".modal").length && !element.hasClass("mentorshipComp-hidden")) {
                    if (element.attr("type") === "radio") {
                        if (element.is(':checked')) {
                            element.closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
                        }
                        else {
                            element.closest(".form-group").addClass("has-error").find("span.help-block").first().html("This field cannot be left Blank.");
                            isValidated = false;
                        }
                    }

                    else if (element.attr("type") === "checkbox") {
                        if (element.is(':checked')) {
                            element.closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
                        }
                        else {
                            element.closest(".form-group").addClass("has-error").find("span.help-block").first().html("This field cannot be left Blank.");
                            isValidated = false;
                        }
                    } else if (!element.val() || element.val() === "") {
                        isValidated = false;
                        showErrorState(element, true);
                    }
                    else {
                        showErrorState(element, false);
                    }
                }
            }
        });
        var richTextAreas = $('.form-control.richTextarea');
        $.each(richTextAreas, function (index, item) {
            if (($(item).closest("div.section-block")).attr("validate") === "1") {
                var el = $(item);
                if (el.closest('.form-group').find('sup.required').length > 0 && el.closest('.form-group').is(":visible")) {
                    var note = el.val().trim();
                    if (note.length > 0 && !el.summernote('isEmpty')) {
                        el.siblings('.note-editor.note-frame').removeClass('note-has-error').addClass('note-writer-text');
                        showErrorState(el, false);
                    } else {
                        isValidated = false;
                        el.siblings('.note-editor.note-frame').addClass('note-has-error').removeClass('note-writer-text');
                        showErrorState(el, true);
                    }
                }
            }
        });

        var customizedDropDown = $('.form-control.customised-dropdown:visible');
        $.each(customizedDropDown, function (index, item) {
            if (($(item).closest("div.section-block")).attr("validate") === "1") {
                var el = $(item);
                var selectedIndustries = $("select[name=industry]").val();
                if (!selectedIndustries || selectedIndustries.length === 0) {
                    isValidated = false;
                    showErrorState(el, true);
                } else {
                    $.each(selectedIndustries, function (idx, selectedIndustry) {
                        var selectedIndustryArr = selectedIndustry.split("/");
                        var industryName = selectedIndustryArr[selectedIndustryArr.length - 1];
                        if (el.find("ul#sector").first().find("input[name=" + industryName + "][type=checkbox]:checked").length === 0) {
                            isValidated = false;
                            showErrorState(el, true, $("#sector").data("requiredMessage"));
                        } else {
                            showErrorState(el, false);
                        }
                    });
                }
            }
        });
        var multiSelect= $('select.multi-select');
        $.each(multiSelect,function (index,item) {
            var el =$(item);
            if(el.is(":visible")) {
                var value = el.val();
                if (!value || value.length == '0') {
                    $(el).closest('.form-group').addClass("has-error").find("span.help-block").html('This field cannot be left Blank.');
                    isValidated = false;
                }
            }
        });

        var regexValidatedfields = $('div.section-block .regex-val:visible');
        $.each(regexValidatedfields, function (index, item) {
            if (($(item).closest("div.section-block")).attr("validate") === "1") {
                var element = $(item);
                var re = new RegExp(element.attr("regex"));
                if (element.val() && !re.test(element.val())) {
                    isValidated = false;
                    //showErrorState(element, true);
                    element.closest(".form-group").addClass("has-error");
                    element.siblings(".regex-msg").show();
                } else {
                    if (!(element.closest(".form-group").has("sup.required") && !element.val())) {
                        showErrorState(element, false);
                    }
                    element.siblings(".regex-msg").hide();
                }
            }
        });
        isValidated = validateMentorshipFields(isValidated);
        isValidated = validateTieLvVerifications(isValidated);
        $('div.section-block').removeAttr("validate");
        if (isValidated) {
            var $cin = $target.attr("name").toLowerCase() === "saveprofile" ? $("form.persona-profile-form input[name=cin]") : $target.closest('div.section-block').find("input[name=cin]");
            if ($cin.length !== 0 && $cin.is(":visible") && !$cin.is(":disabled")) {
                getLegalName($cin, true, $target, submitCta);
            } else {
                if (submitCta) submitForm($target);
            }
            return true;
        } else {
            submitErrors();
            return false;
        }
    }

    function validateUpdateFlow($target) {
        isValidated = true;
        var requiredFields = $('div.section-block sup.required, div.new-persona-interest sup.required');
        $.each(requiredFields, function (index, item) {
            var element = $(item).closest('.form-group').find(".form-control:not(.richTextarea,.customised-dropdown):visible");
            if (element && element.length > 0 && !element.closest(".modal").length && !element.hasClass("mentorshipComp-hidden")) {
                if (element.attr("type") === "radio") {
                    if (element.is(':checked')) {
                        element.closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
                    } else {
                        element.closest(".form-group").addClass("has-error").find("span.help-block").first().html("This field cannot be left Blank.");
                        isValidated = false;
                    }
                } else if (element.attr("type") === "checkbox") {
                    if (element.is(':checked')) {
                        element.closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
                    } else {
                        element.closest(".form-group").addClass("has-error").find("span.help-block").first().html("This field cannot be left Blank.");
                        isValidated = false;
                    }
                } else if (!element.val() || element.val() === ""){
                    isValidated = false;
                    showErrorState(element, true);
                }
                else {
                    showErrorState(element, false);
                }
            }
        });
        var richTextAreas = $('.form-control.richTextarea');
        $.each(richTextAreas, function (index, item) {
            var el = $(item);
            if (el.closest('.form-group').find('sup.required').length > 0 && el.closest('.form-group').is(":visible")) {
                var note = el.val().trim();
                if (note.length > 0 && !el.summernote('isEmpty')) {
                    el.siblings('.note-editor.note-frame').removeClass('note-has-error').addClass('note-writer-text');
                    showErrorState(el, false);
                } else {
                    isValidated = false;
                    el.siblings('.note-editor.note-frame').addClass('note-has-error').removeClass('note-writer-text');
                    showErrorState(el, true);
                }
            }
        });

        var customizedDropDown = $('.form-control.customised-dropdown:visible');
        $.each(customizedDropDown, function (index, item) {
            var el = $(item);
            var selectedIndustries = $("select[name=industry]").val();
            if (!selectedIndustries || selectedIndustries.length === 0) {
                isValidated = false;
                showErrorState(el, true);
            } else {
                $.each(selectedIndustries, function (idx, selectedIndustry) {
                    var selectedIndustryArr = selectedIndustry.split("/");
                    var industryName = selectedIndustryArr[selectedIndustryArr.length - 1];
                    if (el.find("ul#sector").first().find("input[name=" + industryName + "][type=checkbox]:checked").length === 0) {
                        isValidated = false;
                        showErrorState(el, true, $("#sector").data("requiredMessage"));
                    } else {
                        showErrorState(el, false);
                    }
                });
            }
        });

        var regexValidatedfields = $('div.section-block .regex-val:visible');
        $.each(regexValidatedfields, function (index, item) {
            var element = $(item);
            var re = new RegExp(element.attr("regex"));
            if (element.val() && !re.test(element.val())) {
                isValidated = false;
                //showErrorState(element, true);
                element.closest(".form-group").addClass("has-error");
                element.siblings(".regex-msg").show();
            }
            else {
                if (!(element.closest(".form-group").has("sup.required") && !element.val())) {
                    showErrorState(element, false);
                }
                element.siblings(".regex-msg").hide();
            }
        });
        if (store.getItem("personaStepsPath") && !store.getItem("personaStepsPath").includes("international-persona")) {
            //isValidated = validateMentorshipFields(isValidated, true);
            isValidated = validateTieLvVerifications(isValidated);
        }
        if (isValidated) {
            var $cin = $target.attr("name").toLowerCase() === "saveprofile" ? $("form.persona-profile-form input[name=cin]") : $target.closest('div.section-block').find("input[name=cin]");
            if ($cin.length !== 0 && $cin.is(":visible") && !$cin.is(":disabled")) {
                getLegalName($cin, true, $target, true);
            } else {
                submitForm($target);
            }
            return true;
        } else {
            submitErrors();
            return false;
        }
    }

    function submitErrors() {
        var _firstErrorElem = $(".form-group.has-error:first");
        var topOffset = _firstErrorElem.offset().top - 80;
        topOffset = topOffset && topOffset > 0 ? topOffset : 0;
        $('#modal-loader').modal('hide');
        $('html, body').animate({
            scrollTop: topOffset
        }, 500);
    }

    function showErrorState(el, hasError, errorMsg) {
        if (hasError) {
            if (!errorMsg) errorMsg = "This field cannot be left Blank.";
            el.siblings('.help-block').show();
            el.closest(".form-group").addClass("has-error").find("span.help-block").first().html(errorMsg);
        } else {
            el.closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
        }
    }

    function submitForm($target) {
        var store = ContextHub.getStore("sih_user");
        var updateProfile = isUpdateProfile();
        var $formData = $target.closest("form.persona-profile-form").serialize();
        var personatype = store.getItem("personatype");
        var jsonParam = {};
        if (store.getItem('socialLogin')) {
            jsonParam.socialLogin = true
        }

        //Get the form data
        var personaTypeJson = convertSerializeDataToJSON($formData);
        if(isUpdateProfile() && $("input[name=stage]").is(":disabled")) {
            personaTypeJson["stage"] = $("input[name=stage]:checked").val();
        }
        personaTypeJson = addLocation(personaTypeJson);
        personaTypeJson = addLegalName(personaTypeJson);
        personaTypeJson = addDIPPNumber(personaTypeJson);
        personaTypeJson.oldEmail = personaTypeJson.email;
        if (isValidated === false) {
            $('#modal-loader').modal("hide");
            return;
        }
        if (!personaTypeJson["name"] && store) {
            personaTypeJson["name"] = store.getItem("fullName");
        }
        var $services = $("form.persona-profile-form select[name=services]");
        personaTypeJson["services"] = $services.val();
        errorMappingObj["services"] = $services[0];
        errorMappingObj["stage"] = $("form.persona-profile-form input[name=stage]")[0];
        if (personatype === "startup") {
            var jsonObject = addUserData(jsonObject);
            jsonObject["image"] = startupFileNames["image"];
            if (updateProfile) {
                jsonObject["uniqueId"] = profileData ? profileData["uniqueId"] : "";
            }
            if (!$target.hasClass("skip-cta")) {
                personaTypeJson = addMembers(personaTypeJson);
                personaTypeJson = addBusinessPlans(personaTypeJson);
            }
            personaTypeJson = addRequiredFields(personaTypeJson);
            personaTypeJson["lookingToConnectTo"] = getArray("lookingToConnectTo");
            var $startupindustry = $("form.persona-profile-form select[name=startupindustry]");
            var $sector = $("form.persona-profile-form select[name=sector]");
            errorMappingObj["focusArea.industry"] = $startupindustry[0];
            errorMappingObj["focusArea.sector"] = $sector[0];
            personaTypeJson["focusArea"] = getFocusArea($startupindustry, $sector);
            personaTypeJson = addMentorshipProgramDetails(personaTypeJson);
            jsonObject[personatype] = personaTypeJson;
            jsonParam = jsonObject;
            if(profileData && profileData.startup) {
                if (profileData.startup.members) {
                    jsonParam.startup.members = profileData.startup.members;
                }
                if (profileData.startup.businessPlan) {
                    jsonParam.startup.businessPlan = profileData.startup.businessPlan;
                }
                if (profileData.startup.socialInfos) {
                    jsonParam.startup.socialInfos = profileData.startup.socialInfos;
                }
            }

        } else {
            personaTypeJson = addUserData(personaTypeJson);
            if (updateProfile) {
                personaTypeJson["uniqueId"] = profileData ? profileData["uniqueId"] : "";
            }
            if(personatype==="incubator"||personatype==="accelerator" || personatype==="corporate"){
                if (profileData.socialInfos) {
                    personaTypeJson.socialInfos = profileData.socialInfos;
                }
                if (profileData.members) {
                    personaTypeJson.members = profileData.members;

                }
                personaTypeJson=addCenterLocation(personaTypeJson);
            }
            if ($.inArray(personatype, enablers) > -1) {
                personaTypeJson = addFocusAreas(personaTypeJson);
            }
            personaTypeJson["image"] = images["" + personatype];
            if (!$target.hasClass("skip-cta") && (personatype == "government-body" || personatype == "incubator" || personatype == "accelerator" || personatype==="corporate" || personatype == "academia" || personatype == "institutional-investor")) {
                personaTypeJson = addContactDetails(personaTypeJson);
            }
            /*  if (personatype == "mentor" || personatype == "incubator" || personatype == "accelerator" || personatype==="corporate" || personatype == "academia" || personatype == "institutional-investor" || personatype == "individual-investor" || personatype == "freelancer-service-provider" || personatype == "organization-service-provider") {
                  var $preferredStartupStages = $("form.persona-profile-form select[name=preferredStartupStages]");
                  personaTypeJson["preferredStartupStages"] = $preferredStartupStages.val();
              }*/
            if (personatype == "mentor" || personatype == "incubator" || personatype == "accelerator" || personatype == "corporate" || personatype == "academia" ||  personatype == "institutional-investor" || personatype == "individual-investor" || personatype == "freelancer-service-provider" || personatype == "organization-service-provider") {
                var $preferredStartupStages = $("input[name=preferredStartupStages]:checked");
                // console.log("$preferredStartupStages",$preferredStartupStages);
                if ($preferredStartupStages && $preferredStartupStages.length > 0) {
                    var inpArr = [];
                    $.each($preferredStartupStages, function (i) {
                        inpArr.push($preferredStartupStages[i].value);

                    });
                    console.log("inpArr", inpArr);
                }
                personaTypeJson["preferredStartupStages"] = inpArr;
                errorMappingObj["preferredStartupStages"] = $preferredStartupStages[0];
                if (!$target.hasClass("skip-cta")) {
                    personaTypeJson = addPortfolios(personaTypeJson);
                }
                personaTypeJson = addMentorshipProgramDetails(personaTypeJson, true);
            }
            if (personatype == "mentor" || personatype == "individual-investor") {
                if (updateProfile) {
                    var $tieVerified = $("input[type=radio][name=TiEOrLetsVenture][value=isTIE]");
                    var $lvVerified = $("input[type=radio][name=TiEOrLetsVenture][value=isLetsVenture]");
                    // if (store.getItem('otherThanTieLVDescription')) {
                    //     personaTypeJson['otherThanTieLVDescription'] = store.getItem('otherThanTieLVDescription');
                    // }
                    personaTypeJson['otherThanTieLVDescription'] = $("textarea[name='otherThanTieLVDescription']").val();
                    errorMappingObj["$tieVerified"] = $tieVerified;
                    errorMappingObj["lvVerified"] = $lvVerified;
                    personaTypeJson["tieVerified"] = $tieVerified.is(":checked");
                    personaTypeJson["lvVerified"] = $lvVerified.is(":checked");
                } else {
                    personaTypeJson["tieVerified"] = store.getItem("tieVerified");
                    personaTypeJson["lvVerified"] = store.getItem("letsVentureVerified");

                }
            }
            if (personatype == "government-body" || personatype == "organization-service-provider" || personatype == "freelancer-service-provider") {
                if ($("input[name=urls]").length > 0) {
                    var urlValue = $("input[name=urls]").val();
                    if ($("input[name=urls]").length == 1 && urlValue && urlValue.length > 0) {
                        personaTypeJson["urls"] = [urlValue];
                    }
                }
            }
            if (personatype == "government-body") {
                personaTypeJson = addAgencyDetails(personaTypeJson);
            }
            if (personatype == "institutional-investor") {
                personaTypeJson["type"] = $("select[name=type]").val() ? $("select[name=type]").val() : null;
                errorMappingObj["type"] = $("select[name=type]");
            }
            personaTypeJson["lookingToConnectTo"] = getArray("lookingToConnectTo");
            var stage = $("input[type=radio][name=stage]:checked").val();
            jsonParam = personaTypeJson;
        }

        var path = $target.data()["formAction"];
        var redirectPath = "";
        var homePagePath = "";
        var loginPagePath = "";
        var formDataAttr = $("form.persona-profile-form").data();
        if (formDataAttr) {
            /*  if($.cookie("countryTag") != INDIA_COUNTRY_ID){
             if($.cookie("countryTag") === "sih:location/sweden"){
             redirectPath = formDataAttr["swedenLandingPage"];
             }else{
             redirectPath = formDataAttr["internationalLandingPage"];
             }
             }else{
             redirectPath = formDataAttr["redirectPath"] + "/" + personaMap[personatype];
             }*/
            redirectPath = getRedirectPath(formDataAttr, personatype);
            // redirectPath = $.cookie("countryTag") != INDIA_COUNTRY_ID ? formDataAttr["internationalLandingPage"] : formDataAttr["redirectPath"] + "/" + personaMap[personatype];
            homePagePath = formDataAttr["homePath"];
            loginPagePath = formDataAttr["loginPath"];
        }
        var customHeaders = {};
        customHeaders["Content-Type"] = "application/json";
        if (updateProfile && !switchProfile) {
            if (store.getItem("personaCountryEdit") === INDIA_COUNTRY_ID) {
                path = "/api/auth/user/update/" + store.getItem("personatype");
            } else {
                path = "/api/auth/user/update/int-" + store.getItem("personatype");
            }
            customHeaders["X-Auth-Token"] = $.cookie("authToken")
        }
        var redirectURIParam = location.protocol + "//" + location.host + homePagePath + ".html";
        if (path && path.length > 0) {
            if (store.getItem('socialLogin')) {
                jsonParam.socialLogin = true
            }
            if (switchProfile) {
                path = "/api/noauth/signup/" + (store.getItem("personaCountryEdit") === INDIA_COUNTRY_ID ? store.getItem("personatype") : "int-" + store.getItem("personatype"));
                jsonParam["switchedUser"] = switchProfile;
                jsonParam["uniqueId"] = store.getItem("uniqueId");
            }

            jsonParam["oldEmail"]=store.getItem('email');
            if (store.getItem('personatype') == 'startup' && actualResponseData && actualResponseData['startup']['dippCertified'] == true){
                jsonParam['startup']['dippCertified'] = actualResponseData['startup']['dippCertified'];
                jsonParam['startup']['dippNumber'] = actualResponseData['startup']['dippNumber'];
                jsonParam['startup']['form56Applied'] = actualResponseData['startup']['form56Applied'];
                jsonParam['startup']['form80IacApplied'] = actualResponseData['startup']['form80IacApplied'];
            }
            $.ajax({
                url: SIH.getEndPoint(path),
                data: JSON.stringify(jsonParam),
                type: 'POST',
                dataType: 'json',
                headers: customHeaders,
                contentType: "application/json",
                success: function (response) {
                    $('#modal-loader').modal("hide");
                    if (response['token']) {
                        $.cookie("authToken", response['token'], {
                            'expires': 365,
                            'path': '/',
                            'domain': SIH.getSiteDomain()
                        });
                    }
                    var redirectURL = (redirectPath ? redirectPath : homePagePath) + ".html", noDashboard = false;
                    if (!response["token"] && !updateProfile) {
                        noDashboard = true;
                        alert("Your session seems to be expired. Redirecting to MyGov.in to sign in again to complete registration process");
                        redirectURL = loginPagePath ? (loginPagePath + redirectURIParam) : (homePagePath + ".html");
                    }
                    else {
                        store.setItem(personatype, personatype == "startup" ? jsonParam[personatype] : jsonParam);
                        addDataToContextHubPostSuccessfulRegistration(response);
                        if (!updateProfile) store.setItem("state", $("form.persona-profile-form select[name=state]").val());
                        if ($.inArray(personatype, noDashboardPersonas) > -1) {
                            noDashboard = true;
                            store.setItem('no-dashboard', true);
                            redirectURL = homePagePath ? (homePagePath + ".html") : "";
                        }
                        store.removeItem('no-profile');
                        store.removeItem('updateProfile');
                        store.setItem('role', personaMap[personatype]);
                    }
                    if (store.getItem("role").toLowerCase() == "startup" && !noDashboard) {
                        checkForRecognisedStartup(redirectURL);
                    } else if (store.getItem("role") != "Individual" && !noDashboard) {
                        //alert("Your profile changes has been successfully recorded.");
                        successSlide();
                        // window.location.href = redirectURL;
                    } else {
                        successSlide();
                        // window.location.href = redirectURL;
                    }
                }, error: function (response) {
                    $('#modal-loader').modal("hide");
                    if (response.status == 200) {
                        alert("Changes have been successfully saved.");
                        var redirectURL = (redirectPath ? (redirectPath + "/" + personaMap[personatype]) : homePagePath) + ".html";
                        if (store.getItem("no-dashboard")) {
                            redirectURL = homePagePath ? (homePagePath + ".html") : "";
                        }
                        window.location.href = redirectURL;
                    } else {
                        populateFormErrors(response, updateProfile, $target);
                        var redirectURL = homePagePath + ".html";
                        if (response.status == 400) {
                            $("#registration-error-modal").modal("show");
                            $("input[type=checkbox][name=enableTNC]").prop("checked",false);
                            $('.step-next-wrap input.submit-cta').attr("disabled","disabled");

                        } else if (response.status == 417) {
                            alert("Your session seems to be expired. Redirecting to MyGov.in to sign in again to complete registration process");
                            window.location.href = homePagePath + ".html";
                        } else {
                            alert("Error occurred during registration. Please try later.");
                            window.location.href = redirectURL;
                        }
                    }
                }
            });
        }
    }

    function checkForRecognisedStartup(redirectURL) {
        //$('#modal-loader').modal("show");
        $.ajax({
            type: "GET",
            async: false,
            url: SIH.getEndPoint("/api/auth/user/cin"),
            beforeSend: setAuthTokenHeader
        }).done(function (data) {
            $('#modal-loader').modal("hide");
            if (data) {
                //alert("Your profile changes has been successfully recorded.");
                window.location.href = redirectURL;
            } else {
                var recLink = $('.notification-container').attr('recognition-page');
                successSlide();
                /* bootbox.dialog({
                     message: '<div class="unable-login-modal"><div class="modal-header">\n' +
                     '            </div>\n' +
                     '            <div class="modal-body">\n' +
                     '                <div class="row">\n' +
                     '                    <div class="col-sm-12">\n' +
                     '                        <p><b>Your profile details have been successfully recorded.</b></p>\n' +
                     '                        <ul class="certification-list">\n' +
                     '                            <li>You may also consider getting Startup recognition, a process by which Department of Industrial Policy and Promotion recognizes you as a Startup. A startup recognition allows one to avail a host of benefits put in place by DIPP specially for Startups. These include self certification of certain environment and labor laws, access to taking part in government procurement, patent support and more.</li>\n' +
                     '                            <li>To get recognized, simply click on  the Get Recognized button and furnish some additional information which the form asks for. Ensure you enter essential information like Incorporation number and entity type to apply for recognition.</li>\n' +
                     '                        </ul>\n' +
                     '                    </div>\n' +
                     '                </div>\n' +
                     '                <div class="row">\n' +
                     '                    <div class="col-sm-2"></div>' +
                     '                    <div style="padding-top: 10px;" class="col-sm-4"><a style="text-decoration: underline;" href="' + redirectURL + '">Go to Dashboard</a></div>' +
                     '                    <div class="col-sm-4"><a href="' + recLink + '" class="btn btn-default btn-type2">Get Recognized</a></div>' +
                     '                </div>\n' +
                     '            </div></div>',
                     closeButton: false,
                     backdrop: true,
                     onEscape: false
                 });*/
                //$('.bootbox .modal-dialog').addClass('unable-login-wrapper startup-persona-recognition');
            }
        }).fail(function () {
            alert("Your profile changes has been successfully recorded.");
            window.location.href = redirectURL;
        });
    }

    function addDataToContextHubPostSuccessfulRegistration(response) {
        for (var key in response) {
            ContextHub.getStore("sih_user").setItem(key, response["" + key]);
        }
    }

    function addLegalName(data) {
        var formData = data || {};
        var $startupEntity = $("form.persona-profile-form select[name=startupEntity]");
        var $cin = $("form.persona-profile-form input[name=cin]");
        var $pan = $("form.persona-profile-form input[name=pan]");
        if ($startupEntity && $startupEntity.length > 0) {
            errorMappingObj["startupEntity"] = $startupEntity[0];
            formData["startupEntity"] = $startupEntity.val();
        }
        if ($pan && $pan.val() && $pan.length > 0) {
            errorMappingObj["pan"] = $pan[0];
            formData["pan"] = $pan.val();
        }
        errorMappingObj["cin"] = $cin[0];
        if ($cin && $cin.length > 0 && $cin.val()) {
            var $legalName = $("form.persona-profile-form input[name=legalName]");
            errorMappingObj["legalName"] = $legalName[0];
            if ($legalName && $legalName.length > 0) {
                formData["legalName"] = $legalName.val();
                formData["cin"] = $cin.val().trim();
            }
        }
        return formData;
    }

    function addDIPPNumber(data) {
        var formData = data || {};
        var $dippNumber = $("form.persona-profile-form input[name=dippNumber]");
        errorMappingObj["dippNumber"] = $dippNumber[0];
        if ($dippNumber && $dippNumber.length > 0 && $dippNumber.val()) {
            formData["dippNumber"] = $dippNumber.val();
            formData["dippCertified"] = true;
            isValidated = true;
            $dippNumber.closest(".form-group").removeClass("has-error").find(".help-block").html("");
        } else {
            formData["dippCertified"] = false;
            if ($("form.persona-profile-form input[name='dippCertified']:checked").length > 0) {
                isValidated = false;
                $dippNumber.closest(".form-group").addClass("has-error").find(".help-block").html("This field cannot be left Blank");
            }
        }
        return formData;
    }

    function addUserData(data) {
        var formData = data || {};
        var store = ContextHub.getStore("sih_user");
        formData["name"] = $("form.persona-profile-form input[name=fullname]").val() || $("form.persona-profile-form input[name=name]").val();;
        formData["uid"] = store.getItem("uid");
        // formData["email"] = store.getItem("email") ? store.getItem("email") : $("form.persona-profile-form input[name=email]").val();
        formData["email"] = $("form.persona-profile-form input[name=email]").val()  ? $("form.persona-profile-form input[name=email]").val() : store.getItem("email");
        formData["phone"] = $("form.persona-profile-form input[name=phone]").val();
        errorMappingObj["name"] = $("form.persona-profile-form input[name=fullname]")[0];
        errorMappingObj["email"] = $("form.persona-profile-form input[name=email]")[0];
        errorMappingObj["phone"] = $("form.persona-profile-form input[name=phone]")[0];
        return formData;
    }


    function addMembers(data) {
        var formData = data || {};
        var members = [];
        var membersName = $("form.persona-profile-form input[name=members-name]");
        var membersPic = $("form.persona-profile-form input[name=members-pic]");
        var membersProfile = $("form.persona-profile-form textarea[name=members-profile]");
        var membersRole = $("form.persona-profile-form input[name=members-role]");
        var linkedinUrl = $("form.persona-profile-form input[name=linkedin-url]");
        var twitterUrl = $("form.persona-profile-form input[name=twitter-url]");
        for (var index = 0; index < membersName.length; index++) {
            var member = {};
            member.name = membersName[index].value;
            var memberPic = membersPic[index];
            var repeatFieldID = $(memberPic).closest("div.repeat-fields").first().attr("id");
            member.pic = (startupFileNames["memberpic"]) ? startupFileNames["memberpic"]["" + repeatFieldID] : null;
            member.profile = membersProfile[index].value;
            member.role = membersRole[index].value ? membersRole[index].value : null;
            var socialInfos = [];
            var socialInfoL = {};
            socialInfoL.social = "Linkedin";
            socialInfoL.url = linkedinUrl[index].value ? linkedinUrl[index].value : null;
            socialInfos.push(socialInfoL);
            var socialInfoT = {};
            socialInfoT.social = "Twitter";
            socialInfoT.url = twitterUrl[index].value ? twitterUrl[index].value : null;
            socialInfos.push(socialInfoT);
            member.socialInfos = socialInfos;
            members.push(member);
            errorMappingObj["members[" + index + "].name"] = membersName[index];
            errorMappingObj["members[" + index + "].pic"] = memberPic[index];
            errorMappingObj["members[" + index + "].profile"] = membersProfile[index];
            errorMappingObj["members[" + index + "].role"] = membersRole[index];
            errorMappingObj["members[" + index + "].socialInfos[" + 0 + "]linkedin"] = linkedinUrl[index];
            errorMappingObj["members[" + index + "].socialInfos[" + 1 + "]twitter"] = twitterUrl[index];
        }
        formData.members = members;
        return formData;
    }

    function addBusinessPlans(data) {
        var formData = data || {};
        if (startupFileNames["startupDocs"]) {
            var businessPlans = [];
            var files = $("form.persona-profile-form input[name=businessPlan-fileName]");
            $.each(files, function (idx, file) {
                var i = 0;
                var businessPlan = {};
                var repeatFieldID = $(file).closest("div.repeat-fields").first().attr("id");
                var businessObj = startupFileNames["startupDocs"]["" + repeatFieldID];
                if (businessObj) {
                    businessPlan["fileName"] = businessObj["fileName"] ? businessObj["fileName"] : null;
                    businessPlan["title"] = businessObj["title"] ? businessObj["title"] : null;
                    businessPlans.push(businessPlan);
                }
                errorMappingObj["businessPlan[" + i++ + "]"] = file;
            });
            formData["businessPlan"] = businessPlans;
        } else {
            formData["businessPlan"] = null
        }
        return formData;
    }

    $(document).on('change', 'form.persona-profile-form input[type=file]', function (event) {
        var domain = SIH.getEndPoint("/api/file");
        var personaType = ContextHub.getStore("sih_user").getItem("personatype");
        var target = event.target;
        var targetName = target.name;
        var file = target.files[0];
        validateFile(event, file).then(function (isValid) {
            if(isValid){

                var $target = $(target);
                var fileIcon = $target.parent().siblings(".image-section").find("span.fa-files-o");
                var imgIcon = $target.parent().siblings(".image-section").find('span.camera-image');
                var fileNameSpan = $target.parent().siblings(".image-section").find("span.browse-file-name");
                var imageTag = $target.parent().siblings(".image-section").find("img.browse")[0];
                var apiPath = "/user/doc/" + personaMap["" + personaType];
                var memberPic = false;
                var startupLogo = false;
                var startUpDoc = false;

                if (personaType == "startup") {
                    if (targetName.indexOf("members-pic") > -1) {
                        memberPic = true;
                        apiPath = "/member/pic";
                    } else if (targetName.indexOf("image") > -1) {
                        startupLogo = true;
                        apiPath = "/user/image/" + personaMap["" + personaType];
                    } else if (targetName.indexOf("business") > -1) {
                        startUpDoc = true;
                    }
                } else {
                    apiPath = "/user/image/" + personaMap["" + personaType];
                }
                apiPath = domain + apiPath;
                if (file) {
                    var data = new FormData();
                    data.append("file", file);
                    $('#modal-loader').modal("show");
                    $.ajax({
                        url: apiPath,
                        type: 'POST',
                        data: data,
                        cache: false,
                        contentType: false,
                        processData: false,
                        success: function (data) {
                            $('#modal-loader').modal("hide");
                            if (data && data.name) {

                                if (personaType == "startup") {
                                    if (startupLogo) {
                                        startupFileNames["image"] = data.name;
                                    }
                                    else if (memberPic || startUpDoc) {
                                        var repeatField = $target.closest("div.repeat-fields");
                                        if (repeatField.length > 0) {
                                            var repeatID = repeatField.first().attr("id");

                                            if (memberPic) {
                                                startupFileNames["memberpic"] = startupFileNames["memberpic"] || {};
                                                startupFileNames["memberpic"]["" + repeatID] = data.name;
                                            } else {
                                                startupFileNames["startupDocs"] = startupFileNames["startupDocs"] || {};
                                                startupFileNames["startupDocs"]["" + repeatID] = startupFileNames["startupDocs"]["" + repeatID] ? startupFileNames["startupDocs"]["" + repeatID] : {};
                                                startupFileNames["startupDocs"]["" + repeatID]["fileName"] = data.name;
                                                startupFileNames["startupDocs"]["" + repeatID]["title"] = $target.val().split('\\').pop();
                                            }
                                        }
                                    }
                                } else {
                                    if(targetName.indexOf("startupLogo") > -1){
                                        var repeatFieldLogo = $target.closest("div.repeat-fields");
                                        if (repeatFieldLogo.length > 0) {
                                            var repeatIDLogo = repeatFieldLogo.first().attr("id");
                                            portfolioImages["startupLogo"] = portfolioImages["startupLogo"] || {};
                                            portfolioImages["startupLogo"]["" + repeatIDLogo] = data.name;
                                        }

                                    }
                                    else{
                                        images["" + personaType] = data.name;
                                    }
                                }  // display the image to user
                                if (!($target.hasClass("file"))) {
                                    imageTag.src = window.URL.createObjectURL(target.files[0]);
                                    $(imageTag).css("display", "block");
                                    $(fileIcon).css('display', 'none');
                                    $(imgIcon).css("display", "none");
                                } else {
                                    $target.parent().css("top", "0");
                                    fileNameSpan.text(target.files[0].name ? target.files[0].name : "");
                                    $(imageTag).css("display", "none");
                                    $(imgIcon).css("display", "none");
                                    $(fileIcon).css('display', 'none');
                                }}
                        }, error: function (data) {
                            $('#modal-loader').modal("hide");
                            alert("Error while uploading files");
                            // Added the following to clear the input field if the file is not uploaded
                            $('form.persona-profile-form .image-body .image-input').val(null);
                        }
                    });
                }
            }
            // Added the following to clear the input field if the file is not uploaded
            else{
                $('form.persona-profile-form .image-body .image-input').val(null);
            }
        })

    })

    function validateFile(event, file) {

        var allowedExtensionsForImage = ["image/png", "image/jpeg", "image/jpg"];
        var allowedExtensionsForFile = ["application/pdf", "application/vnd.ms-excel",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "application/vnd.openxmlformats-officedocument.wordprocessingml.document", "application/msword",
            "application/vnd.openxmlformats-officedocument.presentationml.presentation", "application/vnd.ms-powerpoint"];
        var maxFileSizeInBytes = 2097152;
        var maxImageSizeInBytes = 1048576;
        var isValid = true;
        return new Promise(function (resolve, reject) {
            if ($(event.target).hasClass("file")) {
                if ($.inArray(file.type, allowedExtensionsForFile) < 0) {
                    alert("Supported Formats for file uploads are: " + allowedExtensionsForFile.join(" , "));
                    resolve(false);
                } else if (file.size > maxFileSizeInBytes) {
                    alert("Maximum file size allowed is 2 MB ");
                    resolve(false);
                } else {
                    resolve(true);
                }
            } else {
                var type = 'unknown';
                var filereader = new FileReader();
                filereader.onloadend = function (evt) {
                    if (evt.target.readyState === FileReader.DONE) {
                        var arr = (new Uint8Array(evt.target.result)).subarray(0, 4);
                        var header = '';
                        for (var i = 0; i < arr.length; i++) {
                            header += arr[i].toString(16);
                        }
                        console.log('File header: ' + header);
                        // Check the file signature against known types

                        switch (header) {
                            case '89504e47':
                                type = 'image/png';
                                break;
                            case '47494638':
                                type = 'image/gif';
                                break;
                            case 'ffd8ffe0':
                            case 'ffd8ffe1':
                            case 'ffd8ffe2':
                                type = 'image/jpeg';
                                break;
                            case '25504446':
                                type = 'application/pdf';
                                break;
                        }
                    }

                    if ($.inArray(type, allowedExtensionsForImage) < 0) {
                        alert("Supported Formats for file uploads are: " + allowedExtensionsForImage.join(" , "));
                        //isValid = false;
                        resolve(false);
                    } else if (file.size > maxImageSizeInBytes) {
                        alert("Maximum file size allowed is 1 MB ");
                        //isValid = false;
                        resolve(false);
                    } else {
                        resolve(true);
                    }
                };

                filereader.readAsArrayBuffer(file);
            }
        });
    }

    function getArray(name) {
        var elements = $("input[name=" + name + "]:checked");
        errorMappingObj[name] = $("input[name=" + name + "]");
        var array = [];
        $.each(elements, function (index, item) {
            array.push(item.value);
        });
        return array;
    }

    function addRequiredFields(data) {
        var formData = data || {};
        var platform = {};
        var $mobileAppLink = $("input[name=mobileAppLink]");
        errorMappingObj["mobileAppLink"] = $mobileAppLink[0];
        if ($mobileAppLink && $mobileAppLink.length > 0) {
            var value = $mobileAppLink.val();
            if (value && value.length > 0) {
                platform["Android"] = value;
                formData["mobileAppLink"] = platform;
            } else {
                formData["mobileAppLink"] = null;
            }
        } else {
            formData["mobileAppLink"] = null;
        }
        return formData;
    }

    $(document).on('change', '#startupindustry', function (event) {
        var $target = $(event.target);
        var params = {};
        params["industry"] = $target.val();
        var $selection = $("#sector");
        var uri = $selection.data("path").split("?")[0];
        setList(params, uri, $selection);
    });

    var industrySectors = [];
    $(document).on('change', '#industry', function (event) {
        industrySectors = [];
        var selectedSectors = $("ul#sector").find("input[type=checkbox]:checked");
        var industries = $("#industry option:selected");
        var $selection = $("#sector");
        var previousIndustrySectors = [];
        var previousIndustryAllCheckedSectors = [];
        $("ul#sector input[name=addAll]").each(function (i, x) {
            if ($(x).prop('checked')) {
                previousIndustryAllCheckedSectors.push($(x).data('name'));
            }
            previousIndustrySectors.push($(x).data('name'));
        });
        $.each(industries, function (index, item) {
            var params = {};
            params["industry"] = item.value;
            getIndustrySectors(params, $selection.data("path").split("?")[0], params["industry"].substring(params["industry"].lastIndexOf('/') + 1, params["industry"].length), item.text);
        });
        var template = Handlebars.compile($("#sectors-template").html());
        $selection.empty();
        $selection.append(template(industrySectors));
        $.each(selectedSectors, function (idx, selectedSector) {
            $("input[value='" + $(selectedSector).val() + "']").prop("checked", true);
        });
        $.each(industrySectors, function (idx, item) {
            if (($.inArray(item.sectorName, previousIndustrySectors) >= 0 && $.inArray(item.sectorName, previousIndustryAllCheckedSectors) >= 0) || !($.inArray(item.sectorName, previousIndustrySectors) >= 0)) {
                $("input[data-name=" + item.sectorName + "]").prop("checked", true).trigger("change");
            }
        });
        $("div.customised-dropdown .dropdown-menu").trigger("change", ["#industry"]);

    });

    var stateCities = [];
    $(document).on('change', '.selectionwithalloption #states', function (event, parent, data) {
        if (parent === "#industry") {
            return;
        }
        stateCities = [];
        var selectedCities = $("ul#city").find("input[type=checkbox]:checked");
        var previousStateCities = [];
        var previousStateAllCheckedCities = [];
        $("ul#city input[name=addAll]").each(function (i, x) {
            if ($(x).prop('checked')) {
                previousStateAllCheckedCities.push($(x).data('name'));
            }
            previousStateCities.push($(x).data('name'));
        });
        var $selection = $("#city");
        $.each($("input[name=allstates]"), function (index, item) {
            var params = {};
            if ($(item).is(":checked")) {
                params["state"] = item.value;
            }
            if (params["state"]) {
                getStateCities(params, $selection.data("path"), params["state"].substring(params["state"].lastIndexOf('/') + 1, params["state"].length), $(this).parent().text().trim());
            }
        });
        var template = Handlebars.compile($("#city-template").html());
        $selection.empty();
        $selection.append(template(stateCities));
        if (data && data.cities) {
            $.each(data.cities, function (idx, city) {
                $("input[value='" + city + "']").prop("checked", true).trigger("change");
            });
        } else {
            $.each(selectedCities, function (idx, selectedCities) {
                $("input[value='" + $(selectedCities).val() + "']").prop("checked", true).trigger("change");
                ;
            });
            $.each(stateCities, function (idx, item) {
                if (($.inArray(item.stateName, previousStateCities) >= 0 && $.inArray(item.stateName, previousStateAllCheckedCities) >= 0) || !($.inArray(item.stateName, previousStateCities) >= 0)) {
                    $("input[data-name=" + item.stateName + "]").prop("checked", true).trigger("change");
                }
            });
        }

        $(".stateCountry div.customised-dropdown .dropdown-menu").trigger("change");

    });

    $(document).on("change", "div.customised-dropdown .dropdown-menu", function (event) {
        var $parent = $(event.target).closest("div.customised-dropdown");
        var checkedSectors = $parent.find("input[type=checkbox]:checked");
        var counter = 0;
        var button = $parent.find("button.dropdown-toggle");
        if (checkedSectors && checkedSectors.length > 0) {
            $.each(checkedSectors, function (idx, sector) {
                if ($(sector).attr("name") != "addAll") {
                    counter++;
                }
            });
            if (button.parents('.ams-application-form').length > 0) {
                if (button.siblings('#relevantIndustry').size() > 0) {
                    button.html(counter + " Industries selected");
                } else {
                    button.html(counter + " Services selected");
                }
            } else if (button.parents('.stateConfigForm').length > 0) {
                button.html(counter + " Type(s) selected");
            } else if (button.parents('#pushNotificationForm').length > 0 && button.siblings('#states').size() > 0) {
                button.html(counter + " State(s) selected");
            } else if (button.parents('#pushNotificationForm').length > 0 && button.siblings('#city').size() > 0) {
                if (counter === 1) {
                    button.html(counter + " City selected");
                } else {
                    button.html(counter + " Citie(s) selected");
                }
            }
            else {
                button.html(counter + " Sector(s) selected");
            }
        } else {
            if (button.parents('#pushNotificationForm').length > 0 && button.siblings('#states').size() > 0) {
                button.html("Select States");
            } else if (button.parents('#pushNotificationForm').length > 0 && button.siblings('#city').size() > 0) {
                button.html("Select Cities");
            } else {
                button.html("Select Sectors");
            }
        }
    });

    function getIndustrySectors(params, apiPath, sector_name, name) {
        var industry = {};
        industry["sectorName"] = sector_name;
        industry["name"] = name;
        $.ajax({
            url: apiPath,
            type: 'GET',
            data: params,
            async: false,
            success: function (data) {
                var sectors = [];
                $.each(data.data, function (index, item) {
                    var sector = {};
                    sector["value"] = item.id;
                    sector["name"] = item.text;
                    sectors.push(sector);
                });
                industry["sectors"] = sectors;
                industrySectors.push(industry);
            }, error: function (data) {
                console.log("Error while loading options");
            }
        });
    }

    function getStateCities(params, apiPath, state_name, name) {
        var states = {};
        states["stateName"] = state_name;
        states["name"] = name;
        $.ajax({
            url: apiPath,
            type: 'GET',
            data: params,
            async: false,
            success: function (data) {
                if (data.data)
                    data = data.data;
                var cities = [];
                $.each(data, function (index, item) {
                    var city = {};
                    city["value"] = item.value ? item.value : item.id;
                    city["name"] = item.text;
                    cities.push(city);
                });
                states["cities"] = cities;
                stateCities.push(states);
            }, error: function (data) {
                console.log("Error while loading options");
            }
        });
    }

    $(document).on('change', 'form.persona-profile-form select[name=ministry]', function (event) {
        var $target = $(event.target);
        var params = {};
        params["tag"] = $target.val();
        var $selection = $("form.persona-profile-form select[name=department]");
        setList(params, $selection.data("path"), $selection);
    });


    $(document).on("change", ".customised-dropdown input", function (event) {
        var $dropdown = $(event.target).closest(".customised-dropdown");
        var selectedOptions = $dropdown.find("input:checked");
        var list = $dropdown.find(".list-inline");
        list.find('li').remove();
        var len = selectedOptions.length;
        if (len == 0) {
            list.css("display", "none");
        }
        else
            list.css("display", "block");
        $.each(selectedOptions, function (index, item) {
            var text = $(item).data("text") + ((index != len - 1) ? "," : "");
            list.append("<li><span>" + text + "</span></li>");
        });
    });

    function addLocation(data) {
        var formData = data || {};
        var $locationStateId = $("form.persona-profile-form select[name=state]");
        var $locationCityId = $("form.persona-profile-form select[name=city]");
        formData["location"] = {};
        formData["location"]["country"] = {};
        formData["location"]["country"]["id"] = store.getItem("country");
        if(store.getItem("country") == "5f02e38c6f3de87babe20cd2") {
            formData["location"]["state"] = {};
            formData["location"]["state"]["id"] = $locationStateId.val();
            errorMappingObj["location.state"] = $locationStateId[0];
            formData["location"]["city"] = {};
            formData["location"]["city"]["id"] = $locationCityId.val();
            errorMappingObj["location.city"] = $locationCityId[0];
        } else {
            formData["location"]["state"] = {};
            formData["location"]["state"]["id"] = "";
            formData["location"]["city"] = {};
            formData["location"]["city"]["id"] = "";
        }
        return formData;
    }

    function addAgencyDetails(data) {
        var formData = data || {};
        var $agencyMinistry = $("form.persona-profile-form select[name=ministry]");
        var $agencyDepartment = $("form.persona-profile-form select[name=department]");
        formData["agency"] = {};
        formData["agency"]["ministry"] = {};
        formData["agency"]["ministry"]["id"] = $agencyMinistry.val();
        errorMappingObj["agency.ministry"] = $agencyMinistry[0];
        formData["agency"]["department"] = {};
        formData["agency"]["department"]["id"] = $agencyDepartment.val();
        errorMappingObj["agency.department"] = $agencyDepartment[0];
        return formData;
    }

    $(document).on('click', '.repeat-container .repeat-remove', function (event) {
        var $target = $(event.target);
        var item = $target.closest('.repeat-container').children('.repeat-fields');
        $target.closest(".repeat-container").find(".repeat-add").removeAttr("disabled").show();
        var newItem;
        if (item && item.length > 1) {
            var repeatField = $target.closest(".repeat-fields");
            if ($target.parents('.ams-application-form').length > 0) {
                newItem = $.grep(item, function (value) {
                    return $(value).attr('id') != repeatField.attr('id');
                });
                if ((newItem.length < item.length) && newItem.length > 0 && $target.closest('.repeat-container').find('.repeat-add').length == 0) {
                    $target.closest('.repeat-container').append('<input type="button" class="repeat-add" value="Add More">');
                }
            }
            repeatField.remove();
        } else {
            var data = $target.closest(".repeat-fields");
            if (data) {
                clearElements(data);
                data.attr("id", $.now());
                var repeatFileUploads = data.find(".file-upload");
                $.each(repeatFileUploads, function (index, item) {
                    $item = $(item);
                    $item.replaceWith(fileuploads[$item.data('name')].clone());
                });
            }
        }
    });

    function addContactDetails(data) {
        var formData = data || {};
        var contacts = [];
        var contact = {};
        var designation = $("form.persona-profile-form input[name=designation]");
        var emailId = $("form.persona-profile-form input[name=emailId]");
        var firstName = $("form.persona-profile-form input[name=firstName]");
        var landlineNumber = $("form.persona-profile-form input[name=landlineNumber]");
        var lastName = $("form.persona-profile-form input[name=lastName]");
        var mobileNumber = $("form.persona-profile-form input[name=mobileNumber]");
        var website = $("form.persona-profile-form input[name=website]");
        var socialMediaAccountURL = $("form.persona-profile-form input[name=socialMediaAccountURL]");

        errorMappingObj["contacts[0].designation"] = designation[0];
        errorMappingObj["contacts[0].emailId"] = emailId[0];
        errorMappingObj["contacts[0].firstName"] = firstName[0];
        errorMappingObj["contacts[0].landlineNumber"] = landlineNumber[0];
        errorMappingObj["contacts[0].lastName"] = lastName[0];
        errorMappingObj["contacts[0].mobileNumber"] = mobileNumber[0];
        errorMappingObj["contacts[0].website"] = website[0];
        errorMappingObj["contacts[0].socialMediaAccountURL"] = socialMediaAccountURL[0];

        contact["designation"] = designation.val() ? designation.val() : null;
        contact["emailId"] = emailId.val() ? emailId.val() : null;
        contact["firstName"] = firstName.val() ? firstName.val() : null;
        contact["landlineNumber"] = landlineNumber.val() ? landlineNumber.val() : null;
        contact["lastName"] = lastName.val() ? lastName.val() : null;
        contact["mobileNumber"] = mobileNumber.val() ? mobileNumber.val() : null;
        contact["website"] = website.val() ? website.val() : null;
        contact["socialMediaAccountURL"] = socialMediaAccountURL.val() ? socialMediaAccountURL.val() : null;
        contacts.push(contact);
        formData["contacts"] = contacts;
        return formData;
    }

    function addPortfolios(data) {
        var formData = data || {};
        var portfolios = null;
        if($("input[type=checkbox][name=hasStories]").is(":checked")){
            var portfolioBriefs = $("form.persona-profile-form textarea[name=brief]");
            var sihProfileURLs = $("form.persona-profile-form input[name=sihProfileUrl]");
            var startupNames = $("form.persona-profile-form input[name=startupName]");
            var urls = $("form.persona-profile-form input[name=url]");
            var startupEntryDates = $("form.persona-profile-form input[name=startupEntryDate]");
            var startupLogos = $("form.persona-profile-form input[name=startupLogo]");
            var guidanceAreass = $("form.persona-profile-form textarea[name=guidanceAreas]");


            if (portfolioBriefs.length > 0) {
                portfolios = data.portfolios || [];
                $.each(portfolioBriefs, function (idx, portfolioBrief) {
                    var portfolio = {};
                    portfolio["brief"] = $(portfolioBriefs[idx]).val() ? $(portfolioBriefs[idx]).val() : null;
                    portfolio["sihProfileUrl"] = $(sihProfileURLs[idx]).val() ? $(sihProfileURLs[idx]).val() : null;
                    portfolio["startupName"] = $(startupNames[idx]).val() ? $(startupNames[idx]).val() : null;
                    portfolio["url"] = $(urls[idx]).val() ? $(urls[idx]).val() : null;
                    portfolio["startupEntryDate"] = $(startupEntryDates[idx]).val() ? $(startupEntryDates[idx]).val() : null;
                    if (startupLogos.length && portfolioImages["startupLogo"] && portfolioImages["startupLogo"][$(startupLogos[idx]).closest("div.repeat-fields").first().attr("id")]){
                        portfolio["startupLogo"] = portfolioImages["startupLogo"][$(startupLogos[idx]).closest("div.repeat-fields").first().attr("id")];
                    }
                    portfolio["guidanceAreas"] = $(guidanceAreass[idx]).val() ? $(guidanceAreass[idx]).val() : null;
                    portfolios.push(portfolio);
                });
            }
            errorMappingObj["portfolios.brief"] = portfolioBriefs[0];
            errorMappingObj["portfolios.sihProfileUrl"] = sihProfileURLs[0];
            errorMappingObj["portfolios.startupName"] = startupNames[0];
            errorMappingObj["portfolios.url"] = urls[0];
            errorMappingObj["portfolios.startupEntryDate"] = startupEntryDates[0];
            errorMappingObj["portfolios.startupLogo"] = startupLogos[0];
            errorMappingObj["portfolios.guidanceAreas"] = guidanceAreass[0];

        }
        formData["portfolios"] = portfolios;
        return formData;
    }

    function addCenterLocation(data){
        var formData = data || {};
        var centerLocations = null;
        var incubatorCenterLocationAddresses = $("form.persona-profile-form input[name=incubatorCenterLocationAddress]");
        var incubationCenterLocations = $("form.persona-profile-form input[name=incubationCenterLocation]");

        if(store.getItem("personatype") == "incubator"){
            formData["incubatorCenterLocationAddress"] = [];
            formData["incubationCenterLocation"] = [];

            $.each(incubationCenterLocations, function (idx, incubationCenterLocation) {
                formData["incubatorCenterLocationAddress"].push($(incubatorCenterLocationAddresses[idx]).val() ? $(incubatorCenterLocationAddresses[idx]).val() : null);
                formData["incubationCenterLocation"].push($(incubationCenterLocations[idx]).val() ? $(incubationCenterLocations[idx]).val() : null);
            });
        }

        /*if($("input[type=checkbox][name=hasStories]").is(":checked")){*/

            if (incubationCenterLocations.length > 0) {
                centerLocations = data.centerLocations || [];
                $.each(incubationCenterLocations, function (idx, incubationCenterLocation) {
                    var centerLocation = {};
                    centerLocation["incubatorCenterLocationAddress"] = $(incubatorCenterLocationAddresses[idx]).val() ? $(incubatorCenterLocationAddresses[idx]).val() : null;
                    centerLocation["incubationCenterLocation"] = $(incubationCenterLocations[idx]).val() ? $(incubationCenterLocations[idx]).val() : null;
                    centerLocations.push(centerLocation);
                });
            }
            errorMappingObj["portfolios.incubatorCenterLocationAddress"] = incubatorCenterLocationAddresses[0];
            errorMappingObj["portfolios.incubationCenterLocation"] = incubationCenterLocations[0];
            formData["centerLocations"] = centerLocations;
        /*}*/

        return formData;
    }

    $(document).on("click", ".add", function (event) {
        var $target = $(event.target);
        var clone = $target.closest(".optionBox").find(".block:first").clone();
        clone.find("input,textarea").val("");
        clone.append("<span class='remove'>Remove</span></div>");
        $target.closest(".optionBox").find(".block:last").before(clone);
        $(document).on('click', '.remove', function () {
            $(this).parent('.block').remove();
        });
    });

    $(document).on("click", "select.multi-select", function (event) {
        var $target = $(event.target);
        var $select = $target.siblings(".select2");
        if (!$select.hasClass("select2-container--open")) {
            $select.find(".select2-selection--multiple").trigger("click");
        }
    });

    $(document).on("keyup", "form.persona-profile-form input[type=number]", function (event) {
        var $target = $(event.target);
        var value = parseInt($target.val());
        var min = $target.attr("min");
        var max = $target.attr("max");
        if (!$.isNumeric(value)) {
            $target.val("");
        }
        else if (min && value < parseInt(min)) {
            $target.val(min);
        }
        else if (max && value > parseInt(max)) {
            $target.val(max);
        }
    });

    $(document).on("blur","input[name=cin]",function(event) {
        var $target = $(event.target);
        var startupEntity = $('#startupEntity').val();
        if(startupEntity === ENTITY_PTC || startupEntity === ENTITY_LLP){
            var cinValue = $("input[name=cin]").val();
            var isValid = validateCinAgainstNOE($target);
            if (!$target.is(":disabled") && isValid) getLegalName($target);
        }
    });

    $(document).on("click", ".cinSearch", function () {
        var $target = $("form.persona-profile-form input[name=cin]");
        var isValid = validateCinAgainstNOE($target);
        if (!$target.is(":disabled") && isValid) getLegalName($target);
    });

    function validateCinAgainstNOE($target) {
        var cinType = $($target).val().substring(12, 15);
        var $nature_entity = $('#startupEntity').val();
        var isValid = false;
        if (cinType === "FTC") {
            $target.closest(".form-group").addClass("has-error");
            $target.closest(".form-group").find('.help-block')
                .html("The above CIN implies a subsidiary of a foreign entity (FTC), which is not eligible for recognition");
            $target.closest(".form-group").find('.help-block').removeClass("hidden");
            $("form.persona-profile-form input[name=legalName]").val("");
        } else if ($nature_entity === ENTITY_PTC ) {
            if (cinType === "PTC" || cinType === "NPL" || cinType === "OPC") {
                isValid = true;
            } else {
                $target.closest(".form-group").addClass("has-error");
                $target.closest(".form-group").find('.help-block')
                    .html("The CIN provided does not belong to the selected nature of entity. For further information,you may contact <a href='mailto:dipp-startups@nic.in'>dipp-startups[at]nic[dot]in</a>");
                $target.closest(".form-group").find('.help-block').removeClass("hidden");
                $("form.persona-profile-form input[name=legalName]").val("");
            }
        } else if($nature_entity === ENTITY_LLP) {
            if (cinType != "FTC" && cinType != "PLC" && cinType != "PTC" && cinType != "OPC" && cinType != "NPL") {
                isValid = true;
            } else {
                $target.closest(".form-group").addClass("has-error");
                $target.closest(".form-group").find('.help-block')
                    .html("The CIN provided does not belong to the selected nature of entity.");
                $target.closest(".form-group").find('.help-block').removeClass("hidden");
                $("form.persona-profile-form input[name=legalName]").val("");
            }
        }
        return isValid;
    }

    var legalName = false;

    function getLegalName($target, matchLegalName, $ctaTarget, submitCta) {
        if ($target.val()) {
            verifyCIN($target, matchLegalName, $ctaTarget, submitCta);
        }
        else {
            showErrorState($target, true);
            isValidated = false;
            $("form.persona-profile-form input[name=legalName]").val("");
        }
    }

    function verifyCIN($target, matchLegalName, $ctaTarget, submitCta) {
        $('#modal-loader').modal("show");
        $.ajax({
            type: "POST",
            url: SIH.getEndPoint("/api/auth/user/cinValidate"),
            data : JSON.stringify({"cin": $target.val().trim()}),
            contentType: "application/json",
            headers: {"X-Auth-Token": store.getItem("token") ? store.getItem("token"):getCookieLang("authToken")},
            success: function (response) {
                var legalName;
                if(response.status){
                    legalName = response.data.companyName;
                }
                //legalName = response.nameEntity;
                if (legalName) {
                    var updatedLegalName = $("form.persona-profile-form input[name=legalName]").val();
                    if (matchLegalName && updatedLegalName != "" && updatedLegalName.trim() != legalName.trim()) {
                        $target.closest(".form-group").addClass("has-error");
                        $target.closest(".form-group").find('.help-block')
                            .html("Legal-names do not match. Please check and validate CIN.");
                        isValidated = false;
                        if ($ctaTarget) submitErrors();
                    } else {
                        $target.closest(".form-group").removeClass("has-error");
                        $target.closest(".form-group").find('.help-block').html("");
                        $("form.persona-profile-form input[name=legalName]").val(legalName);
                        $('.form-slide-container .row-container.active').find("input[name=legalName]").closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
                        isValidated = true;
                        if ($ctaTarget) {
                            if (submitCta) submitForm($ctaTarget);
                        }
                    }
                }
                else {
                    $target.closest(".form-group").addClass("has-error");
                    var helpBlock = $target.closest(".form-group").find('.help-block');
                    $(helpBlock).removeClass("hidden");
                    $(helpBlock).html(response.message);
                    $("form.persona-profile-form input[name=legalName]").val("");
                    isValidated = false;
                    if ($ctaTarget) submitErrors();
                }
                $('#modal-loader').modal("hide");
            },
            error: function (response) {
                legalName = false;
                $target.closest(".form-group").addClass("has-error");
                $target.closest(".form-group").find('.help-block').html("We are facing problems fetching your CIN details. Please try after some time.");
                $("form.persona-profile-form input[name=legalName]").val("");
                isValidated = false;
                if ($ctaTarget) submitErrors();
                $('#modal-loader').modal("hide");
            }
        });
    }

    $(document).on("click", "input[name=TiEOrLetsVenture]", function (event) {
        var $tieEl = $("input[name=TiEOrLetsVenture]");
        var radioVal = $tieEl.filter(':checked').val();
        var $linkedInField = $("input[name='linkedInUrl']").closest(".row").find("label.text-md-right");
        if (radioVal == "others" && $tieEl) {
            $("textarea[name='otherThanTieLVDescription'].richTextArea").summernote("code", store.getItem("otherThanTieLVDescription"));
            $("input[name='linkedInUrl']").prop('required', true);
            if ($linkedInField.children("sup.required").length == 0) {
                $linkedInField.html($linkedInField.text() + "<sup class='required'>*</sup>")
            }
            tieOrlvSpecificMessage(null, null, false);
        } else {
            var supTag = $linkedInField.find('sup');
            if (supTag) {
                supTag.remove();
            }
        }
    });

    $(document).on("click", "input[type=button][name=verify-tie-btn]", function (event) {
        if (validate($(event.target))) {
            var $buttonFormGroup = $(event.target).closest(".form-group");
            var formData = {};
            formData["email"] = $("input[name=tie_email]").val();
            formData["password"] = $("input[name=tie_password]").val();
            $.ajax({
                url: SIH.getEndPoint("/api/common/tie"),
                async: false,
                type: "POST",
                headers: {"Content-Type": "application/json"},
                data: JSON.stringify(formData),
                contentType: "application/json",
                dataType: 'json',
                success: function (response) {
                    var store = ContextHub.getStore("sih_user");
                    if (response && !response.error && store) {
                        store.setItem("tieVerified", true);
                        store.setItem("letsVentureVerified", false);
                        $("input[name=next]").removeAttr("disabled");
                        tieOrlvSpecificMessage($buttonFormGroup, null, false);
                        $('.step-next-wrap input.step-next').show();
                    } else {
                        tieOrlvSpecificMessage($buttonFormGroup, "TiE unverified", true);
                        bootbox.alert(response.error);
                        store.setItem("tieVerified", false);
                    }
                }, error: function (response) {
                    tieOrlvSpecificMessage($buttonFormGroup, "TiE unverified", true);
                    bootbox.alert("Error in verification from TIE");
                    store.setItem("tieVerified", false);
                }
            })
        }
    });

    $(document).on("click", "input[type=button][name=verify-venture-btn]", function (event) {
        var email = $("input[name=ventureEmail]").val();
        store.setItem("letsVentureVerified", false);
        if (validate($(event.target))) {
            $('#modal-loader').modal("show");
            var $buttonFormGroup = $(event.target).closest(".form-group");
            $.ajax({
                url: SIH.getEndPoint("/api/common/lv/otp/generate"),
                async: false,
                type: "POST",
                data: email,
                contentType: "application/json",
                dataType: 'json',
                success: function (response) {
                    $('#modal-loader').modal("hide");
                    var store = ContextHub.getStore("sih_user");
                    store.setItem("otpSent", true);
                    tieOrlvSpecificMessage($buttonFormGroup, null, false);
                    bootbox.alert("OTP has been sent.");
                }, error: function (response) {
                    $('#modal-loader').modal("hide");
                    if (response.responseJSON) {
                        bootbox.alert(response.responseJSON.message);
                    }
                    else {
                        bootbox.alert("Error from LetsVenture. Please try later.");
                    }
                    tieOrlvSpecificMessage($buttonFormGroup, "LV unverified", true);
                    store.setItem("otpSent", false);
                }
            });
        }
    });

    $(document).on("click", "input[type=button][name=verify-otp-btn]", function (event) {
        var otp = $("input[name=otp]").val();
        if (otp) {
            $('#modal-loader').modal("show");
            $.ajax({
                url: SIH.getEndPoint("/api/common/lv/otp/verify"),
                async: false,
                type: "POST",
                data: otp,
                contentType: "application/json",
                dataType: 'json',
                success: function (response) {
                    $('#modal-loader').modal("hide");
                    var store = ContextHub.getStore("sih_user");
                    store.setItem("letsVentureVerified", true);
                    store.setItem("tieVerified", false);
                    alert("OTP is successfully verified.");
                    $("input[name=next]").removeAttr("disabled");
                },
                error: function (response) {
                    $('#modal-loader').modal("hide");
                    if (response.responseJSON) {
                        alert(response.responseJSON.message);
                    }
                    else {
                        alert("Unable to verify OTP. Please try later.");
                    }
                    store.setItem("letsVentureVerified", false);
                }
            });
        }
    });
    updateProfileSpecific();
});

function updateProfileSpecific() {
    if(isUpdateProfile()){
        $('.to-first-step').addClass('hidden');
        $("input[type=checkbox][name=enableTNC]").prop("checked",false);
        $('.step-next-wrap input.submit-cta').attr("disabled","disabled");
    }
}
function setState(country) {
    var params = {};
    params["country"] = country;
    var $selection = $("#state");
    var currentDomain = window.location.hostname;
    setList(params, $selection.data("path"), $selection);
    if (currentDomain != $('.notification-container').attr('main-domain')) {
        //TODO: getStateDomains() not available here
        var stateTag = SIH.getStateDomains()[currentDomain];
        if (stateTag) {
            $selection.val(stateTag).attr('disabled', 'true');
        }
    }

    $(document).on('change', '#state', function (event, triggered) {
        var $target = $(event.target);
        var params = {};
        var state = $target.val(), previousState = store.getItem("state");
        if (isUpdateProfile() && state != previousState && !triggered && !switchProfile) {
            var stateAlertMsg = $("#new-persona-content").data("statemessage");
            if (stateAlertMsg) bootbox.alert(stateAlertMsg);
        }
        params["state"] = state;
        var $selection = $("#city");
        var uri = $selection.data("path").split("?")[0];
        setList(params, uri, $selection);
    });

    $(".carousel-indicators li").click(function () {
        $(".ytvideo").each(function () {
            var playerId = $(this).attr("id");
            var player = YT.get(playerId);
            player.pauseVideo();
        });
        $(".htmlvideo").each(function () {
            $(this).trigger("pause");
        });
    });
}

function showErrorState(el, hasError) {
    if (hasError) {
        el.siblings('.help-block').show();
        el.closest(".form-group").addClass("has-error").find("span.help-block").first().html("This field cannot be left Blank.");
    } else {
        el.closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
    }
}

function reload() {
    var scripts = $("script");
    if (typeof scripts === "string") {
        scripts = JSON.parse(scripts);
    }
    $.each(scripts, function (index, item) {
        var src = $(item).attr("src");
        if (!src) {
            if (!$(item).attr("id")) {
                var text = $(item).text();
                $(item).remove();
                $("<script>").text(text).appendTo("head");
            }
        }
    });
}

function countryChangeCallback(selection) {
    if (window.location.hostname != $('.notification-container').attr('main-domain')) {
        $(selection).val(INDIA_COUNTRY_ID).attr('disabled', 'true');
    }
    setTimeout(function(){ $(selection).trigger("change"); }, 1800);
}

var jsonData = [];
function setList(params, apiPath, $selection, callback) {

    if (apiPath) {

        apiPath.indexOf("stakeholders") > -1
            ? $selection.find('option').remove()
            : $selection.find('option').not(":first").remove();

        $.ajax({
            url: apiPath,
            type: 'GET',
            data: params,
            async: false,
            success: function (data) {
                if(data.data) {
                    data = data.data;
                }
                if (typeof data == "string") {
                    data = JSON.parse(data);

                }
                //data.sort(function(a,b){return a[1] - b[1]});

                var targetKey = $selection.attr('id');
                if(targetKey && targetKey === "persona-countries"){
                    data.sort(function(a,b){
                        if(a.text === "India" || b.text === "India"){
                            return a.text == "India" ? -1 : b.text == "India" ? 1 : 0;
                        }
                        else if(a.text < b.text)
                            return -1;
                        else
                            return 1;
                        return 0;
                    });
                }
                var obj = {};

                obj[targetKey] = data;
                var isExist = false;
                $.each(jsonData, function(index, current){
                    if(current[targetKey]){
                        jsonData[index] = obj;
                        isExist = true;
                    }
                });
                if(!isExist){
                    jsonData.push(obj);
                }

                $.each(data, function (index, item) {
                    var o = new Option(item.text, item.id);
                    $selection.append(o);
                });
                if (callback) {
                    callback($selection);
                }
            }, error: function (data) {
                console.log("Error while loading options");
            }
        });
    }
}

function setHeaderCountryList() {
    var params = {};
    var apiPath = SIH.getEndPoint("/api/noauth/resource/country/list");
    var $selectionList = $("#headerCountry").find(".dropdown-content");
    var $selectionSpan = $("#headerCountry").find("#headerCountryName");
    $selectionList.find('li').remove();
    if (apiPath && $("#headerCountry").length) {
        $.ajax({
            url: apiPath,
            type: 'GET',
            data: params,
            async: false,
            success: function (data) {
                data=data.data;
                if (typeof data == "string") {
                    data = JSON.parse(data);
                }
                $.each(data, function (index, item) {
                    var li = "<li><a class='headerCountryLink' href='#' data-value='" + item.id + "'>" + item.text + "</a></li>";
                    $selectionList.append(li);
                });
                if (!isUpdateProfile()) {
                    var stepsPath = store.getItem("personaStepsPath");
                    if (stepsPath) personaSelection(stepsPath);
                }
                $(".headerCountryLink").click(function () {
                    setHeaderCountry($(this), true);
                    $("#inner-content-container").html("<div class='persona-form-message'><h2>Please select your Role</h2></div>");
                    setHeaderRolesList($(this).data("value"));
                });
            }, error: function (data) {
                console.log("Error while loading countries");
            }
        });
    }
}


function setHeaderRolesList(country) {
    var nationality = country === INDIA_COUNTRY_ID ? "persona" : "international-persona";
    var params = {"rootPath": "/content/sih/en/" + nationality};
    var apiPath = "/bin/services/personaChooser";
    var $selectionList = $("#headerRole").find(".dropdown-content");
    var $selectionSpan = $("#headerRole").find("#headerRoleName");
    $selectionSpan.text("Select");
    $selectionList.find('li').remove();
    if (apiPath && $("#headerRole").length) {
        $.ajax({
            url: apiPath,
            type: 'GET',
            data: params,
            async: false,
            success: function (data) {
                if (typeof data == "string") {
                    data = JSON.parse(data);
                }
                $.each(data, function (index, personaBlock) {
                    if (!personaBlock.options.length) {
                        var li = "<li><a class='headerRoleLink' href='#' data-persona-steps-path='" + personaBlock.path + "' " +
                            "data-value='" + personaBlock.name + "'>" + personaBlock.title + "</a></li>";
                        $selectionList.append(li);
                    } else {
                        $.each(personaBlock.options, function (index, option) {
                            if (!option.options.length) {
                                li = "<li><a class='headerRoleLink' href='#' data-persona-steps-path='" + option.contentPath + "' " +
                                    "data-value='" + option.value + "'>" + option.text + "</a></li>";
                                $selectionList.append(li);
                            } else {
                                $.each(option.options, function (index, subOption) {
                                    li = "<li><a class='headerRoleLink' href='#' data-persona-steps-path='" + subOption.contentPath + "' " +
                                        "data-value='" + subOption.value + "'>" + subOption.text + "</a></li>";
                                    $selectionList.append(li);
                                });
                            }
                        });
                    }
                });
                $(".headerRoleLink").click(function () {
                    if(isUpdateProfile() && $(this).data("switch") == "1"){
                        if(confirm("Please note that previous forms will not be accessible anymore.")){
                            switchProfile = true;
                            setHeaderRole($(this), true, true);
                            $(".persona-header-dropdown .header-language .dropdown").css({'pointer-events': 'none'});
                            $(".persona-header-title").append('<button class="btn btn-danger" id="switchButton"><i class="fa fa-arrow-left"></i>Revert to Individual profile</button>');
                            $("#switchButton").click(function () {
                                window.location.reload();
                            });
                        }
                    }else {
                        setHeaderRole($(this), true, true);
                    }
                });
                // form slider

                formSlider();
                nextButtonValidation();
                previousButton();
                otherButtonValidation();

            }, error: function (data) {
                console.log("Error while loading roles");
            }
        });
    }
}

function setHeaderCountry($selectedHeaderCountry, triggered) {
    $(".headerCountryLink").show();
    $selectedHeaderCountry.hide();
    $("#headerCountryName").html($selectedHeaderCountry.text());
    if (triggered) {
        store.setItem("personaCountry", $selectedHeaderCountry.data("value"));
        store.setItem("country", $selectedHeaderCountry.data("value"));
    }
    // var countryImg = "/etc/designs/invest-india/investindialibs/images/persona-country/" + country + ".png";
    // $("#headerCountryImg").attr("src", countryImg);
}

function showMinMaxErrorState(el, hasError) {
    if (hasError) {
        el.siblings('.help-block').show();
        el.closest(".form-group").addClass("has-error").find("span.help-block").first()
            .html("This field value must have length between "+el.attr("minlength") + " to " + el.attr("maxlength"));
    } else {
        el.closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
    }
}

function validateNext() {
    var requiredfiled = $('.form-slide-container .row-container.active').find('.required');
    var validFlag = true;
    $.each(requiredfiled, function (index, item) {
        var element = $(item).closest('.form-group').find(".form-control:not(.richTextarea,.customised-dropdown):visible");
        if (element && element.length > 0 && !element.closest(".modal").length && !element.hasClass("mentorshipComp-hidden")) {
            if (element.attr("type") === "radio") {
                if (element.is(':checked')) {
                    element.closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
                }
                else {
                    element.closest(".form-group").addClass("has-error").find("span.help-block").first().html("This field cannot be left Blank.");
                    validFlag = false;
                }
            }
            else if (element.attr("type") === "checkbox") {
                if (element.is(':checked')) {
                    element.closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
                }
                else {
                    element.closest(".form-group").addClass("has-error").find("span.help-block").first().html("This field cannot be left Blank.");
                    validFlag = false;
                }
            }
            else if (!element.val()){
                validFlag = false;
                showErrorState(element, true);
            }
            else if (element.attr("minlength") > element.val().length || element.val().length > element.attr("maxlength")){
                validFlag = false;
                showMinMaxErrorState(element, true);
            }
            else {
                showErrorState(element, false);
            }
        }

    });

    if(isUpdateProfile()){
        var updateProfileTNC= $('.form-slide-container .row-container').find("input[name=enableTNC]");
        if(updateProfileTNC && updateProfileTNC.length>0){
            updateProfileTNC.prop("checked",false).trigger("change");
        }
    }

    var multiSelect= $('.form-slide-container .row-container.active').find('select.multi-select');
    $.each(multiSelect,function (index,item) {
        var el =$(item);
        if(el.is(":visible")) {
            var value = el.val();
            if (!value || value.length == '0') {
                $(el).closest('.form-group').addClass("has-error").find("span.help-block").html('This field cannot be left Blank.');
                validFlag = false;
            }
        }
    });

    var richTextAreas = $('.form-control.richTextarea');
    $.each(richTextAreas, function (index, item) {
        var el = $(item);
        if (el.closest('.form-group').find('sup.required').length > 0 && el.closest('.form-group').is(":visible")) {
            var note = el.val().trim();
            var tempStr = el.val().replace(/<p>*/g,'').replace(/<\/p>*/g,'').replace(/(&nbsp;)*/g, "").replace(/<br>*/g, "");
            if (el.attr("minlength") > tempStr.length || tempStr.length > el.attr("maxlength")){
                validFlag = false;
                showMinMaxErrorState(el, true);
            } else if (note.length > 0 && !el.summernote('isEmpty') && tempStr.trim().length > 0) {
                el.siblings('.note-editor.note-frame').removeClass('note-has-error').addClass('note-writer-text');
                showErrorState(el, false);
            } else {
                validFlag = false;
                el.siblings('.note-editor.note-frame').addClass('note-has-error').removeClass('note-writer-text');
                showErrorState(el, true);
            }
        }
    });

    var regexValidatedfields = $('div.section-block .regex-val:visible');
    $.each(regexValidatedfields, function (index, item) {
        var element = $(item);
        var re = new RegExp(element.attr("regex"));
        if (element.val() && !re.test(element.val())) {
            validFlag = false;
            //showErrorState(element, true);
            element.closest(".form-group").addClass("has-error");
            element.siblings(".regex-msg").show();
        } else {
            if (!(element.closest(".form-group").has("sup.required") && !element.val())) {
                showErrorState(element, false);
            }
            element.siblings(".regex-msg").hide();
        }
    });

    var customizedDropDown = $('.form-control.customised-dropdown:visible');
    $.each(customizedDropDown, function (index, item) {
        var el = $(item);
        var selectedIndustries = $("select[name=industry]").val();

        if (!selectedIndustries || selectedIndustries.length === 0) {
            validFlag = false;
            showErrorState(el, true);
        } else {
            var isValid = [];
            $.each(selectedIndustries, function (idx, selectedIndustry) {
                var selectedIndustryArr = selectedIndustry.split("/");
                var industryName = selectedIndustryArr[selectedIndustryArr.length - 1];
                if (el.find("ul#sector").first().find("input[name=" + industryName + "][type=checkbox]:checked").length === 0) {
                    validFlag = false;
                    isValid.push(false);
                    //showErrorState(el, true, $("#sector").data("requiredMessage"));
                } else {
                    isValid.push(true);
                    //showErrorState(el, false);
                }
            });
            if($.inArray(false,isValid) == -1) {
                showErrorState(el, false);
            } else {
                showErrorState(el, true, $("#sector").data("requiredMessage"));
            }
        }
    });

    var checkLegalName= $('.form-slide-container .row-container.active').find("input[name=legalName]");
    var startupEntity = $('#startupEntity').val();
    var cinValue = $("input[name=cin]").val();
    if((startupEntity === ENTITY_PTC || startupEntity === ENTITY_LLP) && cinValue.length >1) {
        if (checkLegalName.length === 1) {
            if (checkLegalName.val().length === 0 || checkLegalName.val() === "") {
                $('.form-slide-container .row-container.active').find("input[name=legalName]").closest(".form-group").addClass("has-error").find("span.help-block").first().html("Please enter a valid cin to get the LegalName");
                validFlag = false;
            }
            else {
                $('.form-slide-container .row-container.active').find("input[name=legalName]").closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
            }
        }
    }
    return validFlag;
}
function setHeaderRole($selectedHeaderRole, headerRoleChanged, loadPersona) {
    $(".headerRoleLink").show();
    var personaStepsPath = $selectedHeaderRole.data("personaStepsPath");
    var role = $selectedHeaderRole.data("value");
    var country = store.getItem('')
    $selectedHeaderRole.hide();
    $("#headerRoleName").html($selectedHeaderRole.text());
    store.setItem("personatype", role);
    if (loadPersona){
        store.setItem("personaStepsPath", personaStepsPath);
        personaSelection(personaStepsPath);
    }
    // var roleImg = "/etc/designs/invest-india/investindialibs/images/persona-role/" + role + ".png";
    // $("#headerRoleImg").attr("src", roleImg);
}

function personaSelection(stepsPath) {
    store.setItem("isThereBusinessPlan", false);
    store.setItem("dippCertified", false);
    if (isUpdateProfile() && !store.getItem("sihRegisteredUser")) {
        var loginTime = store.getItem("loginTime");
        var noProfile = store.getItem("no-profile");
        store.reset();
        store.setItem("loginTime", loginTime);
        store.setItem("no-profile", noProfile);
        fetchOAuthData();
    }
    postPersonaSelection(stepsPath);
}

function fetchOAuthData() {
    var codeParam = getParameterByName("uid");
    if (codeParam) {
        var oauthApi = SIH.getEndPoint("/api/noauth/oauth2/details?code=" + codeParam);
        $.ajax({
            url: oauthApi,
            async: false,
            type: 'GET',
            success: function (data) {
                addOAuthDataToContextHub(data);
            },
            error: function (data) {
                console.log("Error while adding data to ContextHub");
            }

        });
    }
}

function addOAuthDataToContextHub(data) {
    if (data) {
        var store = ContextHub.getStore("sih_user");
        var obj = {};
        obj["uid"] = data["uid"];
        obj["dobYear"] = data["field_dob_year"];
        obj["dobMonth"] = data["field_dob_month"];
        obj["dobDate"] = data["field_dob_date"];
        obj["fullName"] = data["fullName"];
        obj["email"] = data["mail"];
        obj["registered"] = data["registered"];
        if (data["sms_user"]) {
            obj["phone"] = data["sms_user"]["mobileNumber"];
        }
        obj["country"] = $.cookie("countryTag") ? $.cookie("countryTag") : INDIA_COUNTRY_ID;
        obj["state"] = data["state"];

        for (var key in obj) {
            store.setItem(key, obj["" + key]);
        }
    }
}

function postPersonaSelection(personaStepsPath) {
    getPersonaSteps(personaStepsPath);
}
function getPersonaSteps(path) {
    $('#modal-loader').modal("show");
    $.ajax({
        url: path + "/_jcr_content.html?wcmmode=disabled",
        type: 'GET',
        async: false,
        success: function (data) {
            var doc = (new DOMParser()).parseFromString(data, "text/html");
            $("#inner-content-container").html(doc.body.getElementsByClassName("inner-content"));
            if(!isUpdateProfile()) {
                //$("#persona-header-title-container").html(doc.body.getElementsByClassName("persona-header-title"));
                var personatype = store.getItem('personatype');
                $('#headerRole').find('.user-type').addClass(personatype);
            }
            countryTag = $.cookie("countryTag") ? $.cookie("countryTag") : INDIA_COUNTRY_ID;
            $(".persona-dropdown-wrapper").show();
            if (!isUpdateProfile()) setHeaderFields();
            if (store.getItem('country') == 'India' || store.getItem('country') == '5f02e38c6f3de87babe20cd2') {
                setState(store.getItem("country"));
                $("#state").trigger("change", true);
            }
            if (store && store.getItem("personatype") == "government-body") {
                var $selection = $("form.persona-profile-form select[name=ministry]");
                setList(null, $selection.data("path"), $selection);
                $selection.trigger("change");
            }
//                if(store &&store.getItem("personatype") === 'mentor'){
//                    $('.step-next-wrap input.step-next').hide();
//                }
            handleRoleRelatedChanges();
            mentorshipFormEvents();
            $("input[name=fullname]").val(store.getItem("fullName"));
            var emailStoreValue = store.getItem("email");
            if (!emailStoreValue || emailStoreValue == null) {
                $("input[name=email]").parents(".baseformfield").hide();
            } else {
                $("input[name=email]").val(emailStoreValue);
            }
            if (store.getItem("phone")) {
                var $phone = $("input[name=phone]");
                $phone.val(store.getItem("phone"));
                // $phone.attr("disabled", "disabled")
            }

            doProcessingForTNC();
            moreInfoEvents();
            $('body').addClass('step-two');

            $('.new-persona-content .persona-profile-form .form-section-block').each(function(i){
                if(i==0){
                    $(this).find('.section-block').slideDown();
                    $(this).find('.section-block-title').addClass('active');
                    $(this).find('.section-block-title').find('i').addClass('fa-minus');
                    $(this).find('.section-block-title').find('i').removeClass('fa-plus');
                }else{
                    return;
                }
            });
            $('.step-two .new-persona-content .persona-profile-form .section-block-title').click(function(){
                $(this).toggleClass('active');
                $(this).find('i').toggleClass('fa-minus fa-plus');
                $(this).siblings('.section-block').slideToggle();
                $(this).closest('.baseformfield').siblings('.baseformfield').find('.section-block-title').removeClass('active');
                $(this).closest('.baseformfield').siblings('.baseformfield').find('.section-block-title').find('i').addClass('fa-plus');
                $(this).closest('.baseformfield').siblings('.baseformfield').find('.section-block-title').find('i').removeClass('fa-minus');
                $(this).closest('.baseformfield').siblings('.baseformfield').find('.section-block').slideUp();
            });
            $("body").removeClass('step-one');
        }, error: function (data) {
            console.log(data);
        }
    });
    reload();
    fileuploads = {};
    cloneFileUploads();

    setTimeout(function () {
        $('#modal-loader').modal("hide");
    }, 500);
}

$(document).on('click','.to-first-step',function (e) {
    if(!isUpdateProfile()) {
        store.setItem('personatype', '');
        store.setItem('personaStepsPath', '');
        location.reload(true);
    }
});

function moreInfoEvents(){
    $('.more-info').hover(function(event){
        $(this).addClass("active");
        $(this).find('.info.popover').show();
    },function(event){
        $('.info.popover').hide();
        $(".more-info").removeClass("active");
    });
}
function customUIHandling() {
    if((store.getItem("personatype") === 'startup')||(store.getItem("personatype") === 'individual')||(store.getItem("personatype") === 'individual-investor')||(store.getItem("personatype") === 'institutional-investor')||(store.getItem("personatype") === 'mentor')||(store.getItem("personatype") === 'incubator')||(store.getItem("personatype") === 'accelerator')||(store.getItem("personatype") === 'corporate')||(store.getItem("personatype") === 'government-body')){
        $('.persona-profile-form .note-editable.panel-body').css({'height':'204px'});
    }
}
function setTextAreaHeight(height) {
    $('.persona-profile-form .note-editable.panel-body').css({'height':height});
}
$(document).on('change', 'input[name=addAll]', function (event) {
    var $target = $(event.target);
    var name = $target.data("name");
    var checkboxes = $("input[name=" + name + "]");
    if ($target.is(":checked")) {
        checkboxes.prop('checked', true);
    }
    else {
        checkboxes.prop('checked', false);
    }
});
$(document).on('change', '.addAll', function (event) {
    var $target = $(event.target);
    var allSelection = $target.closest(".addContainer").find("input[name=addAll]");
    if (!$target.is(":checked")) {
        allSelection.prop('checked', false);
    }
    var allCheckedInputs = $target.closest(".addContainer").find('input.addAll:checked').length;
    if (allCheckedInputs && (allCheckedInputs == $target.closest(".addContainer").find('input.addAll').length)) {
        allSelection.prop('checked', true);
    }
});

function getFocusArea(industry, sectors) {
    var focusArea = {};
    focusArea["industry"] = {};
    focusArea["industry"]["id"] = $(industry).val();
    focusArea["sectors"] = [];
    $.each(sectors, function (index, item) {
        var sector = {};
        sector["id"] = $(item).val();
        focusArea["sectors"].push(sector);
    });
    return focusArea;
}

function getLocationDetail(state, cities) {
    var location = {};
    location["state"] = {};
    location["state"]["id"] = $(state).val();
    location["cities"] = [];
    $.each(cities, function (index, item) {
        var city = {};
        city["id"] = $(item).val();
        location["cities"].push(city);
    });
    return location;
}

function addFocusAreas(data) {
    var formData = data || {};
    var focusAreas = [];
    var industries = $("#industry option:selected");
    errorMappingObj["focusArea.industry"] = $("#industry");
    errorMappingObj["focusArea.sector"] = $("#sector").siblings("button");
    $.each(industries, function (index, industry) {
        var indystryVal = industry.value;
        var sectorName = indystryVal.substring(indystryVal.lastIndexOf('/') + 1, indystryVal.length);
        var sectors = $("input[name=" + sectorName + "]:checked");
        var focusArea = getFocusArea(industry, sectors);
        focusAreas.push(focusArea);
    });
    formData["focusAreas"] = focusAreas;
    return formData;
}

function addLocationDetails(data) {
    var formData = data || {};
    var locations = [];
    errorMappingObj["locations.state"] = $("#states");
    errorMappingObj["location.city"] = $("#city").siblings("button");
    $.each($("input[name=allstates]"), function (index, item) {
        if ($(item).is(":checked")) {
            var stateVal = item.value;
            var stateName = stateVal.substring(stateVal.lastIndexOf('/') + 1, stateVal.length);
            var city = $("input[name=" + stateName + "]:checked");
            var location = getLocationDetail(item, city);
            locations.push(location);
        }
    });
    formData["locations"] = locations;
    return formData;
}

function populateFormErrors(response, updateProfile, $target, applicantErrorObj) {

    cleanErrorBlock();
    var responseJSON = response.responseJSON;
    $("div.form-group").removeClass("has-error");
    if (responseJSON) {
        var errorBlockUnOrderedList = $("div.error-block ul").first();
        errorBlockUnOrderedList.empty();
        $.each(responseJSON, function (idx, error) {
            var fieldName = error.field;
            if (fieldName && fieldName.indexOf("startup.") > -1) {
                fieldName = fieldName.replace("startup.", "");
            }
            var liErrorMessage = "<li>" + error.defaultMessage + "</li>";
            var fields = ["focusAreas", "sectors"];

            if (fieldName) {
                var $field;
                if ($target.parents('.ams-application-form').length > 0) {
                    $field = amsApplication.errorMappingObj[fieldName];
                } else if (applicantErrorObj) {
                    $field = applicantErrorObj[fieldName];
                } else {
                    if(fields.every(e1 => fieldName.includes(e1))){
                        liErrorMessage = "<li>" + error.code + "</li>";
                        $field = errorMappingObj["focusArea.sector"];
                    }else{
                        $field = errorMappingObj[fieldName];
                    }
                }
                if ($field) {
                    var formGroup = $($field).closest(".form-group");
                    if ($($field).is('textarea')) {
                        $($field).siblings('.note-editor').addClass('note-has-error');
                    }
                    if (formGroup && formGroup.length > 0) {
                        formGroup.addClass("has-error");
                        var $helpBlock = formGroup.find("span.help-block");
                        $($helpBlock).removeClass("hidden");
                        if ($helpBlock && $helpBlock.length > 0) {
                            if(fields.every(e1 => fieldName.includes(e1))){
                                $helpBlock.first().html(error.code);
                            }else{
                                $helpBlock.first().html(error.defaultMessage);
                            }
                        } else {
                            errorBlockUnOrderedList.append(liErrorMessage);
                        }
                    } else {
                        errorBlockUnOrderedList.append(liErrorMessage);
                    }
                } else {
                    errorBlockUnOrderedList.append(liErrorMessage);
                }
            } else {
                errorBlockUnOrderedList.append(liErrorMessage);
            }
        });

        if ($("div.error-block ul li") && $("div.error-block ul li").length > 0) {
            var $errors = $("div.error-block").html();
            if ($target.hasClass('skip-cta') && $("div.error-block-skip-cta").length == 0) {
                var $insertBefore = $(".columncontrol input.skip-cta").parents(".columncontrol")
                $("<div class='error-block-skip-cta'>" + $errors + "</div>").insertBefore($insertBefore);
            }
            else if ($target.hasClass('skip-cta') && $("div.error-block-skip-cta").length > 0) {
                $("div.error-block-skip-cta").html($errors);
            }
            else {
                $("div.error-block").css("display", "block");
            }
        }
    }
}

var cleanErrorBlock = function () {
    var errorList = $("div.error-block ul");
    errorList.remove("li");
    errorList.append("<li></li>");
    $("div.error-block").hide();
};

function convertSerializeDataToJSON(formData) {
    var jsonObject = {};
    if (formData) {
        var keyValuePair = formData.split("&");
        if (keyValuePair && keyValuePair.length > 0) {
            for (var i = 0; i < keyValuePair.length; i++) {
                var keyValueArr = keyValuePair[i];
                var key = keyValueArr.split("=")[0];
                var value = unescape(keyValueArr.split("=")[1].replace(/\+/g, ' '));
                if (value && value.length > 0) {
                    if (value == "on" || value == "off") {
                        value = value == "on" ? true : false;
                    }
                    if (jsonObject["" + key] != null) {
                        if (Array.isArray(jsonObject["" + key])) {
                            jsonObject["" + key].push(value);
                        } else {
                            var valueArr = [];
                            valueArr.push(jsonObject["" + key]);
                            valueArr.push(value);
                            jsonObject["" + key] = valueArr;
                        }
                    } else {
                        jsonObject["" + key] = value;
                    }
                }
                errorMappingObj["" + key + ""] = $("input[name=" + key + "]")[0] || $("select[name=" + key + "]")[0] || $("textarea[name=" + key + "]")[0];
            }
        }
    }
    if (jsonObject["description"]) {
        var $description = $("textarea[name=description]");
        jsonObject["description"] = $description.val();
        errorMappingObj["description"] = $description[0];
    }
    if (jsonObject["ideaBrief"]) {
        var $ideaBrief = $("textarea[name=ideaBrief]");
        jsonObject["ideaBrief"] = $ideaBrief.val();
        errorMappingObj["ideaBrief"] = $ideaBrief[0];
    }
    if (jsonObject["companyLogo"]) {
        jsonObject["companyLogo"] = $("input[type=checkbox][name=companyLogo]").prop("checked");
    }
    return jsonObject;
}

$(document).on('click', '.repeat-container .repeat-add', function (event) {
    var $target = $(event.target);
    var limit = $target.data("limit");
    var parent = $target.closest(".repeat-container");
    if (limit && parent.children(".repeat-fields").length >= limit) {
        $target.attr("disabled", "disabled");
        return false;
    }
    var toRepeat = parent.find(".repeat-fields").first();
    var clone = toRepeat.clone();
    var nowId = $.now();
    if (!$target.parents('.ams-application-form').length) {
        clone.prepend('<div class="row">\n' +
            '<div class="col-md-3 col-sm-3 col-xs-3 pull-right text-right" style="margin-right: 0.25em">\n' +
            '<span class="close-repeat-fields btn btn-primary personaOrangeCTA" data-close-id="' + nowId + '">Remove</span>\n' +
            '</div>\n' +
            '</div>');
    }
    $(clone).find('.multiimage-label').text('Select Partner');
    $(clone).find('.wrapper-add-logo img.browse').attr("src", "/etc/designs/invest-india/investindialibs/images/camera.png");
    clone.attr("id", nowId);
    clone = clearElements(clone);
    var repeatFileUploads = clone.find(".file-upload");
    $.each(repeatFileUploads, function (index, item) {
        $item = $(item);
        $item.replaceWith(fileuploads[$item.data('name')].clone());
    });
    /* if ($target.parents('.ams-application-form').length > 0 && $target.find('.multipleimageupload')) {
             var array1=[];
             $(parent).find('select.multiimage-select').each(function(){
                 array1.push($(this).val());
             });
             $(clone.find('select.multiimage-select option')).each(function(){
                 if($.inArray($(this).val(),array1) > -1){
                     $(this).remove();
                 }
             });
             var selectionVar = clone.find('select.multiimage-select').val();
             clone.find('.multiimage-label').text(clone.find('select.multiimage-select option[value=' + selectionVar + ']').text());
     }*/
    if ($target.parents('#ams-application-form').length
        || $target.parents('.ams-application-form').length
        || $target.parents('.stateRecognitionForm').length) {
        clone.append('<input type="button" class="repeat-remove" value="Remove">');
    }
    // clone.append("<input type='button' class='repeat-remove' value='remove'/>");
    var textTarget = clone.find("textarea.richTextarea");
    $(textTarget).siblings(".note-editor").remove();
    $(textTarget).summernote(personaJSON);
    clone.insertBefore($target);
    if (clone.find('select.multiimage-select option').length == 1) {
        $target.remove();
    }
    if (limit && parent.children(".repeat-fields").length >= limit) {
        parent.find(".repeat-add").hide();
    }
    $.event.trigger({type: 'addRepeatButton', cloneElem: clone, targetElem: $target});

    moreInfoEvents();
});

function clearElements(container) {
    container.find(':input').each(function () {
        switch (this.type) {
            case 'password':
            case 'textarea':
            case 'number':
            case 'select-one':
            case 'select-multiple':
            case 'email':
                jQuery(this).val('');
                break;
            case 'text':
                jQuery(this).val('');
                if (jQuery(this).hasClass("hasDatepicker")) {
                    jQuery(this).val('').attr("id", $.now() + 10);
                    if (jQuery(this).attr("restrictcurrent") && jQuery(this).attr("restrictcurrent") === "true") {
                        jQuery(this).removeClass('hasDatepicker').datepicker({'maxDate': new Date()});
                    } else if (jQuery(this).hasClass("ams-form-date")) {
                        jQuery(this).removeClass('hasDatepicker').datepicker({dateFormat: 'dd/mm/yy'});
                    } else {
                        jQuery(this).removeClass('hasDatepicker').datepicker();
                    }
                }
                break;
            case 'date':
            case 'checkbox':
            case 'radio':
                this.checked = false;
                break;
            case 'file':
                var imageUploadRow = this.closest('.row');
                $(imageUploadRow).find("img.browse").hide();
                $(imageUploadRow).find(".camera-image").css('display', 'block');
                $(imageUploadRow).find('.multi-image-heading span').text('0');
                var multiLogoWrapper = $(imageUploadRow).closest('.muli-logo-wrapper');
                $(multiLogoWrapper).find('.preview-partners-logo').html('');
                $(multiLogoWrapper).find('.multi-image-heading span').text('0');
                break;

        }
    });
    return container;
}

function handleRoleRelatedChanges() {
    $(".personalized-content-target").closest(".baseformfield").addClass("display-n");
    $("#startupEntity").closest(".baseformfield").addClass("display-n");

    $("input[type=radio][name=stage]").click(function () {
        var val = $("input[type=radio][name=stage]:checked").val();
        if (val ==="Prototype"||val==="Validation"|| val === "EarlyTraction" || val === "Scaling") {
            if (val =="Prototype"||val=="Validation") {
                $("input[name=cin]").closest('.col-md-7').siblings('.col-md-3').find('sup').removeClass('required');
                $("input[name=cin]").closest('.col-md-7').siblings('.col-md-3').find('sup').hide();
                $("input[name=cin]").closest('.col-md-7').find('.help-block').addClass('hidden');
                $("input[name=pan]").closest('.col-md-7').siblings('.col-md-3').find('sup').removeClass('required');
                $("input[name=pan]").closest('.col-md-7').siblings('.col-md-3').find('sup').hide();
                $("input[name=pan]").closest('.col-md-7').find('.help-block').addClass('hidden');
                $('#startupEntity').parent().siblings('.col-md-3').find('sup').removeClass('required');
                $('#startupEntity').parent().siblings('.col-md-3').find('sup').hide();
            }
            else{
                $("input[name=cin]").closest('.col-md-7').find('.help-block').removeClass('hidden');
                $("input[name=pan]").closest('.col-md-7').find('.help-block').removeClass('hidden');
                $("input[name=cin]").closest('.col-md-7').siblings('.col-md-3').find('sup').show();
                $("input[name=pan]").closest('.col-md-7').siblings('.col-md-3').find('sup').show();
                $("input[name=cin]").closest('.col-md-7').siblings('.col-md-3').find('sup').addClass('required');
                $("input[name=pan]").closest('.col-md-7').siblings('.col-md-3').find('sup').addClass('required');
                $('#startupEntity').parent().siblings('.col-md-3').find('sup').addClass('required');
                $('#startupEntity').parent().siblings('.col-md-3').find('sup').show();
            }
            $("input.skip-cta").closest(".baseformfield").hide();
            $(".skip-msg-text").closest(".text").hide();
            $("#startupEntity").closest(".baseformfield").removeClass("display-n");
            if (store.getItem("startupEntity") && (store.getItem("cin") || store.getItem("pan")) && isUpdateProfile()) {
                stageIntervalId = setInterval(checkAndPopulateCINOnStageChange, 500);
            }
        } else {
            $("#startupEntity").closest(".baseformfield").addClass("display-n");
            if($("#startupEntity").closest(".baseformfield").hasClass("display-n")){
                $("input[name=cin],input[name=legalName],input[name=pan]").closest(".baseformfield").addClass("display-n");
            }
            $("input.skip-cta").closest(".baseformfield").show();
            $(".skip-msg-text").closest(".text").show();
        }
    });

    $(document).on('change', '#startupEntity', function () {
        var startupEntity = $(this).val();
        $("input[name='cin']").val("");
        if (startupEntity) {
            if (startupEntity === ENTITY_PTC || startupEntity === ENTITY_LLP) {
                $("input[name=cin],input[name=legalName]").closest(".baseformfield").removeClass("display-n");
                $("input[name=cin],input[name=legalName]").closest(".baseformfield .form-group").removeClass("has-error");
                $("input[name=cin],input[name=legalName]").closest(".baseformfield .form-group").find(".help-block").addClass("hidden");
                $("input[name=pan]").closest(".baseformfield").addClass("display-n");
            } else if (startupEntity === ENTITY_RP) {
                $("input[name=pan]").closest(".baseformfield").removeClass("display-n");
                $("input[name=pan]").closest(".baseformfield .form-group").removeClass("has-error");
                $("input[name=pan]").closest(".baseformfield .form-group").find(".help-block").addClass("hidden");
                $("input[name=cin],input[name=legalName]").closest(".baseformfield").addClass("display-n");
            }
        } else {
            $("input[name='cin']").hide();
            $("input[name='legalName']").hide();
            $("input[name='pan']").hide();
        }
        store.setItem("startupEntity", startupEntity);
    });

    $("input[name=dippCertified]").change(function () {
        $("input[name=dippNumber]").closest(".baseformfield").toggleClass("display-n", !this.checked);
    });

    $("input[name=isThereBusinessPlan]").change(function () {
        $(".repeat-businessPlan").closest(".baseformfield").toggleClass("display-n", !this.checked);
    });
}

$(document).on('click','.go-to-dash',function (e) {

    console.log('call');
    goToRoleDashboard();
});
$(document).on('click','.update-profile',function (e) {
    e.preventDefault();
    goToUpdateProfile();
});

function goToUpdateProfile () {
    // editProfile(e);
    window.open(window.location.origin +'/content/sih/en/profile.'+store.getItem('role')+'.'+store.getItem('uniqueId')+'.html','_self');
}
function goToRoleDashboard(){
    if (store.getItem('country') === "5f02e38c6f3de87babe20cd2") {
        window.open(window.location.origin +'/content/sih/en/user/my-dashboard/'+store.getItem('role')+'.html','_self');
    } else {
        window.open(window.location.origin +'/content/sih/en/user/my-dashboard/'+'Int-'+store.getItem('role')+'.html','_self');
    }
}
function checkAndPopulateCINOnStageChange() {
    var $startUpEntity = $("select[name=startupEntity]");
    var $cinEl = $("input[name=cin]");
    var $pan = $("input[name=pan]");
    var $legalName = $("input[name=legalName]");
    if ($startUpEntity.length && (($cinEl.length && $legalName.length) || $pan.length)) {
        clearInterval(stageIntervalId);
        $startUpEntity.val(profileData["startup"]["startupEntity"]).attr("disabled", "disabled");
        if (profileData["startup"]["startupEntity"] === ENTITY_RP) {
            $pan.val(store.getItem("pan"));
            $pan.attr("disabled", "disabled");
            $pan.parents(".baseformfield").removeClass("display-n");
            /*$("input[name=stage]").prop("disabled",true);
            $("select[name=startupindustry]").prop("disabled",true);
            $("select[name=state]").prop("disabled",true);
            $("select[name=city]").prop("disabled",true);
            $("select[name=sector]").prop("disabled",true);
            $("select[name=services]").prop("disabled",true);
            $("select[name=udyogAadhar]").prop("disabled",true);*/
        } else {
            var cinVal = profileData["startup"]["cin"];
            if (cinVal) {
                $cinEl.val(cinVal).attr("disabled", "disabled");
                $("input[type=checkbox][name=isRegistered]").attr("disabled", "disabled");
                $("input[name=legalName]").val(profileData["startup"]["legalName"]).attr("disabled", "disabled");
                $("input[name=legalName]").parents(".baseformfield").removeClass("display-n");
                $("span.cinSearch").addClass("disabled");
                $cinEl.parents(".baseformfield").removeClass("display-n");
            }
        }
    }
    var dippStatus = profileData["startup"]["dippCertified"];
    if(isUpdateProfile() && dippStatus) {
        disableFieldsIfRecognized();
    }
}

function tieOrlvSpecificMessage($container, msg, addMsg) {
    if (addMsg) {
        $container.addClass("has-error").append("<div class='tieOrlvSpecificMessage help-block'>" + msg + "</div>");
    } else {
        if($(".tieOrlvSpecificMessage").length){
            $(".tieOrlvSpecificMessage").closest(".form-group").removeClass("has-error")
                .end().remove();
        }
    }
}


//Form slider as per new design of persona
function formSlider(){
    $('.form-slide-container').closest(".row-container").addClass('form-slide-outer-container clearfix');
    $('.persona-steps-form-wrap .step-previous').closest(".button").addClass('step-previous-wrap');
    $('.persona-steps-form-wrap .step-next').closest(".button").addClass('step-next-wrap');
    slideWidth = $(".form-slide-container").outerWidth();

    $(".form-slide-container .row-container").each(function(){
        slideWrapWidth = slideWrapWidth + slideWidth;
    })

// $(".form-slide-container").css("width",slideWrapWidth);
    $(".form-slide-container .row-container:first-child").addClass('active');
    $('.form-slide-container .row-container.active').show();
    var stepPosition = 0;
    $(".form-slide-container .row-container").each(function(i){
        rowIndex = `tab-index-${i}`;
        $(this).addClass(rowIndex);
        $(this).attr('data-ti',i);

    });
    $(".persona-timeline-wrap .time-stamp-outer").each(function(i){
        rowIndex = `tab-index-${i}`;
        $(this).addClass(rowIndex);
        $(this).attr('data-ti',i);
        if (i == 0) {
            $(this).addClass("active");
        }

    });
    switch ($(".time-line-outer .time-stamp-outer").length) {
        case 2:
            $(".time-line-outer").addClass("total-two");
            $(".presona-timeline-mobile .total-steps").html(`2`);
            break;
        case 3:
            $(".time-line-outer").addClass("total-three");
            $(".presona-timeline-mobile .total-steps").html(`3`);
            break;
        case 4:
            $(".time-line-outer").addClass("total-four");
            $(".presona-timeline-mobile .total-steps").html(`4`);
            break;
        case 5:
            $(".time-line-outer").addClass("total-five");
            $(".presona-timeline-mobile .total-steps").html(`5`);
            break;

    }
    if($('.form-slide-container .tab-index-0.active').length){
        $('.step-previous-wrap').hide();
    }
    else{
        $('.step-previous-wrap').show();
    }
    let saveProfile = $('.terms-condition-wrapper input[name="saveprofile"]');
    $('.terms-condition-wrapper input[name="saveprofile"]').remove();
    $('.step-next-wrap .text-center-mob').append(saveProfile);
    // responsive code
    $(".presona-timeline-mobile .current-title h3").html($(".time-stamp-outer.active .step-title span").text());
}


/* function mentorShipStartup(){
   var check= $('.form-slide-container .row-container').find("input[type=checkbox][name=mentorshipParticipant]");
    $mentorshipCityTrigger = $(".mentor_selection_offline:checkbox:first");
    if(!check.prop("checked")){
        $(".mentorshipComp").addClass("hidden");
    }
   $('.form-slide-container .row-container').find('.mentorevent').addClass('hidden');
       if (!$mentorshipCityTrigger.is(":checked")) {
           $(".mentorCityStartup").addClass("hidden");
       }
   }*/

$(document).on('change','#One-to-many-masterclass',function (event) {
    var $target = $(event.target);
    if($target.val()) {
        $(".mentorCityStartup").toggleClass("hidden");
    }
    if($('.mentorCityStartup').hasClass('hidden')){

        $('.mentorCityStartup').parent().siblings('.help-block').addClass('hidden');
    }
    else{
        $('.mentorCityStartup').parent().siblings('.help-block').removeClass('hidden');
    }
});
$(document).on('change','input[type=checkbox][name=mentorshipParticipant]',function(event){
    var $target = $(event.target);
    if($target.val())
    {
        console.log($target.val());
        $(".mentorshipComp").toggleClass("hidden");
        if($("#One-to-many-masterclass").prop("checked")){
            $("#One-to-many-masterclass").prop("checked",false);
            $('.mentorCityStartup').addClass('hidden');

            $('.mentorCityStartup').parent().siblings('.help-block').addClass('hidden');
        }

        if ($('.mentorshipComp').hasClass('hidden')){

            $('.mentorshipComp').parent().siblings('.help-block').addClass('hidden');
        }
        else{
            $('.mentorshipComp').parent().siblings('.help-block').removeClass('hidden');
        }

        $('.form-slide-container .row-container').find('.mentorevent').toggleClass('hidden');
    }
});
//Next button for validating the form sliding.
function nextButtonValidation(){

    $(".persona-steps-form-wrap input[name='next']").off('click').on('click',function(){
        if(validateNext()) {
            let currentIndex = $('.form-slide-container .row-container.active').attr('data-ti');
            let nextIndex = parseInt(currentIndex) + 1;
            let nextTwoIndex = nextIndex + 2;
            let nextTabSelector = `.form-slide-container .row-container.tab-index-${nextIndex}`;
            let nextTwoTabSelector = `.form-slide-container .row-container.tab-index-${nextTwoIndex}`;
            let currentTabSelector = `.form-slide-container .row-container.tab-index-${currentIndex}`;
            let currentStampIndex = $('.persona-timeline-wrap .time-stamp-outer.active').attr('data-ti');
            let nextStampIndex = parseInt(currentStampIndex) + 1;
            let nextStampSelector = `.persona-timeline-wrap .time-stamp-outer.tab-index-${nextStampIndex}`;
            let currentStampSelector = `.persona-timeline-wrap .time-stamp-outer.tab-index-${currentStampIndex}`;

            if($(nextTabSelector).length){
                $('.form-slide-container .row-container.active').hide('slide', {direction: 'left'}, 0 , function(){
                    $(nextTabSelector).show('slide', {direction: 'right'}, 0, function () {
                        if($(nextTwoTabSelector).length){
                            $('.step-next-wrap input.step-next').show();
                            $('.step-next-wrap input.submit-cta').hide();
                        }else{
                            $('.step-next-wrap input.step-next').hide();
                            $('.step-next-wrap input.submit-cta').show();
                        }
                        if(!enableTNC)
                        {
                            $('.step-next-wrap input.submit-cta').attr("disabled","disabled");
                        }
                        else{
                            $('.step-next-wrap input.submit-cta').removeAttr("disabled","disabled");
                        }
                        $(nextTabSelector).addClass('active');
                        $(currentTabSelector).removeClass('active');
                        $(nextStampSelector).addClass('active');
                        $(currentStampSelector).removeClass('active');
                        $(currentStampSelector).addClass('done');
                        var wrapHeight = $(".form-slide-container .row-container.active").outerHeight();
                        //  $(".form-slide-container").css("height", wrapHeight);

                        if($('.form-slide-container .tab-index-0.active').length){
                            $('.step-previous-wrap').hide();
                        }
                        else{
                            $('.step-previous-wrap').show();
                        }
                        $(".presona-timeline-mobile .current-title h3").html($(".time-stamp-outer.active .step-title span").text());
                        $(".presona-timeline-mobile .current-step").html($(".time-stamp-outer.active .time-stamp-count i").text());
                    });

                });
            }

        }
    });
}
//successslide calling when Saveprofile sucessfully
const successSlide = () =>
{
    if (isUpdateProfile()) {
        goToRoleDashboard();
    }
    else {
        $('body.persona-body').addClass('persona-successful');
        $('.persona-registration-header, .persona-steps-form-wrap .personatimeline').hide();
        let currentIndex = $('.form-slide-container .row-container.active').attr('data-ti');
        let nextIndex = parseInt(currentIndex) + 1;
        let nextTabSelector = `.form-slide-container .row-container.tab-index-${nextIndex}`;
        let currentTabSelector = `.form-slide-container .row-container.tab-index-${currentIndex}`;
        $('.step-form-footer-outer').hide();
        if ($(nextTabSelector).length) {

            $('.form-slide-container .row-container.active').hide('slide', {direction: 'left'}, 200, function () {
                $(nextTabSelector).show('slide', {direction: 'right'}, 200, function () {
                    $(nextTabSelector).addClass('active');
                    $(currentTabSelector).removeClass('active');
                    var wrapHeight = $(".form-slide-container .row-container.active").outerHeight();
                    setTimeout(function () {
                        $(".form-slide-container").css("height", wrapHeight);
                    }, 200);
                });

            });
        }
    }
}
//previous button code on persona form slider
function previousButton(){


    $(".persona-steps-form-wrap input[name='previous']").off('click').on('click',function(){
        let currentIndex = $('.form-slide-container .row-container.active').attr('data-ti');
        let prevIndex = parseInt(currentIndex) - 1;
        let prevTabSelector = `.form-slide-container .row-container.tab-index-${prevIndex}`;
        let currentTabSelector = `.form-slide-container .row-container.tab-index-${currentIndex}`;
        let currentStampIndex = $('.persona-timeline-wrap .time-stamp-outer.active').attr('data-ti');
        let prevStampIndex = parseInt(currentStampIndex) - 1;
        let prevStampSelector = `.persona-timeline-wrap .time-stamp-outer.tab-index-${prevStampIndex}`;
        let currentStampSelector = `.persona-timeline-wrap .time-stamp-outer.tab-index-${currentStampIndex}`;

        if($(prevTabSelector).length){
            $('.form-slide-container .row-container.active').hide('slide', {direction: 'right'}, 200, function(){
                $(prevTabSelector).show('slide', {direction: 'left'}, 200, function(){
                    $(prevTabSelector).addClass('active');
                    $(currentTabSelector).removeClass('active');
                    $(prevStampSelector).addClass('active');
                    $(currentStampSelector).removeClass('active');
                    $(currentStampSelector).removeClass('done');
                    var wrapHeight = $(".form-slide-container .row-container.active").outerHeight();
                    //$(".form-slide-container").css("height",wrapHeight);

                    if($('.form-slide-container .tab-index-0.active').length){
                        $('.step-previous-wrap').hide();
                    }
                    else{
                        $('.step-previous-wrap').show();
                    }
                    $(".presona-timeline-mobile .current-title h3").html($(".time-stamp-outer.active .step-title span").text());
                    $(".presona-timeline-mobile .current-step").html($(".time-stamp-outer.active .time-stamp-count i").text());
                });
            });
        }
        $('.step-next-wrap input.step-next').show();
        $('.step-next-wrap input.submit-cta').hide();
    });
}

$('#registration-error-modal').off().on('hidden.bs.modal', function () {
    $("span.help-block").each(function () {
        if($(this).text()){
            $(window).scrollTop($(this).offset().top - 200);
            return false;
        }
    });
});
$(document).on('keydown', "input[name='cin']", function(e) {
    var chord = e.keyCode || e.which;
    if(chord === 32 || chord === 190){
        e.preventDefault();
    }
});
$(document).on('paste', "input[name='cin']", function(e) {
    e.preventDefault();
});
$(document).on('click', '.repeat-fields .close-repeat-fields', function(){
    var closeId= $(this).data('close-id');
    $('#'+closeId).remove();
});
function otherButtonValidation(){
    var personatype = store.getItem("personatype");
    if (personatype == "mentor" || personatype == "individual-investor") {
        $("input[name=next]").attr("disabled", "disabled");
    }
    if (store.getItem("personaStepsPath") && store.getItem("personaStepsPath").includes("international-persona")) {
        $("input[name=next]").removeAttr("disabled");
    }
    $('input[name=TiEOrLetsVenture]').on("change",function(){
        if($('input[name=TiEOrLetsVenture]:checked').val() === 'others'){
            $("input[name=next]").removeAttr("disabled");
            store.setItem("tieVerified",false);
        } else {
            $("input[name=next]").attr("disabled", "disabled");
        }
    });

}
$(document).on('change', 'select[name=startupEntity]',function(){
    $('input[name=legalName]').val('');
    $('input[name=pan]').val('');
});

function disableFieldsIfRecognized() {
    $('#modal-loader').modal("show");
    $.ajax({
        type: "GET",
        dataType: "json",
        url: SIH.getEndPoint("/api/auth/dpiit/services/fetchRecognitionDetailsByCin?cin="+ profileData["startup"]["cin"].trim()),
        headers: {"X-Auth-Token": store.getItem("token")},
        success: function (response) {
            if (response.status) {
                var data = response.data;
                if(data.startupEntity && data.startupEntity.recognitionCertificateStatus != "PENDING") {
                    $("input[name=stage]").prop("disabled",true);
                    $("select[name=startupindustry]").prop("disabled",true);
                    $("select[name=state]").prop("disabled",true);
                    $("select[name=city]").prop("disabled",true);
                    $("select[name=sector]").prop("disabled",true);
                    $("select[name=services]").prop("disabled",true);
                    $("select[name=udyogAadhar]").prop("disabled",true);
                }
            }
            $('#modal-loader').modal("hide");
        },
        error: function (response) {
            console.log("Error in disableFieldsIfRecognized : " + response);
            $('#modal-loader').modal("hide");
        }
    });
}

function switchToStartup(){
    $('#modal-loader').modal('show');
    $.ajax({
        url: SIH.getEndPoint("/api/auth/user/switch/startup"),
        type: 'POST',
        contentType: 'application/json',
        beforeSend: setAuthTokenHeader,
        success: function (data) {
            loginSuccessFunction(data);
            $('#modal-loader').modal('hide');
        }, error: function () {
            $('#modal-loader').modal('hide');
        }
    });
}
var actualResponseData;
$(document).ready(function () {
    var businessPlanIntervalID = -1;
    var dippCertifiedIntervalID = -1;
    var cinIntervalID = -1;
    var cinToggleID = -1;
    var portfoliosID = -1;
    var updateProfileAPI = SIH.getEndPoint("/api/auth/user/edit/profile");
    var getUserImageAPI = SIH.getEndPoint("/api/file/user/image");
    var getMemberPicAPI = SIH.getEndPoint("/api/file/member/pic");

    var store = ContextHub.getStore("sih_user");
    if (isUpdateProfile()) {
        if (!store || !store.getItem("token")) {
            alert("Please log in to edit your profile.");
            window.location = $('.notification-container').attr('home-page');
        } else {
            store.setItem("updateProfile", true);
            preProcessingBeforeProfileEdit();
        }
    } else if (location.pathname.indexOf("persona.html") > -1) {
        if (store.getItem("uniqueId") != null && store.getItem("country") != null) {
            //Its an existing user..
            window.location = $('.notification-container').attr('update-profile');
        }
    }

    function getPersonalizedCountryAndRole(country, userData) {
        $(".persona-dropdown-wrapper").show();
        var country = country ? country : store.getItem("country");
        setHeaderCountry($(".headerCountryLink[data-value='" + country + "']"));
        //$(".persona-header-dropdown .header-language .dropdown").css({'pointer-events': 'none'});

        setHeaderRolesList(country);
        var role = userData.role, personatype;
        if (role == "ServiceProvider") {
            personatype = userData["organization"] ? "organization-service-provider" : "freelancer-service-provider";
        } else if (role == "Investor") {
            personatype = userData["institution"] ? "institutional-investor" : "individual-investor";
        } else {
            personatype = ROLE_PERSONATYPE_MAP[role];
        }
        setHeaderRole($(".headerRoleLink[data-value='" + personatype + "']"), false, true);

        //Individual-to-Startup switch profile event
        if (isUpdateProfile() && personatype === "individual") {
            $(".headerRoleLink").hide();
            $(".headerRoleLink[data-value='startup']").attr("data-switch", "1").show();
            $("#headerRole  .header-language .dropdown").css({'pointer-events': 'all'});
        }
    }

    function preProcessingBeforeProfileEdit() {
        $("#inner-content-container").empty();
        $("#persona-header-title-container").empty();
        var updateHtml = "<div class=\"text parbase\">\n" +
            "    <h1>Update Profile</h1>\n" +
            "    <h5>It is recommended to update your profile details for best search results</h5>\n" +
            "</div>"
        $("#persona-header-title-container").html(updateHtml);
        $("#modal-loader").modal("show");
        $.ajax({
            url: updateProfileAPI,
            type: "GET",
            headers: {"X-Auth-Token": store.getItem("token")},
            datatype: "json",
            success: function (response) {
                profileData = response;
                if(profileData.switchedUser && !localStorage.getItem("disablePersonaUpdateMsg"+store.getItem("uniqueId"))){

                    var template = "<div class=\"form-content\">\n" +
                        "  <form class=\"form\" role=\"form\">\n" +
                        "    You have been switched from Individual to Startup, so please complete your profile. " +
                        "Please ignore if you have already completed.\n" +
                        "    <div class=\"checkbox\">\n" +
                        "      <label>\n" +
                        "        <input type=\"checkbox\" name=\"disablePersonaUpdateMsg\"> Do not show this message in future.\n" +
                        "      </label>\n" +
                        "    </div>\n" +
                        "  </form>\n" +
                        "</div>";

                    setTimeout(function () {
                        bootbox.dialog({
                            title: "Complete your profile",
                            message: template,
                            onEscape: true,
                            className: 'view-all-focus-sectors tag-view',
                            buttons: [
                                {
                                    label: "OK",
                                    className: "btn btn-primary",
                                    callback: function() {
                                        if($("input[name=disablePersonaUpdateMsg]").prop("checked")) {
                                            localStorage.setItem("disablePersonaUpdateMsg"+store.getItem("uniqueId"),
                                                $("input[name=disablePersonaUpdateMsg]").prop("checked"));
                                        }
                                        return true;
                                    }
                                }
                            ],
                        });
                    }, 100);
                }
                var userData = response;
                actualResponseData = response;
                if (userData) {
                    $(document).on('change', 'input[name=isThereBusinessPlan]', function () {
                        if ($(this).is(':checked')) {
                            if (userData.businessPlan && userData.businessPlan.length > 0) {
                                businessPlanIntervalID = setInterval(checkAndPopulateBusinessPlans, 500);
                            }
                        }
                    });
                    $(document).on('change', 'input[name=dippCertified]', function () {
                        if ($(this).is(':checked') && userData.dippCertified) {
                            dippCertifiedIntervalID = setTimeout(populateDIPPNumber, 500);
                        }
                    });
                    store.setItem("email", userData.email);
                    getPersonalizedCountryAndRole(store.getItem("personaCountryEdit"), userData);
                    //populateTNC();
                    if (userData.role == "Startup") {
                        populateDataForStartup(userData);
                        userData = userData["startup"];
                    }
                    var ignoreFields = ["role", "uniqueId"];
                    for (var field in userData) {
                        if ($.inArray(field, ignoreFields) > -1) {
                            continue;
                        }
                        var fieldValue = userData["" + field];
                        if (field == "image" && profileData.role != "Startup" && fieldValue && fieldValue.length > 0) {
                            var imagePath = getUserImageAPI + "/" + personaMap[store.getItem("personatype")] + "?fileName=" + fieldValue;
                            setImage(field, imagePath);
                            images = images || {};
                            images[store.getItem("personatype")] = fieldValue;
                        }
                        else if (field == "name") {
                            if (profileData.role != "Startup") {
                                $("input[name=fullname]").val(fieldValue);
                            }
                        }
                        else if (field == "tieVerified" || field == "lvVerified") {
                            if (field == "lvVerified") {
                                continue;
                            }
                            var $el = null;
                            if (userData["lvVerified"]) {
                                $el = $("input[type=radio][name=TiEOrLetsVenture][value=isLetsVenture]");
                            } else {
                                if (!fieldValue) {
                                    $el = $("input[type=radio][name=TiEOrLetsVenture][value=others]");
                                    store.setItem("TiEOrLetsVenture", "others");
                                } else {
                                    $el = $("input[type=radio][name=TiEOrLetsVenture][value=isTIE]");
                                }
                            }
                            if ($el) {
                                $el.prop("checked", true).trigger("click");
                            }
                            if ($el && $el.length > 0) {
                                // $el.closest("div.accordion-section-content").hide();
                            }
                        }
                        else if (field == "otherThanTieLVDescription" && fieldValue) {
                            if (fieldValue) {
                                store.setItem('otherThanTieLVDescription', fieldValue);
                                $("textarea[name=" + field + "].richTextArea").summernote("code", fieldValue);
                            }
                        }
                        else if (field == "type" || field == "profession" || field == "programDuration" || field == "budget") {
                            populateSingleSelect(field, fieldValue);
                        }
                        else if (field == "funded") {
                            fieldValue ? $("input[type=radio][name=funded][value=on]").prop("checked", true) : $("input[type=radio][name=funded][value=off]").prop("checked", true);
                        }
                        else if (field == "focusAreas" || field == "focusArea" && fieldValue) {
                            populateFocusAreas(field, fieldValue);
                        }
                        else if (field == "dippCertified" || field == "dippNumber") {
                            if (fieldValue) {
                                checkAndPopulateDIPPNumber(field, fieldValue);
                            } else {
                                store.setItem("dippCertified", false);
                            }
                        }
                        else if (field == "phone" && fieldValue) {
                            $("input[name=" + field + "]").val(fieldValue);
                        }
                        else if ((field == "startupEntity" && fieldValue && fieldValue.length > 0)) {
                            /*if(field == "legalName"){
                                continue;
                            }*/
                            store.setItem("startupEntity", profileData["startup"]["startupEntity"]);
                            if (userData["stage"] == "Validation" || userData["stage"] == "Prototype") {
                                cinToggleID = setInterval(checkForCINToggle, 500);
                            } else {
                                cinIntervalID = setInterval(checkAndPopulateCIN, 500);
                            }
                        }
                        else if (field == "location") {
                            $.each(fieldValue, function (key, value) {
                                $field = $("select[name=" + key + "]");
                                if ($field) {
                                    if (value) {
                                        $field.val(value["id"]);
                                    }
                                    if (key == "state") {
                                        $field.trigger("change");
                                    }
                                }
                            });
                        }
                        else if (field == "ideaBrief" || field == "description") {
                            $("textarea[name=" + field + "].richTextArea").summernote({
                                toolbar: [
                                    //[groupname, [button list]]
                                    ['insert', ['link']],
                                ],
                            });
                            $("textarea[name=" + field + "].richTextArea").summernote("code", fieldValue);
                        }
                        else if (field == "stage") {
                            var $field = $("input[type=radio][name=" + field + "][value='" + fieldValue + "']");
                            $field.prop("checked", true);
                            $field.trigger("click");
                        }
                        else if (field == "portfolios" && fieldValue && fieldValue.length > 0) {
                            $("input[type=checkbox][name=hasStories]").prop("checked", true);
                            $("input[type=checkbox][name=hasStories]").trigger("change");
                            portfoliosID = setInterval(populatePortfolios, 500);
                        }
                        else if (field == "mentorshipParticipant" && fieldValue) {
                            $("input[type=checkbox][name=mentorshipParticipant]").trigger("click");
                        }
                        else if (field == "mentorship" && fieldValue) {
                            populateMentorshipProgramDetails(fieldValue);
                        }
                        else if (field == "services" || field == "preferredStartupStages" || field == "mentorDomains") {
                            populateMultiSelectOption(field, fieldValue);
                        }
                        else if (field == "members") {
                            populateMembers(fieldValue);
                        }
                        else if(field=="centerLocations"){
                            populateCenterLocations(fieldValue);
                        }
                        else if (field == "contacts") {
                            if (fieldValue && $.isArray(fieldValue) && fieldValue.length > 0) {
                                populateFieldsUsingKeyAsNameInObject(fieldValue[0]);
                            }
                        }
                        else if (field == "mobileAppLink" && fieldValue) {
                            $("input[name=" + field + "]").val(fieldValue["Android"]);
                        }
                        else if (field == "urls") {
                            populateArrayValuesInRepeatField(field, fieldValue);
                        }
                        else if (field == "agency") {
                            populateAgencyDetails(fieldValue);
                        }
                        else if (field == "businessPlan") {
                            if (fieldValue && fieldValue.length > 0) {
                                $("input[name=isThereBusinessPlan]").prop("checked", true);
                                $("input[name=isThereBusinessPlan]").trigger("change");
                                // businessPlanIntervalID = setInterval(checkAndPopulateBusinessPlans, 500);
                            } else if (store.getItem("isThereBusinessPlan")) {
                                store.setItem("isThereBusinessPlan", false);
                            }
                        } else if (field == "companyLogo") {
                            $("input[type=checkbox][name=companyLogo]").prop("checked", fieldValue);
                        }
                        else if ($.isArray(fieldValue)) {
                            $.each(fieldValue, function (idx, val) {
                                if (typeof val === 'object') {
                                    return false;
                                }
                                $("input[type=checkbox][value='" + val + "']").prop("checked", true);
                            });
                        }
                        else if (fieldValue === true || fieldValue === false) {
                            var $field = $("input[type=checkbox][name=" + field + "]");
                            if ($field) {
                                $field.prop("checked", fieldValue);
                                if ($field.hasClass("personalized-content")) {
                                    $field.trigger("change");
                                }
                            }
                        }
                        else if (fieldValue) {
                            $("input[name=" + field + "]").val(fieldValue);
                        }
                    }
                    hideCTAs();
                    doProcessingForTNC();
                }
                $('.addContainer').each(function () {
                    var checkedInputs = $(this).find('input.addAll:checked').length;
                    if (checkedInputs && (checkedInputs == $(this).find('input.addAll').length)) {
                        $(this).find("input[name=addAll]").prop('checked', true);
                    }
                });

                //if(store.getItem('personatype')=='startup'){
                    formSlider();
                    nextButtonValidation();
                    previousButton();
                //}

                $("#modal-loader").modal("hide");
            }, error: function (response) {
                if (response.status == 403) {
                    setTimeout(function () {
                        bootbox.alert("Your profile is under moderation. Please try later once your profile is active.", function () {
                            window.location = $('.notification-container').attr('home-page');
                        });
                    },100);
                } else {
                    setTimeout(function () {
                        bootbox.alert("Something went wrong. We are unable to fetch the profile. Please try later.", function () {
                            window.location = $('.notification-container').attr('home-page');
                        });
                    },100);
                }
            }
        });
    }

    function hideCTAs() {
        $(".btn-validate-step").hide();
        $(".skip-cta").hide();
        $(".btn-validate-step").closest("div.columncontrol").hide();
        $(".skip-msg-text").closest(".text").hide();
    }

    function populateTNC() {
        var tncWrapper = $("div.terms-condition-wrapper");
        if (tncWrapper && tncWrapper.length > 0) {
            tncWrapper.find("input[type=checkbox][name=enableTNC]").prop("checked", true);
        }
    }

    function populateDataForStartup(userData) {
        $.each(userData, function (key, value) {
            if (typeof  value === 'object') {
                return;
            }
            if (key == "image") {
                startupFileNames[key] = value;
                var imagePath = getUserImageAPI + "/Startup?fileName=" + value;
                setImage(key, imagePath);
            } else if (key == "companyLogo") {
                $("input[type=checkbox][name=companyLogo]").prop("checked", value);
            } else if (key == "name") {
                var elem = document.createElement('textarea');
                elem.innerHTML = value;
                $("input[name=fullname]").val(elem.value);
                $("input[name=" + key + "]").val(elem.value);
            } else {
                $("input[name=" + key + "]").val(value);
            }
        });
        store.removeItem("startupEntity");
    }

    function checkForCINToggle() {
        var $CINRegisteredToggle = $("input[type=checkbox][name=isRegistered]");
        if ($CINRegisteredToggle && $CINRegisteredToggle.length > 0) {
            clearInterval(cinToggleID);
            $CINRegisteredToggle.prop("checked", true);
            $("input[type=checkbox][name=isRegistered]").trigger("change");
            cinIntervalID = setInterval(checkAndPopulateCIN, 500);
        }
    }

    function populateAgencyDetails(fieldValue) {
        $.each(fieldValue, function (key, value) {
            var $fieldEl = $("select[name=" + key + "]");
            $fieldEl.val(value.id);
            if (key == "ministry") {
                $fieldEl.trigger("change");
            }
        });
    }

    function populateMembers(values) {
        if (values && values.length > 0) {
            var memberNameInputs = $("input[name=members-name]");
            startupFileNames["memberpic"] = {};
            if (values.length > 1) {
                repeatElements("members-name", values.length);
                memberNameInputs = $("input[name=members-name]");
                $.each(values, function (idx, value) {
                    populateMemberProperties(value, $(memberNameInputs[idx]).closest("div.repeat-fields"));
                });
            }
            else {
                populateMemberProperties(values[0], $(memberNameInputs[0]).closest("div.repeat-fields"));
            }
        }
    }

    function populateCenterLocations(values){
        if(values && values.length>0){
            repeatElements("incubationCenterLocation",values.length);
            var incubatorCenterLocation = $("input[name=incubationCenterLocation]");
            $.each(incubatorCenterLocation, function (idx, loc) {
                $(loc).closest("div.repeat-fields").find("[name=incubationCenterLocation]").val(values[idx].incubationCenterLocation)
                $(loc).closest("div.repeat-fields").find("[name=incubatorCenterLocationAddress]").val(values[idx].incubatorCenterLocationAddress)
            });
        }
    }

    function populateMemberProperties(obj, $parent) {
        for (var key in obj) {
            var value = obj[key];
            if (key == "pic") {
                startupFileNames["memberpic"] = startupFileNames["memberpic"] || {};
                startupFileNames["memberpic"]["" + $parent.attr("id")] = value;
                if (value && value.length > 0) {
                    var imagePath = getMemberPicAPI + "?fileName=" + value;
                    $parent.find("img.browse").attr("src", imagePath).show();
                    $parent.find("div.image-section").find("span").hide();
                }
            } else if (key == "profile") {
                $parent.find("textarea[name=members-profile].richTextArea").summernote("code", value);
            } else if (key == "socialInfos" && ($.isArray(value))) {
                $.each(value, function (idx, socialInfo) {
                    var socialKey = socialInfo.social.toLowerCase();
                    $parent.find("input[name=" + socialKey + "-url]").val(socialInfo.url);
                });
            } else {
                $parent.find("input[name=members-" + key + "]").val(value);
            }
        }
    }

    function checkAndPopulateBusinessPlans() {
        if ($("input[name=businessPlan-fileName]").length > 0) {
            clearInterval(businessPlanIntervalID);
            cloneFileUploads();
            populateBusinessPlans(profileData["startup"]["businessPlan"]);
        }
    }

    function populateBusinessPlans(businessPlans) {
        if (businessPlans && $.isArray(businessPlans) && businessPlans.length > 0) {
            var businessPlanInputs = $("input[name=businessPlan-fileName]");
            startupFileNames["startupDocs"] = {};
            if (businessPlans.length > 1) {
                repeatElements("businessPlan-fileName", businessPlans.length);
                businessPlanInputs = $("input[name=businessPlan-fileName]");
                $.each(businessPlans, function (idx, businessPan) {
                    populateBusinessPlanProperties(businessPan, $(businessPlanInputs[idx]).closest("div.repeat-fields"));
                });
            } else {
                populateBusinessPlanProperties(businessPlans[0], $(businessPlanInputs[0]).closest("div.repeat-fields"));
            }
        }
    }

    function populateBusinessPlanProperties(obj, $parent) {
        startupFileNames["startupDocs"] = startupFileNames["startupDocs"] || {};
        startupFileNames["startupDocs"]["" + $parent.attr("id")] = {};
        startupFileNames["startupDocs"]["" + $parent.attr("id")]["fileName"] = obj.fileName;
        startupFileNames["startupDocs"]["" + $parent.attr("id")]["title"] = obj.title;
        $parent.find("div.image-section span").hide();
        $parent.find("img.browse").hide();
        $parent.find(".image-body").hide();
        var $fileTextBlock = $parent.find("span.browse-file-name");
        $fileTextBlock.text(obj.title ? obj.title : "");
        $fileTextBlock.show();
        $parent.find("div.btn-primary").css("top", 0);
    }

    function populateDIPPNumber() {
        var $dippEl = $("input[name=dippNumber]");
        if ($dippEl.length > 0) {
            clearInterval(dippCertifiedIntervalID);
            var dippNumber = profileData ? profileData["startup"]["dippNumber"] : null;
            if (dippNumber) {
                $dippEl.val(dippNumber);
                /* $("input[type=checkbox][name=dippCertified]").attr("disabled", "disabled");
                 $dippEl.attr("disabled", "disabled");*/
            }
        }
    }

    function checkAndPopulateDIPPNumber(field, fieldValue) {
        if (field == "dippNumber") {
            return;
        }
        if (fieldValue) {
            var $field = $("input[type=checkbox][name=dippCertified]");
            if($field.length > 0) {
                $field.prop("checked", fieldValue);
                if ($field.hasClass("personalized-content")) {
                    $field.trigger("change");
                    dippCertifiedIntervalID = setInterval(populateDIPPNumber, 500);
                }
            }
        }
    }

    function checkAndPopulateCIN() {
        var $startUpEntity = $("select[name=startupEntity]");
        var $cinEl = $("input[name=cin]");
        var $pan = $("input[name=pan]");
        if ($startUpEntity.length && ($cinEl.length || $pan.length)) {
            clearInterval(cinIntervalID);
            $startUpEntity.val(profileData["startup"]["startupEntity"]).trigger("change").attr("disabled", "disabled");
            if (profileData["startup"]["startupEntity"] === "3") {
                $pan.val(profileData["startup"]["pan"]);
                $pan.attr("disabled", "disabled");
                store.setItem("pan", profileData["startup"]["pan"]);
            } else {
                var cinVal = profileData["startup"]["cin"];
                if (cinVal) {
                    $cinEl.val(cinVal).attr("disabled", "disabled");
                    $("input[type=checkbox][name=isRegistered]").attr("disabled", "disabled");
                    $("input[name=legalName]").val(profileData["startup"]["legalName"]).attr("disabled", "disabled");
                    store.setItem("cin", cinVal);
                    store.setItem("legalName", profileData["startup"]["legalName"]);
                    $("span.cinSearch").addClass("disabled");
                }
            }
        }
        /*  if($cinEl.length > 0){
              clearInterval(cinIntervalID);
              var cinVal = profileData["startup"]["cin"];
              if(cinVal){
                  $cinEl.val(cinVal);
                  $("input[type=checkbox][name=isRegistered]").attr("disabled", "disabled");
                  $cinEl.attr("disabled", "disabled");
                  $("input[name=legalName]").val(profileData["startup"]["legalName"]);
              }
          }*/
    }

    function populatePortfolios() {
        var startupNameInputs = $("input[name=startupName]");
        if (startupNameInputs && startupNameInputs.length > 0) {
            clearInterval(portfoliosID);
            var values = profileData["portfolios"];
            if (values.length > 1) {
                repeatElements("startupName", values.length);
                startupNameInputs = $("input[name=startupName]");
                $.each(values, function (idx, value) {
                    populatePortfolioProperties(value, $(startupNameInputs[idx]).closest("div.repeat-fields"));
                });
            }
            else {
                populatePortfolioProperties(values[0], $(startupNameInputs[0]).closest("div.repeat-fields"));
            }
        }
    }

    function populatePortfolioProperties(obj, $parent) {
        $.each(obj, function (key, value) {
            if (key === "brief" || key === "guidanceAreas") {
                $parent.find("textarea[name=" + key + "].richTextArea").summernote("code", value);
                return;
            }
            if(key === "startupLogo"){
                var imagePath = getUserImageAPI + "/" + personaMap[store.getItem("personatype")] + "?fileName=" + value;
                $parent.find("img.browse").attr("src", imagePath).show();
                $parent.find("div.image-section").find("span").hide();
                var repeatIDLogo = $parent.first().attr("id");
                portfolioImages["startupLogo"] = portfolioImages["startupLogo"] || {};
                portfolioImages["startupLogo"]["" + repeatIDLogo] = value;
                return;
            }
            $parent.find("input[name=" + key + "]").val(value);
        });
    }
});

function populateFocusAreas(field, fieldValue) {
    var sectors = [];
    if ("focusArea" == field) {
        // case for startup
        if(fieldValue["industry"]) {
            $("select[name=startupindustry]").val(fieldValue["industry"].id).trigger("change");
        }
        sectors = fieldValue["sectors"];
        if (sectors && sectors.length > 0 && sectors[0]) {
            $("select[name=sector]").val(sectors[0].id);
        }
    } else {
        if (fieldValue && $.isArray(fieldValue)) {
            var selectedSectors = [];
            var industries = [];
            $.each(fieldValue, function (idx, value) {
                industries.push(value["industry"]["id"]);
                sectors = value["sectors"];
                $.each(sectors, function (index, sector) {
                    selectedSectors.push(sector["id"]);
                });
            });
            populateMultiSelectOption("industry", industries);
            $.each(selectedSectors, function (idx, selectedSector) {
                $("input[value='" + selectedSector + "']").prop("checked", true);
            });
            $("div.customised-dropdown .dropdown-menu").trigger("change");
        }
    }
}
$(document).ready(function(){

    $(document).on("click","#connections-main-div .btn-message, button[name=message-cta]",function(event){
        var $target = $(event.target);
        var id = $target.data("id") ? $target.data("id") : uniqueProfileId;
        var path = $target.data("path");
        window.location.href = path + "?uniqueId=" + id;
    });

    $(document).on("click","button[name=accept-cta], button[name=reject-cta]",function(event){
        var $target = $(event.target);
        $target.append("<i class='fa fa-spinner fa-spin'></i>");
        var path = $target.data("path");
        if(path){
            var requestId = $target.data("requestid") ? $target.data("requestid") : store.getItem("connectTo/requestId");
            path = path + "/" + requestId;
            var connectToKey = "";
            if(!$target.data("requestid")){
                connectToKey = $target.attr("name") == "accept-cta" ? "connectTo/connected" : "connectTo/connectionAllowed";
            }
            refreshConnection(path, connectToKey, $target);
        }
    });

    $(document).on("click","button[name=connect-cta]",function(event){
        var $target = $(event.target);
        var path = $target.data("path");
        $target.append("<i class='fa fa-spinner fa-spin'></i>");
        if(path){
            path = path + "/" + uniqueProfileId;
            if(applicationLink){
                window.open(applicationLink, '_blank');
            }
            var enablers = ["Mentor","Incubator","Accelerator","Corporate","Investor"];
            if(enablers.indexOf(store.getItem("role")) > -1){
                refreshConnection(path, "connectTo/connected", $target);
            }else{
                refreshConnection(path, "connectTo/connectionSent", $target);
            }
        }
    });

    $(document).on("change","div#connections-user",function(event){
        var $target = $(event.target);
        var $parent = $target.closest("div#connections-user");
        var filters = $parent.find("input[name='connections-user']:checked");
        filteredValues = [];
        $.each(filters, function(idx, filter){
            filteredValues.push(filter.value);
        });
        connectionsPage = 0;
        displayConnectionMainCard();
    });

});

var connectionsPage = 0;
var filteredValues = [];

function displayConnectionMainCard(uniqueProfileId){
    displayConnectionCard("connections-main","connections-main-div","pagination-template","connections-pagination", uniqueProfileId);
}

function displayConnectionRequestCard(){
    displayConnectionCard("connection-request-template","connections-request-div","request-pagination-template","connections-request-pagination");
}

function displaySendRequestCard(){
    displayRequestsCard("connection-send-request-template","connections-send-request-div","send-request-pagination-template","connections-send-request-pagination");
}

function displayConnectionCard(cardId,displayCardId,paginationId,displayPaginationId, puid){
    var connectionCard = $("#" + cardId).html();
    if(connectionCard) {
        var template = Handlebars.compile(connectionCard);
        var mainDiv = $("#" + displayCardId);
        var uid = store.getItem("uid");
        var path = mainDiv.data("path");

        if(puid){
            path = path + "/" + puid;
        }
        if ((uid || store.getItem('sihRegisteredUser')) && path) {
            var data = {};
            data["page"] = connectionsPage;
            data["roles"] = (filteredValues && filteredValues.length) ? filteredValues.join(' ') : [];
            $.ajax({
                type: "GET",
                url: SIH.getEndPoint(path),
                data: data,
                headers: {"X-Auth-Token": store.getItem("token")}
            }).done(function (response) {
                if(response.content.length > 0 ){
                    mainDiv.html(template(response));
                }
                if(paginationId) {
                    var pagination = {
                        pages: response.totalPages,
                        number: response.number + 1,
                        last: response.last,
                        first: response.first,
                        numberOfElements: response.numberOfElements
                    }
                    var paginationResource = $("#" + paginationId).html();
                    var paginationTemplate = Handlebars.compile(paginationResource);
                    $("#" + displayPaginationId).html(paginationTemplate(pagination));

                    if (pagination.pages > 5) {
                        $('span.first-connection-page, span.last-connection-page ').css('display', 'block');
                        if ($('#connections-request-pagination .pagination li.active').index() == 0)
                            $('span.first-connection-page').css('display', 'none');
                        if ($('#connections-request-pagination .pagination li.active').index() == 4)
                            $('span.last-connection-page').css('display', 'none');
                    } else {
                        $('span.first-connection-page, span.last-connection-page').css('display', 'none');
                    }

                    var requestPanel = mainDiv.closest(".tab-pane");
                    if (requestPanel.length > 0) {
                        var id = requestPanel.attr("id");
                        var tab = $("a[href='#" + id + "']");
                        if (tab) {
                            tab.find(".count").html(" (" + response.numberOfElements + ")");
                        }
                    }
                }
            });
        }
    }
}

function displayRequestsCard(cardId,displayCardId,paginationId,displayPaginationId){
    var connectionCard = $("#" + cardId).html();
    var template = Handlebars.compile(connectionCard);
    var mainDiv = $("#" + displayCardId);
    var uid = store.getItem("uid");
    var path = mainDiv.data("path");
    if(uid && path){
        var data = {};
        data["page"] = connectionsPage;
        data["roles"] = filteredValues.join(' ');;
        $.ajax({
            type: "GET",
            url: SIH.getEndPoint(path),
            data: data,
            headers: {"X-Auth-Token": store.getItem("token")}
        }).done(function (response) {
            mainDiv.html(template(response));
            var pagination = {
                pages:response.totalPages,
                number:response.number+1,
                last:response.last,
                first:response.first,
                numberOfElements:response.numberOfElements
            }
            var paginationResource = $("#" + paginationId).html();
            var paginationTemplate = Handlebars.compile(paginationResource);
            $("#" + displayPaginationId).html(paginationTemplate(pagination));

            if (pagination.pages > 5) {
                $('span.first-connection-page, span.last-connection-page ').css('display','block');
                if ($('#connections-request-pagination .pagination li.active').index() == 0)
                    $('span.first-connection-page').css('display', 'none');
                if ($('#connections-request-pagination .pagination li.active').index() == 4)
                    $('span.last-connection-page').css('display', 'none');
            } else {
                $('span.first-connection-page, span.last-connection-page').css('display', 'none');
            }

            var requestPanel = mainDiv.closest(".tab-pane");
            if(requestPanel.length > 0){
                var id = requestPanel.attr("id");
                var tab = $("a[href='#" + id + "']");
                if(tab){
                    tab.find(".count").html(" (" + response.numberOfElements + ")");
                }
            }
        });
    }
}

function displayConnectionSideCard(connectionsSidecard){
    var template = Handlebars.compile(connectionsSidecard);
    var sideDiv = $("#connections-side-div");
    var uid = store.getItem("uid");
    var path = sideDiv.data("path");
    if(uid && path){
        $.ajax({
            type: "GET",
            url: SIH.getEndPoint(path),
            headers: {"X-Auth-Token": store.getItem("token")}
        }).done(function (response) {
            sideDiv.html(template(response));
        });
    }
}

function conResult(page){
    connectionsPage = parseInt($(page).html()) - 1;
    displayConnectionMainCard();
}

function conNext(elem){
    connectionsPage = parseInt($(elem).siblings('ul').find('li.active').html());
    displayConnectionMainCard();
}

function conPrevious(elem){
    connectionsPage = parseInt($(elem).siblings('ul').find('li.active').html()) - 2;
    displayConnectionMainCard();
}

function connectionFirst() {
    connectionsPage  = 0;
    displayConnectionMainCard();
}

function connectionLast(pages) {
    connectionsPage = pages - 1;
    displayConnectionMainCard();
}

function refreshConnection(path, connectToKey, targetElement){
    $.ajax({
        type: "GET",
        url: SIH.getEndPoint(path),
        headers: {"X-Auth-Token": store.getItem("token")}
    }).done(function (response) {
        if(targetElement){
            $(targetElement).find("i").remove();
        }
        if(connectToKey){
            store.removeItem("connectTo");
            store.setItem(connectToKey,true);
            //toggleConnectWithUs();
        }
        else{
            displayConnectionRequestCard();
        }
    }).fail(function (error) {
        //console.log(error);
        if(targetElement){
            $(targetElement).find("i").remove();
        }
        showSnackbar('<i class="fa-2x fa-exclamation-triangle">'+error.responseText+'</i>',"alert-danger");
    });
}

function conReqResult(page){
    connectionsPage = parseInt($(page).html()) - 1;
    displayConnectionRequestCard();
}

function conReqNext(elem){
    connectionsPage = parseInt($(elem).siblings('ul').find('li.active').html());
    displayConnectionRequestCard();
}

function conReqPrevious(elem){
    connectionsPage = parseInt($(elem).siblings('ul').find('li.active').html()) - 2;
    displayConnectionRequestCard();
}


function roleConnectionData(cardId, displayCardId, role) {
    console.log("inside roleConnectionData");
    invokeOnce = false;
    var connectionCard = $("#" + cardId).html();
    if (connectionCard) {
        var template = Handlebars.compile(connectionCard);
        var mainDiv = $("#" + displayCardId);
        var path = mainDiv.data("path");
        var data = {};
        var roles = [];
        roles.push(role);
        data.roles = roles;
        $.ajax({
            type: "POST",
            url: SIH.getEndPoint(path),
            contentType: "application/json",
            data: JSON.stringify(data)
        }).done(function (response) {
            response.connectionAllowed = true;
            mainDiv.html(template(response));
        });
    }
}
$.fn.messages = function () {
    var windowSize = $(window).width();
    var chatMessageUser = 0;
    var chatMessagePage = 0;
    var $tab = $(".tab-container .tab-content .static-content-section");
    var $searchInput = $tab.find(".small-banner-search input.chat-search-component");
    var $messageNotification = $('.notification-container ul').find('li.msg-notification');
    var userName;

    $('[rel="popover"]').popover({
        container: 'body',
        html: true,
        content: function () {
            var clone = $($(this).data('popover-content')).clone(true).removeClass('hide');
            return clone;
        }
    }).click(function (e) {
        e.preventDefault();
    });

    $.urlParam = function (name) {
        var results = new RegExp('[\?&]' + name + '=([^&#]*)').exec(window.location.href);
        var result = results ? results[1] : 0;
        return result;
    };

    var uniqueId = $.urlParam('uniqueId');
    var xTokenHeader = {"X-Auth-Token": store.getItem("token")};

    populateChatQueue();
    if (!$tab.find(".chat-list ul.chatTabs li").length && uniqueId === 0) {
        $tab.find(".noChatMessage").removeClass("displayNone");
        $tab.find('.chat-component .main-cards').css("display", "none");
        $tab.find('.chat-current-profile .side-cards').removeClass("desktop-display-block").css("display", "none");
    }

    if (windowSize >= 768) {
        selectFirstUser();
    } else {
        $tab.find(".chat-component .main-cards").css("display", "none");
    }
    if (uniqueId !== 0) {
        populateNewUser(uniqueId);
    }
    $(".chat-text").scrollTop($(".chat-text")[0].scrollHeight);

    function selectFirstUser() {
        $.each($(".chat-list ul.chatTabs"), function (index, item) {
            var $firstChatUser = $(item).find("li:first");
            var userId = $firstChatUser.find("input[name='userId']").val();
            var messageId = $firstChatUser.find("input[name='messageId']").val();
            $firstChatUser.addClass('active');
            $firstChatUser.find('.chat-tab-content.fa-circle').removeClass('active');
            if ($firstChatUser.find('i.fa-circle').hasClass('active')) {
                var unread = $messageNotification.find('numbers').html() - 1;
                $messageNotification.find('numbers').html(unread);
                if (unread == 0) {
                    $messageNotification.find('numbers').css("display", "none");
                }
            }
            populateProfile(userId);
            populateMessages(messageId);
        });
    }

    function populateChatQueue() {
        var chat_tabs_source = $('.chat-list-template').html();
        var chat_tabs_template = Handlebars.compile(chat_tabs_source);
        $.ajax({
            type: "GET",
            async: false,
            url: SIH.getEndPoint("/api/auth/user/message/queue?page=" + chatMessageUser),
            headers: xTokenHeader
        }).done(function (data) {
            if (data.last) {
                $(".chat-list").find(".addMoreUser").remove();
            }
            if (chatMessageUser == 0) {
                $('.chat-list ul.chatTabs').html('');
            }
            $('.chat-list ul.chatTabs').append(chat_tabs_template(data.content));
            return false;
        });

        if(sessionStorage.getItem("messageToUniqueId")){
            $.ajax({
                type: "GET",
                data: {"toUserId": sessionStorage.getItem("messageToUniqueId")},
                url: SIH.getEndPoint("/api/auth/user/message/queue/user"),
                headers: xTokenHeader
            }).done(function (data) {
                console.log("-------------------------");
                console.log(data);
                console.log("-------------------------");

                $('.chat-list ul.chatTabs').prepend(chat_tabs_template([data]));

                return false;
            });
        }
    }

    function populateProfile(userID) {
        var current_profile_source = $('.chatCurrentProfileTemplate').html();
        var current_profile_template = Handlebars.compile(current_profile_source);
        $.ajax({
            type: "GET",
            async: false,
            url: SIH.getEndPoint("/api/auth/user/profile/" + userID),
            headers: xTokenHeader
        }).done(function (data) {
            var $profile = $tab.find('.side-cards.desktop-display-block');

            $profile.html('');
            $profile.append(current_profile_template(data.user));
            $profile.find('a').attr("href", $profile.siblings('input[name="profilePagePath"]').val() + "." + data.user.role + "." + data.user.uniqueId + ".html");
            userName = data.user.name;
            return false;
        });
    }

    function populateMessages(messageID) {
        var current_messages_source = $('.chatComponentTemplate').html();
        var current_messages_template = Handlebars.compile(current_messages_source);
        $.ajax({
            type: "GET",
            async: false,
            url: SIH.getEndPoint("/api/auth/user/message/queue/" + messageID + "?page=" + chatMessagePage),
            headers: xTokenHeader
        }).done(function (data) {
            var $currentChat = $tab.find('.main-cards .tab-pane-message .chat-text');
            if (chatMessagePage == 0)
                $currentChat.html('');
            $currentChat.prepend(current_messages_template(data.content.reverse()));
            $tab.find(".chat-others h5").html(userName);
            $tab.find(".chat-date input[name='chatMessageId']").val(messageID);
            return false;
        });
    }


    function sendMessage(userID, msg, isNewUser) {
        $.ajax({
            type: "POST",
            data: msg,
            async: false,
            contentType: "application/json",
            url: SIH.getEndPoint("/api/auth/user/message/send/" + userID),
            headers: xTokenHeader
        }).done(function (data) {
            if (data) {
                if (isNewUser) {
                    $tab.find('.chat-component .main-cards').css("display", "block");
                    $tab.find('.chat-component .new-user').css("display", "none");
                    var messageId = $tab.find("li.active .chat-tab-heading input[name='messageId']").val();
                    populateMessages(messageId);
                    $tab.find(".chat-others h5").html(userName);
                } else {
                    var currentTime = new Date().getTime();
                    var html = "<div class='chat-own chat-panes clearfix'><div class='chat-container'><p>" + msg.replace(new RegExp('\n', 'g'), "<br/>")
                        + "</p></div><div class='chat-time clearfix'><span>Just Now</span><input type='hidden' name='time' value='" + currentTime + "'/></div></div>";
                    $tab.find('.main-cards .tab-pane-message .chat-text').append(html);
                }
                $(".chat-text").scrollTop($(".chat-text")[0].scrollHeight);

                // deleting uniqueId when enabler has sent message to non-connected user
                if(sessionStorage.getItem("messageToUniqueId")) {
                    sessionStorage.removeItem("messageToUniqueId");
                }
            }
            return false;
        });
    }

    $(document).on('click', '.chat-list ul li', function () {
        chatMessagePage = 0;
        $('.chat-list ul li').removeClass("active");
        $(this).addClass("active");
        var userID = $(this).find("input[name='userId']").val();
        var messageID = $(this).find("input[name='messageId']").val();
        $tab.find('textarea.form-control').val('');
        $tab.find('.chat-component .main-cards').css("display", "block");
        $tab.find('.chat-component .new-user').css("display", "none");
        populateProfile(userID, $(this));
        populateMessages(messageID);
        $tab.find(".chat-others h5").html(userName);
        if ($(this).find('i.fa-circle').hasClass('active')) {
            var unread = $messageNotification.find('numbers').html() - 1;
            $messageNotification.find('numbers').html(unread);
            if (unread == 0) {
                $messageNotification.find('numbers').css("display", "none");
            }
        }
        $(this).find("i.fa-circle").removeClass('active');
        if (windowSize < 768) {
            $tab.find(".chat-tabs .side-cards.chat-list").css("display", "none");
            $tab.find(".chat-component .main-cards").css("display", "block");
            $tab.find(".chat-component .list-chat-user").css("display", "block");
        }
    });

    $("div#list-popover").find('ul.result-list').on('click', 'li', function () {
        chatMessagePage = 0;
        $tab.find(".noChatMessage").addClass("displayNone");
        $tab.find('.chat-current-profile .side-cards').addClass("desktop-display-block");
        var uId = $(this).find('input').val();
        populateNewUser(uId);
        $searchInput.val(userName);
    });

    $(".main-cards").find("textarea.form-control").keyup(function (event) {
        if (event.which == 13) {
            if (event.shiftKey) {
                event.stopPropagation();
            } else {
                this.value = this.value.trim();
                var userID = $(".chatTabs > li.active").find("input[name='userId']");
                if (this.value) {
                    sendMessage($(userID).val(), this.value, false);
                    var $activeUser = $tab.find("ul.chatTabs li.active");
                    $activeUser.prependTo($activeUser.parent());
                    $activeUser.find('.chat-tab-status').html(this.value);
                    $activeUser.find('.pull-right').html('Just Now');
                    var timeInput = $activeUser.find('.chat-tab-heading').find('input[name="time"]');
                    if (timeInput.length === 1) {
                        $(timeInput).val(new Date().getTime());
                    } else {
                        var time = new Date().getTime();
                        $activeUser.find('.chat-tab-heading').append('<input type="hidden" name="time" value="' + time + '">');
                    }

                }
                this.value = '';
            }
        }
    });
    $(".new-user").find("textarea.form-control").keyup(function (event) {
        if (event.which == 13) {
            if (event.shiftKey) {
                event.stopPropagation();
            } else {
                var userID = $(".new-user").find("input[name='userId']");
                this.value = this.value.trim();
                if (this.value) {
                    sendMessage($(userID).val(), this.value, true);
                    populateChatQueue();
                    selectFirstUser();
                }
                this.value = '';
            }
        }
    });

    $searchInput.keyup(function (event) {
        searchChatConnection();
    });

    function searchChatConnection() {
        var source = $('#chatListPopoverTemplate').html();
        var template = Handlebars.compile(source);
        var url = SIH.getEndPoint('/api/auth/user/connections?query=') + $tab.find('.search').val();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            beforeSend: setAuthTokenHeader,
            success: function (data) {
                if (data.content.length > 0) {
                    $('div#list-popover ul').html('');
                    $('div#list-popover ul').append(template(data.content));
                } else {
                    $('div#list-popover ul').html('<li>No Suggestions!!</li>');
                }
            }
        });
    }

    $searchInput.click(function (event) {
        searchChatConnection();
    });

    function populateNewUser(uId) {
        var userInput = $tab.find(".chatTabs input[name='userId']");
        var $userAlreadyMessaged;
        $.each(userInput, function (index, item) {
            if ($(item).val() == uId) {
                $userAlreadyMessaged = $(item).parents().eq(3);
                $userAlreadyMessaged.siblings().removeClass("active");
                $userAlreadyMessaged.addClass("active");
                $userAlreadyMessaged.find("i.fa-circle").removeClass('active');
                populateProfile(uId);
                $tab.find('.chat-component .main-cards').css("display", "block");
                $tab.find('.chat-component .new-user').css("display", "none");
                populateMessages($($(item).siblings("input[name='messageId']")).val());
            }
        });
        if (!$userAlreadyMessaged) {
            $(".chat-list ul li").removeClass('active');
            $tab.find('.chat-component .main-cards').css("display", "none");
            $tab.find('.chat-component .new-user').css("display", "block");
            populateProfile(uId);
            $(".new-user").find('.mail-to span.toUserName').html(userName);
            $(".new-user").find("input[name='userId']").val(uId);
        }
    }

    setInterval(function () {
        var timeinMilliSec;
        var time;
        var date = new Date();
        $.each($('.tab-pane-message .chat-text').find("input[name='time']"), function (index, item) {
            timeinMilliSec = $(item).val();
            time = dateDiff(date, timeinMilliSec);
            $(item).siblings('span').html(time);
        });
        $.each($('ul#chatTabsList li').find("input[name='time']"), function (index, item) {
            timeinMilliSec = $(item).val();
            time = dateDiff(date, timeinMilliSec);
            $(item).siblings('span').html(time);
        });
    }, 1000);

    $(".tab-pane-message").on('click', '.chat-date a', function () {
        var messageId = $tab.find(".chat-date input[name='chatMessageId']").val();
        chatMessagePage = chatMessagePage + 1;
        populateMessages(messageId);
        $(this).parent().remove();
    });

    $(".chat-list").find("#loadMoreIcon").click(function () {
        var $loader = $tab.find(".chat-list .chat-loader");
        $loader.show();
        chatMessageUser = chatMessageUser + 1;
        populateChatQueue();
        var $chatList = $tab.find("ul#chatTabsList");
        $chatList.scrollTop($chatList[0].scrollHeight);
        $loader.hide();
    });

    $tab.find(".chat-component").on('click', '.list-chat-user', function () {
        $tab.find(".chat-component .main-cards").css("display", "none");
        $tab.find(".chat-tabs .side-cards.chat-list").css("display", "block");
        $(this).css("display", "none");

    });
};



(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define([], factory);
    } else if (typeof module === 'object' && module.exports) {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like Node.
        module.exports = factory();
    } else {
        // Browser globals (root is window)
        root.PDFObject = factory();
    }
}(this, function () {

    "use strict";
    //jshint unused:true

    //PDFObject is designed for client-side (browsers), not server-side (node)
    //Will choke on undefined navigator and window vars when run on server
    //Return boolean false and exit function when running server-side

    if (typeof window === "undefined" || typeof navigator === "undefined") {
        return false;
    }

    var pdfobjectversion = "2.0.201604172",
        supportsPDFs,

        //declare functions
        createAXO,
        isIE,
        supportsPdfMimeType = (typeof navigator.mimeTypes['application/pdf'] !== "undefined"),
        supportsPdfActiveX,
        buildFragmentString,
        log,
        embedError,
        embed,
        getTargetElement,
        generatePDFJSiframe,
        isIOS = (function () {
            return (/iphone|ipad|ipod/i.test(navigator.userAgent.toLowerCase()));
        })(),
        generateEmbedElement;


    /* ----------------------------------------------------
       Supporting functions
       ---------------------------------------------------- */

    createAXO = function (type) {
        var ax;
        try {
            ax = new ActiveXObject(type);
        } catch (e) {
            ax = null; //ensure ax remains null
        }
        return ax;
    };

    //IE11 still uses ActiveX for Adobe Reader, but IE 11 doesn't expose
    //window.ActiveXObject the same way previous versions of IE did
    //window.ActiveXObject will evaluate to false in IE 11, but "ActiveXObject" in window evaluates to true
    //so check the first one for older IE, and the second for IE11
    //FWIW, MS Edge (replacing IE11) does not support ActiveX at all, both will evaluate false
    //Constructed as a method (not a prop) to avoid unneccesarry overhead -- will only be evaluated if needed
    isIE = function () {
        return !!(window.ActiveXObject || "ActiveXObject" in window);
    };

    //If either ActiveX support for "AcroPDF.PDF" or "PDF.PdfCtrl" are found, return true
    //Constructed as a method (not a prop) to avoid unneccesarry overhead -- will only be evaluated if needed
    supportsPdfActiveX = function () {
        return !!(createAXO("AcroPDF.PDF") || createAXO("PDF.PdfCtrl"));
    };

    //Determines whether PDF support is available
    supportsPDFs = (supportsPdfMimeType || (isIE() && supportsPdfActiveX()));

    //Create a fragment identifier for using PDF Open parameters when embedding PDF
    buildFragmentString = function (pdfParams) {

        var string = "",
            prop;

        if (pdfParams) {

            for (prop in pdfParams) {
                if (pdfParams.hasOwnProperty(prop)) {
                    string += encodeURIComponent(prop) + "=" + encodeURIComponent(pdfParams[prop]) + "&";
                }
            }

            //The string will be empty if no PDF Params found
            if (string) {

                string = "#" + string;

                //Remove last ampersand
                string = string.slice(0, string.length - 1);

            }

        }

        return string;

    };

    log = function (msg) {
        if (typeof console !== "undefined" && console.log) {
            console.log("[PDFObject] " + msg);
        }
    };

    embedError = function (msg) {
        log(msg);
        return false;
    };

    getTargetElement = function (targetSelector) {

        //Default to body for full-browser PDF
        var targetNode = document.body;

        //If a targetSelector is specified, check to see whether
        //it's passing a selector, jQuery object, or an HTML element

        if (typeof targetSelector === "string") {

            //Is CSS selector
            targetNode = document.querySelector(targetSelector);

        } else if (typeof jQuery !== "undefined" && targetSelector instanceof jQuery && targetSelector.length) {

            //Is jQuery element. Extract HTML node
            targetNode = targetSelector.get(0);

        } else if (typeof targetSelector.nodeType !== "undefined" && targetSelector.nodeType === 1) {

            //Is HTML element
            targetNode = targetSelector;

        }

        return targetNode;

    };

    generatePDFJSiframe = function (targetNode, url, pdfOpenFragment, PDFJS_URL, id) {

        var fullURL = PDFJS_URL + "?file=" + encodeURIComponent(url) + pdfOpenFragment;
        var scrollfix = (isIOS) ? "-webkit-overflow-scrolling: touch; overflow-y: scroll; " : "overflow: hidden; ";
        var iframe = "<div style='" + scrollfix + "position: absolute; top: 0; right: 0; bottom: 0; left: 0;'><iframe  " + id + " src='" + fullURL + "' style='border: none; width: 100%; height: 100%;' frameborder='0'></iframe></div>";
        targetNode.className += " pdfobject-container";
        targetNode.style.position = "relative";
        targetNode.style.overflow = "auto";
        targetNode.innerHTML = iframe;
        return targetNode.getElementsByTagName("iframe")[0];

    };

    generateEmbedElement = function (targetNode, targetSelector, url, pdfOpenFragment, width, height, id) {

        var style = "";

        if (targetSelector && targetSelector !== document.body) {
            style = "width: " + width + "; height: " + height + ";";
        } else {
            style = "position: absolute; top: 0; right: 0; bottom: 0; left: 0; width: 100%; height: 100%;";
        }

        targetNode.className += " pdfobject-container";
        targetNode.innerHTML = "<embed " + id + " class='pdfobject' src='" + url + pdfOpenFragment + "' type='application/pdf' style='overflow: auto; " + style + "'/>";

        return targetNode.getElementsByTagName("embed")[0];

    };

    embed = function (url, targetSelector, options) {

        //Ensure URL is available. If not, exit now.
        if (typeof url !== "string") {
            return embedError("URL is not valid");
        }

        //If targetSelector is not defined, convert to boolean
        targetSelector = (typeof targetSelector !== "undefined") ? targetSelector : false;

        //Ensure options object is not undefined -- enables easier error checking below
        options = (typeof options !== "undefined") ? options : {};

        //Get passed options, or set reasonable defaults
        var id = (options.id && typeof options.id === "string") ? "id='" + options.id + "'" : "",
            page = (options.page) ? options.page : false,
            pdfOpenParams = (options.pdfOpenParams) ? options.pdfOpenParams : {},
            fallbackLink = (typeof options.fallbackLink !== "undefined") ? options.fallbackLink : true,
            width = (options.width) ? options.width : "100%",
            height = (options.height) ? options.height : "100%",
            forcePDFJS = (typeof options.forcePDFJS === "boolean") ? options.forcePDFJS : false,
            PDFJS_URL = (options.PDFJS_URL) ? options.PDFJS_URL : false,
            targetNode = getTargetElement(targetSelector),
            fallbackHTML = "",
            pdfOpenFragment = "",
            fallbackHTML_default = "<p>This browser does not support inline PDFs. Please download the PDF to view it: <a href='[url]'>Download PDF</a></p>";

        //If target element is specified but is not valid, exit without doing anything
        if (!targetNode) {
            return embedError("Target element cannot be determined");
        }


        //page option overrides pdfOpenParams, if found
        if (page) {
            pdfOpenParams.page = page;
        }

        //Stringify optional Adobe params for opening document (as fragment identifier)
        pdfOpenFragment = buildFragmentString(pdfOpenParams);

        //Do the dance
        if (forcePDFJS && PDFJS_URL) {

            return generatePDFJSiframe(targetNode, url, pdfOpenFragment, PDFJS_URL, id);

        } else if (supportsPDFs) {

            return generateEmbedElement(targetNode, targetSelector, url, pdfOpenFragment, width, height, id);

        } else {

            if (PDFJS_URL) {

                return generatePDFJSiframe(targetNode, url, pdfOpenFragment, PDFJS_URL, id);

            } else if (fallbackLink) {

                fallbackHTML = (typeof fallbackLink === "string") ? fallbackLink : fallbackHTML_default;
                targetNode.innerHTML = fallbackHTML.replace(/\[url\]/g, url);

            }

            return embedError("This browser does not support embedded PDFs");

        }

    };

    return {
        embed: function (a, b, c) {
            return embed(a, b, c);
        },
        pdfobjectversion: (function () {
            return pdfobjectversion;
        })(),
        supportsPDFs: (function () {
            return supportsPDFs;
        })()
    };

}));

$.championSpeaker = function () {
    var $answer = $(".champions-main .show-read-more");

    $.each($answer, function (index, answer) {
        var height = 0;
        $(answer).find('p').each(function () {
            height += parseInt($(this).outerHeight(true));
        });
        if (70 < height) {
            $(answer).siblings(".read-desc").removeClass("hidden");
        }
    });
};

$(".startup-themes a").click(function () {
    var $startupThemes = $(this).parents(".startup-themes");
    store.setItem("themeCode", $startupThemes.find(".themeCode").html());
    store.setItem("themeTitle", $startupThemes.find("h2").html());
    store.setItem("themeImage", $startupThemes.find("img").attr("src"));
    store.setItem("themeDescription", $startupThemes.find(".themeDescription").html());
    // window.location = $(this).attr("href");
});

var amsApplication = {
    getImageAPI: SIH.getEndPoint("/api/file/ams/banner/logo"),
    images: {},
    compressedImages: {},
    isValidated: false,
    logoSelect: "",
    errorMappingObj: {}
};

$('form.ams-application-form .multiCheck-selection-all').each(function () {
    var checkedInputs = $(this).find('input.addAll:checked').length;
    if (checkedInputs && (checkedInputs == $(this).find('input.addAll').length)) {
        $(this).find("input[name=addAll]").prop('checked', true);
    }
});

$(document).on("change", ".ams-application-form select[name=userType]", function (event) {
    if ($(".ams-application-form #userType option[value=individual]:selected").length > 0) {
        if (!$('.ams-application-form #educationalCriteria').closest('.row').find('.required').length > 0) {
            $('.ams-application-form #educationalCriteria').closest('.row').find('.control-label').append('<sup class="required">*</sup>');
        }
    } else {
        $('.ams-application-form #educationalCriteria').closest('.row').find('.required').remove()
    }
});
$(document).on('change', ".ams-application-form select[name=incentiveType]", function (event) {
    var $target = $(event.target);
    $target.find("option:selected").each(function () {
        var field = $('textarea[name=' + $(this).val() + ']').closest('.baseformfield');
        var label = field.find('.control-label');
        if (field.hasClass('display-n')) {
            field.removeClass('display-n');
            label.append('<sup class="required">*</sup>');
        }
    });
    $target.find("option:not(:selected)").each(function () {
        var field = $('textarea[name=' + $(this).val() + ']').closest('.baseformfield');
        var supRequired = field.find('.control-label sup');
        if (!field.hasClass('display-n') && supRequired) {
            field.addClass('display-n');
            $("textarea[name=" + $(this).val() + "].richTextArea").summernote("code", "");
            supRequired.remove();
        }
    });

});
$(document).on('change', 'input[name=emailSubscribed]', function (event) {
    if ($(event.target).val() == "true") {
        if (!$('input[name=receipientEmail]').val()) {
            $('input[name=receipientEmail]').val(store.getItem('email'));
        }
        $('input[name=receipientEmail]').closest('.form-group').removeClass('display-n');
        $("[name=receipientEmail]").removeClass("display-n")
    } else {
        $('input[name=receipientEmail]').closest('.form-group').addClass('display-n');
        $("[name=receipientEmail]").addClass("display-n")
    }
});


function setStakeHoldersList() {
    var params = {};
    var $selection = $(".ams-application-form #stakeHolders");
    setList(params, $selection.data("path"), $selection);
}

function setSelectionList(params, apiPath, $selection, name) {
    $selection.find('option').remove();
    $.ajax({
        url: apiPath,
        type: 'GET',
        data: params,
        async: false,
        success: function (data) {
            if (typeof data == "string") {
                data = JSON.parse(data);
            }
            if (data.data)
                data = data.data;
            var jsonObject = {};
            jsonObject["data"] = data;
            jsonObject["type"] = name;
            var template = Handlebars.compile($("#selection-template").html());
            $selection.empty();
            $selection.html("");
            $selection.html(template(jsonObject));
        }, error: function (data) {
            console.log("Error while loading options");
        }
    });
}

$(document).on('focusout input', 'form.ams-application-form .regex-val', function (event) {
    event.preventDefault();
    event.stopPropagation();
    var target = event.target;
    var element = $(target);
    var re = new RegExp(element.attr("regex"));
    if (element.val() && !re.test(element.val())) {
        amsApplication.isValidated = false;
        //showErrorState(element, true);
        element.closest(".form-group").addClass("has-error");
        element.siblings('.help-block').hide();
        element.siblings(".regex-msg").show();
    } else {
        element.closest(".form-group").removeClass("has-error");
        element.siblings(".regex-msg").hide();
    }
});
$(document).on('change', '.ams-application-form input[type=file]', function (event) {
    var target = event.target;
    var $target = $(target);
    var file, img;
    var _URL = window.URL || window.webkitURL;
    if ((file = this.files[0])) {
        if (!validateAMSApplicationFile(event, file)) {
            return false;
        } else {
            img = new Image();
            img.onload = function () {
                if (file) {
                    var apiPath = SIH.getEndPoint($target.closest('.form-group').data('name') === 'bannerImage' ? "/api/file/ams/banner/image" : "/api/file/ams/banner/logo");
                    var imgIcon = $target.closest('.row').find('span.camera-image');
                    var imageTag = $target.closest('.row').find("img.browse")[0];
                    if (file) {
                        var data = new FormData();
                        data.append("file", file);
                        $('#modal-loader').modal("show");
                        $.ajax({
                            url: apiPath,
                            type: 'POST',
                            data: data,
                            cache: false,
                            contentType: false,
                            processData: false,
                            success: function (data) {
                                $('#modal-loader').modal("hide");
                                if (data && data.name) {
                                    // display the image to user
                                    if (!($target.hasClass("file"))) {
                                        imageTag.src = window.URL.createObjectURL(target.files[0]);
                                        var bannerWrapper = $target.closest('.row').find('.banner-image-wrapper');
                                        bannerWrapper.length ? bannerWrapper.css("display", "block") : $(imageTag).css("display", "block");
                                        
                                        $(imgIcon).css("display", "none");
                                        if ($target.parents('.multipleimageupload').length == 0) {
                                            amsApplication.images["" + $(target).attr('name')] = data.name;
                                            if (data.compressedName) {
                                                amsApplication.compressedImages["" + $(target).attr('name')] = data.compressedName;
                                            }
                                        } else {
                                            $(imageTag).attr('filename', data.name);
                                            if ($(target).closest('.form-group').find('.multiimage-select').val()) {
                                                $target.closest('.form-group').find("span.logo-added-check").removeClass('logoadded-disabled');
                                            }
                                        }

                                    }
                                }
                            }, error: function (data) {
                                $('#modal-loader').modal("hide");
                                $('.ams-error-modal .modal-body p').html("Error while uploading files");
                                $('.ams-error-modal').modal('show');
                            }
                        });
                    } else {
                        $target.closest('.form-group').find("span.logo-added-check").addClass('logoadded-disabled');
                    }
                }
            };
            img.src = _URL.createObjectURL(file);
        }
    }
});

function checkMimetype(event, file) {
    var uploads = [];
    var fileReader = new FileReader();
    var ext = "";
    fileReader.onloadend = function(evt) {
        if (evt.target.readyState === FileReader.DONE) {
            var uint = new Uint8Array(evt.target.result);
            var bytes = [];
            uint.forEach(function(byte) {
                bytes.push(byte.toString(16));
            });
            var hex = bytes.join('').toUpperCase();

            ext = getMimetype(hex);
            var allowedExtensionsForImage = ["image/png", "image/jpeg", "image/jpg"];
            if(!allowedExtensionsForImage.includes(ext)) {
                $('.ams-error-modal .modal-body p').html("Supported Formats for file uploads are: " + allowedExtensionsForImage.join(" , "));
                $('.ams-error-modal').modal('show');
               if($(event.target).closest(".row").find(".banner-image-wrapper").length > 0){
                   $(".banner-image-wrapper").css('display',"none");
               }
               if($(event.target).closest(".row").find(".form-preview-add-logo").length > 0){
                   $(".camera-image").css('display',"block");
                   $(event.target).closest(".row").find(".form-preview-add-logo").find("img.browse").css("display","none");
               }
                event.target.value = null;
                return false;
            }
        }
    }

    var blob = file.slice(0, 4);
    fileReader.readAsArrayBuffer(blob);

    var getMimetype = function(signature) {
        switch (signature) {
            case '89504E47':
                return 'image/png'
            case '47494638':
                return 'image/gif'
            case '25504446':
                return 'application/pdf'
            case 'FFD8FFDB':
            case 'FFD8FFE0':
                return 'image/jpeg'
            case '504B0304':
                return 'application/zip'
            default:
                return 'Unknown filetype'
        }
    }
}

function validateAMSApplicationFile(event, file) {
    var allowedExtensionsForImage = ["image/png", "image/jpeg", "image/jpg"];
    var maxImageSizeInBytes = 1048576;
    if ($.inArray(file.type, allowedExtensionsForImage) < 0) {
        $('span.camera-image').css("display", "block");
        $('.ams-error-modal .modal-body p').html("Supported Formats for file uploads are: " + allowedExtensionsForImage.join(" , "));
        $('.ams-error-modal').modal('show');
        if($(event.target).closest(".row").find(".banner-image-wrapper").length > 0){
            $(".banner-image-wrapper").css('display',"none");
        }
        if($(event.target).closest(".row").find(".form-preview-add-logo").length > 0){
            $(".camera-image").css('display',"block");
            $(event.target).closest(".row").find(".form-preview-add-logo").find("img.browse").css("display","none");
        }
        event.target.value = null;
        return false;
    }
    if (file.size > maxImageSizeInBytes) {
        $('span.camera-image').css("display","block");
        $('.ams-error-modal .modal-body p').html("Maximum file size allowed is 1 MB ");
        $('.ams-error-modal').modal('show');
        if($(event.target).closest(".row").find(".banner-image-wrapper").length > 0){
            $(".banner-image-wrapper").css('display',"none");
        }
        if($(event.target).closest(".row").find(".form-preview-add-logo").length > 0){
            $(".camera-image").css('display',"block");
            $(event.target).closest(".row").find(".form-preview-add-logo").find("img.browse").css("display","none");
        }
        event.target.value = null;
        return false;
    }
    checkMimetype(event, file);
    return true;
}

function cleanAMSErrors() {
    $('.ams-app-container .error-message').addClass('display-n');
    $('.ams-app-container .error-message .success-content,.ams-app-container .error-message .err-content').addClass('display-n');
    $('.ams-app-container .file-upload.banner-img-upload-revamp .help-block').html('');
}

$(document).on('click', '.ams-application-form input[name=program-accelerator-next]', function (event) {
    cleanAMSErrors();
    $('#modal-loader').modal("show");
    var $target = $(event.target);
    if (validateAMSForm($('div.ams-app-container sup.required'))) {
        var programJson = mappingProgramFields($('form.ams-application-form'));
        var path = $target.data()["formAction"];
        var redirectPath = $('div.ams-app-container').data('redirect-path');
        var programType = setAMSProgramType($target);
        if (programType === 'REIMBURSEMENT') {
            programJson = getStateFormDate(programJson);
            sessionStorage.setItem('appIncentiveType', programJson["reimbursementType"]["id"]);
            sessionStorage.setItem('appIncentiveTitle', programJson["reimbursementType"]["text"]);
        }
        if (programType === 'INCENTIVE') {
            programJson = getStateFormDate(programJson);
            sessionStorage.setItem('appIncentiveType', programJson["fiscalIncentiveType"]["id"]);
            sessionStorage.setItem('appIncentiveTitle', programJson["fiscalIncentiveType"]["text"]);
        }
        programJson["type"] = programType;
        programJson["formType"] = programType;
        programJson["status"] = "DETAILS_DRAFTED";
        programJson["id"] = sessionStorage.getItem('amsApplicationId');
        if (path) {
            if (document.getElementById("new_form_multiplePSAllowed-0")) {
                if (document.getElementById("new_form_multiplePSAllowed-0").checked == true) {
                    programJson["multiplePSAllowed"] = true;
                }
                else {
                    programJson["multiplePSAllowed"] = false;
                }
            }
            $.ajax({
                url: SIH.getEndPoint(path),
                data: JSON.stringify(programJson),
                type: 'POST',
                dataType: 'json',
                contentType: "application/json",
                beforeSend: setAuthTokenHeader,
                success: function (response) {
                    if (response && response.id) {
                        $('#modal-loader').modal('hide');
                        $('.ams-app-container .error-message').addClass('alert-success').removeClass('alert-danger');
                        $('.ams-app-container .error-message , .ams-app-container .error-message .success-content').removeClass('display-n');
                        sessionStorage.setItem('amsApplicationId', response.id);
                        sessionStorage.setItem('programDetailsReq', JSON.stringify(programJson));
                        sessionStorage.setItem('amsApplicationPath', SIH.getEndPoint(path));
                        window.location = redirectPath + "?applicationId=" + response.id;
                    }
                    amsFormScrollTop();
                },
                error: function (response) {
                    if (response && response.status === 400) {
                        populateFormErrors(response, null, $target);
                        amsErrorBlockScroll();
                    } else if (response && response.status === 403) {
                        $('.ams-error-modal .modal-body p').html("You are not authorized to perform the action");
                        $('.ams-error-modal').modal('show');
                    }
                    else {
                        $('.ams-app-container .error-message').addClass('alert-danger').removeClass('alert-success');
                        if (response && response.responseText) {
                            $('.ams-app-container .error-message .err-content').text(response.responseText);
                        }
                        $('.ams-app-container .error-message , .ams-app-container .error-message .err-content').removeClass('display-n');
                        amsFormScrollTop();
                    }
                    $('#modal-loader').modal('hide');
                }
            });
        }
    } else {
        $('#modal-loader').modal("hide");
        amsErrorBlockScroll();
        return false;
    }
});

function setAMSProgramType($target) {
    if ($target.hasClass('program-incubator')) {
        return "INCUBATOR_PROGRAM";
    } else if ($target.hasClass('program-accelerator')) {
        return "ACCELERATOR_PROGRAM";
    } else if ($target.hasClass('challenge')) {
        return "CHALLENGE";
    } else if ($target.hasClass('program-reimbursement')) {
        return "REIMBURSEMENT";
    } else if ($target.hasClass('program-incentive')) {
        return "INCENTIVE";
    } else {
        return "WORKSHOP";
    }
}

function amsErrorBlockScroll() {
    $('.has-error').length ? $('html, body').animate({scrollTop: $('.has-error').offset().top - 200}, 500) : amsFormScrollTop();
}

function amsFormScrollTop() {
    $('html, body').animate({
        scrollTop: $('.ams-app-container').offset().top - 200
    }, 500);
}

function getStateFormDate(programJson) {
    var startDate = new Date();
    var endDate = new Date(3050, 5, 24, 18, 30);
    programJson["startDate"] = startDate.getMonth() + 1 + '/' + startDate.getDate() + '/' + startDate.getFullYear() + " " + startDate.getHours() + ":" + startDate.getMinutes() + ":" + startDate.getSeconds();
    programJson["endDate"] = endDate.getMonth() + 1 + '/' + endDate.getDate() + '/' + endDate.getFullYear();
    return programJson;
}

$(document).on('click', '.ams-application-form input[name=program-accelerator-draft]', function (event) {
    cleanAMSErrors();
    if ($('input[name=title]').val().trim()) {
        $('#modal-loader').modal("show");
        var $target = $(event.target);
        var programJson = mappingProgramFields($('form.ams-application-form'));
        var path = $target.data()["formAction"];
        var programType = setAMSProgramType($target);
        if (programType === 'REIMBURSEMENT') {
            programJson = getStateFormDate(programJson);
            sessionStorage.setItem('reimbursementType', programJson["reimbursementType"]);
        }
        if (programType === 'INCENTIVE') {
            programJson = getStateFormDate(programJson);
            sessionStorage.setItem('fiscalIncentiveType', programJson["fiscalIncentiveType"]);
        }
        programJson["type"] = programType;
        programJson["formType"] = programType;
        programJson["status"] = "DETAILS_DRAFTED";
        programJson["id"] = sessionStorage.getItem('amsApplicationId');
        if (path) {
            if (document.getElementById("new_form_multiplePSAllowed-0")) {
                if (document.getElementById("new_form_multiplePSAllowed-0").checked == true) {
                    programJson["multiplePSAllowed"] = true;
                }
                else {
                    programJson["multiplePSAllowed"] = false;
                }
            }
            $.ajax({
                url: SIH.getEndPoint(path),
                data: JSON.stringify(programJson),
                type: 'POST',
                dataType: 'json',
                contentType: 'application/json',
                beforeSend: setAuthTokenHeader,
                success: function (response) {
                    if (response && response.id) {
                        $('#modal-loader').modal('hide');
                        $('.ams-app-container .error-message').addClass('alert-success').removeClass('alert-danger');
                        $('.ams-app-container .error-message , .ams-app-container .error-message .success-content').removeClass('display-n');
                        sessionStorage.setItem("amsApplicationId", response.id);
                    }
                    amsFormScrollTop();
                },
                error: function (response) {
                    if (response && response.status == 400) {
                        populateFormErrors(response, null, $target);
                        amsErrorBlockScroll();
                    } else {
                        $('.ams-app-container .error-message').addClass('alert-danger').removeClass('alert-success');
                        $('.ams-app-container .error-message , .ams-app-container .error-message .err-content').removeClass('display-n');
                        amsFormScrollTop();
                    }
                    $('#modal-loader').modal('hide');
                }
            });
        }
    } else {
        $('input[name=title]').closest(".form-group").addClass("has-error").find("span.help-block").first().html("This field cannot be left Blank.");
        amsErrorBlockScroll();
    }
});

function mappingProgramFields($form) {
    var jsonObject = {};
    if ($form) {
        $form.find('.form-control').each(function () {
            var key = $(this).attr('name');
            var value = $(this).val();
            var type = $(this).attr('type');
            var selectTypes = ["state", "city", "reimbursementType", "fiscalIncentiveType"];
            if (key && value && value.length > 0 && !$(this).hasClass("multiimage-text") && !$(this).hasClass("multiimage-link") && key != 'problemStatementDescription' && !$(this).hasClass("multiimage-select") && !$(this).parents('.ams-faq-question').length > 0) {
                if (type == 'radio') {
                    var radioValue = $('input[name=' + key + ']:checked').val();
                    jsonObject["" + key] = radioValue;
                    if (key === "emailSubscribed" && radioValue === "false") {
                        $('input[name=receipientEmail]').val('');
                    }
                } else {
                    if (key == "bannerImage") {
                        if (!jsonObject[key]) {
                            jsonObject[key] = {};
                        }
                        jsonObject["" + key]['info'] = value;
                    } else if ($('#' + key).is('select') && key === 'stakeHolders') {
                        var valueArr = [];
                        $('#' + key).find('option:selected').each(function () {
                            var tagObject = {};
                            tagObject["id"] = $(this).val();
                            tagObject["name"] = $(this).text();
                            tagObject["text"] = $(this).text();
                            valueArr.push(tagObject);
                        });
                        jsonObject["" + key] = valueArr;
                    } else if ($.inArray(key, selectTypes) != -1) {
                        var selectedOption = $('#' + key).find('option:selected');
                        var tagObject = {};
                        tagObject["id"] = selectedOption.val();
                        tagObject["name"] = selectedOption.text();
                        tagObject["text"] = selectedOption.text();
                        jsonObject["" + key] = tagObject;
                    } else if (key === 'problemStatementTitle') {
                        addProblemStatements(jsonObject);
                    } else if (key === 'sectors') {
                        addChallengeThemes(jsonObject);
                    } else if(key === 'endDate'){
                        jsonObject["" + key] = value + " 23:59:59";
                    } else {
                        jsonObject["" + key] = value;
                    }
                }
            } else if ($(this).hasClass('customised-dropdown')) {
                var dropdownValues = [];
                if ($(this).find('select').length > 0) {
                    var selectBox = $(this).find('select');
                    selectBox.find('option:selected').each(function () {
                        var tagObject = {};
                        tagObject["id"] = $(this).val();
                        tagObject["name"] = $(this).text();
                        tagObject["text"] = $(this).text();
                        dropdownValues.push(tagObject);
                    });
                    jsonObject["" + selectBox.attr("name")] = dropdownValues;
                } else if ($(this).find('input[type=checkbox]:checked').length > 0) {
                    $(this).find('input[type=checkbox]:checked').each(function () {
                        if ($(this).val().indexOf('sih') == 0) {
                            var tagObject = {};
                            tagObject["id"] = $(this).val();
                            tagObject["name"] = $(this).closest('label').text().trim();
                            tagObject["text"] = $(this).closest('label').text().trim();
                            dropdownValues.push(tagObject);
                        }
                    });
                    jsonObject["" + $(this).children('.multiCheck-selection-all').attr('id')] = dropdownValues;
                }
            }
            else if ($(this).hasClass('multiimage-select')) {
                jsonObject = addMultipleLogos($(this), jsonObject);
            }
            else if ($(this).parents('.ams-faq-question').length > 0) {
                jsonObject = addFaqs($(this), jsonObject);
            }
            amsApplication.errorMappingObj["" + key + ""] = $("input[name=" + key + "]")[0] || $("select[name=" + key + "]")[0] || $("textarea[name=" + key + "]")[0];
        });
        if (amsApplication.images) {
            $.each(amsApplication.images, function (key, value) {
                if (!jsonObject[key]) {
                    jsonObject[key] = {};
                }
                jsonObject[key]['fileName'] = value;
                amsApplication.errorMappingObj["" + key + ""] = value;
            });
        }
        if (amsApplication.compressedImages) {
            $.each(amsApplication.compressedImages, function (key, value) {
                if (!jsonObject[key]) {
                    jsonObject[key] = {};
                }
                jsonObject[key]['compressedFileName'] = value;
                amsApplication.errorMappingObj["" + key + ""] = value;
            });
        }
    }
    if (jsonObject["" + "partnersLogo" + ""]) {
        var logoArray = [];
        $('.multiimage-select').each(function () {
            if ($(this).closest('.form-group').find('ul.preview-partners-logo li').length) {
                logoArray.push($(this).val());
            }
        });
        jsonObject["" + "partnersLogo" + ""]["logosOrder"] = logoArray;
    }
    return jsonObject;
}

function addProblemStatements(jsonObject) {
    var problemStatements = [];
    var title = $("form.ams-application-form input[name=problemStatementTitle]");
    var descriptions = $("form.ams-application-form textarea[name=problemStatementDescription]");
    for (var index = 0; index < title.length; index++) {
        var problemStatement = {};
        problemStatement.problemStatementTitle = title[index].value;
        problemStatement.problemStatementDescription = descriptions[index].value;
        problemStatements.push(problemStatement);
        errorMappingObj["problemStatements[" + index + "].problemStatementTitle"] = title[index];
        errorMappingObj["problemStatements[" + index + "].problemStatementDescription"] = descriptions[index];
    }
    return jsonObject["problemStatements"] = problemStatements;
}

function addChallengeThemes(jsonObject) {
    var sectors = [];
    var title = $("form.ams-application-form input[name=sectors]");
    for (var index = 0; index < title.length; index++) {
        sectors.push(title[index].value);
        errorMappingObj["sectors[" + index + "]"] = title[index];
    }
    return jsonObject["sectors"] = sectors;
}

function fetchAMSApplicationDetails(fetchApi, errorMsg, dashboardPage, applicationId, isAuthor) {
    $('#modal-loader').modal("show");
    if (sessionStorage.getItem('amsApplicationId')) {
        applicationId = sessionStorage.getItem('amsApplicationId');
    }
    var token = store.getItem('token');
    var isAdmin = false;
    var adminToken = $('.accelerators-programs').data('admin-token');
    if (dashboardPage && !token && adminToken && isAuthor === "true") {
        fetchApi = $('.accelerators-programs').data('admin-api');
        isAdmin = true;
    } else if (!token && !(isAuthor === "true")) {
        fetchApi = "/api/noauth/ams/application";
    }
    $('.ams-application-form span.green-text.ams-application-text,.ams-application-form span.red-text.ams-application-text').addClass('display-n')
    $.ajax({
        url: SIH.getEndPoint(fetchApi) + "/" + applicationId,
        type: 'GET',
        beforeSend: setAMSAuthTokenHeader

    }).done(function (userData) {
        if (userData && !dashboardPage) {
            userData.type != setAMSProgramType($('.next-btn.submit-cta')) ? /*sessionStorage.removeItem("amsApplicationId")*/ '' : handleApplicationData(userData);
        } else {
            var applicationObj = {};
            applicationObj.application = userData;
            sessionStorage.setItem('applicationObj',JSON.stringify(applicationObj));
            var allowedStatuses = ['SUBMITTED', 'APPROVED', 'REJECTED', 'INCOMPLETE', 'COMPLETED'];
            var currentUserIsAuthor = userData.createdBy === store.getItem("uniqueId");
            console.log(currentUserIsAuthor, userData.status);
            if (currentUserIsAuthor) {
                userData["isAuthor"] = true;
            }
            if (userData && ($.inArray(userData.status, allowedStatuses) !== -1 || (userData.status === 'QUESTIONS_DRAFTED' && currentUserIsAuthor) || (userData.status === 'DETAILS_DRAFTED' && currentUserIsAuthor))) {
                userData["emailSubscribedString"] = userData.emailSubscribed ? "Yes" : "No";
                if (userData.bannerImage) {
                    $('.bannerimage .state-banner').addClass('custom-banner');
                    if ($('.bannerimage .state-banner img').length) {
                        $('.bannerimage .state-banner img').attr('src', amsApplication.getImageAPI + "?fileName=" + userData.bannerImage.fileName);
                    } else {
                        $('.bannerimage .state-banner ').prepend('<img src = ' + amsApplication.getImageAPI + "?fileName=" + userData.bannerImage.fileName + '>')
                    }
                }
                if (userData.workshopStartDate || userData.workshopEndDate) {
                    userData["workshopDates"] = true;
                }

                if (userData.linkedinSocialLink || userData.twitterSocialLink || userData.facebookSocialLink || userData.websiteSocialLink) {
                    userData['socialLinks'] = true;
                }
                if (userData.fiscalIncentive || userData.nonFiscalIncentive || userData.specialIncentive || userData.specialCategoryIncentive) {
                    userData['incentive'] = true;
                }
                if (isAdmin && isAuthor === "true") {
                    userData["isAdmin"] = isAdmin;
                    if (userData.status === 'SUBMITTED') {
                        userData["showActionButtons"] = true;
                    }
                }
                if (userData["reimbursementType"]) userData["incentiveText"] = userData["reimbursementType"].text;
                if (userData["fiscalIncentiveType"]) userData["incentiveText"] = userData["fiscalIncentiveType"].text;
                if ($('#challenge-problem-statements').length) {
                    var template = Handlebars.compile($("#challenge-statements-template").html());
                    problemStatements = userData.problemStatements;
                    if(store.getItem("token")){
                        userData.isLoggedIn = true;
                    }else{
                        userData.isLoggedIn = false;
                    }
                    $("div#challenge-problem-statements").html(template(userData));
                } else {
                    if (userData.title) {
                        $('.static-heading').text(userData.title);
                    }
                    if(userData.status == "DETAILS_DRAFTED" && sessionStorage.getItem("questionReq") && (sessionStorage.getItem("parameterApplicationReq") || userData.formType == 'WORKSHOP')) {
                        var questionStatus = JSON.parse(sessionStorage.getItem("questionReq")).status;
                        var parameterStatus = null;
                        if(userData.formType != 'WORKSHOP') {
                            parameterStatus = JSON.parse(sessionStorage.getItem("parameterApplicationReq")).status;
                        }
                        userData.questionStatus = questionStatus;
                        userData.parameterStatus = parameterStatus;
                    }
                    var dashboardTemplate = Handlebars.compile($("#application-dashboard-template").html());
                    $("div.accelerators-programs").html(dashboardTemplate(userData));
                    console.log("userData",userData);
                    /*if (userData.endDate) {
	                    var endDate = new Date(userData.endDate);
	                    endDate.setDate(endDate.getDate() + 1);
	                    var currentDate = new Date();
	                    if (currentDate > endDate) {
	                        $('.apply-btn').hide();
	                        $('.ams-application-dashboard').append(' <div class="center-aligned alert alert-warning">Refer to Application Timeline for Start Date and End Date.</div>')
	                    }
	                    if(store.getItem("token")) {
	                        fetchSavedApplicationData(applicationId)
	                    }
	                }*/
	                if (userData.endDate) {
	                    if (userData.applicationExpired) {
	                        $('.apply-btn').hide();
	                        $('.ams-application-dashboard').append(' <div class="center-aligned alert alert-warning">Refer to Application Timeline for Start Date and End Date.</div>')
	                    }
	                    if(store.getItem("token")) {
	                        fetchSavedAppData(applicationId)
	                    }
	                }
                }

            } else {
                $('.ams-error-modal .modal-body p').html(errorMsg);
                $('.ams-error-modal').modal('show');
            }
        }
    }).fail(function (response) {
        if (response && response.status === 401) {
            $("#loginModal").modal("show");
        }
        else if (response && response.responseText) {
            $('.ams-error-modal .modal-body p').html(response.responseText);
            $('.ams-error-modal').modal('show');
        }
    }).complete(function () {
        //equalHeightsForSelector(".leading-partners-image");
    });
    $('#modal-loader').modal("hide");
}

var setAMSAuthTokenHeader = function (xhr) {
    var adminToken = $('.accelerators-programs').data('admin-token');
    var token = store.getItem('token');
    if (token) {
        xhr.setRequestHeader('X-Auth-Token', token);
    } else if (adminToken) {
        xhr.setRequestHeader('X-Auth-Token', adminToken);
    }
    xhr.setRequestHeader('Content-Type', 'application/json');

};

function handleApplicationData(userData) {
    for (var field in userData) {
        var fieldValue = userData["" + field];
        var selectTypes = ["state", "city", "reimbursementType", "fiscalIncentiveType"];
        if (fieldValue != null) {
            if (field === "sectors") {
                populateChallengeThemes(fieldValue, field)
            }
            else if (field == "problemStatements") {
                populateProblemStatements(fieldValue, field);
            }
            else if (field == "faqs") {
                populateFaqs(fieldValue, field);
            }
            else if (field == 'startDate') {
                $('#scheduledTime').datetimepicker('setDate', fieldValue);
            }
            else if (field == 'multiplePSAllowed') {
                $('#new_form_multiplePSAllowed-0').prop('checked', fieldValue);
            }
            else if ($('[name=' + field + ']').is('textarea')) {
                $("textarea[name=" + field + "].richTextArea").summernote("code", fieldValue);
            } else if (field == "partnersLogo" || field == "socialMediaImage") {
                populateMultipleLogos(fieldValue, field);
            }
            else if ($('#' + field).is('select')) {
                if (field == "stakeHolders") {
                    var stakeholders = [];
                    $(fieldValue).each(function () {
                        stakeholders.push(this.id);
                    });
                    $('#' + field).val(stakeholders);
                } else if (field == 'relevantIndustry' || field == 'relevantServiceType') {
                    $("select#" + field).multipleSelect("setSelects", fieldValue.map(function (ele) {
                        return ele.id;
                    }))
                } else if ($.inArray(field, selectTypes) != -1) {
                    $('#' + field).val(fieldValue.id);
                } else {
                    $('#' + field).val(fieldValue);
                }
                $('#' + field).trigger("change");
                $('select[name=state]').parents(".has-error").removeClass("has-danger").removeClass("has-error");
            }
            else if ($.isArray(fieldValue)) {
                $.each(fieldValue, function (idx, val) {
                    $("input[type=checkbox][value='" + val.id + "']").prop("checked", true);
                });
                if (field == 'relevantIndustry') {
                    $("#" + field).siblings('button').html(fieldValue.length + " Industries selected");
                } else {
                    $("#" + field).siblings('button').html(fieldValue.length + " Services selected");
                }

            } else if (field == 'emailSubscribed') {
                $('input[name=emailSubscribed][value=' + fieldValue + ']').trigger('change').attr('checked', 'checked');
            } else if (field == "bannerImage") {
                amsApplication.images[field] = fieldValue.fileName;
                amsApplication.compressedImages[field] = fieldValue.compressedFileName;
                var imagePath = amsApplication.getImageAPI + "?fileName=" + fieldValue.fileName;
                setApplicationFormImage(field, imagePath, fieldValue.info);
            } else {
                $("input[name=" + field + "]").val(unescapeHtml(fieldValue));
            }
        }
    }
}

function setApplicationFormImage(elName, imagePath, imgInfo) {
    var fileUploadEl = $("input[type=file][name=" + elName + "]").closest("div.file-upload");
    var imageEl = fileUploadEl.find("img.browse");
    fileUploadEl.find("input[type=text][name=" + elName + "]").val(imgInfo);
    if (imageEl && imageEl.length > 0 && imagePath) {
        imageEl.attr("src", imagePath);
        fileUploadEl.find('.banner-image-wrapper').show();
        fileUploadEl.find("div.image-section").find("span").hide();
    }
}

function addMultipleLogos(element, jsonObject) {
    var row = $(element).closest('.muli-logo-wrapper');
    var logoImage = row.find('.preview-partners-logo li');
    var logos = [];
    logoImage.each(function () {
        var logoObject = {};
        logoObject["fileName"] = $(this).find('img').attr('filename');
        logoObject["info"] = $(this).find('.logo-text').text();
        logoObject["link"] = $(this).find('.logo-link').attr('href');
        logos.push(logoObject);
    });
    if (logos.length > 0) {
        if (element.parents('.repeat-container').length > 0) {
            if (!jsonObject["" + $(element).attr('name')]) {
                jsonObject["" + $(element).attr('name')] = {};
            }
            jsonObject["" + $(element).attr('name')]["" + row.find('.multiimage-select').val()] = logos;
        } else {
            jsonObject["" + $(element).attr('name')] = logos;
        }
    }
    return jsonObject;
}

function addFaqs(element, jsonObject) {
    var row = $(element).closest('.row');
    var faqs = [];
    var question = $("form.ams-application-form input[name=faqQuestion]");
    var answer = $("form.ams-application-form textarea[name=faqAnswer]");
    for (var index = 0; index < question.length; index++) {
        var faq = {};
        faq.faqQuestion = question[index].value;
        faq.faqAnswer = answer[index].value;
        faqs.push(faq);
        errorMappingObj["faqs[" + index + "].faqQuestion"] = question[index];
        errorMappingObj["members[" + index + "].faqAanswer"] = answer[index];
    }
    jsonObject.faqs = faqs;
    return jsonObject;
}


function populateChallengeThemes(values, field) {
    if (values && values.length > 0) {
        var titleInputs = $("input[name=sectors]");
        repeatElements(field, values.length);
        titleInputs = $("input[name=sectors]");
        $.each(values, function (idx, value) {
            $(titleInputs[idx]).val(unescapeHtml(value));
        });
    }
}

function populateProblemStatements(values, field) {
    if (values && values.length > 0) {
        var titleInputs = $("input[name=problemStatementTitle]");
        repeatElements("problemStatementTitle", values.length);
        titleInputs = $("input[name=problemStatementTitle]");
        $.each(values, function (idx, value) {
            populateProblemStatementsProperties(value, $(titleInputs[idx]).closest("div.repeat-fields"));
        });
    }
}

function populateFaqs(values) {
    if (values && values.length > 0) {
        var question = $("input[name=faqQuestion]");
        if (values.length > 1) {
            repeatElements("faqQuestion", values.length);
            question = $("input[name=faqQuestion]");
            $.each(values, function (idx, value) {
                populateFaqProperties(value, $(question[idx]).closest("div.repeat-fields"));
            });
        }
        else {
            populateFaqProperties(values[0], $(question[0]).closest("div.repeat-fields"));
        }
    }
}

function populateFaqProperties(obj, $parent) {
    for (var key in obj) {
        var value = obj[key];
        if (key == "faqAnswer") {
            $parent.find("textarea[name=faqAnswer].richTextArea").summernote("code", value);
        } else {
            $parent.find("input[name=" + key + "]").val(unescapeHtml(value));
        }
    }
}

function populateProblemStatementsProperties(obj, $parent) {
    for (var key in obj) {
        var value = obj[key];
        if ($('[name=' + key + ']').is('textarea')) {
            $parent.find("textarea[name=" + key + "].richTextArea").summernote("code", value);
        } else {
            $parent.find("input[name=" + key + "]").val(unescapeHtml(value));
        }
    }
}

function populateMultipleLogos(values, field) {
    if (field == "partnersLogo") {
        $('form.ams-application-form .repeat-add').show();
        var partnerLogosNo = Object.keys(values).length;
        if (values && partnerLogosNo > 0) {
            repeatElements(field, Object.keys(values).length - 1);
            var selectPartnerLogos = $("select[name=" + field + "]");
            (values.logosOrder).forEach(function (element, index, array) {
                var $parent = $(selectPartnerLogos[index]).closest("div.repeat-fields");
                var multiSelect = $parent.find('select.multiimage-select');
                multiSelect.val(element);
                $parent.find(".multiimage-label").text(multiSelect.find('option:selected').text());
                populateLogosProperties($parent, values[element]);
            });
        }
    } else {
        populateLogosProperties($("input[type=text][name=" + field + "]").closest("div.multipleimageupload"), values);
    }

}

function populateLogosProperties($parent, obj) {
    $parent.find(".multi-image-heading span").html(Object.keys(obj).length);
    $.each(obj, function (idx, value) {
        var imageObject = {};
        imageObject["src"] = amsApplication.getImageAPI + "?fileName=" + value["fileName"];
        imageObject["filename"] = value["fileName"];
        imageObject["text"] = value["info"];
        imageObject["link"] = value["link"];
        var template = Handlebars.compile($parent.find("#multi-image-template").html());
        $parent.find("ul.preview-partners-logo").append(template(imageObject));
    });
}

$(document).on('click', 'form.ams-application-form input[name=addPartnerLogo]', function () {
    $(this).remove();
    $('form.ams-application-form .repeat-fields .multipleimageupload').show();
    $('form.ams-application-form .repeat-add').show();
});

// Functions for multiple image upload
$(document).on('click', '.multipleimageupload .logo-added-check', function (event) {
    var target = event.target;
    var imageObject = {};
    var row = $(target).closest('.row');
    var imageLink = row.find(".multiimage-link").val();
    if (imageLink && !(imageLink.startsWith("https://") || imageLink.startsWith("http://"))) {
        row.find(".multiimage-link").closest(".image-link-block").find(".help-block").removeClass("display-n");
        row.find(".multiimage-link").closest(".image-link-block").addClass("has-error");
    } else {
        row.find(".multiimage-link").closest(".image-link-block").find(".help-block").addClass("display-n");
        row.find(".multiimage-link").closest(".image-link-block").removeClass("has-error");
        var parent = $(row).closest(".muli-logo-wrapper");
        imageObject["src"] = parent.find("img.browse").attr('src');
        imageObject["filename"] = parent.find("img.browse").attr('filename');
        imageObject["text"] = row.find(".multiimage-text").val();
        imageObject["link"] = imageLink;
        var template = Handlebars.compile($(target).parents('.multipleimageupload').find("#multi-image-template").html());
        row.find("ul.preview-partners-logo").prepend(template(imageObject));
        $(target).closest('.form-group').find('.image-input').val("");
        row.find(".multiimage-text, .multiimage-link").val("");
        parent.find("img.browse").attr("src", "/etc/designs/invest-india/investindialibs/images/camera.png");
        parent.find("img.browse").hide();
        parent.find(".camera-image").show();
        var logoSpan = row.find('.multi-image-heading span');
        logoSpan.text(parseInt(logoSpan.text()) + 1);
        $(target).addClass('logoadded-disabled');
    }
});
$(document).on('focus', '.multipleimageupload .multiimage-select', function (event) {
    amsApplication.logoSelect = $(event.currentTarget).val();
}).on('change', '.multipleimageupload .multiimage-select', function (event) {
    var target = event.currentTarget;
    if ($('select#partnersLogo').not(target).find('option:selected[value="' + $(target).val() + '"]').length > 0) {
        $('.ams-error-modal .modal-body p').html("Duplicate Partner Type. Please select another value.");
        $('.ams-error-modal').modal("show");
        $(target).val(amsApplication.logoSelect);
    } else {
        $(target).closest('.col-sm-6').find('.multiimage-label').text($(target).find('option:selected').text());
        var formGroup = $(target).closest('.form-group');
        if (formGroup.find('span.logo-added-check').hasClass('logoadded-disabled') && formGroup.find('.browse').attr('src').indexOf('blob') > -1) {
            formGroup.find('span.logo-added-check').removeClass('logoadded-disabled');
        }
    }
});

$(document).on('click', '.multipleimageupload .preview-partners-logo .remove-icon', function (event) {
    var target = event.target;
    var logoSpan = $(target).closest('.wrapper-add-logo').find('.multi-image-heading span');
    logoSpan.text(parseInt(logoSpan.text()) - 1);
    $(target).closest('.form-group').find('.image-input').val("");
    $(target).parents('li').remove();
});

function validateAMSForm(requiredFields) {
    amsApplication.isValidated = true;
    $.each(requiredFields, function (index, item) {
        var element = $(item).closest('.form-group').find(".form-control:not(.richTextarea,.customised-dropdown)");
        if(element.is(":visible")) {
            if (element && element.length > 0 && !element.closest(".modal").length) {
                if (element.attr("type") === "radio") {
                    if (element.is(':checked')) {
                        element.closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
                    } else {
                        element.closest(".form-group").addClass("has-error").find("span.help-block").first().html("This field cannot be left Blank.");
                        amsApplication.isValidated = false;
                    }
                } else if (!element.val() || (element.val() && element.is('input') && element.val().trim() === "")) {
                    amsApplication.isValidated = false;
                    showErrorState(element, true);
                } else {
                    showErrorState(element, false);
                }
            }
        }
    });
    var richTextAreas = $('.form-control.richTextarea');
    $.each(richTextAreas, function (index, item) {
        var el = $(item);
        if (el.closest('.form-group').find('sup.required').length > 0) {
        	var tempStr = el.val().replace(/<p>*/g,'').replace(/<\/p>*/g,'').replace(/(&nbsp;)*/g, "").replace(/<br>*/g, "");
            if ((el.val() && el.val().replace(/(&nbsp;)*/g, "").trim().length > 0) && !el.summernote('isEmpty') && tempStr.trim().length > 0) {
                el.siblings('.note-editor.note-frame').removeClass('note-has-error').addClass('note-writer-text');
                showErrorState(el, false);
            } else {
                amsApplication.isValidated = false;
                el.siblings('.note-editor.note-frame').addClass('note-has-error').removeClass('note-writer-text');
                showErrorState(el, true);
            }
        } else {
            var tempStr = el.val().replace(/<p>*/g,'').replace(/<\/p>*/g,'').replace(/(&nbsp;)*/g, "").replace(/<br>*/g, "");
            if(!el.summernote('isEmpty')){
                if ((el.val() && el.val().replace(/(&nbsp;)*/g, "").trim().length > 0) && tempStr.trim().length > 0) {
                    el.siblings('.note-editor.note-frame').removeClass('note-has-error').addClass('note-writer-text');
                    el.closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
                } else {
                    amsApplication.isValidated = false;
                    el.siblings('.note-editor.note-frame').addClass('note-has-error').removeClass('note-writer-text');
                    el.siblings('.help-block').show();
                    el.closest(".form-group").addClass("has-error").find("span.help-block").first().html("Please enter valid content.");
                }
            }
            else {
                el.siblings('.note-editor.note-frame').removeClass('note-has-error').removeClass('note-writer-text');
                el.closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
            }
        }
    });
    var customizedDropDown = $('.form-control.customised-dropdown');
    $.each(customizedDropDown, function (index, item) {
        var el = $(item);
        if (el.closest('.form-group').find('sup.required').length > 0) {
            var selectedFields = el.find('select').length > 0 ? el.find('select option:selected') : el.find('input[type=checkbox]:checked');
            if (!selectedFields || selectedFields.length === 0) {
                amsApplication.isValidated = false;
                showErrorState(el, true);
            }
        }
    });

    var select2fields = $('.form-control.multi-select');
    $.each(select2fields, function (index, item) {
    	var element = $(item).siblings(".select2-container");
    	if(element.find('.select2-selection__rendered').find('.select2-selection__choice').length<=0){
    		amsApplication.isValidated = false;
    		showErrorState(element, true);
    	}
    });

    var regexValidatedfields = $('form.ams-application-form .regex-val');
    $.each(regexValidatedfields, function (index, item) {
        var element = $(item);
        var re = new RegExp(element.attr("regex"));
        if (element.val() && !re.test(element.val())) {
            amsApplication.isValidated = false;
            showErrorState(element, false);
            element.closest(".form-group").addClass("has-error");
            element.siblings(".regex-msg").show();
        }
        else {
            if (!(element.closest(".form-group").has("sup.required") && !element.val())) {
                showErrorState(element, false);
            }
            element.siblings(".regex-msg").hide();
        }
    });
    var imagebrowse = $('.form-group.file-upload.banner-img-upload-revamp');
    $.each(imagebrowse, function (index, item) {
        var element = $(item).find(".image-input");
        if($(element).attr("required") == "required"){
            var imgsrc = $(element).parents(".image-section").find("img.browse");
            if($(imgsrc).attr("src") == "/etc/designs/invest-india/investindialibs/images/camera.png") {
                amsApplication.isValidated = false;
                showErrorState($(element).parents(".image-section"), true);
            }
        }
    });
    return amsApplication.isValidated;
}

function showRemainingTags(shId) {
    if ($('.' + shId)) {
        $('#' + shId + '-show').toggleClass('display-n');
        $('.' + shId).toggleClass('display-n');
        $('#' + shId + '-hide').toggleClass('display-n');
    }
}

function toggleContent(shId, element) {
    var parent = $(element).closest('.' + shId);
    if (parent) {
        parent.find('#' + shId + '-show').toggleClass('display-n');
        parent.find(".ellipsis-content").toggleClass('display-n');
        parent.find('#' + shId + '-hide').toggleClass('display-n');
    }
}


function adminActionsOnPrograms(jsonObject) {
    jsonObject["id"] = $('.ams-error-modal').data("id");
    $.ajax({
        url: SIH.getEndPoint($('.accelerators-programs').data('admin-action')),
        data: JSON.stringify(jsonObject),
        type: 'POST',
        contentType: 'application/json',
        headers: {'X-Auth-Token': $('.accelerators-programs').data('admin-token'), 'Content-Type': 'application/json'},
        success: function (response) {
            if (response) {
                window.location = $('.accelerators-programs').data('dashboard-url');
            }
        },
        error: function (response) {
            $('.ams-admin-modal').modal("hide");
            if (response && response.responseText) {
                $('.ams-error-modal .modal-body p').html(response.responseText);
            } else {
                $('.ams-error-modal .modal-body p').html($('.accelerators-programs').data('error-msg'));
            }
            $('.ams-error-modal').modal("show");
        }
    });
}

$(document).on("click", ".accelerators-programs .accept-button , .accelerators-programs .reject-button, .accelerators-programs .incomplete-button, .ams-approve-modal .accept-button", function () {
    $('.ams-admin-modal textarea#ams-approval-comment').val('');
    var status = $(this).data('status');
    var formType = $(this).parent().data('form-type');
    if (status === "REJECTED" || status === "INCOMPLETE") {
        $('.ams-admin-modal .ams-approval-btn').attr('status', status).attr('formType', formType);
        $('.ams-admin-modal').modal('show');
        $('.ams-admin-modal .modal-heading').text(status === "REJECTED" ? "REJECTED" : "MARK AS INCOMPLETE");
    }
    else {
        $(this).attr("disabled", "disabled");
        var jsonObject = {};
        jsonObject["status"] = status;
        jsonObject["formType"] = formType;
        adminActionsOnPrograms(jsonObject);
        $('.ams-approve-modal').modal('hide');
    }
});

$(document).on('click', '.ams-admin-modal .ams-approval-btn', function () {
    $('.ams-approval-btn').attr('disabled', 'disabled');
    var jsonObject = {};
    var status = $('.ams-admin-modal .ams-approval-btn').attr('status');
    var formType = $('.ams-admin-modal .ams-approval-btn').attr('formType');
    var comment = $(this).closest('form').find('textarea#ams-approval-comment').val();
    jsonObject[status === "REJECTED" ? "rejectionComment" : "incompletionReason"] = comment;
    jsonObject["status"] = status;
    jsonObject["formType"] = formType;
    adminActionsOnPrograms(jsonObject);
});

$("#ams-approval-comment").keyup(function(){
    var isDisabled = $(this).val() ? false : true;
    $(".ams-admin-modal .ams-approval-btn").prop("disabled", isDisabled);
});

function fetchAllAMSApplications(getAll, programNo, userId, initializeCarousel, pageSize) {
    var userType = $('.select-filter[name=stakeHolders]').val();
    var industryType = $('.select-filter[name=industry]').val();
    var state = $('.select-filter[name=state]').val();
    var jsonObject = {};
    jsonObject["applicationType"] = getAll ? null : $('.applicant-types-heading .ams-application-tabs').find('li.active').attr('type');
    if (userType) {
        jsonObject["userType"] = userType;
    }
    if (industryType) {
        jsonObject["industryType"] = industryType;
    }
    if (state) {
        jsonObject["state"] = state;
    }
    if(pageSize){
        jsonObject["pageSize"] = pageSize;
    }
    if(userId){
        jsonObject.userId = userId;
    }
    if (jsonObject["applicationType"] !== "MARKET ACCESS PROGRAM") {
        $.ajax({
            beforeSend: function () {
                $(".modal.loader").modal("show");
            },
            url: SIH.getEndPoint("/api/noauth/ams/application/getApplicantApplicationList"),
            data: JSON.stringify(jsonObject),
            type: 'POST',
            async: true,
            headers: {'Content-Type': 'application/json'}
        }).done(function (userData) {
            $(".modal.loader").modal("hide");
            if (getAll) {
                mergeAuthoredApplications(userData, programNo, initializeCarousel);
            } else {
                var template = Handlebars.compile($("#application-listing-template").html());
                console.log("userData",userData);
                $('#ams-application-listing .tab-pane.active').html(template(userData));
                $.each($(".manual-carousel"), function (index, val) {
                    $(this).owlCarousel({
                        items: 3,
                        autoPlay:true,
                        loop:true,
                        navigation: true,
                        navigationText: ["<", ">"],
                        itemsTablet: [768, 2],
                        itemsMobile: [479, 1],
                        itemsCustom: false
                    })
                });
            }
        }).fail(function () {
            $('.ams-error-modal .modal-body p').html($('#ams-application-listing').closest('.row').data('error-msg'));
            $('.ams-error-modal').modal('show');
        });
    }
    return true;
}

function mergeAuthoredApplications(userData, programNo, initializeCarousel) {
    userData.active.map((obj)=> {obj.currentStatus="Current Program"});
    userData.upcoming.map((obj)=> {obj.currentStatus="Upcoming Program"});
    userData.completed.map((obj)=> {obj.currentStatus="Past Program"});
    var template = Handlebars.compile($("#ams-dashboard-template").html());
    var allData;
    $.ajax({
        url: "/bin/services/authoredApplications",
        data: {listRoot: "/content/sih/en/ams-application/application-listing"},
        type: 'GET',
        async: true,
        headers: {'Content-Type': 'application/json'}
    }).success(function (map) {
        var active = map.active != undefined ? sorted(userData.active, map.active, "endDate", "asc") : userData.active;
        var upcoming = map.upcoming != undefined ? sorted(userData.upcoming, map.upcoming, "startDate", "asc") : userData.upcoming;
        var completed = map.completed != undefined ? sorted(userData.completed, map.completed, "endDate", "desc") : userData.completed;
        allData = $.merge($.merge($.merge([], active), upcoming), completed);
    }).error(function () {
        allData = $.merge($.merge($.merge([], userData.active), userData.upcoming), userData.completed);
    }).complete(function () {
        $('#ams-programs-content').html(template(allData));
        initializeCarousel();
        if (allData.length >= programNo) {
            $('.all-dashboard-programs').removeClass('display-n');
        }

    });
}

function sorted(array1, array2, sortDate, sortOrder) {
    array1 = array1 != null && array1.length > 0 ? array1 : [];
    array2 = array2 != null && array2.length > 0 ? array2 : [];
    return $.merge(array1, array2).sort(function (a, b) {
        return sortOrder === "asc" ? (new Date(a[sortDate]) - new Date(b[sortDate])) :
            (new Date(b[sortDate]) - new Date(a[sortDate]));
    });
}

function fetchAllEnablerApplications(userId) {
    var jsonObject = {};
    jsonObject["userId"] = userId;
    $.ajax({
        url: SIH.getEndPoint("/api/noauth/ams/application/getApplicantApplicationList"),
        data: JSON.stringify(jsonObject),
        type: 'POST',
        async: false,
        headers: {'Content-Type': 'application/json'}
    }).done(function (userData) {
        var template = Handlebars.compile($("#enabler-application-listing-template").html());
        $("#ams-dashboard-template").html(template(userData));
        $.each($(".manual-carousel"), function (index, val) {
            $(this).owlCarousel({
                items: 3,
                navigation: true,
                navigationText: ["<", ">"],
                itemsTablet: [768, 3],
                itemsMobile: [479, 2],
                itemsCustom: false
            })
        });
    }).fail(function () {
        $('.ams-error-modal .modal-body p').html($('#enabler-application-listing').closest('.row').data('error-msg'));
        $('.ams-error-modal').modal('show');
    });
}

$(document).on('shown.bs.tab', 'ul.ams-application-tabs a', function (e) {
    var type = $(e.target).closest('li').attr('type');
    if (type !== "MARKET ACCESS PROGRAM") {
        fetchAllAMSApplications(false);
    }
});

$(document).on("change", '.applicant-filter select', function () {
    fetchAllAMSApplications(false);
});

var fetchWinners = function (applicationId) {
    $.ajax({
        url: SIH.getEndPoint("/api/noauth/ams/application/winners/" + applicationId),
        type: 'GET',
        async: false,
        headers: {'Content-Type': 'application/json'}
    }).done(function (userData) {
        var template = Handlebars.compile($("#ams-winners-template").html());
        $(".winner-wrapper").html(template(userData));
    }).fail(function (error) {
        if (error.status === 400 && error.responseText) {
            showErrorModal(error.responseText, goToDashboard);
        } else {
            showErrorModal("Something bad happened. Please contact help-desk.", goToDashboard);
        }
    });
};
$.amsApplicationContainer = function () {
    $('.app-timeline .select-type-icon').parents('li').addClass('application-completed');
    setStakeHoldersList();
    $('select#incentiveType').closest('.columncontrol').next().find('.baseformfield').addClass('display-n incentive-textarea');
    $("span.logo-added-check").addClass('logoadded-disabled');
    $('.ams-datepicker .hasDatepicker').bind('paste', function () {
        return false;
    }).attr('readonly');
    $('.multiimage-label').each(function (index, val) {
        $(val).text($(val).closest('.form-group').find('.multiimage-select').find('option:selected').text());
    });
    $('form.ams-application-form .regex-msg').each(function () {
        if (!$(this).parents('.form-group').find('input').val()) {
            $(this).css('display', 'none');
        }
    })
    if (store.getItem('country') == 'India' || store.getItem('country') == '5f02e38c6f3de87babe20cd2') {
        if ($("#state") && $("#state").length) {
            setState(store.getItem("country"));
            //$("#state").trigger("change");
            $('.reimbursement-state').val(store.getItem('state')).attr('disabled', 'true');
            $('select[name=state]').parents(".has-error").removeClass("has-danger").removeClass("has-error");
        }
    }
    /*if (store && store.getItem("role") == "GovernmentBody") {
        var $reimbursementSelection = $("form.ams-application-form select[name=reimbursementType]");
        if($reimbursementSelection.length>0) {
            setStateConfigList({stateId: store.getItem("state")}, SIH.getEndPoint($reimbursementSelection.data("path")), $reimbursementSelection);
        }
        var $incentiveSelection = $("form.ams-application-form select[name=fiscalIncentiveType]");
        if($incentiveSelection.length>0){
            setStateConfigList({stateId: store.getItem("state")}, SIH.getEndPoint($incentiveSelection.data("path")), $incentiveSelection);
        }
    }*/
    if (store.getItem("token")) {
        if (store.getItem('published')) {
            if (sessionStorage.getItem('amsApplicationId')) {
                fetchAMSApplicationDetails($('div.ams-app-container').data('fetch-api'), $('div.ams-app-container').data('errorMsg'));
            }
        } else {
            disableAMSApplicationForm();
            $('.under-moderation-modal').modal('show');
        }
    } else {
        disableAMSApplicationForm();
        $("#loginModal").modal("show");
    }
};

/*function setStateConfigList(params, apiPath, $selection) {
    var stateConfigs;
    if (apiPath) {
        $.ajax({
            url: apiPath,
            type: 'GET',
            data: params,
            async: false,
            beforeSend: setAuthTokenHeader,
            success: function (data) {
                if (typeof data == "string") {
                    data = JSON.parse(data);
                }
                if ($selection) {
                    $selection.find('option').remove();
                    $.each(data, function (index, item) {
                        var o = new Option(item.text, item.id);
                        $selection.append(o);
                    });
                } else {
                    stateConfigs = data;
                }
            },error: function (response) {
                if (response && response.responseText) {
                    disableAMSApplicationForm();
                    $('.ams-error-modal .modal-body p').html(response.responseText);
                    $('.ams-error-modal').modal('show');
                }
            }
    });
    }
    return stateConfigs;
}*/
function setStateConfigList(apiPath) {
    var stateConfigs = {};
    if (apiPath) {
        $.ajax({
            url: apiPath,
            type: 'GET',
            async: false,
            success: function (data) {
                stateConfigs = data;
            }, error: function (data) {
                console.log("Error while loading options");
            }
        });
    }
    return stateConfigs;
}

function disableAMSApplicationForm() {
    $(".ams-application-form input, .ams-application-form select").prop("disabled", true);
    $(".ams-application-form textarea").each(function () {
        $(this).next().find(".note-editable").attr("contenteditable", false);
    });
}

function fetchSavedAppData(applicationId) {
    $.ajax({
        url: SIH.getEndPoint("/api/auth/ams/application/applicationApplicantResponse/" + applicationId),
        type: 'GET',
        async: false,
        contentType: 'application/json',
        headers: {'X-Auth-Token': store.getItem("token"), 'Content-Type': 'application/json'}
    }).done(function (response) {
        if (response && response.status) {
            $(".form-button.apply-btn.submitted-btn").show();
        }
    }).error(function (response) {
    });
}
$(document).on("ready", function(){
   $(".ams-application-options").closest(".select-prog-container").addClass("selet-prog-type");
   $(".accelerator-program-detail-wrap").closest(".select-prog-container").addClass("accelerator-program-detail-outer");
   $(".ams-button-header-wrapper").closest(".row-container").addClass("ams-button-header-outer");
   $(".submit-section-bottom").closest(".columncontrol").addClass('submit-sec-outer');
});
$(document).on("ready", function(){
    $('#scheduledTime').on('changeDate', function(e) {
        var startdate = new Date($('#scheduledTime').data('date'));
        var mindate = (startdate.getMonth()+1) + "/" + startdate.getDate() + "/" + startdate.getFullYear();
        $("input[name=endDate]").datepicker('option','minDate',mindate);
    });
    $('input[name=workshopStartDate]').datetimepicker().on('changeDate', function(e) {
        var startdate = $('input[name=workshopStartDate]').datepicker('getDate');
        var mindate = (startdate.getMonth()+1) + "/" + startdate.getDate() + "/" + startdate.getFullYear();
        $("input[name=workshopEndDate]").datepicker('option','minDate',mindate);
    });
    $('input[name=endDate]').datetimepicker().on('changeDate', function(e) {
        var startdate = $('input[name=endDate]').datepicker('getDate');
        var mindate = (startdate.getMonth()+1) + "/" + startdate.getDate() + "/" + startdate.getFullYear();
        if($("input[name=resultDate]")) {
            $("input[name=resultDate]").datepicker('option','minDate',mindate);
        }
        if($("input[name=workshopStartDate]")) {
            $("input[name=workshopStartDate]").datepicker('option','minDate',mindate);
        }
    });
});
$(window).load(function(){
    $('.ams-application-dashboard .timeline-inner-wrap  .accelerators-subprograms').mCustomScrollbar({'autoHideScrollbar': false});
})
var applicationObj = {};

Handlebars.registerHelper("addOne", function (index) {
    return index + 1;
});

Handlebars.registerHelper("isRowRemovable", function () {
    return applicationObj.additionalQuestion.length > 1 ? "ams-remove-row" : "";
});

Handlebars.registerHelper("disable", function (isLast, options) {
    if (isLast && applicationObj.additionalQuestion.length < maxAdditionalQuestion)
        return options.fn(this);
    else
        return ""
});

Handlebars.registerHelper("isChecked", function (index) {
    return isMandatoryAdditionalQuestion(index) ? "checked='checked'" : "";
});

var isMandatoryAdditionalQuestion = function (index) {
    return applicationObj.additionalQuestion[index].mandatory;
};

var toggleMandatory = function (index) {
    applicationObj.additionalQuestion[index].mandatory = !applicationObj.additionalQuestion[index].mandatory;
};

var setQuestionTitle = function (index, element) {
    applicationObj.additionalQuestion[index].question.questionTitle = $(element).val();
};
var setQuestionValueType = function (index, element) {
    applicationObj.additionalQuestion[index].question.valueType = $(element).val();
};

var getAmsQuestionnaire = function (amsApplicationId) {
    getExistingApplication(amsApplicationId);
};

function getAMSQuestions(amsApplicationId, applicationData) {
    var type = sessionStorage.getItem('appIncentiveType');
    var url = SIH.getEndPoint("/api/auth/ams/questionnaire/list");
    if (type && type !== "undefined") {
        url = url + "?category=" + type;
    } else {
        type = undefined;
    }
    $.ajax({
        url: url,
        type: 'GET',
        contentType: "application/json",
        headers: {
            "X-Auth-Token": store.getItem("token")
        },
        body: {"category": sessionStorage.getItem('appIncentiveType')},
        success: function (data) {
            applicationObj = applicationData;
            var questionList = {
                'Personal and team Details': [],
                'General Questions': [],
                'Solution Details': [],
                'Revenue Model': [],
                'Competition': [],
                'Road Map Ahead': []
            };
            var excludedList = [];
            if (sessionStorage.getItem('appIncentiveType')) {
                var reimbursementConfigs = setStateConfigList("/services/tags/reimbursements.json");
                $.each(reimbursementConfigs, function (index, item) {
                    questionList[item.id] = [];
                    excludedList.push(item.id);
                });
                var incentiveConfigs = setStateConfigList("/services/tags/incentives.json");
                $.each(incentiveConfigs, function (index, item) {
                    questionList[item.id] = [];
                    excludedList.push(item.id);
                });
            }
            $.each(questionList, function (index, val) {
                questionList[index] = data[index];
            });
            var categoryCount = 1;
            $.each(questionList, function (key, val) {
                if (val && ((!type && $.inArray(key, excludedList) === -1) || type)) {
                    var currentTab = "categoryTab" + categoryCount;
                    if ($.inArray(key, excludedList) != -1) {
                        key = sessionStorage.getItem("appIncentiveTitle");
                    }
                    $(".dynamicTabs").append("<li role=\"presentation\" class=\"desktop-tabs " + (categoryCount === 1 ? "active" : "") + "\">\n" +
                        "                <a href=\"#" + currentTab + "\" role=\"tab\" data-toggle=\"tab\">" + key + "</a>\n" +
                        "            </li>");
                    $(".question-tab-content").append("<div id=\"" + currentTab + "\" role=\"tabpanel\" class=\"tab-pane question-content-section table-responsive " + (categoryCount === 1 ? "active" : "") + "\">\n" +
                        "            <table class=\"parentTable table\">\n" +
                        "                <tr>\n" +
                        "                    <th class=\"small-column\">No.</th>\n" +
                        "                    <th class=\"question-list\">Question</th>\n" +
                        "                    <th class=\"small-column column-align\">Include</th>\n" +
                        "                    <th class=\"small-column column-align\">Mandatory</th>\n" +
                        "                </tr>\n" +
                        "            </table>\n" +
                        "        </div>");
                    var rowCount = 1;
                    $.each(val, function (k, v) {
                        var html;
                        if (!v.parentId) {
                            switch (v.attributeType) {
                                case "SECTION":
                                    html = populateSection(v, val, rowCount);
                                    break;
                                case "LIST":
                                    html = populateSection(v, val, rowCount);
                                    break;
                                case "HEADING":
                                    html = populateHeadingContainer(v, val, rowCount);
                                    break;
                                default:
                                    html = populateDefaultRow(v, rowCount);
                                    break;
                            }
                            $("#" + currentTab + " table.parentTable").append(html);
                            rowCount++;
                        }
                    });
                    categoryCount++;
                }
            });
            var typeTitleCase = typeToTitleCase(applicationObj.application.formType);
            $('.select-prog-container .event-details-icon').siblings('.application-list-title').text("Add Your " + typeTitleCase + " Details");
            applicationObj.applicationQuestionDetailsList.forEach(function (element) {
                $("#" + element.question.name + "-include").prop("checked", true);
                if (element.mandatory) {
                    $("#" + element.question.name + "-mandatory").prop("checked", true);
                }
            });
            markCategoryAsDone();
            createAdditionalQuestionTab("categoryTab" + categoryCount, "Additional Questions");
            addAdditionQuestionIfBlank();
            renderAdditionalQuestionData();
            registerAddQuestionEvent();
            changeBtnList();
            registerTabChangedEvent();

        }, error: function (error) {
            console.error("Something bad happened at Server while fetching the question list. Please check the following error log.");
            console.error(error);
            if (error.responseJSON) {
                showErrorModal("Something went wrong. Please try again later.", goToDashboard);
            } else if (error.responseText) {
                showErrorModal(error.responseText, goToDashboard);
            } else {
                showErrorModal("Something went wrong. Please try again later.", goToDashboard);
            }
        }
    });
}

function addTabLink(context) {
    var source = document.getElementById("additional-question-tab-link").innerHTML;
    var template = Handlebars.compile(source);
    $(".dynamicTabs").append(template(context));
}

function addTabBody(context) {
    var source = document.getElementById("additional-question-tab").innerHTML;
    var template = Handlebars.compile(source);
    $(".question-tab-content").append(template(context));
}

var createAdditionalQuestionTab = function (currentTab, key) {
    var context = {currentTab: currentTab, heading: key};
    addTabLink(context);
    addTabBody(context);
};

var Question = function (title, attributeType, valueType, category) {
    this.questionTitle = title;
    this.attributeType = attributeType;
    this.valueType = valueType;
    this.category = category;

};

function renderAdditionalQuestionData() {
    var source = document.getElementById("additional-question-tab-data").innerHTML;
    var template = Handlebars.compile(source);
    $("#additional-question-table tbody").html(template({additionalQuestion: applicationObj.additionalQuestion}));
    $('.additional-question-value-type,.additional-question-value-type-doc').each(function () {
        if ($(this).data("value")) {
            $(this).val($(this).data("value"));
        }
        console.log("value"+$(this).data("value"))
        if ($(this).data("value") && $(this).data("value") === "SELECTION") {
            $(this).closest('td').find('.ams-question-option').removeClass('display-n');
            $(this).closest('td').find('.additional-question-value-type').addClass('display-n');


        }
        if($(this).data("value") && ($(this).data("value") === "IMAGE" || $(this).data("value") === "DOCUMENT"|| $(this).data("value") ==="VIDEO")){
            $(this).closest('td').find('.ams-question-option').addClass('display-n');
            $(this).closest('td').find('.additional-question-value-type').addClass('display-n');
            $(this).closest('td').find('.additional-question-value-type-doc').removeClass('display-n');
            $(this).closest('td').find('.additional-question-value-type-doc').removeAttr('disabled');

        }
        else {
            //$(this).closest('td').find('.ams-question-option').addClass('display-n');
            //$(this).closest('td').find('.additional-question-value-type').removeClass('display-n')
            //$(this).closest('td').find('.additional-question-value-type-doc').removeClass('display-n');
        }
    });
    $('.additional-question-type').each(function () {
        var questionTypeArray = ["RADIO", "DROPDOWN", "CHECKBOX", "TEXTAREA"];
        if ($(this).data("value")) {
            $(this).val($(this).data("value"));
            if ($.inArray($(this).data("value"), questionTypeArray) < 0) {
                $(this).closest('td').find(".additional-question-value-type").removeAttr('disabled');
            }
        }
    });
}

function addAdditionQuestionIfBlank() {
    applicationObj.additionalQuestion = applicationObj.additionalQuestion && applicationObj.additionalQuestion.length ?
        applicationObj.additionalQuestion : [{
            question: new Question("", "", "", ""),
            mandatory: false
        }];
}

var getExistingApplication = function (amsApplicationId) {
    //getting existing data if any.
    $('#modal-loader').modal('show');
    $.ajax({
        url: SIH.getEndPoint("/api/auth/ams/application/" + amsApplicationId + "/questions"),
        type: 'GET',
        contentType: "application/json",
        headers: {
            "X-Auth-Token": store.getItem("token")
        },
        success: function (data) {
            if (data) {
                applicationObj = data;
                if (['APPROVED', 'SUBMITTED', 'REJECTED'].indexOf(applicationObj.application.status) > -1) {
                    showErrorModal("You cannot change an application under review. Please contact support team for any concerns!", goToDashboard);
                }
                if (['DETAILS_DRAFTED'].indexOf(applicationObj.application.status) > -1) {
                    //showErrorModal("Please fill the application details first!", goToDashboard);
                }
                if (data.application.reimbursementType) {
                    sessionStorage.setItem('appIncentiveType', data.application.reimbursementType.id);
                    sessionStorage.setItem('appIncentiveTitle', data.application.reimbursementType.text);
                }
                if (data.application.fiscalIncentiveType) {
                    sessionStorage.setItem('appIncentiveType', data.application.fiscalIncentiveType.id);
                    sessionStorage.setItem('appIncentiveTitle', data.application.fiscalIncentiveType.text);
                }
                getAMSQuestions(amsApplicationId, data);
            }
            $('#modal-loader').modal('hide');
        },
        error: function (error) {
            console.error("Something bad happened at Server while fetching the existing application. Please check the following error log.");
            console.error(error);
            $('#modal-loader').modal('hide');
            if (error.responseJSON) {
                showErrorModal("Something went wrong. Please try again later.", goToDashboard);
            } else if (error.responseText) {
                showErrorModal(error.responseText, goToDashboard);
            } else {
                showErrorModal("Something went wrong. Please try again later.", goToDashboard);
            }

        }
    })
};

var typeToTitleCase = function (str) {
    str = str.toLowerCase().split('_');
    for (var i = 0; i < str.length; i++) {
        str[i] = str[i].charAt(0).toUpperCase() + str[i].slice(1);
    }
    return str.join(' ');
};


var populateDefaultRow = function (question, rowCount) {
    return "<tr>\n" +
        "                    <td class='snoCol'>" + rowCount + ".</td>\n" +
        "                    <td class='questionCol'>" + question.questionTitle + "</td>\n" +
        "                    <td class='includeCol'>\n" +
        "                        <label class=\"control control--checkbox\" for=\"" + question.name + "-include\">\n" +
        "                            <input type=\"checkbox\" class=\"form-control addAll include\" id=\"" + question.name + "-include\" name=\"include\" value=\"" + question.name + "\" onclick=\"markIncluded(this)\" >\n" +
        "                            <div class=\"control__indicator\"></div>\n" +
        "                        </label>\n" +
        "                    </td>\n" +
        "                    <td class='mandatoryCol'>\n" +
        "                        <label class=\"control control--checkbox\" for=\"" + question.name + "-mandatory\">\n" +
        "                            <input type=\"checkbox\" class=\"form-control addAll mandatory\" id=\"" + question.name + "-mandatory\" name=\"mandatory\" value=\"" + question.name + "\" onclick=\"markMandatory(this)\" >\n" +
        "                            <div class=\"control__indicator\"></div>\n" +
        "                        </label>\n" +
        "                    </td>\n" +
        "                </tr>"
};

var populateSection = function (question, allQuestions, rowCount) {
    var childrenQuestions = allQuestions.filter(function (que) {
        return que.parentId === question.name
    });

    var trElement = $(populateDefaultRow(question, rowCount));
    trElement.find("td.questionCol").append("<ul></ul>");
    $.each(childrenQuestions, function (index, value) {
        trElement.find("td.questionCol ul").append("<li>" + value.questionTitle + "</li>");
    });
    return "<tr>" + trElement.html() + "</tr>";     // because .html() returns innerHTML
};

var populateHeadingContainer = function (question, allQuestions, rowCount) {
    var childrenQuestions = allQuestions.filter(function (que) {
        return que.parentId === question.name
    });

    var parentHtml = "<tr id=" + question.name + ">\n" +
        "                    <td class='snoCol'>" + rowCount + ".</td>\n" +
        "                    <td class='questionCol' colspan='3'><b>" + question.questionTitle + "</b></td>\n" +
        "               </tr>";

    var trElement = $(parentHtml);
    trElement.find("td.questionCol").append("<table class=\"inner-table\"><tbody><tr><th>No.</th><th>Question</th><th class=\"text-center\">Include</th><th class=\"text-center\">Mandatory</th></tr></tbody></table>");

    $.each(childrenQuestions, function (index, child) {
        var childHtml = "<tr>\n" +
            "                    <td>" + (index + 1) + "</td>\n" +
            "                    <td>" + child.questionTitle + "</td>\n" +
            "                     <td class=\"text-center\">\n" +
            "                        <label class=\"control control--checkbox\" for=\"" + child.name + "-include\">\n" +
            "                            <input type=\"checkbox\" class=\"form-control addAll include\" id=\"" + child.name + "-include\" name=\"include\" value=\"" + child.name + "\" onclick=\"markIncluded(this)\" >\n" +
            "                            <div class=\"control__indicator\"></div>\n" +
            "                        </label>\n" +
            "                    </td>\n" +
            "                    <td class=\"text-center\">\n" +
            "                        <label class=\"control control--checkbox\" for=\"" + child.name + "-mandatory\">\n" +
            "                            <input type=\"checkbox\" class=\"form-control addAll mandatory\" id=\"" + child.name + "-mandatory\" name=\"mandatory\" value=\"" + child.name + "\" onclick=\"markMandatory(this)\" >\n" +
            "                            <div class=\"control__indicator\"></div>\n" +
            "                        </label>\n" +
            "                    </td>\n" +
            "                </tr>";
        trElement.find("td.questionCol table.inner-table tbody").append(childHtml);
    });
    return "<tr>" + trElement.html() + "</tr>";     // because .html() returns innerHTML

};

var markMandatory = function (element) {
    cleanMessages();
    var isChecked = $(element).is(":checked");
    var existingElement = applicationObj.applicationQuestionDetailsList.find(function (ele) {
        return ele.question.name === element.value;
    });
    if (existingElement) {
        existingElement.mandatory = isChecked;
    } else if (isChecked) {
        applicationObj.applicationQuestionDetailsList.push({
            "question": {"name": element.value},
            "mandatory": isChecked
        });
        $("#amsQuestionnaire").find("#" + element.value + "-include").prop('checked', true);
    }
};


var markIncluded = function (element) {
    cleanMessages();
    var isChecked = $(element).is(":checked");
    if (isChecked) {
        applicationObj.applicationQuestionDetailsList.push({"question": {"name": element.value}, "mandatory": false});
    } else {
        var existingElement = applicationObj.applicationQuestionDetailsList.find(function (ele) {
            return ele.question.name === element.value;
        });
        var index = applicationObj.applicationQuestionDetailsList.indexOf(existingElement);
        applicationObj.applicationQuestionDetailsList.splice(index, 1);
        $("#amsQuestionnaire").find("#" + element.value + "-mandatory").prop('checked', false);
    }
};

var validateAdditionalQuestionSelection = function () {
    var isAdditionalQuestionPopulated = applicationObj && applicationObj.additionalQuestion.length;
    var isFirstAdditionalQuestionPopulated = isAdditionalQuestionPopulated && applicationObj.additionalQuestion[0].question.questionTitle;
    if (isAdditionalQuestionPopulated && applicationObj.additionalQuestion.length === 1 && !isFirstAdditionalQuestionPopulated) {
        applicationObj.additionalQuestion = [];
    }
    var isAllAdditionalQuestionPopulated = true;
    if (isAdditionalQuestionPopulated) {
        isAllAdditionalQuestionPopulated = !Boolean(applicationObj.additionalQuestion.filter(function (questionMapping) {
            return !questionMapping.question.questionTitle;
        }).length);
    }
    if (!isAllAdditionalQuestionPopulated) {
        showErrorMessage("Additional Question should not be left blank.");
    }
    return isAllAdditionalQuestionPopulated;
};

function validateAMSAdditionalQuestion() {
    var isValid = true;
    var questionTypeArray = ["RADIO", "DROPDOWN", "CHECKBOX"];
    var additionalQuestions = $('#additional-question-table .additinal-question-section');
    var additionalQuestionsLen = additionalQuestions.length;
    var additinalQuestionFlag = true;
    if (additionalQuestions.length === 1) {
        var addQ = additionalQuestions[0];
        if (!$(addQ).find('.ams-question-field').val()
            && !$(addQ).find('.ams-question-field').val().trim()
            && !$(addQ).find('.additional-question-type').val()
            && !$(addQ).find('.additional-question-value-type').val()
            && !$(addQ).find('.additional-question-value-type-doc').val()){
            additinalQuestionFlag = false;
        }
    }
    if (additinalQuestionFlag) {
        $(additionalQuestions).each(function (index, ele) {
            console.log("valueElement"+ele);
            var errorMsg = "";
            if (!$(ele).find('.ams-question-field').val() || ($(ele).find('.ams-question-field').val() && $(ele).find('.ams-question-field').val().trim().length === 0)) {
                $(ele).find('.additional-question-container').addClass("has-error");
                isValid = false;
                errorMsg = "Question Title is Mandatory";
            } else {
                $(ele).find('.additional-question-container').removeClass("has-error");
            }
            if (!$(ele).find('.additional-question-type').val()) {
                $(ele).find('.additional-attribute-type').addClass("has-error");
                isValid = false;
                errorMsg += "<br/>Question Type is Mandatory";
            } else {
                $(ele).find('.additional-attribute-type').removeClass("has-error");
            }
            if ((!$(ele).find('.additional-question-value-type').val() && !$(ele).find('.additional-question-value-type-doc').val())) {
                $(ele).find('.additional-value').addClass("has-error");
                isValid = false;
                errorMsg += "<br/>Value Type is Mandatory";
            } else {
                $(ele).find('.additional-value').removeClass("has-error");
            }
            if (!isValid) {
                showErrorMessage("Issues in Additional Questions - " + errorMsg);
            }
        });
        $('.ams-question-option').each(function (index, val) {
            var flag = false;
            var options = [];
            if ($(val).find('.ams-question-option-field').length > 0) {

                $.each($(val).find('.ams-question-option-field'), function () {

                    if ($(this).val().trim() && $(this).val().length > 0) {
                        flag = true;
                        options.push($(this).val().trim());
                        if($(val).hasClass("has-error")){

                            $(val).removeClass("has-error");
                        }
                    }
                    else{
                        flag =false;
                        if (!flag && $.inArray($(val).closest('td').find('.additional-question-type').val(), questionTypeArray) >= 0) {
                            showErrorMessage("Please Add Value in Option field");
                            isValid = false;
                            $(val).addClass("has-error");
                        }
                    }

                });
                applicationObj.additionalQuestion[index].question.options = options;
            }
        });
    }
    return isValid;
}


function validateAdditionalQuestionOptions(flag,isValid,val,questionTypeArray){


}
var submitApplication = function (status, callback) {
    applicationObj.status = status;
    var isValid = validateAMSAdditionalQuestion();
    if (isValid) {
        var isAdditionQuestionValid = validateAdditionalQuestionSelection();
        if (isAdditionQuestionValid && (applicationObj && applicationObj.application && applicationObj.applicationQuestionDetailsList.length)) {
            $('#modal-loader').modal('show');
            var saveSuccess = function (data) {
                if (data) {
                    applicationObj = data;
                    sessionStorage.setItem("questionReq",JSON.stringify(applicationObj));
                    sessionStorage.setItem("applicationObj",JSON.stringify(data));
                    sessionStorage.setItem("amsApplicationId",applicationObj.application.id);
                    addAdditionQuestionIfBlank();
                    if (status === 'DETAILS_DRAFTED') {
                        renderAdditionalQuestionData();
                        showSuccessMessage("Application saved successfully.")
                    } else if (status === 'SUBMITTED') {
                        showSuccessMessage("Application saved successfully.");
                        //sessionStorage.removeItem("amsApplicationId");
                        //goToDashboard();
                    }
                }
                $('#modal-loader').modal('hide');
            };
            $.ajax({
                url: SIH.getEndPoint("/api/auth/ams/application/" + applicationObj.application.id + "/questions"),
                type: 'POST',
                contentType: "application/json",
                headers: {
                    "X-Auth-Token": store.getItem("token")
                },
                async:false,
                data: JSON.stringify(applicationObj),
                success: callback ? callback : saveSuccess,
                error: function (data) {
                    if (data && data.responseText) {
                        showErrorMessage(data.responseText);
                    } else {
                        addAdditionQuestionIfBlank();
                        isValid = false;
                        console.error("Something bad happened at Server while fetching the existing application. Please check the following error log.");
                        console.error(data);
                    }
                    $('#modal-loader').modal('hide');
                }
            })
        } else if (!isAdditionQuestionValid) {
            addAdditionQuestionIfBlank();
            console.error("Invalid Additional Questions");
            isValid = false;
        } else {
            addAdditionQuestionIfBlank();
            console.error("Cannot save application without any question selected");
            showErrorMessage("At least 1 question should be selected.");
            isValid = false;
        }
    }
    return isValid;
};

function goToDashboard() {
    window.location = $('.dashboard').attr('href');
}

function goToNextTab() {
    $("li.active").next(".desktop-tabs").find("a").click();
    scrollTo(0, $("li.active.desktop-tabs").offset().top - 200);
    markCategoryAsDone();
}

function goToPrevTab() {
    $("li.active").prev(".desktop-tabs").find("a").click();
    scrollTo(0, $("li.active.desktop-tabs").offset().top - 200);
    markCategoryAsDone();
}

function changeBtnList() {
    var allTabs = $("li.desktop-tabs");
    var activeTab = $("li.active.desktop-tabs")[0];
    var firstTab = allTabs.first()[0];
    var lastTab = allTabs.last()[0];
    var formType = null;

    if(sessionStorage.getItem("programDetailsReq")) {
        formType = JSON.parse(sessionStorage.getItem("programDetailsReq")).formType;
    }

    if (activeTab === firstTab) {
        $(".action-btn-list:visible").html(
            "                <li>\n" +
            "                    <a href='javascript:void(0)' onclick=\"goToDetailsPage()\" class=\"back-btn\"> &lt; Previous</a>\n" +
            "                </li>\n" +
            "                <li>\n" +
            "                    <button type=\"button\" onclick=\"previewApplication()\" class=\"preview-btn\">preview</button>\n" +
            "                </li>\n" +
            "                <li>\n" +
            "                    <button type=\"button\" onclick=\"submitApplication('DETAILS_DRAFTED')\" class=\"draft-btn\">save as draft</button>\n" +
            "                </li>\n" +
            "                <li>\n" +
            "                    <button type=\"button\" onclick=\"goToNextTab()\" class=\"next-btn\">next</button>\n" +
            "                </li>");
    } else if (activeTab !== lastTab) {
        $(".action-btn-list:visible").html(
            "                <li>\n" +
            "                    <button type=\"button\" onclick=\"goToPrevTab()\" class=\"prev-btn\"> &lt; previous</button>\n" +
            "                </li>\n" +
            "                <li>\n" +
            "                    <button type=\"button\" onclick=\"previewApplication()\" class=\"preview-btn\">preview</button>\n" +
            "                </li>\n" +
            "                <li>\n" +
            "                    <button type=\"button\" onclick=\"submitApplication('DETAILS_DRAFTED')\" class=\"draft-btn\">save as draft</button>\n" +
            "                </li>\n" +
            "                <li>\n" +
            "                    <button type=\"button\" onclick=\"goToNextTab()\" class=\"next-btn\">next</button>\n" +
            "                </li>");
    } else {
        if(formType != null && formType == 'WORKSHOP'){
            $(".action-btn-list:visible").html(
                "                <li>\n" +
                "                    <button type=\"button\" onclick=\"goToPrevTab()\" class=\"prev-btn\"> &lt;  previous</button>\n" +
                "                </li>\n" +
                "                <li>\n" +
                "                    <button type=\"button\" onclick=\"submitApplication('DETAILS_DRAFTED')\" class=\"draft-btn\">save as draft</button>\n" +
                "                </li>\n" +
                "                <li>\n" +
                "                    <button type=\"button\" onclick=\"submitParameterApplication('SUBMIT',false,'"+formType+"')\" class=\"next-btn\">Next</button>\n" +
                "                </li>"
            )
        } else {
            $(".action-btn-list:visible").html(
                "                <li>\n" +
                "                    <button type=\"button\" onclick=\"goToPrevTab()\" class=\"prev-btn\"> &lt;  previous</button>\n" +
                "                </li>\n" +
                "                <li>\n" +
                "                    <button type=\"button\" onclick=\"previewApplication()\" class=\"preview-btn\">preview</button>\n" +
                "                </li>\n" +
                "                <li>\n" +
                "                    <button type=\"button\" onclick=\"submitApplication('DETAILS_DRAFTED')\" class=\"draft-btn\">save as draft</button>\n" +
                "                </li>\n" +
                "                <li>\n" +
                "                    <button type=\"button\" onclick=\"goToParameterSelectorPage()\" class=\"next-btn\">Next</button>\n" +
                "                </li>"
            )
        }
    }
}

function markCategoryAsDone() {
    var tabList = $("li.desktop-tabs");
    tabList.each(function (index, element) {
        var href = $(element).find("a").attr("href");
        var additionalQues = $(href).find('.ams-question-field');
        if (additionalQues && additionalQues.val() && additionalQues.val().length > 0) {
            $(element).addClass("question-selected");
        }
        else if ($(href).find("input:checkbox:checked").length > 0) {
            $(element).addClass("question-selected");
        } else {
            $(element).removeClass("question-selected");
        }
    })
}

var registerTabChangedEvent = function () {
    $('#amsQuestionnaire a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
        markCategoryAsDone();
        changeBtnList();
    });
};

var registerAddQuestionEvent = function () {
    var questionTypeArray = ["RADIO", "DROPDOWN", "CHECKBOX"];
    $(document).on('click', '.ams-add-btn', function (event) {
        var flag = false;
        $("#additional-question-table .text-danger").remove();
        $("#additional-question-table tr").each(function(evt) {
            if ($.inArray($(this).find('.additional-question-type').val(), questionTypeArray) >= 0) {
                $(this).find(".ams-question-option-field").each(function() {
                    if(this.value == "") {
                        flag = true;
                        $(this).closest(".repeat-fields").append("<span class='text-danger'>Please enter value.</span>");
                    }
                });
            }
        });
        if(!flag) {
            if ($.inArray($(event.target).closest('td').find('.additional-question-type').val(), questionTypeArray) >= 0) {
                var options = [];
                $(event.target).closest('td').find('.ams-question-option').find('.ams-question-option-field').each(function () {
                    options.push($(this).val());
                    applicationObj.additionalQuestion[$(event.target).closest('td').data('index')].question.options = options;
                });
            }
            applicationObj.additionalQuestion.push({
                question: new Question("", "", "", ""),
                mandatory: false
            });
            renderAdditionalQuestionData();
        }
    });
    $(document).on('change', '.additional-question-type', function (event) {
        var $target = $(event.target);
        if ($target.val()) {
            $target.closest('td').find('.additional-question-value-type').removeAttr("disabled");
        }
        var index = $target.closest('td').data('index');
        applicationObj.additionalQuestion[index].question.attributeType = $(event.target).val();
        if ($.inArray($target.val(), questionTypeArray) >= 0) {
            $target.closest('td').find('.ams-question-option').removeClass('display-n');
            $target.closest('td').find('.additional-question-value-type').val('SELECTION').trigger("change");
            $target.closest('td').find('.additional-question-value-type').addClass('display-n');
            $target.closest('td').find('.additional-question-value-type-doc').addClass('display-n');
        } else if ($target.val() === 'TEXTAREA') {
            $target.closest('td').find('.ams-question-option').addClass('display-n');
            $target.closest('td').find('.additional-question-value-type').removeClass('display-n').val('ALPHA_NUM').trigger("change").attr('disabled', 'disabled');
            $target.closest('td').find('.additional-question-value-type-doc').addClass('display-n');
        }
        else if ($target.val() === 'DOCUMENT') {
            $target.closest('td').find('.ams-question-option').addClass('display-n');
            $target.closest('td').find('.additional-question-value-type').removeClass('display-n').val('URL').trigger("change").attr('disabled', 'disabled');
            $target.closest('td').find('.additional-question-value-type-doc').addClass('display-n');
        }
        else if ($target.val() === 'FILE'){
            $target.closest('td').find('.ams-question-option').addClass('display-n');
            $target.closest('td').find('.additional-question-value-type').val("");
            $target.closest('td').find('.additional-question-value-type').addClass('display-n');
            $target.closest('td').find('.additional-question-value-type-doc').removeClass('display-n');
            $target.closest('td').find('.additional-question-value-type-doc').removeAttr("disabled");
        }
        else {
            $target.closest('td').find('.ams-question-option').addClass('display-n');
            $target.closest('td').find('.additional-question-value-type').val("");
            $target.closest('td').find('.additional-question-value-type').removeClass('display-n')
            $target.closest('td').find('.additional-question-value-type-doc').addClass('display-n');
        }
    });
    $(document).on('click','.additional-question-value-type-doc',function (event) {

        $(this).closest('td').find('.additional-question-value-type').addClass('display-n');
        $(this).closest('td').find('.additional-question-value-type-doc').removeAttr("disabled");
    });

    $(document).on('click', '.ams-add-option-btn', function (event) {
        $('.ams-option-div').clone();
    });
};

var removeRow = function (index) {
    applicationObj.additionalQuestion.splice(index, 1);
    renderAdditionalQuestionData();
};

var showErrorModal = function (errorMessage, callback) {
    $('.ams-error-modal .modal-body p').html(errorMessage);
    $('.ams-error-modal').modal('show').on('hidden.bs.modal', callback);
};

var showErrorMessage = function (errorMessage) {
    var amsError = $('#ams-error');
    amsError.show();
    $('#ams-success').hide();
    amsError.html(errorMessage);
    scrollTo(0, amsError.offset().top - 200);
};

var showSuccessMessage = function (successMessage) {
    $('#ams-error').hide();
    var amsSuccess = $('#ams-success');
    amsSuccess.show();
    amsSuccess.html(successMessage);
    scrollTo(0, amsSuccess.offset().top - 200);
};

var cleanMessages = function () {
    $('#ams-success').hide();
    $('#ams-error').hide();
};

var previewApplication = function () {
    var previewCallback = function (data) {
        if (data) {
            applicationObj = data;
            addAdditionQuestionIfBlank();
            var $form = $("#amsQuestionnaire");
            var previewBaseUrl = $form.data("previewBaseUrl");
            window.open(previewBaseUrl + "/" + applicationObj.application.type.toLowerCase().replace("_", "-") + ".html?applicationId=" + applicationObj.application.id);
        }
        $('#modal-loader').modal('hide');
    };
    submitApplication("DETAILS_DRAFTED", previewCallback);
};

var goToDetailsPage = function () {
    var $form = $("#amsQuestionnaire");
    var applicationDetailBaseUrl = $form.data("applicationDetailBaseUrl");
    window.location.href = applicationDetailBaseUrl + "/" + applicationObj.application.type.toLowerCase().replace("_", "-") + "-details.html";
};

var goToParameterSelectorPage = function(){
    var isValid = submitApplication('DETAILS_DRAFTED');
    if(isValid){
        $('#modal-loader').modal('show');
        var amsApplicationId = sessionStorage.getItem("amsApplicationId");
        if(amsApplicationId) {
            var parameterSelectionBaseUrl = $("#amsQuestionnaire").data('parameter-selection-base-url');
            window.location.href = parameterSelectionBaseUrl + ".html?applicationId=" + amsApplicationId;
        } else {
            checkUserProfileExists();
        }
        $('#modal-loader').modal('hide');
    }
};

$(document).ready(function(){
    var formType = null;
    if(sessionStorage.getItem("programDetailsReq")) {
		formType = JSON.parse(sessionStorage.getItem("programDetailsReq")).formType;
    }
    if(formType != null && formType ==  'WORKSHOP' && $('.ams-timeline-title').data('application-type') == undefined) {
        $('.ams-timeline-wrapper .step-box:nth-child(7)').hide();
        $('.ams-timeline-wrapper  .arrow-img:nth-child(8)').hide();
    }
});
$.rbl_challenge_form = function () {
    var $form = $("form[name='RblForm']");
    var formData = {};
    var isValidated = true;
    var isUserAplicable = false;
    var role = store.getItem('role');
    var $submitRblForm = $form.find("input[name='rblFormSubmit']");
    var $saveRblForm = $form.find("input[name='rblFormSave']");
    var $rblChallengeModals = $(".rbl-challenge-modals");

    if (store.getItem("token")) {
        $("input[name='id']").val(store.getItem("uniqueId"));
        if (!store.getItem("published")) {
            disableRBLForm();
            $('.under-moderation-modal').modal('show');
        } else {
            $form.find('input.form-control, select.form-control, textarea.form-control').removeAttr("disabled", "disabled");
            $form.find("input[type=button]").removeAttr("disabled", "disabled");

            if (role && (role.toLowerCase() === 'startup' || role.toLowerCase() === 'individual')) {
                getEligible();
            } else {
                $rblChallengeModals.find('.rbl-eligibility-modal').modal('show');
                $rblChallengeModals.find('.rbl-eligibility-modal button').on('click', function () {
                    window.location = $('.logo').attr('href');
                });
            }
        }
    } else {
        disableRBLForm();
        store.getItem("no-profile") ? $('.complete-profile-modal').modal('show') : $(".login .sign-in").trigger('click');
    }

    function disableRBLForm() {
        $form.find('input.form-control, select.form-control, textarea.form-control').prop("disabled", "disabled");
        $form.find("input[type='button']").prop("disabled", "disabled");
    }

    function getEligible() {
        $.ajax({
            type: "GET",
            async: "false",
            url: SIH.getEndPoint("/api/auth/rblChallenge/applicable"),
            headers: {"X-Auth-Token": store.getItem("token")}
        }).done(function (data) {
            isUserAplicable = data;
            if (isUserAplicable) {
                prepopulateData();
            } else {
                $rblChallengeModals.find('.rbl-already-submitted-modal').modal('show');
                $rblChallengeModals.find('.rbl-already-submitted-modal button').on('click', function () {
                    window.location = $('.logo').attr('href');
                });
            }
        });
    }

    function prepopulateData() {
        $.ajax({
            type: "GET",
            contentType: "application/json",
            dataType: "json",
            url: SIH.getEndPoint("/api/auth/rblChallenge/") + store.getItem("uniqueId"),
            headers: {"X-Auth-Token": store.getItem("token")}
        }).done(function (data) {
            if (!data || !data.status) {
                prePopulateForm();
            } else {
                $("input[name='startupName']").val(data.startupName);
                $("input[name='state']").val(data.state);
                $("input[name='city']").val(data.city);
                $("input[name='founderName']").val(data.founderName);
                $("input[name='founderEmail']").val(data.founderEmail);
                $("input[name='founderMobile']").val(data.founderMobile);
                $("textarea[name='coreTeamDetails']").val(data.coreTeamDetails);
                $("input[name='appLink']").val(data.appLink);
                $("textarea[name='productDescription']").val(data.productDescription);
                $("textarea[name='keyDiff']").val(data.keyDiff);
                $("textarea[name='problemSolving']").val(data.problemSolving);
                $("select[name='category']").val(data.category);
                $("textarea[name='competitors']").val(data.competitors);
                $("select[name='stage']").val(data.stage);
                $("select[name='launchDate']").val(data.launchDate);
                $("input[name='targetAudience']").val(data.targetAudience);
                $("input[name='activeUsers']").val(data.activeUsers);
                $("select[name='fundingStage']").val(data.fundingStage);
                $("input[name='revenue']").val(data.revenue);
                $("select[name='skills']").val(data.skills).trigger("change");
                $("input[name='expectation']").val(data.expectation);
                if (data.presentation) {
                    $("input[name='presentation']").val(data.presentation);
                    $("input[name='presentationFileName']").val(data.presentationFileName);
                    var $presentationLink = $("a.presentationLink");
                    $presentationLink.prop("href", SIH.getEndPoint("/api/file/challenge/doc/rbl/") + data.presentation + "/get").text(data.presentationFileName).removeClass("display-n");
                }
            }
        }).error(function () {
            console.log("Error in prepopulating form.");
        });
    }

    function getFormData(doValidate) {
        formData = {};
        isValidated = true;
        var attrValue = "";
        var inputField = $form.find(".form-control");
        $.each(inputField, function (index, inputSel) {
            var key = $(inputSel).attr("name");
            if (typeof key !== "undefined") {
                var type = $(inputSel).attr("type");
                if (type !== "file") {
                    attrValue = $(inputSel).val();
                    if (attrValue) {
                        formData[key] = attrValue;
                    }
                    validateField(attrValue, inputSel, doValidate);
                }
            }
        });
    }

    function validateField(attrValue, inputSel, doValidate) {
        var message = "";
        var requiredField = $(inputSel).closest(".form-group").find("sup.required");
        if (requiredField && requiredField.length > 0 && (!attrValue || attrValue === "")) {
            if (doValidate) {
                message = message + "This field is mandatory. ";
            }
        } else {
            if (typeof $(inputSel).attr("maxlength") !== "undefined") {
                var maxlength = $(inputSel).attr("maxlength");
                if (attrValue.length > maxlength) {
                    message = message + "Only " + maxlength + " characters are allowed. ";
                }
            }
            if (typeof $(inputSel).attr("pattern") !== "undefined") {
                var pattern = new RegExp($(inputSel).attr("pattern"));

                if (attrValue && !pattern.test(attrValue)) {
                    message = message + $(inputSel).attr("data-pattern-error");
                }
            }
        }
        if (message === "") {
            $(inputSel).closest(".form-group").removeClass("has-error");
        } else {
            isValidated = false;
            $(inputSel).closest(".form-group").addClass("has-error");
        }
        $(inputSel).siblings("span.help-block").first().html(message);
    }

    function checkFileUpload(fileToValidate, fileSize) {

        var message = "";
        if ($(fileToValidate).val() !== "") {
            if (fileToValidate.files[0].size > fileSize) {
                message = "File Should not be greater then " + Math.floor(fileSize / 1000000) + " MB.";
            }
            if (message !== "") {
                isValidated = false;
                $(fileToValidate).siblings(".help-block").html(message).parents(".form-group").addClass("has-error");
                $(fileToValidate).val("");
            } else {
                $(fileToValidate).siblings(".help-block").html("").parents(".form-group").removeClass("has-error");
                $(fileToValidate).siblings("input[type='hidden'][name='presentationFileName']").val(fileToValidate.files[0].name);
                var data = new FormData();
                data.append("file", fileToValidate.files[0]);
                $(".modal.loader").modal("show");
                $.ajax({
                    type: "POST",
                    data: data,
                    dataType: 'json',
                    contentType: false,
                    processData: false,
                    url: SIH.getEndPoint("/api/file/rblChallenge/doc"),
                    headers: {"X-Auth-Token": store.getItem("token")}
                }).done(function (data) {
                    $(".modal.loader").modal("hide");
                    $(fileToValidate).siblings("input[type='hidden'][name='presentation']").val(data.name);
                    if (data.name) {
                        var $presentationLink = $("a.presentationLink");
                        $presentationLink.prop("href", SIH.getEndPoint("/api/file/challenge/doc/rbl/") + data.name).text(data.originalFilename).removeClass("display-n");
                    }
                }).error(function () {
                    $(".modal.loader").modal("hide");
                    $(".rbl-error-message").modal("show");
                    return false;
                });
            }
        }
        return false;
    }

    function prePopulateForm() {
        var $startupName = $("input[name='startupName']");
        var $state = $("input[name='state']");
        var $city = $("input[name='city']");
        $.ajax({
            type: "GET",
            async: false,
            url: SIH.getEndPoint("/api/auth/user/profile"),
            headers: {"X-Auth-Token": store.getItem("token")}
        }).done(function (data) {
            if (data.user.name) {
                $("input[name='founderName']").val(data.user.name);
                $startupName.val(data.user.name);
            }
            if (data.user.email) {
                $("input[name='founderEmail']").val(data.user.email);
            }
            if (data.user.phone) {
                $("input[name='founderMobile']").val(data.user.phone);
            }
            if (data.user.startup) {
                var startupData = data.user.startup;

                if (startupData.location.city && startupData.location.city.text) {
                    $city.val(startupData.location.city.text);
                }
                if (startupData.location.state && startupData.location.state.text) {
                    $state.val(startupData.location.state.text);
                }
            } else {
                var userData = data.user;

                if (userData.location.city && userData.location.city.text) {
                    $city.val(userData.location.city.text);
                }
                if (userData.location.state && userData.location.state.text) {
                    $state.val(userData.location.state.text);
                }
            }
        });
    }

    $form.find("input[type=file]").on('change', function (event) {
        checkFileUpload(this, 2062594);
        return false;
    });

    $saveRblForm.on("click", function () {
        getFormData(false);
        if (isValidated && isUserAplicable) {
            $(".rbl-error-block").find(".form-group").removeClass("has-error").find("span.help-block").addClass("display-n");
            $.ajax({
                type: "POST",
                data: JSON.stringify(formData),
                contentType: "application/json",
                dataType: "json",
                url: SIH.getEndPoint("/api/auth/rblChallenge/saveasdraft"),
                headers: {"X-Auth-Token": store.getItem("token")}
            }).done(function (response) {
                if (response == true) {
                    $(".rbl-save-message .save-message").removeClass("display-n");
                    $(".rbl-error-block .help-block").addClass("display-n");
                } else {
                    $(".rbl-error-message").modal("show");
                }
            }).error(function () {
                $(".rbl-error-message").modal("show");
            });
        } else {
            $(".rbl-save-message .save-message").addClass("display-n");
            $(".rbl-error-block").find(".form-group").addClass("has-error").find("span.help-block").removeClass("display-n");
        }
    });

    $submitRblForm.on("click", function () {
        getFormData(true);
        if (isValidated && isUserAplicable) {
            $(".rbl-error-block").find(".form-group").removeClass("has-error").find("span.help-block").addClass("display-n");
            $.ajax({
                type: "POST",
                data: JSON.stringify(formData),
                contentType: "application/json",
                dataType: "json",
                url: SIH.getEndPoint("/api/auth/rblChallenge/apply"),
                headers: {"X-Auth-Token": store.getItem("token")}
            }).done(function (response) {
                ga('send', 'event', 'Website-InFinIT20', 'SubmitButton', 'InFinIT20-Submit-button', 1);
                if (response == true) {
                    window.location = $form.attr("data-path");
                } else {
                    $(".rbl-error-message").modal("show");
                }
            }).error(function () {
                $(".rbl-error-message").modal("show");
            });
        } else {
            $(".rbl-error-block").find(".form-group").addClass("has-error").find("span.help-block").removeClass("display-n");
        }
    });

    $rblChallengeModals.find(".rbl-error-message button").on("click", function () {
        $rblChallengeModals.find(".rbl-error-message").modal("hide");
    })
};

$.ams_applicant_application = function () {
    var $form = $("form[name='ams-application-form']");
    var formType = "";
    var applicationId = "";
    var formData = {};
    var isValidated = true;
    var isUserAplicable = false;
    var errorMappingObj = {};
    applicationId = $form.data("id");
    var role = store.getItem('role');
    var token = store.getItem("token");
    if(!token){
        token = $("#ams-application-form").data("admin-token");
    }
    var headers = {'X-Auth-Token': token, 'Content-Type': 'application/json'};
    if(jQuery.inArray( applicationId, ["5ea181f8e4b0363cb6335eea", "5ede2bdfe4b054cc0b1414c8",
                        "5ebbf6e36827795ffb61b1ea", "5ec7bb49e4b03e7099593ee6", "5ec369c6eb2774b6a7cdd49a",
                        "5ec369c6eb2774b6a7cdd49b", "5ec369c6eb2774b6a7cdd49c", "5ec369c6eb2774b6a7cdd49d",
                        "5ec369c6eb2774b6a7cdd49e", "5ec369c6eb2774b6a7cdd49f", "5ed0dfebe4b054cc0b124f18",
                        "5ebb99dae4b03b2ccef38dda"] ) > -1 ){
        role = "Kirana";
        token="";
        headers = {'Content-Type': 'application/json'};
    }
    var $submitAmsForm = $form.find("input[name='amsFormSubmit']");
    var $saveAmsForm = $form.find("input[name='amsFormSave']");
    var token = store.getItem("token");
    var problemStatementTitle = sessionStorage.getItem("problemStatementTitle");
    var problemStatementDescription = sessionStorage.getItem("problemStatementDescription");
    var problemStatementId = sessionStorage.getItem("problemStatementId");
    try{
        if (isPreviewMode) {
            token = $form.data("admin-token");
        }
    }catch (e) {

    }

    function getApplicationQuestion() {
        applicationId = $form.data("id");
        var apiPath = SIH.getEndPoint("/api/auth/ams/application/" + applicationId + "/questions");
        if(jQuery.inArray( applicationId, ["5ea181f8e4b0363cb6335eea", "5ede2bdfe4b054cc0b1414c8",
                        "5ebbf6e36827795ffb61b1ea", "5ec7bb49e4b03e7099593ee6", "5ec369c6eb2774b6a7cdd49a",
                        "5ec369c6eb2774b6a7cdd49b", "5ec369c6eb2774b6a7cdd49c", "5ec369c6eb2774b6a7cdd49d",
                        "5ec369c6eb2774b6a7cdd49e", "5ec369c6eb2774b6a7cdd49f", "5ed0dfebe4b054cc0b124f18",
                        "5ebb99dae4b03b2ccef38dda"] ) > -1 ){
            apiPath = SIH.getEndPoint("/api/noauth/ams/application/" + applicationId + "/questions");
        }else {
            apiPath =  SIH.getEndPoint("/api/auth/ams/application/" + applicationId + "/questions");
        }
        $('#modal-loader').modal('show');
        if (applicationId) {
            $.ajax({
                url: apiPath,
                type: 'GET',
                contentType: 'application/json',
                headers: headers,
                success: function (response) {

                    if(!store.getItem("published")){
                        setTimeout(function () {
                            bootbox.dialog({
                                title: 'Error',
                                message: 'Your profile is under moderation. So you are not eligible to apply on this application',
                                onEscape: false,
                                closeButton: false,
                                className: 'view-all-focus-sectors designer-cta text-center',
                                buttons: {
                                    OK: {
                                        label: 'OK',
                                        className: 'button gallery-image-upload',
                                        callback: function () {
                                            location.href = "/content/sih/en/ams-application/"
                                                + response.application.formType.toLowerCase()
                                                + ".html?applicationId="+response.application.id;
                                        }
                                    },
                                }
                            });
                        }, 200);
                    }

                    var excludedList = {};
                    if (response && response.application) {
                        formType = response.application.formType;
                    }
                    var problemStatementTemplate = Handlebars.compile($("#problem-statement-template").html());
                    var template = Handlebars.compile($("#ams-applicant-template").html());
                    var questionCategoryArray = ['Personal and team Details',
                        'General Questions',
                        'Solution Details',
                        'Revenue Model',
                        'Competition',
                        'Road Map Ahead'];
                    var questionList = {
                        'Personal and team Details': {},
                        'General Questions': {},
                        'Solution Details': {},
                        'Revenue Model': {},
                        'Competition': {},
                        'Road Map Ahead': {},
                        'Additional Question': {}
                    };
                    var reimbursementConfigs = setStateConfigList("/services/tags/reimbursements.json");
                    $.each(reimbursementConfigs, function (index, item) {
                        questionList[item.id] = {};
                        questionCategoryArray.push(item.text);
                        excludedList[item.id] = item.text;
                    });
                    var incentiveConfigs = setStateConfigList("/services/tags/incentives.json");
                    $.each(incentiveConfigs, function (index, item) {
                        questionList[item.id] = {};
                        questionCategoryArray.push(item.text);
                        excludedList[item.id] = item.text;
                    });
                    questionCategoryArray.push('Additional Question');
                    $.each(questionList, function (index, val) {
                        questionList[index] = response.questionCategoryList[index] || [];
                    });
                    questionList['Additional Question'] = response.additionalQuestion;
                    if (response.application.reimbursementType && excludedList[response.application.reimbursementType.id]) {
                        questionList[excludedList[response.application.reimbursementType.id]] = questionList[response.application.reimbursementType.id];
                        delete questionList[response.application.reimbursementType.id];
                    } else if (response.application.fiscalIncentiveType && excludedList[response.application.fiscalIncentiveType.id]) {
                        questionList[excludedList[response.application.fiscalIncentiveType.id]] = questionList[response.application.fiscalIncentiveType.id];
                        delete questionList[response.application.fiscalIncentiveType.id];
                    }
                    // questionList.rowCount = 0;
                    var headingData = [];
                    var hasSelfCertification = false;
                    var question = {questionList: questionList, questionCategoryArray: questionCategoryArray, application: response.application};
                    question.rowCount = 0;
                    $.each(response.questionCategoryList, function (index, val) {
                        val.rowCount = 0;
                        $.each(val, function (index, val) {
                            if (!hasSelfCertification && val.question.valueType === 'SELF_CERTIFICATION') {
                                hasSelfCertification = true;
                                question['hasSelfCertification'] = true;
                                question['selfCertification'] = val.question;
                                question['selfCertificationMandatory'] = val.mandatory;
                            }
                            if (val.question.parentId) {
                                var value = {"parentId": val.question.parentId, "name": val.question.name};
                                var present = false;
                                $.each(headingData, function (index, value) {
                                    if (value.parentId === val.question.parentId) {
                                        present = true;
                                        return true;
                                    }
                                });
                                if (!present) {
                                    val.question.first = true;
                                    headingData.push(value);
                                }
                            }
                        });
                    });

                    $("form[name=ams-application-form]").html(template(question));
                    /*if(excludedList[$('.applicant-detail-title').data('key')]){
                        $('.applicant-detail-title').text(excludedList[$('.applicant-detail-title').data('key')]);
                    }*/
                    if (problemStatementTitle) {
                        $("form[name=ams-application-form]").prepend(problemStatementTemplate({
                            problemStatementTitle: problemStatementTitle,
                            problemStatementDescription: problemStatementDescription
                        }));
                    }
                    $.each(headingData, function (index, val) {
                        getQuestion(val.parentId, val.name);
                    });
                    if(jQuery.inArray( applicationId, ["5ea181f8e4b0363cb6335eea", "5ede2bdfe4b054cc0b1414c8",
                        "5ebbf6e36827795ffb61b1ea", "5ec7bb49e4b03e7099593ee6", "5ec369c6eb2774b6a7cdd49a",
                        "5ec369c6eb2774b6a7cdd49b", "5ec369c6eb2774b6a7cdd49c", "5ec369c6eb2774b6a7cdd49d",
                        "5ec369c6eb2774b6a7cdd49e", "5ec369c6eb2774b6a7cdd49f", "5ed0dfebe4b054cc0b124f18",
                        "5ebb99dae4b03b2ccef38dda"] ) < 0 ) {
                        fetchSavedApplicationData(response.application.id, problemStatementId);
                    }
                    $('#modal-loader').modal('hide');
                    if(jQuery.inArray( applicationId, ["5ea181f8e4b0363cb6335eea", "5ede2bdfe4b054cc0b1414c8",
                        "5ebbf6e36827795ffb61b1ea", "5ec7bb49e4b03e7099593ee6", "5ec369c6eb2774b6a7cdd49a",
                        "5ec369c6eb2774b6a7cdd49b", "5ec369c6eb2774b6a7cdd49c", "5ec369c6eb2774b6a7cdd49d",
                        "5ec369c6eb2774b6a7cdd49e", "5ec369c6eb2774b6a7cdd49f", "5ed0dfebe4b054cc0b124f18",
                        "5ebb99dae4b03b2ccef38dda"] ) > -1 ) {
                        $("#draftRemoveForKirana").hide();

                        // setting problem statement for non secure programs like Kirana or Hall of fame
                        if(response.application.formType === "CHALLENGE" && response.application.problemStatements.length > -1){
                            problemStatementTitle = response.application.problemStatements[0].problemStatementTitle;
                            problemStatementDescription = response.application.problemStatements[0].problemStatementDescription;
                            problemStatementId = response.application.problemStatements[0].problemStatementId;
                        }
                        //end
                    }

                    if (isPreviewMode) {
                        $(".buttonRow").html(""); // remove action buttons
                    }
                    $('.ams-form-date').datepicker({dateFormat:'dd/mm/yy'});
                },
                error: function (response) {
                    $('#modal-loader').modal('hide');
                    $('.ams-applicant-error-modal p').html("Application not found");
                    $(".ams-applicant-error-modal").modal("show");
                }
            });
        } else {
            $('.ams-applicant-error-modal p').html("Application not found");
            $(".ams-applicant-error-modal").modal("show");
        }
    }

    function getQuestion(parentId, name) {
        var appId = getParameterByName("applicationId");
        var apiPath = SIH.getEndPoint("/api/auth/ams/questionnaire/get/" + parentId);
        if(jQuery.inArray( applicationId, ["5ea181f8e4b0363cb6335eea", "5ede2bdfe4b054cc0b1414c8",
                        "5ebbf6e36827795ffb61b1ea", "5ec7bb49e4b03e7099593ee6", "5ec369c6eb2774b6a7cdd49a",
                        "5ec369c6eb2774b6a7cdd49b", "5ec369c6eb2774b6a7cdd49c", "5ec369c6eb2774b6a7cdd49d",
                        "5ec369c6eb2774b6a7cdd49e", "5ec369c6eb2774b6a7cdd49f", "5ed0dfebe4b054cc0b124f18",
                        "5ebb99dae4b03b2ccef38dda"] ) > -1 ){
            apiPath = SIH.getEndPoint("/api/noauth/ams/application/questionnaire/get/" + parentId);
        }else {
            apiPath = SIH.getEndPoint("/api/auth/ams/questionnaire/get/" + parentId);
        }
        $.ajax({
            url: apiPath,
            type: 'GET',
            async: false,
            contentType: 'application/json',
            headers: headers,
            success: function (response) {
                $("input[name=" + name + "]").closest('.row').before('<h2 class="detail-title">' + response.question.questionTitle + '</h2>')
            },
            error: function (response) {
                console.error("error getting question");
            }
        })
    }

    getApplicationQuestion();

    function getFormData(doValidate) {
        formData = {};
        isValidated = true;
        var attrValue = "";
        var inputField = $form.find(".form-control");
        $.each(inputField, function (index, inputSel) {
            var isList = $(inputSel).closest(".repeat-container").length;
            var key = $(inputSel).attr("name");
            if (typeof key !== "undefined") {
                var type = $(inputSel).attr("type");
                if (type !== "file" && type !== "hidden") {
                    if (typeof key !== "undefined") {
                        if (isList) {
                            attrValue = $('input[name="' + inputSel.name + '"], select[name ="' + inputSel.name + '"] ,textarea[name="' + inputSel.name + '"]').serializeArray().map(function (ele) {
                                //Removing trim() to render whitespace validation error message. See validateField().
                                //return ele.value.trim();
                                return ele.value;
                            });
                        } else if (type === 'radio') {
                            attrValue = $('input[name="' + inputSel.name + '"]:checked').val();
                        } else if (type === 'checkbox') {
                            var array = [];
                            var elements = $('input[name="' + inputSel.name + '"]:checked');
                            $.each(elements, function (index, item) {
                                array.push(item.value);
                            });
                            attrValue = array;
                        } else {
                            attrValue = $(inputSel).val();
                        }
                        if (attrValue && attrValue.length) {
                            formData[key] = attrValue;
                        }
                        if (doValidate) {
                            if (isList && Array.isArray(attrValue) && type !== "radio") {
                                var listContainer = $(inputSel).closest(".repeat-container");
                                attrValue.forEach(function (elementValue, index) {
                                    if (listContainer.find(".repeat-fields").index($(inputSel).closest(".repeat-fields")) === index) {
                                        validateField(elementValue, inputSel, doValidate);
                                    }
                                })
                            } else {
                                validateField(attrValue, inputSel, doValidate);
                            }
                        }
                    }
                } else if (type === 'file') {
                    var fileObject = {};
                    var fileName = $('input[name=' + inputSel.name + '][type=hidden]').val();
                    if (fileName) {
                        fileObject["fileName"] = fileName;
                        fileObject["fileOriginalName"] = $('input[name=' + inputSel.name + 'FileName][type=hidden]').val();
                        formData[key] = fileObject;
                    } else if (doValidate) {
                        validateField(fileName, inputSel, doValidate);
                    }
                }
                errorMappingObj["" + key + ""] = $("input[name=" + key + "]")[0] || $("select[name=" + key + "]")[0] || $("textarea[name=" + key + "]")[0];
            }
        });

        if (doValidate) {
            var certify = $('.certify');
            $.each(certify, function (index, inputSel) {
                validateField($(inputSel).is(':checked'), inputSel, doValidate);
            });
        }
        handleRepeatContainerFields(formData);
    }

    function handleRepeatContainerFields(formData){
        var arr = {};
        $('.repeat-container').each(function(index,val) {
            $($(this).find('.repeat-fields')[0]).each(function () {
                $(this).find('input[type=radio]').each(function () {
                    var name = $(this).attr("name");
                    if (!arr[name]) {
                        arr[name] = $("input[name=" + name + "]:checked").val()
                    }
                })
            });
        });

        $('.repeat-container').each(function(index,val) {
            var n = $(this).attr('repeatNumber');
            $.each(arr,function(index,val){
                for(var i = 1; i <= n;i++){
                    var name = index+"_"+i;
                    console.log(name+"---"+$("input[name="+name+"]:checked").val());
                    if($("input[name="+name+"]").length){
                        var v = $("input[name="+name+"]:checked").val();
                        if(formData[index] === undefined ){
                            formData[index] = [];
                            formData[index].push(null);
                        }
                        formData[index].push(v);
                    }
                }
            });
        });
       /* var n = $('.repeat-container .repeat-fields').length;
        $.each(arr,function(index,val){
            for(var i = 1; i < n;i++){
                var name = index+"_"+i;
                console.log(name+"---"+$("input[name="+name+"]:checked").val())
                var v = $("input[name="+name+"]:checked").val();
                formData[index].push(v);
            }
        })*/
       console.log(formData);
    }

    function validateField(attrValue, inputSel, doValidate) {
        var message = "";
        var requiredField = $(inputSel).closest(".form-group").find("sup.required");
        // For handling whitespace validation.
        if (attrValue && attrValue.length > 0 && (typeof attrValue.trim === "function" && attrValue.trim() === "")){
            if (doValidate){
                message = message + "Empty spaces are not allowed, please enter valid details. ";
            }
        }
        if (requiredField && requiredField.length > 0 && (!attrValue || attrValue === "" || attrValue.length === 0 || (typeof attrValue.trim === "function" && attrValue.trim() === ""))) {
            if (doValidate) {
                message = message + "This field is required. ";
            }
        } else {
            var cd = "alphabets";
            if($(inputSel).attr('type') === "number"){
                cd = "digits";
            }
            if (attrValue && (typeof $(inputSel).attr("minlength") !== "undefined" && typeof $(inputSel).attr("maxlength") !== "undefined")) {
                minlength = $(inputSel).attr("minlength");
                maxlength = $(inputSel).attr("maxlength");
                if (minlength && maxlength && (attrValue.length < minlength || attrValue.length > maxlength)) {
                    message = message + "Between " + minlength +"-"+maxlength + " "+cd+" are allowed. ";
                }
            }else {
                if (attrValue && (typeof $(inputSel).attr("minlength") !== "undefined")) {
                        var minlength = $(inputSel).attr("minlength");
                    if (attrValue.length < minlength) {
                        message = message + "Minimum " + minlength + " "+cd+" are allowed. ";
                    }
                } if (attrValue && (typeof $(inputSel).attr("maxlength") !== "undefined")) {
                    var maxlength = $(inputSel).attr("maxlength");
                    if (attrValue.length > maxlength) {
                        message = message + "Only " + maxlength + " "+cd+" are allowed. ";
                    }
                }
            }

            if (attrValue && (typeof $(inputSel).attr("pattern") !== "undefined")) {
                var pattern = new RegExp($(inputSel).attr("pattern"));

                if (!pattern.test(attrValue)) {
                    message = message + $(inputSel).attr("data-pattern-error");
                }
            }
        }
        if (message === "") {
            $(inputSel).closest(".form-group").removeClass("has-error");
        } else {
            isValidated = false;
            $(inputSel).closest(".form-group").addClass("has-error");
        }
        $(inputSel).siblings("span.help-block").first().html(message);
        if($(inputSel).attr("type") == 'radio' || $(inputSel).attr("type") == 'checkbox'){
            $(inputSel).parents(".textBoxOut ").find(".help-block").first().html(message);
        }
    }

    $(document).on("click", "form[name=ams-application-form] input[name='amsFormSubmit']", function (event) {
        $('#modal-loader').modal('show');
        getFormData(true);
        var $target = $(event.target);
        var id = $('input[name=id]').val();
        if(jQuery.inArray( applicationId, ["5ea181f8e4b0363cb6335eea", "5ede2bdfe4b054cc0b1414c8",
                        "5ebbf6e36827795ffb61b1ea", "5ec7bb49e4b03e7099593ee6", "5ec369c6eb2774b6a7cdd49a",
                        "5ec369c6eb2774b6a7cdd49b", "5ec369c6eb2774b6a7cdd49c", "5ec369c6eb2774b6a7cdd49d",
                        "5ec369c6eb2774b6a7cdd49e", "5ec369c6eb2774b6a7cdd49f", "5ed0dfebe4b054cc0b124f18",
                        "5ebb99dae4b03b2ccef38dda"] ) > -1 ){
            id = "";
        }
        if (isValidated) {
            var data = {
                'id': id,
                'application': {'id': applicationId, 'formType': formType},
                'status': 'PENDING',
                'questionResponses': formData,
                'problemStatementTitle': problemStatementTitle,
                'problemStatementDescription': problemStatementDescription,
                'problemStatementId': problemStatementId
            };
            sessionStorage.clear();
            var apiPath = SIH.getEndPoint("/api/auth/ams/application/applicationResponse/save");
            if(jQuery.inArray( applicationId, ["5ea181f8e4b0363cb6335eea", "5ede2bdfe4b054cc0b1414c8",
                        "5ebbf6e36827795ffb61b1ea", "5ec7bb49e4b03e7099593ee6", "5ec369c6eb2774b6a7cdd49a",
                        "5ec369c6eb2774b6a7cdd49b", "5ec369c6eb2774b6a7cdd49c", "5ec369c6eb2774b6a7cdd49d",
                        "5ec369c6eb2774b6a7cdd49e", "5ec369c6eb2774b6a7cdd49f", "5ed0dfebe4b054cc0b124f18",
                        "5ebb99dae4b03b2ccef38dda"] ) > -1 ){
                apiPath = SIH.getEndPoint("/api/noauth/ams/application/applicationResponse/save");
            }else {
                apiPath =  SIH.getEndPoint("/api/auth/ams/application/applicationResponse/save");
            }
            $.ajax({
                url: apiPath,
                type: "POST",
                contentType: 'application/json',
                headers: headers,
                data: JSON.stringify(data)
            }).done(function (response) {
                $('#modal-loader').modal('hide');
                if (response) {
                    window.location = $form.attr("data-path");
                } else {
                    $('.ams-applicant-error-modal p').html("There are some error saving the form. Please contact Support Team");
                    $(".ams-applicant-error-modal").modal("show");
                }
            }).error(function (response) {
                if (response && response.status === 400) {
                    populateFormErrors(response, null, $target, errorMappingObj);
                    amsErrorBlockScroll();
                } else if (response && response.status === 403) {
                    $('.ams-error-modal p').html(response.responseText);
                    $(".ams-error-modal").modal("show");
                    $(".buttonRow").find(".btn").attr("disabled", "disabled");
                } else {
                    $('.ams-error-modal p').html("There are some error saving the form. Please contact Support Team");
                    $(".ams-error-modal").modal("show");

                }
                $('#modal-loader').modal('hide');
            });
        } else {
            $('#modal-loader').modal("hide");
            amsErrorBlockScroll();
            return false;
        }
    });

    function fetchUserResponse() {
        $.ajax({
            url: SIH.getEndPoint("/api/auth/ams/application/userResponse"),
            type: 'GET',
            async: false,
            contentType: 'application/json',
            headers: {'X-Auth-Token': token, 'Content-Type': 'application/json'}
        }).done(function (response) {
            setFormData(response.questionResponses,true);
        })
    }

    function fetchSavedApplicationData(applicationId, problemStatementId) {
        var url;
        if (problemStatementId) {
            url = SIH.getEndPoint("/api/auth/ams/application/applicationApplicantResponse/" + applicationId + "/" + problemStatementId);
        }
        else {
            url = SIH.getEndPoint("/api/auth/ams/application/applicationApplicantResponse/" + applicationId)
        }
        $.ajax({
            url: url,
            type: 'GET',
            async: false,
            contentType: 'application/json',
            headers: {'X-Auth-Token': token, 'Content-Type': 'application/json'}
        }).done(function (response) {
            if (response && response.status && (response.status !== 'DRAFTED' && response.status !== 'INCOMPLETE')) {
                if (response.multiplePSAllowed && problemStatementId && response.problemStatementId && !response.multiplePSAllowed && problemStatementId != response.problemStatementId) {
                    disableAMSApplicantForm("This application allow submission of single problem Statement. You have already applied for: " + response.problemStatementTitle, response);
                }
                else
                    disableAMSApplicantForm("You have already applied for the challenge", response);
            }

            else if (response && response.status == 'INCOMPLETE' && (new Date().getTime() - new Date(response.application.endDate).getTime() > 432000000)) {
                disableAMSApplicantForm("You are too late to resubmit this application",response);
            } else if (response && response.questionResponses) {
                setFormData(response.questionResponses);
                $("input[name=id]").val(response.id);
                if (response.status === 'INCOMPLETE') {
                    $('input[name=amsFormSave]').remove();
                }
            } else if (response && response.application.createdBy === store.getItem("uniqueId")) {
                $(".buttonRow").html("");
                $(".newErrorRow").css("display","block");
            }
            if (response && response.problemStatementTitle) {
                problemStatementTitle = sessionStorage.getItem("problemStatementTitle") || response.problemStatementTitle;
                problemStatementDescription = sessionStorage.getItem("problemStatementDescription") || response.problemStatementDescription;
                sessionStorage.setItem("problemStatementTitle", problemStatementTitle);
                sessionStorage.setItem("problemStatementDescription", problemStatementDescription);
            }

            if(!response.questionResponses){
                fetchUserResponse();
            }
            // disabling fields if end date has passed
            var currentDate = new Date();
            currentDate.setHours(0,0,0,0);
            if(new Date(response.application.endDate) < currentDate) {
                $("#ams-application-form :input").prop("disabled", true);
                $("#ams-eligibility-error").html("Refer to Application Timeline for Start Date and End Date.");
                $("#ams-eligibility-error").show();
            }
            // end
        }).error(function (response) {
            if (response && response.status === 403) {
                $('#modal-loader').modal('hide');
                $('.ams-error-modal p').html(response.responseText);
                $(".ams-error-modal").modal("show");
                $(".buttonRow").find(".btn").attr("disabled", "disabled");
                if(response.responseText.indexOf("End date for this application has passed") < 0) {
                    $("#ams-eligibility-error").show();
                }
                $("#ams-application-form :input").prop("disabled", true);
                $("#action-row").hide();
            } else {
                console.error("Error in fetching saved data");
            }

        });
    }
    $(document).on("addRepeatButton", function (obj) {
        console.log("add button clicked");
        var cloneElem = obj.cloneElem;
        var targetElem = obj.targetElem;
        var latestRepeat = $(targetElem).closest('.repeat-container').attr('repeatNumber');
        if(!latestRepeat){
            latestRepeat = 0;
        }
        $(targetElem).closest('.repeat-container').attr('repeatNumber',parseInt(latestRepeat) +1);
        var n = $(targetElem).closest('.repeat-container').find('.repeat-fields').length - 1;
        $(cloneElem).find("input[type=radio]").each(function (index, val) {
            var name = $(this).attr("name");
            $(this).attr("name", name + '_' + (parseInt(latestRepeat) +1));
        })

    });
    function disableAMSApplicantForm(msg,response) {
        setFormData(response.questionResponses);
        $("#ams-application-form input, #ams-application-form select, #ams-application-form textarea").prop("disabled", true);
        /*if(response.application.endDate){
            var endDate = new Date(response.application.endDate);
            endDate.setDate(endDate.getDate() +1);
            var currentDate = new Date();
            if(currentDate < endDate){*/
                $('.ams-error-modal p').html(msg);
                $(".ams-error-modal").modal("show");
            /*}
        }*/

        $(".buttonRow").find(".btn").attr("disabled", "disabled").hide();

    }

    function setFormData(data,autofill) {
        $.each(data, function (index, val) {
            if(!val || (index.indexOf("AdditionalQuestion") > -1 && autofill) ){
                return;
            }
            var field = $('#ams-application-form input[name=' + index + '], ' +
                '#ams-application-form select[name=' + index + '], ' +
                '#ams-application-form textarea[name=' + index + ']');
            var isList = field.closest(".repeat-container").length;
            var type = field.attr("type");
            if (isList && Array.isArray(val)) {
                    var i =0;
                    val.forEach(function (value, idx) {
                        field = $('#ams-application-form input[name=' + index + '], #ams-application-form select[name=' + index + '], #ams-application-form textarea[name=' + index + ']');
                        var currentField = $(field).eq(idx);
                        if (type !== "radio") {
                            currentField.val(value);
                        }
                        var repeatField = currentField.closest('.repeat-container').find('.repeat-fields').length;
                        if (repeatField < val.length) {
                            var parent = currentField.closest(".repeat-container");
                            var button = parent.find(".repeat-add");
                            if (button.length > 0) {
                                button.trigger("click");
                            }
                        }

                        if (type === "radio") {
                            var name = $(field).attr("name");
                            if (i > 0) {
                                name = name + "_" + i;
                            }
                            $.each($('input[name=' + name + ']'), function (index, inputValue) {
                                if (value === $(this).val()) {
                                    $(this).prop('checked', true);
                                    return true;
                                }
                            });
                            i++;
                        }
                    });
                    field.closest(".repeat-container").attr('repeatNumber', val.length - 1)
                    /*if(type==='radio'){
                        var n = $('.repeat-container .repeat-fields').length;
                        var i = 0;
                        val.forEach(function (value, idx) {
                            var name = index;
                            if(i > 0){
                                name = name +"_" + i;
                            }
                            $.each($('input[name=' + name + ']'), function (index, inputValue) {
                                if (value === $(this).val()) {
                                    $(this).prop('checked', true);
                                    return true;
                                }
                            });
                            i++;
                        });
                    }*/
                } else if (type === 'radio') {
                    $.each($('input[name=' + index + ']'), function (index, value) {
                        if (val === $(this).val()) {
                            $(this).attr('checked', true);
                            return true;
                        }
                    });
                } else if (type === 'checkbox') {
                    $.each($('input[name=' + index + ']'), function (index, value) {
                        var inputVal = $(this).val();
                        $.each(val, function (index, value1) {
                            if (value1 === inputVal) {
                                $(value).attr('checked', true);
                            }
                        })
                    });
                } else if (type === "file") {
                    $("input[name=" + index + "][type=hidden]").val(val.fileName);
                    $("input[name=" + index + "FileName]").val(val.fileOriginalName);
                    var $formLink = $('a.' + index);
                    $formLink.prop("href", SIH.getEndPoint("/api/file/ams/applicant/doc/get/") + val.fileName).text(val.fileOriginalName).removeClass("display-n");
                } else {
                    field.val(val);
                    if (autofill) {
                        field.addClass('ams-autofill-field');
                    }
                }
            });
        }

        $(document).on("click", "form[name=ams-application-form] input[name='amsFormSave']", function () {
            getFormData(false);
            var id = $('input[name=id]').val();
            if(jQuery.inArray( applicationId, ["5ea181f8e4b0363cb6335eea", "5ede2bdfe4b054cc0b1414c8",
                        "5ebbf6e36827795ffb61b1ea", "5ec7bb49e4b03e7099593ee6", "5ec369c6eb2774b6a7cdd49a",
                        "5ec369c6eb2774b6a7cdd49b", "5ec369c6eb2774b6a7cdd49c", "5ec369c6eb2774b6a7cdd49d",
                        "5ec369c6eb2774b6a7cdd49e", "5ec369c6eb2774b6a7cdd49f", "5ed0dfebe4b054cc0b124f18",
                        "5ebb99dae4b03b2ccef38dda"] ) > -1 ){
                id = "";
            }
            var data = {
                'id': id,
                'application': {'id': applicationId, 'formType': formType},
                'status': 'DRAFTED',
                'questionResponses': formData,
                'problemStatementTitle': problemStatementTitle,
                'problemStatementDescription': problemStatementDescription,
                'problemStatementId': problemStatementId
            };
            $('#modal-loader').modal('show');
            var apiPath = SIH.getEndPoint("/api/auth/ams/application/applicationResponse/save");
            if(jQuery.inArray( applicationId, ["5ea181f8e4b0363cb6335eea", "5ede2bdfe4b054cc0b1414c8",
                        "5ebbf6e36827795ffb61b1ea", "5ec7bb49e4b03e7099593ee6", "5ec369c6eb2774b6a7cdd49a",
                        "5ec369c6eb2774b6a7cdd49b", "5ec369c6eb2774b6a7cdd49c", "5ec369c6eb2774b6a7cdd49d",
                        "5ec369c6eb2774b6a7cdd49e", "5ec369c6eb2774b6a7cdd49f", "5ed0dfebe4b054cc0b124f18",
                        "5ebb99dae4b03b2ccef38dda"] ) > -1 ){
                apiPath = SIH.getEndPoint("/api/noauth/ams/application/applicationResponse/save");
            }else {
                apiPath =  SIH.getEndPoint("/api/auth/ams/application/applicationResponse/save");
            }
            $.ajax({
                url: apiPath,
                type: "POST",
                contentType: 'application/json',
                headers: headers,
                data: JSON.stringify(data)
            }).done(function (response) {
                $('#modal-loader').modal('hide');
                if (response) {
                    $("input[name=id]").val(response.id);
                    showSuccessMessage($('#ams-application-form').data('save-msg'));
                } else {
                    showErrorMessage($('#ams-application-form').data('error-msg'));
                }
            }).error(function (response) {
                $('#modal-loader').modal('hide');
                if (response && response.status === 403) {
                    $('.ams-error-modal p').html(response.responseText);
                    setTimeout(function () {
                        $(".ams-error-modal").modal("show");
                    },200);
                    $(".buttonRow").find(".btn").attr("disabled", "disabled");
                } else if (response && response.status === 400) {
                    populateFormErrors(response, null, $target, errorMappingObj);
                    amsErrorBlockScroll();
                } else {
                    showErrorMessage($('#ams-application-form').data('error-msg'));
                }
            });
        });

        $(document).on("change", "form[name='ams-application-form'] input[type=file]", function (event) {
            var maxSize = $(event.target).attr('max-size');
            if (maxSize) {
                maxSize = maxSize * 1024 * 1024;
            } else {
                maxSize = 10485760;
            }
            checkAMSFileUpload(event.target, maxSize);
            return false;
        });

        function checkAMSFileUpload(fileToValidate, fileSize) {
            var message = "";
            if ($(fileToValidate).val() !== "") {
                if (fileToValidate.files && fileToValidate.files[0].size > fileSize) {
                    onErrorResetFileUpload(fileToValidate, $(fileToValidate).attr("name"));
                    message = "File Should not be greater than " + Math.floor(fileSize / 1048576) + " MB.";
                }
                if (message !== "") {
                    isValidated = false;
                    $(fileToValidate).siblings(".help-block").html(message).parents(".form-group").addClass("has-error");
                    $(fileToValidate).val("");
                } else {
                    if (fileToValidate.files) {
                        $(fileToValidate).siblings(".help-block").html("").parents(".form-group").removeClass("has-error");
                        var name = $(fileToValidate).attr("name");
                        var data = new FormData();
                        data.append("file", fileToValidate.files[0]);
                        if($(fileToValidate).data('value') && $(fileToValidate).data('value').length>0){
                            var value = $(fileToValidate).data('value');
                            apiPath=SIH.getEndPoint('/api/file/ams/applicant/doc/'+value);
                        }
                        else{
                            apiPath=SIH.getEndPoint('/api/file/ams/applicant/doc');
                        }
                        $(".modal.loader").modal("show");
                        if(jQuery.inArray( applicationId, ["5ea181f8e4b0363cb6335eea", "5ede2bdfe4b054cc0b1414c8",
                        "5ebbf6e36827795ffb61b1ea", "5ec7bb49e4b03e7099593ee6", "5ec369c6eb2774b6a7cdd49a",
                        "5ec369c6eb2774b6a7cdd49b", "5ec369c6eb2774b6a7cdd49c", "5ec369c6eb2774b6a7cdd49d",
                        "5ec369c6eb2774b6a7cdd49e", "5ec369c6eb2774b6a7cdd49f", "5ed0dfebe4b054cc0b124f18",
                        "5ebb99dae4b03b2ccef38dda"] ) > -1 ){
                            $.ajax({
                                type: "POST",
                                data: data,
                                dataType: 'json',
                                contentType: false,
                                processData: false,
                                url:apiPath
                            }).done(function (data) {
                                $(".modal.loader").modal("hide");
                                $(fileToValidate).siblings("input[type='hidden'][name=" + name + "FileName]").val(fileToValidate.files[0].name);
                                $(fileToValidate).siblings("input[type='hidden'][name=" + name + "]").val(data.name);
                                if (data.name) {
                                    var $fileLink = $(fileToValidate).siblings('a');
                                    $fileLink.prop("href", SIH.getEndPoint("/api/file/ams/applicant/doc/get/") + data.name).text(data.originalFilename).removeClass("display-n");
                                }
                            }).error(function (xhr, error, thrown) {
                                onErrorResetFileUpload(fileToValidate, name);
                                $(".modal.loader").modal("hide");
                                showErrorModal(xhr.responseText);
                                return false;
                            });
                        }else {
                            $.ajax({
                                type: "POST",
                                data: data,
                                dataType: 'json',
                                contentType: false,
                                processData: false,
                                url:apiPath,
                                headers: {"X-Auth-Token": store.getItem("token")}
                            }).done(function (data) {
                                $(".modal.loader").modal("hide");
                                $(fileToValidate).siblings("input[type='hidden'][name=" + name + "FileName]").val(fileToValidate.files[0].name);
                                $(fileToValidate).siblings("input[type='hidden'][name=" + name + "]").val(data.name);
                                if (data.name) {
                                    var $fileLink = $(fileToValidate).siblings('a');
                                    $fileLink.prop("href", SIH.getEndPoint("/api/file/ams/applicant/doc/get/") + data.name).text(data.originalFilename).removeClass("display-n");
                                }
                            }).error(function (xhr, error, thrown) {
                                onErrorResetFileUpload(fileToValidate, name);
                                $(".modal.loader").modal("hide");
                                showErrorModal(xhr.responseText);
                                $(fileToValidate).val(null);
                                return false;
                            });
                        }
                    }
                }
            }
            return false;
        }

        function onErrorResetFileUpload(fileToValidate, name) {
            $(fileToValidate).siblings("input[type='hidden'][name=" + name + "FileName]").removeAttr("value");
            $(fileToValidate).siblings("input[type='hidden'][name=" + name + "]").removeAttr("value");
            $(fileToValidate).siblings('a').attr("href", "").text("").addClass('display-n');
        }

    }





$.goaRecognition = function () {
    var cin = "";
    var referenceNo = "";
    var lastAccordionSaved = "";
    var formData = new FormData();
    var isValidated = true;
    var tableContent;
    var authToken = store.getItem("token");

    var $entity_type = $("select[name='entityType']");
    var $industry_id = $("select[name='industry_id']");
    var $section = $("select[name='section']");
    var $categories_id = $("select[name='categories_id']");
    var $state_id = $('#state_name');
    var $incorp_number = $("input[name='incorpNumber']");
    var $incorp_date = $("input[name='incorpDate']");
    var $entity_name = $("input[name='entityName']");
    var $tax_ipr = $("select[name='tax_benifit']");
    var $submitRecognitionForm = $("input[name='submitRecognitionForm']");

    //Funding Source
    var $isFunded = $("input[name=funded]");
    var $isFundedVal = $("input[name=funded]:checked").val();
    var $fundingSource = $("input[name=fundingSource]");

    //IPR
    var $appliedForIpr = $("input[name=appliedForIpr]");
    var $appliedForIprVal = $("input[name=appliedForIpr]:checked").val();
    var $iprForm = $(".regiFormSection");

    //Another State
    var $anotherStateRegistered = $("input[name=registeredInOtherState]");
    var $anotherStateRegisteredVal = $("input[name=registeredInOtherState]:checked").val();
    var $anotherStateName = $("select[name=otherState]");
    var $anotherStateRegistrationNo = $("input[name=startupRegNo]");
    var $anotherStateRegistrationDate = $("input[name=startupRegDate]");

    //DIPP
    var $registeredWithDipp = $("input[name=dippCertified]");
    var $registeredWithDippVal = $("input[name=dippCertified]:checked").val();
    var $dippNumber = $("input[name=dippNumber]");

    var entityType = {
        "1": "PRIVATE_LIMITED_COMPANY",
        "2": "LIMITED_LIABILITY_PARTNERSHIP",
        "3": "REGISTERED_PARTNERSHIP",
    };
    initForm();

    function prePopulateForm() {
        $.ajax({
            type: "GET",
            async: false,
            url: SIH.getEndPoint("/api/auth/user/profile"),
            headers: {"X-Auth-Token": store.getItem("token")}
        }).done(function (data) {
            $("select[name=entityType]").val(entityType[data.user.startup.startupEntity]).trigger("change");
            $("select[name=startupindustry]").val(data.user.startup.focusArea.industry.id);
            if (data.user.startup.focusArea.industry.id) {
                var params = {};
                params["industry"] = data.user.startup.focusArea.industry.id;
                var $selection = $("#sector");
                setList(params, $selection.data("path"), $selection);
                $("select[name=sector]").val(data.user.startup.focusArea.sectors[0].id)
            }
            var selectedServices = [];
            $(data.user.startup.services).each(function (key, val) {
                $("select[name=services] option").each(function (key, value) {
                    if ($(this).text() === val) {
                        selectedServices.push($(value).val());
                    }
                });
            });
            $("select[name=services]").val(selectedServices).trigger('change');
            $("input[name=panNumber]").val(data.user.startup.pan);
            $("input[name=incorpNumber]").val(data.user.startup.cin);
            if (data.user.startup.cin) {
                $("input[name=incorpNumber]").trigger("change");
            }
            $("input[name=website]").val(data.user.startup.website);
            $.each($('input[name=stage]'), function (index, value) {
                if (($(this).val() === "on" && data.user.startup.stage === true) || ($(this).val() === "off" && data.user.startup.stage === false) || ($(this).val() === data.user.startup.stage)) {
                    $(this).attr('checked', true);
                }
            });
            $.each($('input[name=dippCertified]'), function (index, value) {
                if (($(this).val() === "on" && data.user.startup.dippCertified === true) || ($(this).val() === "off" && data.user.startup.dippCertified === false) || ($(this).val() === data.user.startup.dippCertified)) {
                    $(this).attr('checked', true).trigger("change");
                }
            });
            $("input[name=dippNumber]").val(data.user.startup.dippNumber);
            $("textarea[name=ideaBrief].richTextArea").summernote("code", data.user.startup.ideaBrief);
            $('#modal-loader').modal('hide');
        });
    }

    function populateUploadedFiles(data) {
        ["businessModel", "pitchDeck", "letters"].forEach(function (fileName) {
            if (data[fileName]) {
                $("input[name='" + fileName + "']").val(data[fileName]);
                $("input[name='" + fileName + "FileName']").val(data[fileName + "FileName"]);
                var $presentationLink = $("input[type=file][name='upload_" + fileName + "']").siblings("a.presentationLink");
                $presentationLink.prop("href", SIH.getEndPoint("/api/file/stateRecognition/goa/") + data[fileName] + "/get").text(data[fileName + "FileName"]).removeClass("display-n");
            }
        });
    }

    function initForm() {
        if (!$isFundedVal || $isFunded === "off") {
            $fundingSource.closest(".repeatcontainer").addClass("display-n");
            $fundingSource.closest(".repeatcontainer").find(".form-group").addClass("display-n");
        }
        if (!$appliedForIprVal || $appliedForIprVal === "off") {
            $iprForm.addClass("display-n");
        }
        if (!$anotherStateRegisteredVal || $anotherStateRegisteredVal === "off") {
            $anotherStateName.closest(".form-group").addClass("display-n");
            $anotherStateRegistrationNo.closest(".form-group").addClass("display-n");
            $anotherStateRegistrationDate.closest(".form-group").addClass("display-n");
        }
        if (!$registeredWithDippVal || $registeredWithDippVal === "off") {
            $dippNumber.closest(".form-group").addClass("display-n");
        }
    }

    $entity_type.on("change", function () {
        $('input[name=incorpDate], input[name=entityName], input[name=incorpNumber]').val('');
        if ($(this).val() === "PRIVATE_LIMITED_COMPANY" || $(this).val() === "LIMITED_LIABILITY_PARTNERSHIP") {
            $('input[name=incorpDate]').attr('readonly', 'readonly');
            $('input[name=entityName]').attr({
                'readonly': 'true'
            });
        } else {
            $('input[name=incorpDate]').removeAttr('readonly');
            $('input[name=entityName]').removeAttr('readonly');
        }
    });

    $isFunded.change(function () {
        var val = $("input[name=funded]:checked").val();
        if (val === "on") {
            $fundingSource.closest(".repeatcontainer").removeClass("display-n");
            $fundingSource.closest(".repeatcontainer").find(".form-group").removeClass("display-n");
        } else {
            $fundingSource.closest(".repeatcontainer").addClass("display-n");
            $fundingSource.closest(".repeatcontainer").find(".form-group").addClass("display-n");
        }
    });
    $appliedForIpr.change(function () {
        var val = $("input[name=appliedForIpr]:checked").val();
        if (val === "on") {
            $iprForm.removeClass("display-n");
        } else {
            $iprForm.addClass("display-n");
        }
    });
    $anotherStateRegistered.change(function () {
        var val = $("input[name=registeredInOtherState]:checked").val();
        if (val === "on") {
            $anotherStateName.closest(".form-group").removeClass("display-n");
            $anotherStateRegistrationNo.closest(".form-group").removeClass("display-n");
            $anotherStateRegistrationDate.closest(".form-group").removeClass("display-n");
        } else {
            $anotherStateName.closest(".form-group").addClass("display-n");
            $anotherStateRegistrationNo.closest(".form-group").addClass("display-n");
            $anotherStateRegistrationDate.closest(".form-group").addClass("display-n");
        }
    });

    $registeredWithDipp.change(function () {
        var val = $("input[name=dippCertified]:checked").val();
        if (val === "on") {
            $dippNumber.closest(".form-group").removeClass("display-n");
        } else {
            $dippNumber.closest(".form-group").addClass("display-n");
        }
    });

    $(".accordionitem:first").find(".accordion-section-title").addClass("active");
    $(".accordionitem:first").find(".accordion-section-content").addClass("open").show();

    $incorp_number.on("change", function () {
        if ($entity_type.val() !== "REGISTERED_PARTNERSHIP") {
            var $this = this;
            $('#modal-loader').modal('show');
            $.ajax({
                type: "POST",
                dataType: "json",
                data: {"incorp_no": $(this).val()},
                url: $("#incorporationNoMCA").val(),
                success: function (data) {
                    $('#modal-loader').modal('hide');
                    if (data.isValidIncorporationNo === "true") {
                        $entity_name.val(data.nameEntity).attr("readonly", "readonly").parents(".form-group").removeClass("has-error").find(".help-block").html("");
                        var dateSplit = data.incorpdate.split("-");
                        if (dateSplit.length === 3) {
                            $incorp_date.val(dateSplit[1] + "/" + dateSplit[0] + "/" + dateSplit[2]).attr("readonly", "readonly").parents(".form-group").removeClass("has-error").find(".help-block").html("");
                        }
                        $($this).parents(".form-group").removeClass("has-error").find(".help-block").html("");
                    } else {
                        //  $entity_name.val("").removeAttr("readonly");
                        //  $incorp_date.val("").removeAttr("readonly");
                        $($this).parents(".form-group").addClass("has-error").find(".help-block").html("Please enter valid CIN number.")
                    }
                },
                error: function () {
                    $('#modal-loader').modal('hide');
                    $($this).parents(".form-group").addClass("has-error").find(".help-block").html("We are facing problems fetching your CIN details. Please try after some time.")
                }
            });
        }
    });


    $(".fileuploadMultipurpose").change(function () {
        var _this = $(this);
        checkFileUpload(this, _this.data("propname"), _this.data("propdisplay"), 10000000);
    });


    $("input[name='ipr_type']").on("change", function () {
        if ($(this).val() === "1") {
            $(".regiFormSection").removeClass("display-n");
        } else {
            $(".regiFormSection").addClass("display-n");
        }
    });

    $("input[name='patent_type']").on("change, click", function () {
        $("input[name='patent_type']").parents("td").removeClass("has-error");
        if ($("input[name='patent_type']:checked").length > 0) {
            $("input[name='patent_application_no']").parent().removeClass("display-n");
        }
    });

    $("input[name='trademark_type']").on("change, click", function () {
        $("input[name='trademark_type']").parents("td").removeClass("has-error");
        if ($("input[name='trademark_type']:checked").length > 0) {
            $("input[name='trademark_application_no']").parent().removeClass("display-n");
        }
    });

    $("input[name='copyright_type']").on("click", function () {
        $("input[name='copyright_type']").parents("td").removeClass("has-error");
    });

    $("input[name='design_type']").on("change, click", function () {
        $("input[name='design_type']").parents("td").removeClass("has-error");
        if ($("input[name='design_type']:checked").length > 0) {
            $("input[name='design_application_no']").parent().removeClass("display-n");
        }
    });

    $("input[name='plant_variety_type']").on("click", function () {
        $("input[name='plant_variety_type']").parents("td").removeClass("has-error");
    });

    $("input[name='innovative_product_service_type']").on("change", function () {
        if ($(this).val() === "1") {
            $(".innovative_product_service_table").removeClass("display-n");
        } else {
            $(".innovative_product_service_table").addClass("display-n");
        }
    });

    $("input[name='business_model_type']").on("change", function () {
        if ($(this).val() === "1") {
            $(".business_model_detail").removeClass("display-n");
        } else {
            $(".business_model_detail").addClass("display-n");
        }
    });

    $($entity_type).on("change", function () {
        $('input[name=incorp_date], input[name=entity_name], input[name=incorp_number]').val('');
        if ($(this).val() === "PRIVATE_LIMITED_COMPANY" || $(this).val() == "LIMITED_LIABILITY_PARTNERSHIP") {
            $('input[name=incorp_date]').attr('disabled', 'disabled');
            $('input[name=entity_name]').attr({
                'disabled': 'disabled',
                'readonly': 'true'
            });
            $('.recognition-tax-benifit #tax_benifit').removeAttr('disabled');
            $('.recognition-tax-benifit #tax_benifit>option:eq(0)').prop('selected', true);
        } else {
            $('input[name=incorp_date]').removeAttr('disabled');
            $('input[name=entity_name]').removeAttr('readonly disabled');
            $('.recognition-tax-benifit #tax_benifit>option:eq(1)').prop('selected', true);
            $('.recognition-tax-benifit #tax_benifit').attr('disabled', 'disabled');

            $(".availTaxBenefit").addClass("display-n").find("textarea").val("");
            $(".availTaxBenefit").find(".fundedFileName a").html("");
            $tax_ipr.val("0");
            $tax_ipr.find("option[value='1']").addClass("display-n");
            $(".notEligibleForTax-errorMessage").removeClass("display-n");
        }
    });

    var saveObject = {
        "SaveEntity": {"name": "SaveEntity", "section": 1, "errorMessage": "saveEntityErrorMessage"},
        "saveAuthorizedRepresentatives": {
            "name": "saveAuthorizedRepresentatives",
            "section": 2,
            "errorMessage": "saveAuthorizedRepErrorMessage"
        },
        "saveFundingDetails": {
            "name": "saveFundingDetails",
            "section": 3,
            "errorMessage": "saveFundingDetailsMessage"
        },
        "saveRequiredInfo": {"name": "saveRequiredInfo", "section": 4, "errorMessage": "saveRequiredInfoErrorMessage"},
        "saveFounderDetails": {
            "name": "saveFounderDetails",
            "section": 5,
            "errorMessage": "saveFounderDetailsErrorMessage"
        },
        "saveSelfCertification": {
            "name": "saveSelfCertification",
            "section": 6,
            "errorMessage": "saveSelfCertificationErrorMessage"
        }
    };

    $("input[value='Save'],input[name='submitRecognitionForm']").click(function (e) {
        var s = saveObject[this.name];
        var $this = this;
        var $target = $(e.currentTarget);
        var isSubmit = $target.val() === "Submit";
        var url = SIH.getEndPoint("/api/auth/recognition/draft/goa/startup");
        if (isSubmit) {
            url = SIH.getEndPoint("/api/auth/recognition/save/goa/startup");
            $target = $(".certify");
        }
        validate($target);
        if (isValidated) {
            var $formData = $target.closest("form.goaRecognitionForm").serialize();
            var data = convertSerializeDataToJSON($formData);
            handleCustomizedData(data);
            s && (data["lastAccordionSaved"] = s.section);
            $('#modal-loader').modal('show');
            $.ajax({
                url: url,
                data: JSON.stringify(data),
                type: 'POST',
                beforeSend: setAuthTokenHeader,
                contentType: "application/json",
                success: function (response) {
                    $('#modal-loader').modal('hide');
                    if (response) {
                        saveStateRecognized();
                        $("input[name=id]").val(response);
                        $($this).parents(".accordion-section-content").hide();
                        var $accItem = $($this).parents(".accordionitem");
                        $accItem.find(".accordion-section-title").removeClass("active");
                        $accItem.next().find(".accordion-section-title").addClass("active");
                        $accItem.next().find(".accordion-section-content").show();

                    }
                    if (isSubmit) {
                        window.location.href = $("#thankyouPage").val();
                    }
                }, error: function (response) {
                    $('#modal-loader').modal('hide');
                    var errorMsg = "Error in saving the form";
                    if (response != null) {
                        errorMsg = response.constructor === Array && response.get(0) != null ? response[0].defaultMessage : (response.responseText != null && response.responseText != "" ? errorMsg + " : " + response.responseText : errorMsg);
                    }
                    $('.goa-recognition-error-modal p').html(errorMsg);
                    $('.goa-recognition-error-modal').modal('show');
                }
            });

        } else {
            $(".accordionitem").find(".accordion-section-title").removeClass("active").end()
                .find(".accordion-section-content").hide();
            var _firstErrorElem = $(".form-group.has-error:first");
            $('html, body').animate({
                scrollTop: _firstErrorElem.offset().top - 15
            }, 500);
            _firstErrorElem.closest(".accordionitem").find(".accordion-section-title").addClass("active");
            $(".form-group.has-error").each(function () {
                $(this).closest(".accordionitem").find(".accordion-section-content").show();
            });
        }
    });

    function checkFileUpload(fileToValidate, fileOriginal, fileDisplayName, fileSize) {

        var message = "";
        if ($(fileToValidate).val() !== "") {
            if (fileToValidate.files[0].size > fileSize) {
                isValidated = false;
                message = "File Should not be greater than " + Math.floor(fileSize / 1000000) + " MB.";
            }
            if ((fileToValidate.files[0].type).indexOf("image") > -1) {
                isValidated = false;
                message = message + "Image-type file format not accepted.";
            }
            if (message !== "") {
                isValidated = false;
                $(fileToValidate).siblings(".help-block").html(message).parents(".form-group").addClass("has-error");
                $(fileToValidate).val("");
                $(fileToValidate).siblings(".fileName").val("");
                $(fileToValidate).siblings(".fileDisplayName").val("");
                $(fileToValidate).siblings("a.presentationLink").addClass("display-n");
            } else {
                $(fileToValidate).siblings(".help-block").html("").parents(".form-group").removeClass("has-error");
                $(fileToValidate).siblings("input[type='hidden'][name='" + fileDisplayName + "']").val(fileToValidate.files[0].name);
                var data = new FormData();
                data.append("file", fileToValidate.files[0]);
                $(".modal.loader").modal("show");
                $.ajax({
                    type: "POST",
                    data: data,
                    dataType: 'json',
                    contentType: false,
                    processData: false,
                    url: SIH.getEndPoint("/api/file/stateRecognition/doc/goa"),
                    headers: {"X-Auth-Token": store.getItem("token")}
                }).done(function (data) {
                    $(".modal.loader").modal("hide");
                    $(fileToValidate).siblings("input[type='hidden'][name='" + fileOriginal + "']").val(data.name);
                    if (data.name) {
                        var $presentationLink = $(fileToValidate).siblings("a.presentationLink");
                        $presentationLink.prop("href", SIH.getEndPoint("/api/file/stateRecognition/goa/") + data.name + "/get").text(data.originalFilename).removeClass("display-n");
                    }
                }).error(function () {
                    $(".modal.loader").modal("hide");
                    alert("Error in uploading file. Please try again.");
                    $(fileToValidate).val("");
                    $(fileToValidate).siblings(".fileName").val("");
                    $(fileToValidate).siblings(".fileDisplayName").val("");
                    $(fileToValidate).siblings("a.presentationLink").addClass("display-n");
                    return false;
                });
            }
        }
        return false;
    }

    function handleCustomizedData(data) {
        var services = data["services"];
        if ($("input[name=funded]:checked").val() === "on") {
            var fundingSource = data["fundingSource"];
            var founderName = data["founderName"];
            if (fundingSource && !Array.isArray(fundingSource)) {
                fundingSource = new Array(fundingSource);
            }
            if (founderName && !Array.isArray(founderName)) {
                founderName = new Array(founderName);
            }
            if (fundingSource && fundingSource.length) {
                var fundingDetails = [];
                $(fundingSource).each(function (index, item) {
                    var fund = {
                        fundingSource: Array.isArray(data["fundingSource"]) ? data["fundingSource"][index] : data["fundingSource"],
                        fundingAmount: Array.isArray(data["fundingAmount"]) ? data["fundingAmount"][index] : data["fundingAmount"],
                        fundingDate: Array.isArray(data["fundingDate"]) ? data["fundingDate"][index] : data["fundingDate"]
                    };
                    fundingDetails.push(fund);

                });
                data["fundingDetails"] = fundingDetails;
                delete data["fundingSource"];
                delete data["fundingAmount"];
                delete data["fundingDate"];
            }
        } else {
            delete  data["fundingDetails"];
        }
        var founderName = $('input[name=founderName]');
        var founderAddress = $('input[name=founderAddress]');
        var founderAge = $('input[name=founderAge]');
        var founderEducation = $('input[name=founderEducation]');
        var founderExperience = $('input[name=founderExperience]');
        var founderExperienceDetails = $('input[name=founderExperienceDetails]');

        var founderDetails = [];
        for (var i = 0; i < founderName.length; i++) {
            var founder = {
                founderName: $(founderName[i]).val(),
                founderAddress: $(founderAddress[i]).val(),
                founderAge: $(founderAge[i]).val(),
                founderEducation: $(founderEducation[i]).val(),
                founderExperience: $(founderExperience[i]).val(),
                founderExperienceDetails: $(founderExperienceDetails[i]).val()
            };
            founderDetails.push(founder);
        }
        data["founderDetails"] = founderDetails;
        delete data["founderName"];
        delete data["founderAddress"];
        delete data["founderAge"];
        delete data["founderEducation"];
        delete data["founderExperience"];
        delete data["founderExperienceDetails"];

        /* if(founderName && founderName.length){

             $(founderName).each(function(index,item){
                 var founder = {
                     founderName: Array.isArray(data["founderName"]) ? data["founderName"][index] : data["founderName"],
                     founderAddress:Array.isArray(data["founderAddress"]) ? data["founderAddress"][index] : data["founderAddress"],
                     founderAge:Array.isArray(data["founderAge"]) ? data["founderAge"][index] : data["founderAge"],
                     founderEducation:Array.isArray(data["founderEducation"]) ? data["founderEducation"][index] : data["founderEducation"],
                     founderExperience:Array.isArray(data["founderExperience"]) ? data["founderExperience"][index] : data["founderExperience"],
                     founderExperienceDetails:Array.isArray(data["founderExperienceDetails"]) ? data["founderExperienceDetails"][index] : data["founderExperienceDetails"]
                 };
                 founderDetails.push(founder);

             });
             data["founderDetails"] = founderDetails;
             delete data["founderName"];
             delete data["founderAddress"];
             delete data["founderAge"];
             delete data["founderEducation"];
             delete data["founderExperience"];
             delete data["founderExperienceDetails"];
         }*/
        if (services && !Array.isArray(services)) {
            data["services"] = new Array(services);
        }
        if ($("input[name=dippCertified]:checked").val() === "off") {
            delete data["dippNumber"];
        }
        if ($("input[name=registeredInOtherState]:checked").val() === "off") {
            delete data["otherState"];
            delete data["startupRegNo"];
            delete data["startupRegDate"];
        }
        if ($("input[name=appliedForIpr]:checked").val() === "off") {
            delete data["patent"];
            delete data["trademark"];
            delete data["copyright"];
            delete data["design"];
            delete data["plantVariety"];
            delete data["patentApplicationNo"];
            delete data["trademarkApplicationNo"];
            delete data["copyrightApplicationNo"];
            delete data["designApplicationNo"];
            delete data["plantVarietyApplicationNo"];
        }
    }

    if (authToken) {
        getRecognitionData();
    }

    function getRecognitionData() {
        $('#modal-loader').modal('show');
        $.ajax({
            type: "GET",
            async: false,
            url: SIH.getEndPoint("/api/auth/recognition/fetchDetails/goa/startup"),
            headers: {"X-Auth-Token": authToken}
        }).done(function (data) {
            if (data) {
                setFormData(data);
            } else {
                prePopulateForm();
            }
        });
    }

    function checkRequiredField(attrValue, inputSel) {
        var requiredField = $(inputSel).closest(".form-group").find("sup.required");
        if (requiredField && requiredField.length > 0 && (!attrValue || attrValue === "")) {
            isValidated = false;
            $(inputSel).closest(".form-group").addClass("has-error").find("span.help-block").first().html("This field can't be left Blank.");
        } else {
            $(inputSel).closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
        }
    }


    function infoRequiredData(accordianItem, fieldName) {
        var inputSelection = $(accordianItem).find("input[name='" + fieldName + "']:checked");
        var attrValue = $(inputSelection).val();
        if (attrValue) {
            formData.delete(fieldName);
            formData.append(fieldName, attrValue.toString());
        }
        checkRequiredField(attrValue, $(accordianItem).find("input[name='" + fieldName + "']"));
    }

    $('input[name=product_service_type]').change(function (e) {
        var val = $('input[name=product_service_type]:checked').val();
        if (val) {
            if (val === "1") {
                $(this).closest(".form-group").append("<p id='stageCheck' style='color:#a94442'>Startups at Ideation Stage are not eligible for Tax Benefits</p>");
            } else {
                $('#stageCheck').remove();
            }
        }

    });

    function showRecognitionError(obj, msg) {
        msg = msg ? msg : "There might be some error in your form, please recheck and save again.";
        $(obj).parents(".button").next().find(".has-error").html(msg).removeClass('display-n');
    }

    function validate($target) {
        var validateIpr = false;
        if ($("input[name=incorpNumber]").closest(".form-group").hasClass("has-error")) {
            isValidated = false;
            return false;
        }
        isValidated = true;
        var currentTarget = $target.closest('div.accordionitem');
        var validateSections = [];
        validateSections.push($(currentTarget));
        $(currentTarget).attr("validate", "1");
        $(currentTarget).prevAll().each(function () {
            $(this).attr("validate", "1");
            validateSections.push($(this));
        });

        var requiredFields = $('div.accordion-section sup.required');
        $.each(requiredFields, function (index, item) {
            if (($(item).closest("div.accordionitem")).attr("validate") === "1") {
                var element = $(item).closest('.form-group').find(".form-control:not(.richTextarea,.customised-dropdown)");
                if (element.attr("name") === "appliedForIpr") {
                    validateIpr = true;
                }
                if (element && element.length > 0 && !element.closest(".modal").length && !element.closest(".form-group").hasClass("display-n")) {
                    if (element.attr("type") === "radio" || element.attr("type") === "checkbox") {
                        if (element.is(':checked')) {
                            element.closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
                        }
                        else {
                            if (element.attr("type") === "checkbox") {
                                element.closest(".form-group").addClass("has-error");
                            } else {
                                element.closest(".form-group").addClass("has-error").find("span.help-block").first().html("This field cannot be left Blank.");
                            }
                            isValidated = false;
                        }
                    }
                    else if (!element.val() || element.val() === "") {
                        isValidated = false;
                        showErrorState(element, true);
                    } else if (element.attr("minlength") && element.val().length < parseInt(element.attr("minlength"))) {
                        element.closest(".form-group").addClass("has-error").find("span.help-block").first().html("Mimimum length of this field must be " + element.attr("minlength"));
                        isValidated = false;
                    } else {
                        showErrorState(element, false);
                    }
                }

            }
        });
        var richTextAreas = $('.form-control.richTextarea');
        $.each(richTextAreas, function (index, item) {
            if (($(item).closest("div.accordionitem")).attr("validate") === "1") {
                var el = $(item);
                if (el.closest('.form-group').find('sup.required').length > 0) {
                    var note = el.val().trim();
                    if (note.length > 0 && !el.summernote('isEmpty')) {
                        el.siblings('.note-editor.note-frame').removeClass('note-has-error').addClass('note-writer-text');
                        showErrorState(el, false);
                    } else {
                        isValidated = false;
                        el.siblings('.note-editor.note-frame').addClass('note-has-error').removeClass('note-writer-text');
                        showErrorState(el, true);
                    }
                }
            }
        });

        var customizedDropDown = $('.form-control.customised-dropdown');
        $.each(customizedDropDown, function (index, item) {
            if (($(item).closest("div.accordionitem")).attr("validate") === "1") {
                var el = $(item);
                var selectedIndustries = $("select[name=industry]").val();
                if (!selectedIndustries || selectedIndustries.length === 0) {
                    isValidated = false;
                    showErrorState(el, true);
                } else {
                    $.each(selectedIndustries, function (idx, selectedIndustry) {
                        var selectedIndustryArr = selectedIndustry.split("/");
                        var industryName = selectedIndustryArr[selectedIndustryArr.length - 1];
                        if (el.find("ul#sector").first().find("input[name=" + industryName + "][type=checkbox]:checked").length === 0) {
                            isValidated = false;
                            showErrorState(el, true);
                        } else {
                            showErrorState(el, false);
                        }
                    });
                }
            }
        });

        var regexValidatedfields = $('.form-control.regex-val');
        $.each(regexValidatedfields, function (index, item) {
            if (($(item).closest("div.accordionitem")).attr("validate") === "1") {
                var element = $(item);
                var re = new RegExp(element.attr("regex"));
                if (element.val() && !re.test(element.val())) {
                    isValidated = false;
                    //showErrorState(element, true);
                    element.closest(".form-group").addClass("has-error");
                    element.siblings(".regex-msg").show();
                }
                else {
                    if (!(element.closest(".form-group").has("sup.required") && !element.val())) {
                        showErrorState(element, false);
                    }
                    element.siblings(".regex-msg").hide();
                }
            }
        });
        var iprValue = $("input[name=appliedForIpr]:checked").val();
        if (iprValue === "on" && validateIpr) {
            validateIPR();
        }
    }

    function validateIPR() {
        var validated = false;
        var patent = $("input[name=patent]:checked");
        var trademark = $("input[name=trademark]:checked");
        var copyright = $("input[name=copyright]:checked");
        var design = $("input[name=design]:checked");
        var plantVariety = $("input[name=plantVariety]:checked");

        var patentNo = $("input[name=patentApplicationNo]");
        var trademarkNo = $("input[name=trademarkApplicationNo]");
        var copyrightNo = $("input[name=copyrightApplicationNo]");
        var designNo = $("input[name=designApplicationNo]");
        var plantNo = $("input[name=plantVarietyApplicationNo]");

        if (patent && patent.length) {
            if (patentNo.val()) {
                patentNo.parents("td").removeClass("has-error");
            } else {
                patentNo.parents("td").addClass("has-error");
                validated = validated || true;
            }
        }
        if (patentNo.val()) {
            if (patent && !patent.length) {
                $("input[name=patent]").parents("td").addClass("has-error");
                validated = validated || true;
            } else {
                $("input[name=patent]").parents("td").removeClass("has-error");
            }
        }

        if (trademark && trademark.length) {
            if (trademarkNo.val()) {
                trademarkNo.parents("td").removeClass("has-error");
            } else {
                trademarkNo.parents("td").addClass("has-error");
                validated = validated || true;
            }
        }
        if (trademarkNo.val()) {
            if (trademark && !trademark.length) {
                $("input[name=trademark]").parents("td").addClass("has-error");
                validated = validated || true;
            } else {
                $("input[name=trademark]").parents("td").removeClass("has-error");
            }
        }

        if (copyright && copyright.length) {
            if (copyrightNo.val()) {
                copyrightNo.parents("td").removeClass("has-error");
            } else {
                copyrightNo.parents("td").addClass("has-error");
                validated = validated || true;
            }
        }
        if (copyrightNo.val()) {
            if (copyright && !copyright.length) {
                $("input[name=copyright]").parents("td").addClass("has-error");
                validated = validated || true;
            } else {
                $("input[name=copyright]").parents("td").removeClass("has-error");
            }
        }
        if (design && design.length) {
            if (designNo.val()) {
                designNo.parents("td").removeClass("has-error");
            } else {
                designNo.parents("td").addClass("has-error");
                validated = validated || true;
            }
        }
        if (designNo.val()) {
            if (design && !design.length) {
                $("input[name=design]").parents("td").addClass("has-error");
                validated = validated || true;
            } else {
                $("input[name=design]").parents("td").removeClass("has-error");
            }
        }
        if (plantVariety && plantVariety.length) {

            if (plantNo.val()) {
                plantNo.parents("td").removeClass("has-error");
            } else {
                plantNo.parents("td").addClass("has-error");
                validated = validated || true;
            }
        }
        if (plantNo.val()) {
            if (plantVariety && !plantVariety.length) {
                $("input[name=plantVariety]").parents("td").addClass("has-error");
                validated = validated || true;
            } else {
                $("input[name=plantVariety]").parents("td").removeClass("has-error");
            }
        }

        if (validated) {
            isValidated = false;
        }
    }

    function setFormData(data) {
        $.each(data, function (index, val) {
            var field = $('form.goaRecognitionForm input[name=' + index + '], form.goaRecognitionForm select[name=' + index + '], form.goaRecognitionForm textarea[name=' + index + ']');
            var isList = Boolean(field.closest(".repeat-container").length);
            var type = field.attr("type");
            if (type === 'radio') {
                $.each($('input[name=' + index + ']'), function (index, value) {
                    if (($(this).val() === "on" && val === true) || ($(this).val() === "off" && val === false) || ($(this).val() === val)) {
                        $(this).attr('checked', true);
                        field.trigger("change");
                        return true;
                    }
                });
            } else if (type === 'checkbox') {
                $.each($('input[name=' + index + ']'), function (index, value) {
                    var inputVal = $(this).val();
                    $.each(val, function (index, value1) {
                        if (value1 === inputVal) {
                            $(value).attr('checked', true);
                        }
                    })
                });
            }
            else if (isList && Array.isArray(val)) {
                val.forEach(function (value, idx) {
                    field = $('form.goaRecognitionForm input[name=' + index + '], form.goaRecognitionForm select[name=' + index + '], form.goaRecognitionForm textarea[name=' + index + ']');
                    var currentField = $(field).eq(idx);
                    currentField.val(value);
                    if (field.length < val.length) {
                        var parent = currentField.closest(".repeat-container");
                        var button = parent.find(".repeat-add");
                        if (button.length > 0) {
                            button.trigger("click");
                        }
                    }
                })
            } else {
                field.val(val);
                if (index !== "incorpNumber" && index !== 'entityType') {
                    field.trigger("change")
                }
            }
        });
        if (data["startupindustry"]) {
            var params = {};
            params["industry"] = data["startupindustry"];
            var $selection = $("#sector");
            setList(params, $selection.data("path"), $selection);
            $selection.val(data["sector"]);
        }
        if (data["fundingDetails"]) {
            data["fundingDetails"].forEach(function (value, idx) {
                var fundingSource = $('form.goaRecognitionForm input[name=fundingSource]')[idx];
                var fundingAmount = $('form.goaRecognitionForm input[name=fundingAmount]')[idx];
                var fundingDate = $('form.goaRecognitionForm input[name=fundingDate]')[idx];
                $(fundingSource).val(value["fundingSource"]);
                $(fundingAmount).val(value["fundingAmount"]);
                $(fundingDate).val(value["fundingDate"]);
                if ((idx + 1) < data["fundingDetails"].length) {
                    $('form.goaRecognitionForm input[name=fundingSource]').closest(".repeat-container").find('.repeat-add').trigger("click");
                }
            });
        }
        if (data["founderDetails"]) {
            data["founderDetails"].forEach(function (value, idx) {
                var founderName = $('form.goaRecognitionForm input[name=founderName]')[idx];
                var founderAge = $('form.goaRecognitionForm input[name=founderAge]')[idx];
                var founderAddress = $('form.goaRecognitionForm input[name=founderAddress]')[idx];
                var founderEducation = $('form.goaRecognitionForm input[name=founderEducation]')[idx];
                var founderExperience = $('form.goaRecognitionForm input[name=founderExperience]')[idx];
                var founderExperienceDetails = $('form.goaRecognitionForm input[name=founderExperienceDetails]')[idx];
                $(founderName).val(value["founderName"]);
                $(founderAge).val(value["founderAge"]);
                $(founderAddress).val(value["founderAddress"]);
                $(founderEducation).val(value["founderEducation"]);
                $(founderExperience).val(value["founderExperience"]);
                $(founderExperienceDetails).val(value["founderExperienceDetails"]);
                if ((idx + 1) < data["founderDetails"].length) {
                    $('form.goaRecognitionForm input[name=founderName]').closest(".repeat-container").find('.repeat-add').trigger("click");
                }
            });
        }
        if (data["entityType"] !== "REGISTERED_PARTNERSHIP") {
            $entity_name.attr("readonly", "readonly").parents(".form-group").removeClass("has-error").find(".help-block").html("");
            $incorp_date.attr("readonly", "readonly").parents(".form-group").removeClass("has-error").find(".help-block").html("");
        }

        $("textarea[name=ideaBrief].richTextArea").summernote("code", data["ideaBrief"]);
        if (data["lastAccordionSaved"]) {
            var openAccordion = $incorp_number;
            $('.accordionitem .number').each(function (index, val) {
                if ($(this).html().trim() === data["lastAccordionSaved"]) {
                    openAccordion = $(this);
                }
            });
            $(openAccordion).parents(".accordionitem").find(".accordion-section-title").addClass("active");
            $(openAccordion).parents(".accordionitem").find(".accordion-section-content").show();
            if (data["lastAccordionSaved"] !== "1") {
                $(".accordionitem:first").find(".accordion-section-title").removeClass("active");
                $(".accordionitem:first").find(".accordion-section-content").hide();
            }
        }

        if (data["status"] == "ACCEPTED" || data["status"] == "REJECTED") {
            viewMode();
        }
        populateUploadedFiles(data);
        $('#modal-loader').modal('hide');
    }

    function viewMode() {
        $(".goa-recognition-container").find(".accordion-section-content").show().end()
            .find(".repeat-add").hide().end()
            .find(".repeat-remove").hide().end()
            .find("input").attr("disabled", "disabled").end()
            .find(".form-control").attr("disabled", "disabled");
        $("textarea[name=ideaBrief].richTextArea").summernote('disable');
    }
};
$.upRecognition = function () {
    var cin = "";
    var referenceNo = "";
    var lastAccordionSaved = "";
    var formData = new FormData();
    var isValidated = true;
    var tableContent;
    var authToken = store.getItem("token");

    var $entity_type = $("select[name='entityType']");
    var $industry_id = $("select[name='industry_id']");
    var $section = $("select[name='section']");
    var $categories_id = $("select[name='categories_id']");
    var $state_id = $('#state_name');
    var $incorp_number = $("input[name='incorpNumber']");
    var $incorp_date = $("input[name='incorpDate']");
    var $entity_name = $("input[name='entityName']");
    var $tax_ipr = $("select[name='tax_benifit']");
    var $submitRecognitionForm = $("input[name='submitRecognitionForm']");

    //Funding Source
    var $isFunded = $("input[name=funded]");
    var $isFundedVal = $("input[name=funded]:checked").val();
    var $fundingSource = $("input[name=fundingSource]");

    //IPR
    var $appliedForIpr = $("input[name=appliedForIpr]");
    var $appliedForIprVal = $("input[name=appliedForIpr]:checked").val();
    var $iprForm = $(".regiFormSection");

    //Another State
    var $anotherStateRegistered = $("input[name=registeredInOtherState]");
    var $anotherStateRegisteredVal = $("input[name=registeredInOtherState]:checked").val();
    var $anotherStateName = $("select[name=otherState]");
    var $anotherStateRegistrationNo = $("input[name=startupRegNo]");
    var $anotherStateRegistrationDate = $("input[name=startupRegDate]");

    //DIPP
    var $registeredWithDipp = $("input[name=dippCertified]");
    var $registeredWithDippVal = $("input[name=dippCertified]:checked").val();
    var $dippNumber = $("input[name=dippNumber]");

    var entityType = {
        "1": "PRIVATE_LIMITED_COMPANY",
        "2": "LIMITED_LIABILITY_PARTNERSHIP",
        "3": "REGISTERED_PARTNERSHIP",
    };
    initForm();

    function prePopulateForm() {
        $.ajax({
            type: "GET",
            async: false,
            url: SIH.getEndPoint("/api/auth/user/profile"),
            headers: {"X-Auth-Token": store.getItem("token")}
        }).done(function (data) {
            $("select[name=industry]").val(data.user.startup.focusArea.industry.id);
            if (data.user.startup.focusArea.sectors) {
                var params = {};
                params["sector"] = data.user.startup.focusArea.sectors.id;
                var $selection = $("#sector");
                setList(params, $selection.data("path"), $selection);
                $("select[name=sector]").val(data.user.startup.focusArea.sectors[0].id)
            }
            var selectedServices = [];
            $(data.user.startup.services).each(function (key, val) {
                $("select[name=services] option").each(function (key, value) {
                    if ($(this).text() === val) {
                        selectedServices.push($(value).val());
                    }
                });
            });
            $("select[name=services]").val(selectedServices).select2();
            $("input[name=panNumber]").val(data.user.startup.pan);
            $("input[name=incorpNumber]").val(data.user.startup.cin);
            if (data.user.startup.cin) {
                $("input[name=incorpNumber]").trigger("change");
            }
            $("input[name=website]").val(data.user.startup.website);
            $.each($('input[name=stage]'), function (index, value) {
                if (($(this).val() === "on" && data.user.startup.stage === true) || ($(this).val() === "off" && data.user.startup.stage === false) || ($(this).val() === data.user.startup.stage)) {
                    $(this).attr('checked', true);
                }
            });
            $.each($('input[name=dippCertified]'), function (index, value) {
                if (($(this).val() === "on" && data.user.startup.dippCertified === true) || ($(this).val() === "off" && data.user.startup.dippCertified === false) || ($(this).val() === data.user.startup.dippCertified)) {
                    $(this).attr('checked', true).trigger("change");
                }
            });
            $("input[name=dippNumber]").val(data.user.startup.dippNumber);
            $("textarea[name=ideaBrief].richTextArea").summernote("code", data.user.startup.ideaBrief);
            $('#modal-loader').modal('hide');
        });
    }

    function populateUploadedFiles(data) {
        ["businessModel", "pitchDeck", "letters"].forEach(function (fileName) {
            if (data[fileName]) {
                $("input[name='" + fileName + "']").val(data[fileName]);
                $("input[name='" + fileName + "FileName']").val(data[fileName + "FileName"]);
                var $presentationLink = $("input[type=file][name='upload_" + fileName + "']").siblings("a.presentationLink");
                $presentationLink.prop("href", SIH.getEndPoint("/api/file/stateRecognition/up/") + data[fileName] + "/get").text(data[fileName + "FileName"]).removeClass("display-n");
            }
        });
    }

    function initForm() {
        if (!$isFundedVal || $isFunded === "off") {
            $fundingSource.closest(".repeatcontainer").addClass("display-n");
            $fundingSource.closest(".repeatcontainer").find(".form-group").addClass("display-n");
        }
        if (!$appliedForIprVal || $appliedForIprVal === "off") {
            $iprForm.addClass("display-n");
        }
        if (!$anotherStateRegisteredVal || $anotherStateRegisteredVal === "off") {
            $anotherStateName.closest(".form-group").addClass("display-n");
            $anotherStateRegistrationNo.closest(".form-group").addClass("display-n");
            $anotherStateRegistrationDate.closest(".form-group").addClass("display-n");
        }
        if (!$registeredWithDippVal || $registeredWithDippVal === "off") {
            $dippNumber.closest(".form-group").addClass("display-n");
        }
    }

    $entity_type.on("change", function () {
        $('input[name=incorpDate], input[name=entityName], input[name=incorpNumber]').val('');
        if ($(this).val() === "PRIVATE_LIMITED_COMPANY" || $(this).val() === "LIMITED_LIABILITY_PARTNERSHIP") {
            $('input[name=incorpDate]').attr('readonly', 'readonly');
            $('input[name=entityName]').attr({
                'readonly': 'true'
            });
        } else {
            $('input[name=incorpDate]').removeAttr('readonly');
            $('input[name=entityName]').removeAttr('readonly');
        }
    });

    $isFunded.change(function () {
        var val = $("input[name=funded]:checked").val();
        if (val === "on") {
            $fundingSource.closest(".repeatcontainer").removeClass("display-n");
            $fundingSource.closest(".repeatcontainer").find(".form-group").removeClass("display-n");
        } else {
            $fundingSource.closest(".repeatcontainer").addClass("display-n");
            $fundingSource.closest(".repeatcontainer").find(".form-group").addClass("display-n");
        }
    });
    $appliedForIpr.change(function () {
        var val = $("input[name=appliedForIpr]:checked").val();
        if (val === "on") {
            $iprForm.removeClass("display-n");
        } else {
            $iprForm.addClass("display-n");
        }
    });
    $anotherStateRegistered.change(function () {
        var val = $("input[name=registeredInOtherState]:checked").val();
        if (val === "on") {
            $anotherStateName.closest(".form-group").removeClass("display-n");
            $anotherStateRegistrationNo.closest(".form-group").removeClass("display-n");
            $anotherStateRegistrationDate.closest(".form-group").removeClass("display-n");
        } else {
            $anotherStateName.closest(".form-group").addClass("display-n");
            $anotherStateRegistrationNo.closest(".form-group").addClass("display-n");
            $anotherStateRegistrationDate.closest(".form-group").addClass("display-n");
        }
    });

    $registeredWithDipp.change(function () {
        var val = $("input[name=dippCertified]:checked").val();
        if (val === "on") {
            $dippNumber.closest(".form-group").removeClass("display-n");
        } else {
            $dippNumber.closest(".form-group").addClass("display-n");
        }
    });

    $(".accordionitem:first").find(".accordion-section-title").addClass("active");
    $(".accordionitem:first").find(".accordion-section-content").addClass("open").show();

    $incorp_number.on("change", function () {
        if ($entity_type.val() !== "REGISTERED_PARTNERSHIP") {
            var $this = this;
            $('#modal-loader').modal('show');
            $.ajax({
                type: "POST",
                dataType: "json",
                data: {"incorp_no": $(this).val()},
                url: $("#incorporationNoMCA").val(),
                success: function (data) {
                    $('#modal-loader').modal('hide');
                    if (data.isValidIncorporationNo === "true") {
                        $entity_name.val(data.nameEntity).attr("readonly", "readonly").parents(".form-group").removeClass("has-error").find(".help-block").html("");
                        var dateSplit = data.incorpdate.split("-");
                        if (dateSplit.length === 3) {
                            $incorp_date.val(dateSplit[1] + "/" + dateSplit[0] + "/" + dateSplit[2]).attr("readonly", "readonly").parents(".form-group").removeClass("has-error").find(".help-block").html("");
                        }
                        $($this).parents(".form-group").removeClass("has-error").find(".help-block").html("");
                    } else {
                        //  $entity_name.val("").removeAttr("readonly");
                        //  $incorp_date.val("").removeAttr("readonly");
                        $($this).parents(".form-group").addClass("has-error").find(".help-block").html("Please enter valid CIN number.")
                    }
                },
                error: function () {
                    $('#modal-loader').modal('hide');
                    $($this).parents(".form-group").addClass("has-error").find(".help-block").html("We are facing problems fetching your CIN details. Please try after some time.")
                }
            });
        }
    });

    $(".fileuploadMultipurpose").change(function () {
        var _this = $(this);
        var formats = ["image/jpeg", "image/png", "application/pdf"];
        checkFileUpload(this, _this.data("propname"), _this.data("propdisplay"), 10000000);
    });

    $("input[name='ipr_type']").on("change", function () {
        if ($(this).val() === "1") {
            $(".regiFormSection").removeClass("display-n");
        } else {
            $(".regiFormSection").addClass("display-n");
        }
    });

    $("input[name='patent_type']").on("change, click", function () {
        $("input[name='patent_type']").parents("td").removeClass("has-error");
        if ($("input[name='patent_type']:checked").length > 0) {
            $("input[name='patent_application_no']").parent().removeClass("display-n");
        }
    });

    $("input[name='trademark_type']").on("change, click", function () {
        $("input[name='trademark_type']").parents("td").removeClass("has-error");
        if ($("input[name='trademark_type']:checked").length > 0) {
            $("input[name='trademark_application_no']").parent().removeClass("display-n");
        }
    });

    $("input[name='copyright_type']").on("click", function () {
        $("input[name='copyright_type']").parents("td").removeClass("has-error");
    });

    $("input[name='design_type']").on("change, click", function () {
        $("input[name='design_type']").parents("td").removeClass("has-error");
        if ($("input[name='design_type']:checked").length > 0) {
            $("input[name='design_application_no']").parent().removeClass("display-n");
        }
    });

    $("input[name='plant_variety_type']").on("click", function () {
        $("input[name='plant_variety_type']").parents("td").removeClass("has-error");
    });

    $("input[name='innovative_product_service_type']").on("change", function () {
        if ($(this).val() === "1") {
            $(".innovative_product_service_table").removeClass("display-n");
        } else {
            $(".innovative_product_service_table").addClass("display-n");
        }
    });

    $("input[name='business_model_type']").on("change", function () {
        if ($(this).val() === "1") {
            $(".business_model_detail").removeClass("display-n");
        } else {
            $(".business_model_detail").addClass("display-n");
        }
    });

    $($entity_type).on("change", function () {
        $('input[name=incorp_date], input[name=entity_name], input[name=incorp_number]').val('');
        if ($(this).val() === "PRIVATE_LIMITED_COMPANY" || $(this).val() == "LIMITED_LIABILITY_PARTNERSHIP") {
            $('input[name=incorp_date]').attr('disabled', 'disabled');
            $('input[name=entity_name]').attr({
                'disabled': 'disabled',
                'readonly': 'true'
            });
            $('.recognition-tax-benifit #tax_benifit').removeAttr('disabled');
            $('.recognition-tax-benifit #tax_benifit>option:eq(0)').prop('selected', true);
        } else {
            $('input[name=incorp_date]').removeAttr('disabled');
            $('input[name=entity_name]').removeAttr('readonly disabled');
            $('.recognition-tax-benifit #tax_benifit>option:eq(1)').prop('selected', true);
            $('.recognition-tax-benifit #tax_benifit').attr('disabled', 'disabled');

            $(".availTaxBenefit").addClass("display-n").find("textarea").val("");
            $(".availTaxBenefit").find(".fundedFileName a").html("");
            $tax_ipr.val("0");
            $tax_ipr.find("option[value='1']").addClass("display-n");
            $(".notEligibleForTax-errorMessage").removeClass("display-n");
        }
    });

    var saveObject = {
        "SaveEntity": {"name": "SaveEntity", "section": 1, "errorMessage": "saveEntityErrorMessage"},
        "saveAuthorizedRepresentatives": {
            "name": "saveAuthorizedRepresentatives",
            "section": 2,
            "errorMessage": "saveAuthorizedRepErrorMessage"
        },
        "saveFundingDetails": {
            "name": "saveFundingDetails",
            "section": 3,
            "errorMessage": "saveFundingDetailsMessage"
        },
        "saveRequiredInfo": {"name": "saveRequiredInfo", "section": 4, "errorMessage": "saveRequiredInfoErrorMessage"},
        "saveFounderDetails": {
            "name": "saveFounderDetails",
            "section": 5,
            "errorMessage": "saveFounderDetailsErrorMessage"
        },
        "saveSelfCertification": {
            "name": "saveSelfCertification",
            "section": 6,
            "errorMessage": "saveSelfCertificationErrorMessage"
        }
    };

    $("input[value='Save'],input[name='submitRecognitionForm']").click(function (e) {
        var s = saveObject[this.name];
        var $this = this;
        var $target = $(e.currentTarget);
        var isSubmit = $target.val() === "Submit";
        var url = SIH.getEndPoint("/api/auth/recognition/draft/up/startup");
        if (isSubmit) {
            url = SIH.getEndPoint("/api/auth/recognition/save/up/startup");
            $target = $(".certify");
        }
        validate($target);
        if (isValidated) {
            var $formData = $target.closest("form.upRecognitionForm").serialize();
            var data = convertSerializeDataToJSON($formData);
            handleCustomizedData(data);
            s && (data["lastAccordionSaved"] = s.section);
            $('#modal-loader').modal('show');
            $.ajax({
                url: url,
                data: JSON.stringify(data),
                type: 'POST',
                beforeSend: setAuthTokenHeader,
                contentType: "application/json",
                success: function (response) {
                    $('#modal-loader').modal('hide');
                    if (response) {
                        $("input[name=id]").val(response);
                        $($this).parents(".accordion-section-content").hide();
                        var $accItem = $($this).parents(".accordionitem");
                        $accItem.find(".accordion-section-title").removeClass("active");
                        $accItem.next().find(".accordion-section-title").addClass("active");
                        $accItem.next().find(".accordion-section-content").show();
                    }
                    if (isSubmit) {
                        window.location.href = $("#thankyouPage").val();
                    }
                }, error: function (response) {
                    $('#modal-loader').modal('hide');
                    var errorMsg = "Error in saving the form";
                    if (response != null) {
                        errorMsg = response.constructor === Array && response.get(0) != null ? response[0].defaultMessage : (response.responseText != null && response.responseText != "" ? errorMsg + " : " + response.responseText : errorMsg);
                    }
                    $('.up-recognition-error-modal p').html(errorMsg);
                    $('.up-recognition-error-modal').modal('show');
                }
            });

        } else {
            $(".accordionitem").find(".accordion-section-title").removeClass("active").end()
                .find(".accordion-section-content").hide();
            var _firstErrorElem = $(".form-group.has-error:first");
            $('html, body').animate({
                scrollTop: _firstErrorElem.offset().top - 15
            }, 500);
            _firstErrorElem.closest(".accordionitem").find(".accordion-section-title").addClass("active");
            $(".form-group.has-error").each(function () {
                $(this).closest(".accordionitem").find(".accordion-section-content").show();
            });
        }
    });

    function checkFileUpload(fileToValidate, fileOriginal, fileDisplayName, fileSize) {

        var message = "";
        if ($(fileToValidate).val() !== "") {
            if (fileToValidate.files[0].size > fileSize) {
                isValidated = false;
                message = "File Should not be greater than " + Math.floor(fileSize / 1000000) + " MB.";
            }
            if ((fileToValidate.files[0].type).indexOf("image") > -1) {
                isValidated = false;
                message = message + "Image-type file format not accepted.";
            }
            if (message !== "") {
                isValidated = false;
                $(fileToValidate).siblings(".help-block").html(message).parents(".form-group").addClass("has-error");
                $(fileToValidate).val("");
                $(fileToValidate).siblings(".fileName").val("");
                $(fileToValidate).siblings(".fileDisplayName").val("");
                $(fileToValidate).siblings("a.presentationLink").addClass("display-n");
            } else {
                $(fileToValidate).siblings(".help-block").html("").parents(".form-group").removeClass("has-error");
                $(fileToValidate).siblings("input[type='hidden'][name='" + fileDisplayName + "']").val(fileToValidate.files[0].name);
                var data = new FormData();
                data.append("file", fileToValidate.files[0]);
                $(".modal.loader").modal("show");
                $.ajax({
                    type: "POST",
                    data: data,
                    dataType: 'json',
                    contentType: false,
                    processData: false,
                    url: SIH.getEndPoint("/api/file/stateRecognition/doc/up"),
                    headers: {"X-Auth-Token": store.getItem("token")}
                }).done(function (data) {
                    $(".modal.loader").modal("hide");
                    $(fileToValidate).siblings("input[type='hidden'][name='" + fileOriginal + "']").val(data.name);
                    if (data.name) {
                        var $presentationLink = $(fileToValidate).siblings("a.presentationLink");
                        $presentationLink.prop("href", SIH.getEndPoint("/api/file/stateRecognition/up/") + data.name + "/get").text(data.originalFilename).removeClass("display-n");
                    }
                }).error(function () {
                    $(".modal.loader").modal("hide");
                    alert("Error in uploading file. Please try again.");
                    $(fileToValidate).val("");
                    $(fileToValidate).siblings(".fileName").val("");
                    $(fileToValidate).siblings(".fileDisplayName").val("");
                    $(fileToValidate).siblings("a.presentationLink").addClass("display-n");
                    return false;
                });
            }
        }
        return false;
    }

    function handleCustomizedData(data) {
        var services = data["services"];
        if ($("input[name=funded]:checked").val() === "on") {
            var fundingSource = data["fundingSource"];
            var founderName = data["founderName"];
            if (fundingSource && !Array.isArray(fundingSource)) {
                fundingSource = new Array(fundingSource);
            }
            if (founderName && !Array.isArray(founderName)) {
                founderName = new Array(founderName);
            }
            if (fundingSource && fundingSource.length) {
                var fundingDetails = [];
                $(fundingSource).each(function (index, item) {
                    var fund = {
                        fundingSource: Array.isArray(data["fundingSource"]) ? data["fundingSource"][index] : data["fundingSource"],
                        fundingAmount: Array.isArray(data["fundingAmount"]) ? data["fundingAmount"][index] : data["fundingAmount"],
                        fundingDate: Array.isArray(data["fundingDate"]) ? data["fundingDate"][index] : data["fundingDate"]
                    };
                    fundingDetails.push(fund);

                });
                data["fundingDetails"] = fundingDetails;
                delete data["fundingSource"];
                delete data["fundingAmount"];
                delete data["fundingDate"];
            }
        } else {
            delete  data["fundingDetails"];
        }
        var founderName = $('input[name=founderName]');
        var founderAddress = $('input[name=founderAddress]');
        var founderAge = $('input[name=founderAge]');
        var founderEducation = $('input[name=founderEducation]');
        var founderExperience = $('input[name=founderExperience]');
        var founderExperienceDetails = $('input[name=founderExperienceDetails]');

        var founderDetails = [];
        for (var i = 0; i < founderName.length; i++) {
            var founder = {
                founderName: $(founderName[i]).val(),
                founderAddress: $(founderAddress[i]).val(),
                founderAge: $(founderAge[i]).val(),
                founderEducation: $(founderEducation[i]).val(),
                founderExperience: $(founderExperience[i]).val(),
                founderExperienceDetails: $(founderExperienceDetails[i]).val()
            };
            founderDetails.push(founder);
        }
        data["founderDetails"] = founderDetails;
        delete data["founderName"];
        delete data["founderAddress"];
        delete data["founderAge"];
        delete data["founderEducation"];
        delete data["founderExperience"];
        delete data["founderExperienceDetails"];

        /* if(founderName && founderName.length){
 
             $(founderName).each(function(index,item){
                 var founder = {
                     founderName: Array.isArray(data["founderName"]) ? data["founderName"][index] : data["founderName"],
                     founderAddress:Array.isArray(data["founderAddress"]) ? data["founderAddress"][index] : data["founderAddress"],
                     founderAge:Array.isArray(data["founderAge"]) ? data["founderAge"][index] : data["founderAge"],
                     founderEducation:Array.isArray(data["founderEducation"]) ? data["founderEducation"][index] : data["founderEducation"],
                     founderExperience:Array.isArray(data["founderExperience"]) ? data["founderExperience"][index] : data["founderExperience"],
                     founderExperienceDetails:Array.isArray(data["founderExperienceDetails"]) ? data["founderExperienceDetails"][index] : data["founderExperienceDetails"]
                 };
                 founderDetails.push(founder);
 
             });
             data["founderDetails"] = founderDetails;
             delete data["founderName"];
             delete data["founderAddress"];
             delete data["founderAge"];
             delete data["founderEducation"];
             delete data["founderExperience"];
             delete data["founderExperienceDetails"];
         }*/
        if (services && !Array.isArray(services)) {
            data["services"] = new Array(services);
        }
        if ($("input[name=dippCertified]:checked").val() === "off") {
            delete data["dippNumber"];
        }
        if ($("input[name=registeredInOtherState]:checked").val() === "off") {
            delete data["otherState"];
            delete data["startupRegNo"];
            delete data["startupRegDate"];
        }
        if ($("input[name=appliedForIpr]:checked").val() === "off") {
            delete data["patent"];
            delete data["trademark"];
            delete data["copyright"];
            delete data["design"];
            delete data["plantVariety"];
            delete data["patentApplicationNo"];
            delete data["trademarkApplicationNo"];
            delete data["copyrightApplicationNo"];
            delete data["designApplicationNo"];
            delete data["plantVarietyApplicationNo"];
        }
    }

    if (authToken) {
        getRecognitionData();
    }

    function getRecognitionData() {
        $('#modal-loader').modal('show');
        $.ajax({
            type: "GET",
            async: false,
            url: SIH.getEndPoint("/api/auth/recognition/fetchDetails/up/startup"),
            headers: {"X-Auth-Token": authToken}
        }).done(function (data) {
            if (data) {
                setFormData(data);
            } else {
                prePopulateForm();
            }
        });
    }

    function checkRequiredField(attrValue, inputSel) {
        var requiredField = $(inputSel).closest(".form-group").find("sup.required");
        if (requiredField && requiredField.length > 0 && (!attrValue || attrValue === "")) {
            isValidated = false;
            $(inputSel).closest(".form-group").addClass("has-error").find("span.help-block").first().html("This field can't be left Blank.");
        } else {
            $(inputSel).closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
        }
    }


    function infoRequiredData(accordianItem, fieldName) {
        var inputSelection = $(accordianItem).find("input[name='" + fieldName + "']:checked");
        var attrValue = $(inputSelection).val();
        if (attrValue) {
            formData.delete(fieldName);
            formData.append(fieldName, attrValue.toString());
        }
        checkRequiredField(attrValue, $(accordianItem).find("input[name='" + fieldName + "']"));
    }

    $('input[name=product_service_type]').change(function (e) {
        var val = $('input[name=product_service_type]:checked').val();
        if (val) {
            if (val === "1") {
                $(this).closest(".form-group").append("<p id='stageCheck' style='color:#a94442'>Startups at Ideation Stage are not eligible for Tax Benefits</p>");
            } else {
                $('#stageCheck').remove();
            }
        }

    });

    function showRecognitionError(obj, msg) {
        msg = msg ? msg : "There might be some error in your form, please recheck and save again.";
        $(obj).parents(".button").next().find(".has-error").html(msg).removeClass('display-n');
    }

    function validate($target) {
        var validateIpr = false;
        if ($("input[name=incorpNumber]").closest(".form-group").hasClass("has-error")) {
            isValidated = false;
            return false;
        }
        isValidated = true;
        var currentTarget = $target.closest('div.accordionitem');
        var validateSections = [];
        validateSections.push($(currentTarget));
        $(currentTarget).attr("validate", "1");
        $(currentTarget).prevAll().each(function () {
            $(this).attr("validate", "1");
            validateSections.push($(this));
        });

        var requiredFields = $('div.accordion-section sup.required');
        $.each(requiredFields, function (index, item) {
            if (($(item).closest("div.accordionitem")).attr("validate") === "1") {
                var element = $(item).closest('.form-group').find(".form-control:not(.richTextarea,.customised-dropdown)");
                if (element.attr("name") === "appliedForIpr") {
                    validateIpr = true;
                }
                if (element && element.length > 0 && !element.closest(".modal").length && !element.closest(".form-group").hasClass("display-n")) {
                    if (element.attr("type") === "radio" || element.attr("type") === "checkbox") {
                        if (element.is(':checked')) {
                            element.closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
                        }
                        else {
                            if (element.attr("type") === "checkbox") {
                                element.closest(".form-group").addClass("has-error");
                            } else {
                                element.closest(".form-group").addClass("has-error").find("span.help-block").first().html("This field cannot be left Blank.");
                            }
                            isValidated = false;
                        }
                    }
                    else if (!element.val() || element.val() === "") {
                        isValidated = false;
                        showErrorState(element, true);
                    } else if (element.attr("minlength") && element.val().length < parseInt(element.attr("minlength"))) {
                        element.closest(".form-group").addClass("has-error").find("span.help-block").first().html("Mimimum length of this field must be " + element.attr("minlength"));
                        isValidated = false;
                    } else {
                        showErrorState(element, false);
                    }
                }

            }
        });
        var richTextAreas = $('.form-control.richTextarea');
        $.each(richTextAreas, function (index, item) {
            if (($(item).closest("div.accordionitem")).attr("validate") === "1") {
                var el = $(item);
                if (el.closest('.form-group').find('sup.required').length > 0) {
                    var note = el.val().trim();
                    if (note.length > 0 && !el.summernote('isEmpty')) {
                        el.siblings('.note-editor.note-frame').removeClass('note-has-error').addClass('note-writer-text');
                        showErrorState(el, false);
                    } else {
                        isValidated = false;
                        el.siblings('.note-editor.note-frame').addClass('note-has-error').removeClass('note-writer-text');
                        showErrorState(el, true);
                    }
                }
            }
        });

        var customizedDropDown = $('.form-control.customised-dropdown');
        $.each(customizedDropDown, function (index, item) {
            if (($(item).closest("div.accordionitem")).attr("validate") === "1") {
                var el = $(item);
                var selectedIndustries = $("select[name=industry]").val();
                if (!selectedIndustries || selectedIndustries.length === 0) {
                    isValidated = false;
                    showErrorState(el, true);
                } else {
                    $.each(selectedIndustries, function (idx, selectedIndustry) {
                        var selectedIndustryArr = selectedIndustry.split("/");
                        var industryName = selectedIndustryArr[selectedIndustryArr.length - 1];
                        if (el.find("ul#sector").first().find("input[name=" + industryName + "][type=checkbox]:checked").length === 0) {
                            isValidated = false;
                            showErrorState(el, true);
                        } else {
                            showErrorState(el, false);
                        }
                    });
                }
            }
        });

        var regexValidatedfields = $('.form-control.regex-val');
        $.each(regexValidatedfields, function (index, item) {
            if (($(item).closest("div.accordionitem")).attr("validate") === "1") {
                var element = $(item);
                var re = new RegExp(element.attr("regex"));
                if (element.val() && !re.test(element.val())) {
                    isValidated = false;
                    //showErrorState(element, true);
                    element.closest(".form-group").addClass("has-error");
                    element.siblings(".regex-msg").show();
                }
                else {
                    if (!(element.closest(".form-group").has("sup.required") && !element.val())) {
                        showErrorState(element, false);
                    }
                    element.siblings(".regex-msg").hide();
                }
            }
        });
        var iprValue = $("input[name=appliedForIpr]:checked").val();
        if (iprValue === "on" && validateIpr) {
            validateIPR();
        }
    }

    function validateIPR() {
        var validated = false;
        var patent = $("input[name=patent]:checked");
        var trademark = $("input[name=trademark]:checked");
        var copyright = $("input[name=copyright]:checked");
        var design = $("input[name=design]:checked");
        var plantVariety = $("input[name=plantVariety]:checked");

        var patentNo = $("input[name=patentApplicationNo]");
        var trademarkNo = $("input[name=trademarkApplicationNo]");
        var copyrightNo = $("input[name=copyrightApplicationNo]");
        var designNo = $("input[name=designApplicationNo]");
        var plantNo = $("input[name=plantVarietyApplicationNo]");

        if (patent && patent.length) {
            if (patentNo.val()) {
                patentNo.parents("td").removeClass("has-error");
            } else {
                patentNo.parents("td").addClass("has-error");
                validated = validated || true;
            }
        }
        if (patentNo.val()) {
            if (patent && !patent.length) {
                $("input[name=patent]").parents("td").addClass("has-error");
                validated = validated || true;
            } else {
                $("input[name=patent]").parents("td").removeClass("has-error");
            }
        }

        if (trademark && trademark.length) {
            if (trademarkNo.val()) {
                trademarkNo.parents("td").removeClass("has-error");
            } else {
                trademarkNo.parents("td").addClass("has-error");
                validated = validated || true;
            }
        }
        if (trademarkNo.val()) {
            if (trademark && !trademark.length) {
                $("input[name=trademark]").parents("td").addClass("has-error");
                validated = validated || true;
            } else {
                $("input[name=trademark]").parents("td").removeClass("has-error");
            }
        }

        if (copyright && copyright.length) {
            if (copyrightNo.val()) {
                copyrightNo.parents("td").removeClass("has-error");
            } else {
                copyrightNo.parents("td").addClass("has-error");
                validated = validated || true;
            }
        }
        if (copyrightNo.val()) {
            if (copyright && !copyright.length) {
                $("input[name=copyright]").parents("td").addClass("has-error");
                validated = validated || true;
            } else {
                $("input[name=copyright]").parents("td").removeClass("has-error");
            }
        }
        if (design && design.length) {
            if (designNo.val()) {
                designNo.parents("td").removeClass("has-error");
            } else {
                designNo.parents("td").addClass("has-error");
                validated = validated || true;
            }
        }
        if (designNo.val()) {
            if (design && !design.length) {
                $("input[name=design]").parents("td").addClass("has-error");
                validated = validated || true;
            } else {
                $("input[name=design]").parents("td").removeClass("has-error");
            }
        }
        if (plantVariety && plantVariety.length) {

            if (plantNo.val()) {
                plantNo.parents("td").removeClass("has-error");
            } else {
                plantNo.parents("td").addClass("has-error");
                validated = validated || true;
            }
        }
        if (plantNo.val()) {
            if (plantVariety && !plantVariety.length) {
                $("input[name=plantVariety]").parents("td").addClass("has-error");
                validated = validated || true;
            } else {
                $("input[name=plantVariety]").parents("td").removeClass("has-error");
            }
        }

        if (validated) {
            isValidated = false;
        }
    }

    function setFormData(data) {
        $.each(data, function (index, val) {
            var field = $('form.upRecognitionForm input[name=' + index + '], form.upRecognitionForm select[name=' + index + '], form.upRecognitionForm textarea[name=' + index + ']');
            var isList = Boolean(field.closest(".repeat-container").length);
            var type = field.attr("type");
            if (type === 'radio') {
                $.each($('input[name=' + index + ']'), function (index, value) {
                    if (($(this).val() === "on" && val === true) || ($(this).val() === "off" && val === false) || ($(this).val() === val)) {
                        $(this).attr('checked', true);
                        field.trigger("change");
                        return true;
                    }
                });
            } else if (type === 'checkbox') {
                $.each($('input[name=' + index + ']'), function (index, value) {
                    var inputVal = $(this).val();
                    $.each(val, function (index, value1) {
                        if (value1 === inputVal) {
                            $(value).attr('checked', true);
                        }
                    })
                });
            }
            else if (isList && Array.isArray(val)) {
                val.forEach(function (value, idx) {
                    field = $('form.upRecognitionForm input[name=' + index + '], form.upRecognitionForm select[name=' + index + '], form.upRecognitionForm textarea[name=' + index + ']');
                    var currentField = $(field).eq(idx);
                    currentField.val(value);
                    if (field.length < val.length) {
                        var parent = currentField.closest(".repeat-container");
                        var button = parent.find(".repeat-add");
                        if (button.length > 0) {
                            button.trigger("click");
                        }
                    }
                })
            } else {
                field.val(val);
                if (index !== "incorpNumber" && index !== 'entityType') {
                    field.trigger("change")
                }
            }
        });
        if (data["startupindustry"]) {
            var params = {};
            params["industry"] = data["startupindustry"];
            var $selection = $("#sector");
            setList(params, $selection.data("path"), $selection);
            $selection.val(data["sector"]);
        }
        if (data["fundingDetails"]) {
            data["fundingDetails"].forEach(function (value, idx) {
                var fundingSource = $('form.upRecognitionForm input[name=fundingSource]')[idx];
                var fundingAmount = $('form.upRecognitionForm input[name=fundingAmount]')[idx];
                var fundingDate = $('form.upRecognitionForm input[name=fundingDate]')[idx];
                $(fundingSource).val(value["fundingSource"]);
                $(fundingAmount).val(value["fundingAmount"]);
                $(fundingDate).val(value["fundingDate"]);
                if ((idx + 1) < data["fundingDetails"].length) {
                    $('form.upRecognitionForm input[name=fundingSource]').closest(".repeat-container").find('.repeat-add').trigger("click");
                }
            });
        }
        if (data["founderDetails"]) {
            data["founderDetails"].forEach(function (value, idx) {
                var founderName = $('form.upRecognitionForm input[name=founderName]')[idx];
                var founderAge = $('form.upRecognitionForm input[name=founderAge]')[idx];
                var founderAddress = $('form.upRecognitionForm input[name=founderAddress]')[idx];
                var founderEducation = $('form.upRecognitionForm input[name=founderEducation]')[idx];
                var founderExperience = $('form.upRecognitionForm input[name=founderExperience]')[idx];
                var founderExperienceDetails = $('form.upRecognitionForm input[name=founderExperienceDetails]')[idx];
                $(founderName).val(value["founderName"]);
                $(founderAge).val(value["founderAge"]);
                $(founderAddress).val(value["founderAddress"]);
                $(founderEducation).val(value["founderEducation"]);
                $(founderExperience).val(value["founderExperience"]);
                $(founderExperienceDetails).val(value["founderExperienceDetails"]);
                if ((idx + 1) < data["founderDetails"].length) {
                    $('form.upRecognitionForm input[name=founderName]').closest(".repeat-container").find('.repeat-add').trigger("click");
                }
            });
        }
        if (data["entityType"] !== "REGISTERED_PARTNERSHIP") {
            $entity_name.attr("readonly", "readonly").parents(".form-group").removeClass("has-error").find(".help-block").html("");
            $incorp_date.attr("readonly", "readonly").parents(".form-group").removeClass("has-error").find(".help-block").html("");
        }

        $("textarea[name=ideaBrief].richTextArea").summernote("code", data["ideaBrief"]);
        if (data["lastAccordionSaved"]) {
            var openAccordion = $incorp_number;
            $('.accordionitem .number').each(function (index, val) {
                if ($(this).html().trim() === data["lastAccordionSaved"]) {
                    openAccordion = $(this);
                }
            });
            $(openAccordion).parents(".accordionitem").find(".accordion-section-title").addClass("active");
            $(openAccordion).parents(".accordionitem").find(".accordion-section-content").show();
            if (data["lastAccordionSaved"] !== "1") {
                $(".accordionitem:first").find(".accordion-section-title").removeClass("active");
                $(".accordionitem:first").find(".accordion-section-content").hide();
            }
        }

        if (data["status"] == "ACCEPTED" || data["status"] == "REJECTED") {
            viewMode();
        }
        populateUploadedFiles(data);
        $('#modal-loader').modal('hide');
    }

    function viewMode() {
        $(".up-recognition-container").find(".accordion-section-content").show().end()
            .find(".repeat-add").hide().end()
            .find(".repeat-remove").hide().end()
            .find("input").attr("disabled", "disabled").end()
            .find(".form-control").attr("disabled", "disabled");
        $("textarea[name=ideaBrief].richTextArea").summernote('disable');
    }
};
$.stateRecognitionStartup = function () {
    var cin = "";
    var referenceNo = "";
    var lastAccordionSaved = "";
    var formData = new FormData();
    var isValidated = true;
    var tableContent;
    var authToken = store.getItem("token");

    var $entity_type = $("select[name='entityType']");
    var $industry_id = $("select[name='industry_id']");
    var $section = $("select[name='section']");
    var $categories_id = $("select[name='categories_id']");
    var $state_id = $('#state_name');
    var $incorp_number = $("input[name='incorpNumber']");
    var $incorp_date = $("input[name='incorpDate']");
    var $entity_name = $("input[name='entityName']");
    var $tax_ipr = $("select[name='tax_benifit']");
    var $submitRecognitionForm = $("input[name='submitRecognitionForm']");

    //Funding Source
    var $isFunded = $("input[name=funded]");
    var $isFundedVal = $("input[name=funded]:checked").val();
    var $fundingSource = $("input[name=fundingSource]");

    //IPR
    var $appliedForIpr = $("input[name=appliedForIpr]");
    var $appliedForIprVal = $("input[name=appliedForIpr]:checked").val();
    var $iprForm = $(".regiFormSection");

    //Another State
    var $anotherStateRegistered = $("input[name=registeredInOtherState]");
    var $anotherStateRegisteredVal = $("input[name=registeredInOtherState]:checked").val();
    var $anotherStateName = $("select[name=otherState]");
    var $anotherStateRegistrationNo = $("input[name=startupRegNo]");
    var $anotherStateRegistrationDate = $("input[name=startupRegDate]");

    //DIPP
    var $registeredWithDipp = $("input[name=dippCertified]");
    var $registeredWithDippVal = $("input[name=dippCertified]:checked").val();
    var $dippNumber = $("input[name=dippNumber]");

    initForm();

    function prePopulateForm() {
        $.ajax({
            type: "GET",
            async: false,
            url: SIH.getEndPoint("/api/auth/user/profile"),
            headers: {"X-Auth-Token": store.getItem("token")}
        }).done(function (data) {
            if ($("select[name=entityType]")) {
                $("select[name=entityType]").val(entityType[data.user.startup.startupEntity]).trigger("change");
            }

            if ($("select[name=startupindustry]")) {
                $("select[name=startupindustry]").val(data.user.startup.focusArea.industry.id);
            }
            if (data.user.startup.focusArea.industry.id) {
                var params = {};
                params["industry"] = data.user.startup.focusArea.industry.id;
                var $selection = $("#sector");
                setList(params, $selection.data("path"), $selection);
                $("select[name=sector]").val(data.user.startup.focusArea.sectors[0].id)
            }
            var selectedServices = [];
            $(data.user.startup.services).each(function (key, val) {
                $("select[name=services] option").each(function (key, value) {
                    if ($(this).text() === val) {
                        selectedServices.push($(value).val());
                    }
                });
            });
            $("select[name=services]").val(selectedServices).select2();
            $("input[name=panNumber]").val(data.user.startup.pan);
            $("input[name=incorpNumber]").val(data.user.startup.cin);
            if (data.user.startup.cin) {
                $("input[name=incorpNumber]").trigger("change");
            }
            $("input[name=website]").val(data.user.startup.website);
            $.each($('input[name=stage]'), function (index, value) {
                if (($(this).val() === "on" && data.user.startup.stage === true) || ($(this).val() === "off" && data.user.startup.stage === false) || ($(this).val() === data.user.startup.stage)) {
                    $(this).attr('checked', true);
                }
            });
            $.each($('input[name=dippCertified]'), function (index, value) {
                if (($(this).val() === "on" && data.user.startup.dippCertified === true) || ($(this).val() === "off" && data.user.startup.dippCertified === false) || ($(this).val() === data.user.startup.dippCertified)) {
                    $(this).attr('checked', true).trigger("change");
                }
            });
            $("input[name=dippNumber]").val(data.user.startup.dippNumber);
            $("textarea[name=ideaBrief].richTextArea").summernote("code", data.user.startup.ideaBrief);
            $('#modal-loader').modal('hide');

        });
    }

    function populateUploadedFiles(data) {
        ["businessModel", "pitchDeck", "letters"].forEach(function (fileName) {
            if (data[fileName]) {
                $("input[name='" + fileName + "']").val(data[fileName]);
                $("input[name='" + fileName + "FileName']").val(data[fileName + "FileName"]);
                var $presentationLink = $("input[type=file][name='upload_" + fileName + "']").siblings("a.presentationLink");
                $presentationLink.prop("href", SIH.getEndPoint("/api/file/stateRecognition/" + store.getItem("state") + "/") + data[fileName] + "/get").text(data[fileName + "FileName"]).removeClass("display-n");
            }
        });
    }

    function initForm() {
        if (!$isFundedVal || $isFunded === "off") {
            $fundingSource.closest(".repeatcontainer").addClass("display-n");
            $fundingSource.closest(".repeatcontainer").find(".form-group").addClass("display-n");
        }
        if (!$appliedForIprVal || $appliedForIprVal === "off") {
            $iprForm.addClass("display-n");
        }
        if (!$anotherStateRegisteredVal || $anotherStateRegisteredVal === "off") {
            $anotherStateName.closest(".form-group").addClass("display-n");
            $anotherStateRegistrationNo.closest(".form-group").addClass("display-n");
            $anotherStateRegistrationDate.closest(".form-group").addClass("display-n");
        }
        if (!$registeredWithDippVal || $registeredWithDippVal === "off") {
            $dippNumber.closest(".form-group").addClass("display-n");
        }
    }

    $entity_type.on("change", function () {
        $('input[name=incorpDate], input[name=entityName], input[name=incorpNumber]').val('');
        if ($(this).val() === "PRIVATE_LIMITED_COMPANY" || $(this).val() === "LIMITED_LIABILITY_PARTNERSHIP") {
            $('input[name=incorpDate]').attr('readonly', 'readonly');
            $('input[name=entityName]').attr({
                'readonly': 'true'
            });
        } else {
            $('input[name=incorpDate]').removeAttr('readonly');
            $('input[name=entityName]').removeAttr('readonly');
        }
    });

    $isFunded.change(function () {
        var val = $("input[name=funded]:checked").val();
        if (val === "on") {
            $fundingSource.closest(".repeatcontainer").removeClass("display-n");
            $fundingSource.closest(".repeatcontainer").find(".form-group").removeClass("display-n");
        } else {
            $fundingSource.closest(".repeatcontainer").addClass("display-n");
            $fundingSource.closest(".repeatcontainer").find(".form-group").addClass("display-n");
        }
    });
    $appliedForIpr.change(function () {
        var val = $("input[name=appliedForIpr]:checked").val();
        if (val === "on") {
            $iprForm.removeClass("display-n");
        } else {
            $iprForm.addClass("display-n");
        }
    });
    $anotherStateRegistered.change(function () {
        var val = $("input[name=registeredInOtherState]:checked").val();
        if (val === "on") {
            $anotherStateName.closest(".form-group").removeClass("display-n");
            $anotherStateRegistrationNo.closest(".form-group").removeClass("display-n");
            $anotherStateRegistrationDate.closest(".form-group").removeClass("display-n");
        } else {
            $anotherStateName.closest(".form-group").addClass("display-n");
            $anotherStateRegistrationNo.closest(".form-group").addClass("display-n");
            $anotherStateRegistrationDate.closest(".form-group").addClass("display-n");
        }
    });

    $registeredWithDipp.change(function () {
        var val = $("input[name=dippCertified]:checked").val();
        if (val === "on") {
            $dippNumber.closest(".form-group").removeClass("display-n");
        } else {
            $dippNumber.closest(".form-group").addClass("display-n");
        }
    });

    $(".accordionitem:first").find(".accordion-section-title").addClass("active");
    $(".accordionitem:first").find(".accordion-section-content").addClass("open").show();

    $incorp_number.on("change", function () {
        if ($entity_type.val() !== "REGISTERED_PARTNERSHIP") {
            var $this = this;
            $('#modal-loader').modal('show');
            $.ajax({
                type: "POST",
                dataType: "json",
                data: {"incorp_no": $(this).val()},
                url: $("#incorporationNoMCA").val(),
                success: function (data) {
                    $('#modal-loader').modal('hide');
                    if (data.isValidIncorporationNo === "true") {
                        $entity_name.val(data.nameEntity).attr("readonly", "readonly").parents(".form-group").removeClass("has-error").find(".help-block").html("");
                        var dateSplit = data.incorpdate.split("-");
                        if (dateSplit.length === 3) {
                            $incorp_date.val(dateSplit[1] + "/" + dateSplit[0] + "/" + dateSplit[2]).attr("readonly", "readonly").parents(".form-group").removeClass("has-error").find(".help-block").html("");
                        }
                        $($this).parents(".form-group").removeClass("has-error").find(".help-block").html("");
                    } else {
                        //  $entity_name.val("").removeAttr("readonly");
                        //  $incorp_date.val("").removeAttr("readonly");
                        $($this).parents(".form-group").addClass("has-error").find(".help-block").html("Please enter valid CIN number.")
                    }
                },
                error: function () {
                    $('#modal-loader').modal('hide');
                    $($this).parents(".form-group").addClass("has-error").find(".help-block").html("We are facing problems fetching your CIN details. Please try after some time.")
                }
            });
        }
    });


    $(".fileuploadMultipurpose").change(function () {
        var _this = $(this);
        checkFileUpload(this, _this.data("propname"), _this.data("propdisplay"), 10000000);
    });


    $("input[name='ipr_type']").on("change", function () {
        if ($(this).val() === "1") {
            $(".regiFormSection").removeClass("display-n");
        } else {
            $(".regiFormSection").addClass("display-n");
        }
    });

    $("input[name='patent_type']").on("change, click", function () {
        $("input[name='patent_type']").parents("td").removeClass("has-error");
        if ($("input[name='patent_type']:checked").length > 0) {
            $("input[name='patent_application_no']").parent().removeClass("display-n");
        }
    });

    $("input[name='trademark_type']").on("change, click", function () {
        $("input[name='trademark_type']").parents("td").removeClass("has-error");
        if ($("input[name='trademark_type']:checked").length > 0) {
            $("input[name='trademark_application_no']").parent().removeClass("display-n");
        }
    });

    $("input[name='copyright_type']").on("click", function () {
        $("input[name='copyright_type']").parents("td").removeClass("has-error");
    });

    $("input[name='design_type']").on("change, click", function () {
        $("input[name='design_type']").parents("td").removeClass("has-error");
        if ($("input[name='design_type']:checked").length > 0) {
            $("input[name='design_application_no']").parent().removeClass("display-n");
        }
    });

    $("input[name='plant_variety_type']").on("click", function () {
        $("input[name='plant_variety_type']").parents("td").removeClass("has-error");
    });

    $("input[name='innovative_product_service_type']").on("change", function () {
        if ($(this).val() === "1") {
            $(".innovative_product_service_table").removeClass("display-n");
        } else {
            $(".innovative_product_service_table").addClass("display-n");
        }
    });

    $("input[name='business_model_type']").on("change", function () {
        if ($(this).val() === "1") {
            $(".business_model_detail").removeClass("display-n");
        } else {
            $(".business_model_detail").addClass("display-n");
        }
    });

    $($entity_type).on("change", function () {
        $('input[name=incorp_date], input[name=entity_name], input[name=incorp_number]').val('');
        if ($(this).val() === "PRIVATE_LIMITED_COMPANY" || $(this).val() == "LIMITED_LIABILITY_PARTNERSHIP") {
            $('input[name=incorp_date]').attr('disabled', 'disabled');
            $('input[name=entity_name]').attr({
                'disabled': 'disabled',
                'readonly': 'true'
            });
            $('.recognition-tax-benifit #tax_benifit').removeAttr('disabled');
            $('.recognition-tax-benifit #tax_benifit>option:eq(0)').prop('selected', true);
        } else {
            $('input[name=incorp_date]').removeAttr('disabled');
            $('input[name=entity_name]').removeAttr('readonly disabled');
            $('.recognition-tax-benifit #tax_benifit>option:eq(1)').prop('selected', true);
            $('.recognition-tax-benifit #tax_benifit').attr('disabled', 'disabled');

            $(".availTaxBenefit").addClass("display-n").find("textarea").val("");
            $(".availTaxBenefit").find(".fundedFileName a").html("");
            $tax_ipr.val("0");
            $tax_ipr.find("option[value='1']").addClass("display-n");
            $(".notEligibleForTax-errorMessage").removeClass("display-n");
        }
    });

    var saveObject = {
        "SaveEntity": {"name": "SaveEntity", "section": 1, "errorMessage": "saveEntityErrorMessage"},
        "saveAuthorizedRepresentatives": {
            "name": "saveAuthorizedRepresentatives",
            "section": 2,
            "errorMessage": "saveAuthorizedRepErrorMessage"
        },
        "saveFundingDetails": {
            "name": "saveFundingDetails",
            "section": 3,
            "errorMessage": "saveFundingDetailsMessage"
        },
        "saveRequiredInfo": {"name": "saveRequiredInfo", "section": 4, "errorMessage": "saveRequiredInfoErrorMessage"},
        "saveFounderDetails": {
            "name": "saveFounderDetails",
            "section": 5,
            "errorMessage": "saveFounderDetailsErrorMessage"
        },
        "saveSelfCertification": {
            "name": "saveSelfCertification",
            "section": 6,
            "errorMessage": "saveSelfCertificationErrorMessage"
        }
    };

    $("input[value='Save'],input[name='submitRecognitionForm']").click(function (e) {
        var s = saveObject[this.name];
        var $this = this;
        var $target = $(e.currentTarget);
        var isSubmit = $target.val() === "Submit";
        var url = SIH.getEndPoint("/api/auth/recognition/draft/" + store.getItem("state"));
        if (isSubmit) {
            url = SIH.getEndPoint("/api/auth/recognition/save/" + store.getItem('state'));
            $target = $(".certify");
        }
        validate($target);
        if (isValidated) {
            var $formData = $target.closest("form.stateCommonRecognitionForm").serialize();
            var data = convertSerializeDataToJSON($formData);
            handleCustomizedData(data);
            s && (data["lastAccordionSaved"] = s.section);
            $('#modal-loader').modal('show');
            $.ajax({
                url: url,
                data: JSON.stringify(data),
                type: 'POST',
                beforeSend: setAuthTokenHeader,
                contentType: "application/json",
                success: function (response) {
                    $('#modal-loader').modal('hide');
                    if (response) {
                        $("input[name=id]").val(response);
                        $($this).parents(".accordion-section-content").hide();
                        var $accItem = $($this).parents(".accordionitem");
                        $accItem.find(".accordion-section-title").removeClass("active");
                        $accItem.next().find(".accordion-section-title").addClass("active");
                        $accItem.next().find(".accordion-section-content").show();
                    }
                    if (isSubmit) {
                        window.location.href = $("#thankyouPage").val();
                    }
                }, error: function (response) {
                    $('#modal-loader').modal('hide');
                    var errorMsg = "Error in saving the form";
                    if (response != null) {
                        errorMsg = response.constructor === Array && response.get(0) != null ? response[0].defaultMessage : (response.responseText != null && response.responseText != "" ? errorMsg + " : " + response.responseText : errorMsg);
                    }
                    $('.recognition-error-modal p').html(errorMsg);
                    $('.recognition-error-modal').modal('show');
                }
            });

        } else {
            $(".accordionitem").find(".accordion-section-title").removeClass("active").end()
                .find(".accordion-section-content").hide();
            var _firstErrorElem = $(".form-group.has-error:first");
            $('html, body').animate({
                scrollTop: _firstErrorElem.offset().top - 15
            }, 500);
            _firstErrorElem.closest(".accordionitem").find(".accordion-section-title").addClass("active");
            $(".form-group.has-error").each(function () {
                $(this).closest(".accordionitem").find(".accordion-section-content").show();
            });
        }
    });

    function checkFileUpload(fileToValidate, fileOriginal, fileDisplayName, fileSize) {

        var message = "";
        if ($(fileToValidate).val() !== "") {
            if (fileToValidate.files[0].size > fileSize) {
                isValidated = false;
                message = "File Should not be greater than " + Math.floor(fileSize / 1000000) + " MB.";
            }
            if ((fileToValidate.files[0].type).indexOf("image") > -1) {
                isValidated = false;
                message = message + "Image-type file format not accepted.";
            }
            if (message !== "") {
                isValidated = false;
                $(fileToValidate).siblings(".help-block").html(message).parents(".form-group").addClass("has-error");
                $(fileToValidate).val("");
                $(fileToValidate).siblings(".fileName").val("");
                $(fileToValidate).siblings(".fileDisplayName").val("");
                $(fileToValidate).siblings("a.presentationLink").addClass("display-n");
            } else {
                $(fileToValidate).siblings(".help-block").html("").parents(".form-group").removeClass("has-error");
                $(fileToValidate).siblings("input[type='hidden'][name='" + fileDisplayName + "']").val(fileToValidate.files[0].name);
                var data = new FormData();
                data.append("file", fileToValidate.files[0]);
                $(".modal.loader").modal("show");
                $.ajax({
                    type: "POST",
                    data: data,
                    dataType: 'json',
                    contentType: false,
                    processData: false,
                    url: SIH.getEndPoint("/api/file/stateRecognition/doc/" + store.getItem("state")),
                    headers: {"X-Auth-Token": store.getItem("token")}
                }).done(function (data) {
                    $(".modal.loader").modal("hide");
                    $(fileToValidate).siblings("input[type='hidden'][name='" + fileOriginal + "']").val(data.name);
                    if (data.name) {
                        var $presentationLink = $(fileToValidate).siblings("a.presentationLink");
                        $presentationLink.prop("href", SIH.getEndPoint("/api/file/stateRecognition/" + store.getItem("state") + "/") + data.name + "/get").text(data.originalFilename).removeClass("display-n");
                    }
                }).error(function () {
                    $(".modal.loader").modal("hide");
                    alert("Error in uploading file. Please try again.");
                    $(fileToValidate).val("");
                    $(fileToValidate).siblings(".fileName").val("");
                    $(fileToValidate).siblings(".fileDisplayName").val("");
                    $(fileToValidate).siblings("a.presentationLink").addClass("display-n");
                    return false;
                });
            }
        }
        return false;
    }

    function handleCustomizedData(data) {
        var services = data["services"];
        if ($("input[name=funded]:checked").val() === "on") {
            var fundingSource = data["fundingSource"];
            var founderName = data["founderName"];
            if (fundingSource && !Array.isArray(fundingSource)) {
                fundingSource = new Array(fundingSource);
            }
            if (founderName && !Array.isArray(founderName)) {
                founderName = new Array(founderName);
            }
            if (fundingSource && fundingSource.length) {
                var fundingDetails = [];
                $(fundingSource).each(function (index, item) {
                    var fund = {
                        fundingSource: Array.isArray(data["fundingSource"]) ? data["fundingSource"][index] : data["fundingSource"],
                        fundingAmount: Array.isArray(data["fundingAmount"]) ? data["fundingAmount"][index] : data["fundingAmount"],
                        fundingDate: Array.isArray(data["fundingDate"]) ? data["fundingDate"][index] : data["fundingDate"]
                    };
                    fundingDetails.push(fund);

                });
                data["fundingDetails"] = fundingDetails;
                delete data["fundingSource"];
                delete data["fundingAmount"];
                delete data["fundingDate"];
            }
        } else {
            delete  data["fundingDetails"];
        }
        var founderName = $('input[name=founderName]');
        var founderAddress = $('input[name=founderAddress]');
        var founderAge = $('input[name=founderAge]');
        var founderEducation = $('input[name=founderEducation]');
        var founderExperience = $('input[name=founderExperience]');
        var founderExperienceDetails = $('input[name=founderExperienceDetails]');

        var founderDetails = [];
        for (var i = 0; i < founderName.length; i++) {
            var founder = {
                founderName: $(founderName[i]).val(),
                founderAddress: $(founderAddress[i]).val(),
                founderAge: $(founderAge[i]).val(),
                founderEducation: $(founderEducation[i]).val(),
                founderExperience: $(founderExperience[i]).val(),
                founderExperienceDetails: $(founderExperienceDetails[i]).val()
            };
            founderDetails.push(founder);
        }
        data["founderDetails"] = founderDetails;
        delete data["founderName"];
        delete data["founderAddress"];
        delete data["founderAge"];
        delete data["founderEducation"];
        delete data["founderExperience"];
        delete data["founderExperienceDetails"];

        /* if(founderName && founderName.length){

         $(founderName).each(function(index,item){
         var founder = {
         founderName: Array.isArray(data["founderName"]) ? data["founderName"][index] : data["founderName"],
         founderAddress:Array.isArray(data["founderAddress"]) ? data["founderAddress"][index] : data["founderAddress"],
         founderAge:Array.isArray(data["founderAge"]) ? data["founderAge"][index] : data["founderAge"],
         founderEducation:Array.isArray(data["founderEducation"]) ? data["founderEducation"][index] : data["founderEducation"],
         founderExperience:Array.isArray(data["founderExperience"]) ? data["founderExperience"][index] : data["founderExperience"],
         founderExperienceDetails:Array.isArray(data["founderExperienceDetails"]) ? data["founderExperienceDetails"][index] : data["founderExperienceDetails"]
         };
         founderDetails.push(founder);

         });
         data["founderDetails"] = founderDetails;
         delete data["founderName"];
         delete data["founderAddress"];
         delete data["founderAge"];
         delete data["founderEducation"];
         delete data["founderExperience"];
         delete data["founderExperienceDetails"];
         }*/
        if (services && !Array.isArray(services)) {
            data["services"] = new Array(services);
        }
        if ($("input[name=dippCertified]:checked").val() === "off") {
            delete data["dippNumber"];
        }
        if ($("input[name=registeredInOtherState]:checked").val() === "off") {
            delete data["otherState"];
            delete data["startupRegNo"];
            delete data["startupRegDate"];
        }
        if ($("input[name=appliedForIpr]:checked").val() === "off") {
            delete data["patent"];
            delete data["trademark"];
            delete data["copyright"];
            delete data["design"];
            delete data["plantVariety"];
            delete data["patentApplicationNo"];
            delete data["trademarkApplicationNo"];
            delete data["copyrightApplicationNo"];
            delete data["designApplicationNo"];
            delete data["plantVarietyApplicationNo"];
        }
    }

    if (authToken) {
        getRecognitionData();
    }

    function getRecognitionData() {
        $('#modal-loader').modal('show');
        $.ajax({
            type: "GET",
            async: false,
            url: SIH.getEndPoint("/api/auth/recognition/fetchDetails/" + store.getItem("state")),
            headers: {"X-Auth-Token": authToken}
        }).done(function (data) {
            if (data) {
                setFormData(data);
            } else {
                prePopulateForm();
            }
        });
    }

    function checkRequiredField(attrValue, inputSel) {
        var requiredField = $(inputSel).closest(".form-group").find("sup.required");
        if (requiredField && requiredField.length > 0 && (!attrValue || attrValue === "")) {
            isValidated = false;
            $(inputSel).closest(".form-group").addClass("has-error").find("span.help-block").first().html("This field can't be left Blank.");
        } else {
            $(inputSel).closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
        }
    }


    function infoRequiredData(accordianItem, fieldName) {
        var inputSelection = $(accordianItem).find("input[name='" + fieldName + "']:checked");
        var attrValue = $(inputSelection).val();
        if (attrValue) {
            formData.delete(fieldName);
            formData.append(fieldName, attrValue.toString());
        }
        checkRequiredField(attrValue, $(accordianItem).find("input[name='" + fieldName + "']"));
    }

    $('input[name=product_service_type]').change(function (e) {
        var val = $('input[name=product_service_type]:checked').val();
        if (val) {
            if (val === "1") {
                $(this).closest(".form-group").append("<p id='stageCheck' style='color:#a94442'>Startups at Ideation Stage are not eligible for Tax Benefits</p>");
            } else {
                $('#stageCheck').remove();
            }
        }

    });

    function showRecognitionError(obj, msg) {
        msg = msg ? msg : "There might be some error in your form, please recheck and save again.";
        $(obj).parents(".button").next().find(".has-error").html(msg).removeClass('display-n');
    }

    function validate($target) {
        var validateIpr = false;
        if ($("input[name=incorpNumber]") && $("input[name=incorpNumber]").closest(".form-group").hasClass("has-error")) {
            isValidated = false;
            return false;
        }
        isValidated = true;
        var currentTarget = $target.closest('div.accordionitem');
        var validateSections = [];
        validateSections.push($(currentTarget));
        $(currentTarget).attr("validate", "1");
        $(currentTarget).prevAll().each(function () {
            $(this).attr("validate", "1");
            validateSections.push($(this));
        });

        var requiredFields = $('div.accordion-section sup.required');
        $.each(requiredFields, function (index, item) {
            if (($(item).closest("div.accordionitem")).attr("validate") === "1") {
                var element = $(item).closest('.form-group').find(".form-control:not(.richTextarea,.customised-dropdown)");
                if (element.attr("name") === "appliedForIpr") {
                    validateIpr = true;
                }
                if (element && element.length > 0 && !element.closest(".modal").length && !element.closest(".form-group").hasClass("display-n")) {
                    if (element.attr("type") === "radio" || element.attr("type") === "checkbox") {
                        if (element.is(':checked')) {
                            element.closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
                        }
                        else {
                            if (element.attr("type") === "checkbox") {
                                element.closest(".form-group").addClass("has-error");
                            } else {
                                element.closest(".form-group").addClass("has-error").find("span.help-block").first().html("This field cannot be left Blank.");
                            }
                            isValidated = false;
                        }
                    }
                    else if (!element.val() || element.val() === "") {
                        isValidated = false;
                        showErrorState(element, true);
                    } else if (element.attr("minlength") && element.val().length < parseInt(element.attr("minlength"))) {
                        element.closest(".form-group").addClass("has-error").find("span.help-block").first().html("Mimimum length of this field must be " + element.attr("minlength"));
                        isValidated = false;
                    } else {
                        showErrorState(element, false);
                    }
                }

            }
        });
        var richTextAreas = $('.form-control.richTextarea');
        $.each(richTextAreas, function (index, item) {
            if (($(item).closest("div.accordionitem")).attr("validate") === "1") {
                var el = $(item);
                if (el.closest('.form-group').find('sup.required').length > 0) {
                    var note = el.val().trim();
                    if (note.length > 0 && !el.summernote('isEmpty')) {
                        el.siblings('.note-editor.note-frame').removeClass('note-has-error').addClass('note-writer-text');
                        showErrorState(el, false);
                    } else {
                        isValidated = false;
                        el.siblings('.note-editor.note-frame').addClass('note-has-error').removeClass('note-writer-text');
                        showErrorState(el, true);
                    }
                }
            }
        });

        var customizedDropDown = $('.form-control.customised-dropdown');
        $.each(customizedDropDown, function (index, item) {
            if (($(item).closest("div.accordionitem")).attr("validate") === "1") {
                var el = $(item);
                if ($("select[name=industry]")) {
                    var selectedIndustries = $("select[name=industry]").val();
                    if (!selectedIndustries || selectedIndustries.length === 0) {
                        isValidated = false;
                        showErrorState(el, true);
                    } else {
                        $.each(selectedIndustries, function (idx, selectedIndustry) {
                            var selectedIndustryArr = selectedIndustry.split("/");
                            var industryName = selectedIndustryArr[selectedIndustryArr.length - 1];
                            if (el.find("ul#sector").first().find("input[name=" + industryName + "][type=checkbox]:checked").length === 0) {
                                isValidated = false;
                                showErrorState(el, true);
                            } else {
                                showErrorState(el, false);
                            }
                        });
                    }
                }
            }
        });

        var regexValidatedfields = $('.form-control.regex-val');
        $.each(regexValidatedfields, function (index, item) {
            if (($(item).closest("div.accordionitem")).attr("validate") === "1") {
                var element = $(item);
                var re = new RegExp(element.attr("regex"));
                if (element.val() && !re.test(element.val())) {
                    isValidated = false;
                    //showErrorState(element, true);
                    element.closest(".form-group").addClass("has-error");
                    element.siblings(".regex-msg").show();
                }
                else {
                    if (!(element.closest(".form-group").has("sup.required") && !element.val())) {
                        showErrorState(element, false);
                    }
                    element.siblings(".regex-msg").hide();
                }
            }
        });
        if ($("input[name=appliedForIpr]:checked")) {
            var iprValue = $("input[name=appliedForIpr]:checked").val();
            if (iprValue === "on" && validateIpr) {
                validateIPR();
            }
        }
    }

    function validateIPR() {
        var validated = false;
        var patent = $("input[name=patent]:checked");
        var trademark = $("input[name=trademark]:checked");
        var copyright = $("input[name=copyright]:checked");
        var design = $("input[name=design]:checked");
        var plantVariety = $("input[name=plantVariety]:checked");

        var patentNo = $("input[name=patentApplicationNo]");
        var trademarkNo = $("input[name=trademarkApplicationNo]");
        var copyrightNo = $("input[name=copyrightApplicationNo]");
        var designNo = $("input[name=designApplicationNo]");
        var plantNo = $("input[name=plantVarietyApplicationNo]");

        if (patent && patent.length) {
            if (patentNo.val()) {
                patentNo.parents("td").removeClass("has-error");
            } else {
                patentNo.parents("td").addClass("has-error");
                validated = validated || true;
            }
        }
        if (patentNo.val()) {
            if (patent && !patent.length) {
                $("input[name=patent]").parents("td").addClass("has-error");
                validated = validated || true;
            } else {
                $("input[name=patent]").parents("td").removeClass("has-error");
            }
        }

        if (trademark && trademark.length) {
            if (trademarkNo.val()) {
                trademarkNo.parents("td").removeClass("has-error");
            } else {
                trademarkNo.parents("td").addClass("has-error");
                validated = validated || true;
            }
        }
        if (trademarkNo.val()) {
            if (trademark && !trademark.length) {
                $("input[name=trademark]").parents("td").addClass("has-error");
                validated = validated || true;
            } else {
                $("input[name=trademark]").parents("td").removeClass("has-error");
            }
        }

        if (copyright && copyright.length) {
            if (copyrightNo.val()) {
                copyrightNo.parents("td").removeClass("has-error");
            } else {
                copyrightNo.parents("td").addClass("has-error");
                validated = validated || true;
            }
        }
        if (copyrightNo.val()) {
            if (copyright && !copyright.length) {
                $("input[name=copyright]").parents("td").addClass("has-error");
                validated = validated || true;
            } else {
                $("input[name=copyright]").parents("td").removeClass("has-error");
            }
        }
        if (design && design.length) {
            if (designNo.val()) {
                designNo.parents("td").removeClass("has-error");
            } else {
                designNo.parents("td").addClass("has-error");
                validated = validated || true;
            }
        }
        if (designNo.val()) {
            if (design && !design.length) {
                $("input[name=design]").parents("td").addClass("has-error");
                validated = validated || true;
            } else {
                $("input[name=design]").parents("td").removeClass("has-error");
            }
        }
        if (plantVariety && plantVariety.length) {

            if (plantNo.val()) {
                plantNo.parents("td").removeClass("has-error");
            } else {
                plantNo.parents("td").addClass("has-error");
                validated = validated || true;
            }
        }
        if (plantNo.val()) {
            if (plantVariety && !plantVariety.length) {
                $("input[name=plantVariety]").parents("td").addClass("has-error");
                validated = validated || true;
            } else {
                $("input[name=plantVariety]").parents("td").removeClass("has-error");
            }
        }

        if (validated) {
            isValidated = false;
        }
    }

    function setFormData(data) {
        $.each(data, function (index, val) {
            var field = $('form.common-state-recognition input[name=' + index + '], form.common-state-recognition select[name=' + index + '], form.common-state-recognition textarea[name=' + index + ']');
            var isList = Boolean(field.closest(".repeat-container").length);
            var type = field.attr("type");
            if (type === 'radio') {
                $.each($('input[name=' + index + ']'), function (index, value) {
                    if (($(this).val() === "on" && val === true) || ($(this).val() === "off" && val === false) || ($(this).val() === val)) {
                        $(this).attr('checked', true);
                        field.trigger("change");
                        return true;
                    }
                });
            } else if (type === 'checkbox') {
                $.each($('input[name=' + index + ']'), function (index, value) {
                    var inputVal = $(this).val();
                    $.each(val, function (index, value1) {
                        if (value1 === inputVal) {
                            $(value).attr('checked', true);
                        }
                    })
                });
            }
            else if (isList && Array.isArray(val)) {
                val.forEach(function (value, idx) {
                    field = $('form.common-state-recognition input[name=' + index + '], form.common-state-recognition select[name=' + index + '], form.common-state-recognition textarea[name=' + index + ']');
                    var currentField = $(field).eq(idx);
                    currentField.val(value);
                    if (field.length < val.length) {
                        var parent = currentField.closest(".repeat-container");
                        var button = parent.find(".repeat-add");
                        if (button.length > 0) {
                            button.trigger("click");
                        }
                    }
                })
            } else {
                field.val(val);
                if (index !== "incorpNumber") {
                    field.trigger("change")
                }
            }
        });
        if (data["startupindustry"]) {
            var params = {};
            params["industry"] = data["startupindustry"];
            var $selection = $("#sector");
            setList(params, $selection.data("path"), $selection);
            $selection.val(data["sector"]);
        }
        if (data["fundingDetails"]) {
            data["fundingDetails"].forEach(function (value, idx) {
                var fundingSource = $('form.common-state-recognition input[name=fundingSource]')[idx];
                var fundingAmount = $('form.common-state-recognition input[name=fundingAmount]')[idx];
                var fundingDate = $('form.common-state-recognition input[name=fundingDate]')[idx];
                $(fundingSource).val(value["fundingSource"]);
                $(fundingAmount).val(value["fundingAmount"]);
                $(fundingDate).val(value["fundingDate"]);
                if ((idx + 1) < data["fundingDetails"].length) {
                    $('form.common-state-recognition input[name=fundingSource]').closest(".repeat-container").find('.repeat-add').trigger("click");
                }
            });
        }
        if (data["founderDetails"]) {
            data["founderDetails"].forEach(function (value, idx) {
                var founderName = $('form.common-state-recognition input[name=founderName]')[idx];
                var founderAge = $('form.common-state-recognition input[name=founderAge]')[idx];
                var founderAddress = $('form.common-state-recognition input[name=founderAddress]')[idx];
                var founderEducation = $('form.common-state-recognition input[name=founderEducation]')[idx];
                var founderExperience = $('form.common-state-recognition input[name=founderExperience]')[idx];
                var founderExperienceDetails = $('form.common-state-recognition input[name=founderExperienceDetails]')[idx];
                $(founderName).val(value["founderName"]);
                $(founderAge).val(value["founderAge"]);
                $(founderAddress).val(value["founderAddress"]);
                $(founderEducation).val(value["founderEducation"]);
                $(founderExperience).val(value["founderExperience"]);
                $(founderExperienceDetails).val(value["founderExperienceDetails"]);
                if ((idx + 1) < data["founderDetails"].length) {
                    $('form.common-state-recognition input[name=founderName]').closest(".repeat-container").find('.repeat-add').trigger("click");
                }
            });
        }
        if (data["entityType"] !== "REGISTERED_PARTNERSHIP") {
            $entity_name.attr("readonly", "readonly").parents(".form-group").removeClass("has-error").find(".help-block").html("");
            $incorp_date.attr("readonly", "readonly").parents(".form-group").removeClass("has-error").find(".help-block").html("");
        }

        $("textarea[name=ideaBrief].richTextArea").summernote("code", data["ideaBrief"]);
        if (data["lastAccordionSaved"]) {
            var openAccordion = $incorp_number;
            $('.accordionitem .number').each(function (index, val) {
                if ($(this).html().trim() === data["lastAccordionSaved"]) {
                    openAccordion = $(this);
                }
            });
            $(openAccordion).parents(".accordionitem").find(".accordion-section-title").addClass("active");
            $(openAccordion).parents(".accordionitem").find(".accordion-section-content").show();
            if (data["lastAccordionSaved"] !== "1") {
                $(".accordionitem:first").find(".accordion-section-title").removeClass("active");
                $(".accordionitem:first").find(".accordion-section-content").hide();
            }
        }

        if (data["status"] == "ACCEPTED" || data["status"] == "REJECTED") {
            viewMode();
        }
        populateUploadedFiles(data);
        $('#modal-loader').modal('hide');
    }

    function viewMode() {
        $(".state-recognition-container").find(".accordion-section-content").show().end()
            .find(".repeat-add").hide().end()
            .find(".repeat-remove").hide().end()
            .find("input").attr("disabled", "disabled").end()
            .find(".form-control").attr("disabled", "disabled");
        $("textarea[name=ideaBrief].richTextArea").summernote('disable');
    }
};
$.stateRecognitionIncubator = function () {
    var formData = new FormData();
    var isValidated = true;
    var authToken = store.getItem("token");
    var incubatorType;

    //Head of Host Institute Details
    var $incubatorType = $("select[name='incubatorType']");

    initForm();

    function initForm() {
        $('.upNewIncubator, .upExistingIncubator').parent().addClass('display-n');
    }

    $incubatorType.on("change", function () {
        if ($(this).val() === "EXISTING") {
            $('.upExistingIncubator').parent().removeClass('display-n');
            $('.upNewIncubator').parent().addClass('display-n');
            incubatorType = "upExistingIncubator";
        } else if ($(this).val() === "NEW") {
            $('.upNewIncubator').parent().removeClass('display-n');
            $('.upExistingIncubator').parent().addClass('display-n');
            incubatorType = "upNewIncubator";
        } else {
            $('.upNewIncubator, .upExistingIncubator').parent().addClass('display-n');
        }
    });

    $(".accordionitem:first").find(".accordion-section-title").addClass("active");
    $(".accordionitem:first").find(".accordion-section-content").addClass("open").show();

    var saveObject = {
        "SaveEntity": {"name": "SaveEntity", "section": 1, "errorMessage": "saveEntityErrorMessage"},
        "saveAuthorizedRepresentatives": {
            "name": "saveAuthorizedRepresentatives",
            "section": 2,
            "errorMessage": "saveAuthorizedRepErrorMessage"
        },
        "saveFundingDetails": {
            "name": "saveFundingDetails",
            "section": 3,
            "errorMessage": "saveFundingDetailsMessage"
        },
        "saveRequiredInfo": {"name": "saveRequiredInfo", "section": 4, "errorMessage": "saveRequiredInfoErrorMessage"},
        "saveFounderDetails": {
            "name": "saveFounderDetails",
            "section": 5,
            "errorMessage": "saveFounderDetailsErrorMessage"
        },
        "saveSelfCertification": {
            "name": "saveSelfCertification",
            "section": 6,
            "errorMessage": "saveSelfCertificationErrorMessage"
        }
    };

    function clearIncubatorTypeElements(element) {
        var elements = element.closest('.form-group').find(".form-control:not(.richTextarea)");
        $.each(elements, function (index, item) {
            if ($(item).is("select")) {
                $(item).val('');
            } else {
                $(item).val('');
            }
        });
        var richTextAreas = element.closest('.form-group').find('.form-control.richTextarea');
        $.each(richTextAreas, function (index, item) {
            $(item).summernote("code", "")
        });
    }

    $(document).on('change', '#newIncubatorIndustry , #existingIncubatorIndustry', function (event) {
        var $target = $(event.target);
        var params = {};
        params["industry"] = $target.val();
        var $selection = event.target.id == 'newIncubatorIndustry' ? $("#newIncubatorSector") : $("#existingIncubatorSector");
        setList(params, $selection.data("path"), $selection);
    });

    $("input[value='Save'],input[name='submitRecognitionForm']").click(function (e) {
        var s = saveObject[this.name];
        var $this = this;
        var $target = $(e.currentTarget);
        var isSubmit = $target.val() === "Submit";
        var stateName = SIH.getStateName()[store.getItem('state')];
        var url = SIH.getEndPoint("/api/auth/recognition/draft/" + stateName + "/incubator");
        if (isSubmit) {
            url = SIH.getEndPoint("/api/auth/recognition/save/" + stateName + "/incubator");
            $target = $(".certify");
        }
        validate($target);
        if (isValidated) {
            if ($incubatorType.val() === "EXISTING") {
                clearIncubatorTypeElements($('.upNewIncubator'));
            } else if ($incubatorType.val() === "NEW") {
                clearIncubatorTypeElements($('.upExistingIncubator'));
            }
            var $formData = $target.closest("form.stateCommonRecognitionForm").serialize();
            var data = convertSerializeDataToJSON($formData);
            handleCustomizedData(data);
            s && (data["lastAccordionSaved"] = s.section);
            $('#modal-loader').modal('show');
            $.ajax({
                url: url,
                data: JSON.stringify(data),
                type: 'POST',
                beforeSend: setAuthTokenHeader,
                contentType: "application/json",
                success: function (response) {
                    $('#modal-loader').modal('hide');
                    if (response) {
                        saveStateRecognized();
                        $("input[name=id]").val(response);
                        $($this).parents(".accordion-section-content").hide();
                        var $accItem = $($this).parents(".accordionitem");
                        $accItem.find(".accordion-section-title").removeClass("active");
                        $accItem.next().find(".accordion-section-title").addClass("active");
                        $accItem.next().find(".accordion-section-content").show();
                    }
                    if (isSubmit) {
                        window.location.href = $("#thankyouPage").val();
                    }
                }, error: function (response) {
                    $('#modal-loader').modal('hide');
                    var errorMsg = "Error in saving the form";
                    if (response != null) {
                        errorMsg = response.constructor === Array && response.get(0) != null ? response[0].defaultMessage : (response.responseText != null && response.responseText != "" ? errorMsg + " : " + response.responseText : errorMsg);
                    }
                    $('.recognition-error-modal p').html(errorMsg);
                    $('.recognition-error-modal').modal('show');
                }
            });

        } else {
            $(".accordionitem").find(".accordion-section-title").removeClass("active").end()
                .find(".accordion-section-content").hide();
            var _firstErrorElem = $(".form-group.has-error:first");
            $('html, body').animate({
                scrollTop: _firstErrorElem.offset().top - 15
            }, 500);
            _firstErrorElem.closest(".accordionitem").find(".accordion-section-title").addClass("active");
            $(".form-group.has-error").each(function () {
                $(this).closest(".accordionitem").find(".accordion-section-content").show();
            });
        }
    });

    if (authToken) {
        getRecognitionData();
    }

    function getRecognitionData() {
        $('#modal-loader').modal('show');
        $.ajax({
            type: "GET",
            async: false,
            url: SIH.getEndPoint("/api/auth/recognition/fetchDetails/" + SIH.getStateName()[store.getItem('state')] + "/incubator"),
            headers: {"X-Auth-Token": authToken}
        }).done(function (data) {
            if (data) {
                setFormData(data);
            }
            $('#modal-loader').modal('hide');
        });
    }

    function checkRequiredField(attrValue, inputSel) {
        var requiredField = $(inputSel).closest(".form-group").find("sup.required");
        if (requiredField && requiredField.length > 0 && (!attrValue || attrValue === "")) {
            isValidated = false;
            $(inputSel).closest(".form-group").addClass("has-error").find("span.help-block").first().html("This field can't be left Blank.");
        } else {
            $(inputSel).closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
        }
    }

    function handleCustomizedData(data) {
        if (data["newServices"] != null) {
            var services = data["newServices"];
            if (services && !Array.isArray(services)) {
                data["newServices"] = new Array(services);
            }
        } else if (data["existingServices"] != null) {
            var services = data["existingServices"];
            if (services && !Array.isArray(services)) {
                data["existingServices"] = new Array(services);
            }
        }

        var incubateeName = $('input[name=incubateeName]');
        var incubationPeriod = $("input[name=incubationPeriod]");
        var promoterName = $("input[name=promoterName]");
        var promoterContact = $("input[name=promoterContact]");
        var incubateeProducts = $("input[name=incubateeProducts]");
        var incubateeWebsite = $("input[name=incubateeWebsite]");
        var incubateeCompanyDescription = $("textarea[name=incubateeCompanyDescription]");
        var mentorName = $("input[name=mentorName]");
        var mentorDesignation = $("input[name=mentorDesignation]");
        var mentorCompany = $("input[name=mentorCompany]");
        var mentorMobileNumber = $("input[name=mentorMobileNumber]");
        var mentorEmailId = $("input[name=mentorEmailId]");
        var fieldOfMentorship = $("input[name=fieldOfMentorship]");

        var incubateeDetails = [];
        for (var i = 0; i < incubateeName.length; i++) {
            var incubatees = {
                incubateeName: $(incubateeName[i]).val(),
                incubationPeriod: $(incubationPeriod[i]).val(),
                promoterName: $(promoterName[i]).val(),
                promoterContact: $(promoterContact[i]).val(),
                incubateeProducts: $(incubateeProducts[i]).val(),
                incubateeWebsite: $(incubateeWebsite[i]).val(),
                incubateeCompanyDescription: $(incubateeCompanyDescription[i]).val()
            };
            incubateeDetails.push(incubatees);
        }
        data["incubateeDetails"] = incubateeDetails;
        delete data["incubateeName"];
        delete data["incubationPeriod"];
        delete data["promoterName"];
        delete data["promoterContact"];
        delete data["incubateeProducts"];
        delete data["incubateeWebsite"];
        var mentorDetails = [];
        for (var i = 0; i < mentorName.length; i++) {
            var mentors = {
                mentorName: $(mentorName[i]).val(),
                mentorDesignation: $(mentorDesignation[i]).val(),
                mentorCompany: $(mentorCompany[i]).val(),
                mentorMobileNumber: $(mentorMobileNumber[i]).val(),
                mentorEmailId: $(mentorEmailId[i]).val(),
                fieldOfMentorship: $(fieldOfMentorship[i]).val()
            };
            mentorDetails.push(mentors);
        }
        data["mentorDetails"] = mentorDetails;
        delete data["mentorName"];
        delete data["mentorDesignation"];
        delete data["mentorCompany"];
        delete data["mentorMobileNumber"];
        delete data["mentorEmailId"];
        delete data["fieldOfMentorship"];
    }

    function validate($target) {
        isValidated = true;
        var currentTarget = $target.closest('div.accordionitem');
        var validateSections = [];
        validateSections.push($(currentTarget));
        $(currentTarget).attr("validate", "1");
        $(currentTarget).prevAll().each(function () {
            $(this).attr("validate", "1");
            validateSections.push($(this));
        });

        var requiredFields = $('div.accordion-section sup.required');
        $.each(requiredFields, function (index, item) {
            if (($(item).closest("div.accordionitem")).attr("validate") === "1") {
                var element = $(item).closest('.form-group').find(".form-control:not(.richTextarea,.customised-dropdown)");
                if (element && element.length > 0 && !element.closest(".modal").length && !element.closest(".form-group").hasClass("display-n") && !(element.parents('.section').length && !element.parents('.section').find('.form-group').hasClass(incubatorType))) {
                    if (element.attr("type") === "radio" || element.attr("type") === "checkbox") {
                        if (element.is(':checked')) {
                            element.closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
                        }
                        else {
                            if (element.attr("type") === "checkbox") {
                                element.closest(".form-group").addClass("has-error");
                            } else {
                                element.closest(".form-group").addClass("has-error").find("span.help-block").first().html("This field cannot be left Blank.");
                            }
                            isValidated = false;
                        }
                    }
                    else if (!element.val() || element.val() === "") {
                        isValidated = false;
                        showErrorState(element, true);
                    } else if (element.attr("minlength") && element.val().length < parseInt(element.attr("minlength"))) {
                        element.closest(".form-group").addClass("has-error").find("span.help-block").first().html("Mimimum length of this field must be " + element.attr("minlength"));
                        isValidated = false;
                    } else {
                        showErrorState(element, false);
                    }
                }

            }
        });
        var richTextAreas = $('.form-control.richTextarea');
        $.each(richTextAreas, function (index, item) {
            if (($(item).closest("div.accordionitem")).attr("validate") === "1") {
                var el = $(item);
                if (el.closest('.form-group').find('sup.required').length > 0 && !(el.parents('.section').length && !el.parents('.section').find('.form-group').hasClass(incubatorType))) {
                    var note = el.val().trim();
                    if (note.length > 0 && !el.summernote('isEmpty')) {
                        el.siblings('.note-editor.note-frame').removeClass('note-has-error').addClass('note-writer-text');
                        showErrorState(el, false);
                    } else {
                        isValidated = false;
                        el.siblings('.note-editor.note-frame').addClass('note-has-error').removeClass('note-writer-text');
                        showErrorState(el, true);
                    }
                }
            }
        });

        var customizedDropDown = $('.form-control.customised-dropdown');
        $.each(customizedDropDown, function (index, item) {
            if (($(item).closest("div.accordionitem")).attr("validate") === "1") {
                var el = $(item);
                if ($("select[name=industry]")) {
                    var selectedIndustries = $("select[name=industry]").val();
                    if (!selectedIndustries || selectedIndustries.length === 0) {
                        isValidated = false;
                        showErrorState(el, true);
                    } else {
                        $.each(selectedIndustries, function (idx, selectedIndustry) {
                            var selectedIndustryArr = selectedIndustry.split("/");
                            var industryName = selectedIndustryArr[selectedIndustryArr.length - 1];
                            if (el.find("ul#sector").first().find("input[name=" + industryName + "][type=checkbox]:checked").length === 0) {
                                isValidated = false;
                                showErrorState(el, true);
                            } else {
                                showErrorState(el, false);
                            }
                        });
                    }
                }
            }
        });

        var regexValidatedfields = $('.form-control.regex-val');
        $.each(regexValidatedfields, function (index, item) {
            if (($(item).closest("div.accordionitem")).attr("validate") === "1") {
                var element = $(item);
                var re = new RegExp(element.attr("regex"));
                if (!(element.parents('.section').length && !element.parents('.section').find('.form-group').hasClass(incubatorType))) {
                    if (element.val() && !re.test(element.val())) {
                        isValidated = false;
                        //showErrorState(element, true);
                        element.closest(".form-group").addClass("has-error");
                        element.siblings(".regex-msg").show();
                    }
                    else {
                        if (!(element.closest(".form-group").has("sup.required") && !element.val())) {
                            showErrorState(element, false);
                        }
                        element.siblings(".regex-msg").hide();
                    }
                }
            }

        });
    }

    function setFormData(data) {
        $.each(data, function (index, val) {
            var field = $('form.stateCommonRecognitionForm input[name=' + index + '], form.stateCommonRecognitionForm select[name=' + index + '], form.stateCommonRecognitionForm textarea[name=' + index + ']');
            var isList = Boolean(field.closest(".repeat-container").length);
            var type = field.attr("type");
            if (type === 'radio') {
                $.each($('input[name=' + index + ']'), function (index, value) {
                    if (($(this).val() === "on" && val === true) || ($(this).val() === "off" && val === false) || ($(this).val() === val)) {
                        $(this).attr('checked', true);
                        field.trigger("change");
                        return true;
                    }
                });
            } else if (type === 'checkbox') {
                $.each($('input[name=' + index + ']'), function (index, value) {
                    var inputVal = $(this).val();
                    $.each(val, function (index, value1) {
                        if (value1 === inputVal) {
                            $(value).attr('checked', true);
                        }
                    })
                });
            } else if ($('[name=' + index + ']').is('textarea')) {
                $("textarea[name=" + index + "].richTextArea").summernote("code", val);
            }
            else if (isList && Array.isArray(val)) {
                val.forEach(function (value, idx) {
                    field = $('form.stateCommonRecognitionForm input[name=' + index + '], form.stateCommonRecognitionForm select[name=' + index + '], form.stateCommonRecognitionForm textarea[name=' + index + ']');
                    var currentField = $(field).eq(idx);
                    currentField.val(value);
                    if (field.length < val.length) {
                        var parent = currentField.closest(".repeat-container");
                        var button = parent.find(".repeat-add");
                        if (button.length > 0) {
                            button.trigger("click");
                        }
                    }
                })
            } else {
                field.val(val);
                if (index !== "incorpNumber") {
                    field.trigger("change")
                }
            }
        });
        if (data["startupindustry"]) {
            var params = {};
            params["industry"] = data["startupindustry"];
            var $selection = $("#sector");
            setList(params, $selection.data("path"), $selection);
            $selection.val(data["sector"]);
        }
        if (data["incubateeDetails"]) {
            data["incubateeDetails"].forEach(function (value, idx) {
                var incubateeName = $('form.stateCommonRecognitionForm input[name=incubateeName]')[idx];
                var incubationPeriod = $('form.stateCommonRecognitionForm input[name=incubationPeriod]')[idx];
                var promoterName = $('form.stateCommonRecognitionForm input[name=promoterName]')[idx];
                var promoterContact = $('form.stateCommonRecognitionForm input[name=promoterContact]')[idx];
                var incubateeCompanyDescription = $('form.stateCommonRecognitionForm textarea[name=incubateeCompanyDescription]')[idx];
                var incubateeProducts = $('form.stateCommonRecognitionForm input[name=incubateeProducts]')[idx];
                var incubateeWebsite = $('form.stateCommonRecognitionForm input[name=incubateeWebsite]')[idx];
                $(incubateeName).val(value["incubateeName"]);
                $(incubationPeriod).val(value["incubationPeriod"]);
                $(promoterName).val(value["promoterName"]);
                $(promoterContact).val(value["promoterContact"]);
                $(incubateeCompanyDescription).summernote("code", value["incubateeCompanyDescription"]);
                $(incubateeProducts).val(value["incubateeProducts"]);
                $(incubateeWebsite).val(value["incubateeWebsite"]);
                if ((idx + 1) < data["incubateeDetails"].length) {
                    $('form.stateCommonRecognitionForm input[name=incubateeName]').closest(".repeat-container").find('.repeat-add').trigger("click");
                }
            });
        }
        if (data["mentorDetails"]) {
            data["mentorDetails"].forEach(function (value, idx) {
                var mentorName = $('form.stateCommonRecognitionForm input[name=mentorName]')[idx];
                var mentorDesignation = $('form.stateCommonRecognitionForm input[name=mentorDesignation]')[idx];
                var mentorCompany = $('form.stateCommonRecognitionForm input[name=mentorCompany]')[idx];
                var mentorMobileNumber = $('form.stateCommonRecognitionForm input[name=mentorMobileNumber]')[idx];
                var mentorEmailId = $('form.stateCommonRecognitionForm input[name=mentorEmailId]')[idx];
                var fieldOfMentorship = $('form.stateCommonRecognitionForm input[name=fieldOfMentorship]')[idx];
                $(mentorName).val(value["mentorName"]);
                $(mentorDesignation).val(value["mentorDesignation"]);
                $(mentorCompany).val(value["mentorCompany"]);
                $(mentorMobileNumber).val(value["mentorMobileNumber"]);
                $(mentorEmailId).val(value["mentorEmailId"]);
                $(fieldOfMentorship).val(value["fieldOfMentorship"]);
                if ((idx + 1) < data["mentorDetails"].length) {
                    $('form.stateCommonRecognitionForm input[name=mentorName]').closest(".repeat-container").find('.repeat-add').trigger("click");
                }
            });
        }
        if (data["lastAccordionSaved"]) {
            var openAccordion = $incorp_number;
            $('.accordionitem .number').each(function (index, val) {
                if ($(this).html().trim() === data["lastAccordionSaved"]) {
                    openAccordion = $(this);
                }
            });
            $(openAccordion).parents(".accordionitem").find(".accordion-section-title").addClass("active");
            $(openAccordion).parents(".accordionitem").find(".accordion-section-content").show();
            if (data["lastAccordionSaved"] !== "1") {
                $(".accordionitem:first").find(".accordion-section-title").removeClass("active");
                $(".accordionitem:first").find(".accordion-section-content").hide();
            }
        }

        if (data["status"] == "ACCEPTED" || data["status"] == "REJECTED") {
            viewMode();
        }
        if (data["status"] == "INCOMPLETE") {
            $('input[type=button][name=save]').hide();
        }
    }

    function viewMode() {
        $(".state-recognition-container").find(".accordion-section-content").show().end()
            .find(".repeat-add").hide().end()
            .find(".repeat-remove").hide().end()
            .find("input").attr("disabled", "disabled").end()
            .find(".form-control").attr("disabled", "disabled");
        $(".state-recognition-container").find(".accordion-section-content textarea").each(function () {
            $(this).next().find(".note-editable").attr("contenteditable", false);
        });
    }
};
var applicationTable, applicantTable, apptype,problemStatementTable,copy_row,insertRow,applicantResponsesTotal,winnerCount,appId;
var marksPercentage=true;
var winnnerList =['ACCEPT','WINNER_I','WINNER_II','WINNER_III','SINGLE_WINNER','MULTIPLE_WINNER'];
var winnerListExceptAccept=['WINNER_I','WINNER_II','WINNER_III','SINGLE_WINNER','MULTIPLE_WINNER'];
var apiPathNotification, cssClassNotification, pagePathNotification;

var enablerDashboard = {
    application: {status: "ALL"},
    applicant: {level1: {status: "PENDING"}, level2: {status: "ACCEPT"}}
};


var toggleSIH_AdminFilters = function (action) {
    if (action === "show") {
        $("#applicationType").removeClass('display-n');
        $("#applicationType").parent('div').removeClass('display-n');
        $("#applicationType").parent('div').siblings().removeClass('display-n');
        $("#onlyMineCheckboxDiv").removeClass('display-n');
    } else {
        $("#applicationType").addClass('display-n');
        $("#applicationType").parent('div').addClass('display-n');
        $("#applicationType").parent('div').siblings().addClass('display-n');
        $("#onlyMineCheckboxDiv").addClass('display-n');
    }
};


var populateApplicationTypeSideBar = function (apiPath, listType) {
    $.ajax({
        url: SIH.getEndPoint(apiPath ? apiPath : "/api/auth/ams/application/status/countbytype"),
        type: 'GET',
        data: sideBarData,
        contentType: "application/json",
        headers: {
            "X-Auth-Token": store.getItem("token")
        },
        success: function (data) {
            if (listType === "sih-admin-list") {
                var list = {
                    "ACTIVE": 0,
                    "INACTIVE": 0,
                    "COMPLETED": 0
                }
            } else {
                var list = {
                    "APPROVED": 0,
                    "COMPLETED": 0,
                    "DRAFTED": 0,
                    "INCOMPLETE": 0,
                    "REJECTED": 0,
                    "SUBMITTED": 0
                };
            }

            Object.keys(list).forEach(function (key) {
                list[key] = data[key];
            });
            var context = {
                applicationTypeCount: list
            };
            var allCount = {
                "ALL": Object.values(context.applicationTypeCount).reduce(function (previous, value) {
                    return previous + value;
                }, 0)
            };
            context.applicationTypeCount = Object.assign(allCount, context.applicationTypeCount);

            var template = Handlebars.compile($("#enabler-side-cards-template").html());

            $(".enabler-side-cards-list").html(template(context));
            changeActiveStatus(enablerDashboard.application.status);
        },
        error: function (error) {
            showErrorDialog($('.enabler-dashboard').data("error-msg"));
        }
    });
};

var populateApplicationsData = function (apiPath, cssClass, pagePath) {
    setTitle();
    if (cssClass === "sih-admin-list") {
        getAdminNotifications(apiPath, pagePath);
    } else {
        getEnablerApplications();
    }
};

var setTitle = function () {
    var context = {status: enablerDashboard.application.status};
    var template = Handlebars.compile($("#dashboard-title-template").html());
    $(".program-name").html(template(context));
};

var changeActiveStatus = function (newStatus) {
    enablerDashboard.application.status = newStatus;
    $(".app-type").removeClass("active");
    $("#type-" + enablerDashboard.application.status).addClass("active")
};

var changeStatus = function (newStatus) {
    changeActiveStatus(newStatus);
    if (store.getItem("role") === "SIH_Admin") {
        showGeneralTable('', '', '', true);
    } else {
        showGeneralTable();
    }
};

var showErrorDialog = function (errorMsg, callback) {
    $('.ams-error-modal .modal-body p').html(errorMsg);
    $('.ams-error-modal').modal('show');

    if (callback) {
        $('.ams-error-modal').on('hidden.bs.modal', callback)
    }
};

$(window).load(function () {
    // Event listener to the two range filtering inputs to redraw on input
    $('#applicationType').on('change', function () {

        $('#modal-loader').modal("show");
        apptype = $('#applicationType').val() ? $('#applicationType').val() : null;
        isOnlyMyProgram = $("#onlyMine").prop("checked");
        sideBarData = {'type': apptype, 'onlyMyProgram': isOnlyMyProgram};

        if (store.getItem("token") && store.getItem('published')) {
            populateApplicationTypeSideBar(sideBarApiPath, sideBarCssClass);
        }
        if(store.getItem('role')==='SIH_Admin'){
            $('#sih-dashboardTable').find('.admin').removeClass('hidden');
        }
        else{
            $('#sih-dashboardTable').find('.admin').addClass('hidden');
        }
        showGeneralTable('', '', '', true);

    });

    $('#onlyMine').on('change', function (e) {
        e.preventDefault();
        $('#modal-loader').modal("show");
        apptype = $('#applicationType').val() ? $('#applicationType').val() : null;
        isOnlyMyProgram = $("#onlyMine").prop("checked");
        sideBarData = {'type': apptype, 'onlyMyProgram': isOnlyMyProgram};

        if (store.getItem("token") && store.getItem('published')) {
            populateApplicationTypeSideBar(sideBarApiPath, sideBarCssClass);
        }
        showGeneralTable('', '', '', true);

    });

});

var getEnablerApplications = function () {
    $('#modal-loader').modal("show");
    var template = Handlebars.compile($("#enabler-dashboard-template").html());
    var context = {applications: []};
    $(".enabler-dashboard-table").html(template(context));
    applicationTable = $('#sih-dashboardTable').DataTable({
        processing: true,
        serverSide: true,
        drawCallback: function (settings) {
            $('#modal-loader').modal("hide");
        },
        ajax: {
            url: SIH.getEndPoint("/api/auth/ams/application/list"),
            dataSrc: 'data',
            dataType: "json",
            type: 'POST',
            error: function (xhr, error, thrown) {
                if (xhr.status === 403) {
                    showErrorDialog("You are not authorised to view this page", goToDashboard);
                } else {
                    showErrorDialog($('.enabler-dashboard').data("error-msg"), goToDashboard);
                }
            },
            beforeSend: function (xhr) {
                xhr.setRequestHeader("X-Auth-Token", store.getItem("token"));
                xhr.setRequestHeader("Content-type", "application/json");
            },
            data: function (d) {
                d.status = enablerDashboard.application.status !== 'ALL' ? enablerDashboard.application.status : null;
                d.type = apptype;
                d.onlyMyProgram = $("#onlyMine").prop('checked');

                return JSON.stringify(d);
            }
        },
        columnDefs: [
            {name: "title", targets: 0 ,searchable: true},
            {name: "type", targets: 1, searchable: false,orderable: false},
            {name: "numberOfResponse", orderable: false, targets: 2},
            {name: "createdBy", targets: 3, searchable: false, orderable: false, visible: !isOnlyMyProgram},
            {name: "updatedOn", targets: 4, searchable: false,orderable: true,visible:false, type: "date"}
        ],
        "order": [[4, "desc"]],
        columns: [
            {
                data: "title", render: function (title, type, row) {
                    var status = row.status;
                    var type = row.type;
                    var actTitle = title.length > 100 ? title.substr(0, 100) + '…' : title;
                     appId= row.id;
                    if (status === "APPROVED" || status === "COMPLETED") {
                        if(type==="CHALLENGE"){
                            return "<span>"+ escapeHtml(actTitle) +"<i class='expand-icon' onclick=\"getProblemStatement('"+ appId +"',this)\"></i></span>";
                        }
                        return "<a href=\"javascript:void(0)\" onclick=\"showApplicantDetails('" + row.id + "')\">" + escapeHtml(actTitle) + "</a>";
                    } else if (status === "DETAILS_DRAFTED" || status === "INCOMPLETE") {
                        return "<a href=\"javascript:void(0)\" onclick=\"goToDraftedApplicationDetails('" + row.id + "', '" + row.type + "')\">" + escapeHtml(actTitle) + " </a>";
                    } else if (status === "DETAILS_SAVED" || status === "QUESTIONS_DRAFTED") {
                        return "<a href=\"javascript:void(0)\" onclick=\"goToDraftedApplicationDetails('" + row.id + "', '" + row.type + "')\">" + escapeHtml(actTitle) + "</a>";
                    } else if (status === "REJECTED" || status === "SUBMITTED") {
                        return "<a href=\"javascript:void(0)\" onclick=\"goToApplicationDashboard('" + row.id + "', '" + row.type + "')\">" + escapeHtml(actTitle) + " <i class='expand-icon'></i> </a>";
                    } else {
                        return "<a href=\"javascript:void(0)\">" + escapeHtml(actTitle) + "</a>";
                    }
                }, defaultContent: "-", searchable: true
            },
            {
                data: "type", defaultContent: "-", searchable: true, render: function (type) {
                    // return type.replace("_"," ");
                    return `<span class="${type}">${type.replace("_"," ")}</span>`;
                }
            },
            {
                data:"numberOfResponse",defaultContent: "-" ,render: function (noOfResponses){
                return noOfResponses;
            }
            },

            {data: "createdBy", defaultContent: "-", visible: !isOnlyMyProgram},
            {data: "updatedOn", defaultContent: "-", orderable: true,visible:false, render: function(updatedOn){
                return updatedOn;
            }
            },
         /* {
                data: "id", render: function (id, type, row) {
                    var status = row.status;
                    if (status === "APPROVED" || status === "COMPLETED") {
                        return "<a href=\"javascript:void(0)\" onclick=\"showApplicantDetails('" + id + "')\"><span class=\"action-eye-icon\">&nbsp;</span></a>";
                    } else if (status === "DETAILS_DRAFTED" || status === "INCOMPLETE") {
                        return "<a href=\"javascript:void(0)\" onclick=\"goToDraftedApplicationDetails('" + id + "', '" + row.type + "')\"><span class=\"action-eye-icon\">&nbsp;</span></a>";
                    } else if (status === "DETAILS_SAVED" || status === "QUESTIONS_DRAFTED") {
                        return "<a href=\"javascript:void(0)\" onclick=\"goToDraftedApplicationQuestion('" + id + "')\"><span class=\"action-eye-icon\">&nbsp;</span></a>";
                    } else if (status === "REJECTED" || status === "SUBMITTED") {
                        return "<a href=\"javascript:void(0)\" onclick=\"goToApplicationDashboard('" + id + "', '" + row.type + "')\"><span class=\"action-eye-icon\">&nbsp;</span></a>";
                    } else {
                        return "<a href=\"javascript:void(0)\"><span class=\"action-eye-icon\">&nbsp;</span></a>";
                    }
                }
            }*/
        ]
    });
    //$('#modal-loader').modal("hide");
};
var getAdminNotifications = function (apiPath, pagePath) {
    $('#modal-loader').modal("show");
    var template = Handlebars.compile($("#admin-dashboard-template").html());
    var context = {applications: []};
    $(".enabler-dashboard-table").html(template(context));
    applicationTable = $('#sih-dashboardTable').DataTable({
        processing: true,
        serverSide: true,
        drawCallback: function (settings) {
            $('#modal-loader').modal("hide");
        },
        ajax: {
            url: SIH.getEndPoint(apiPath),
            dataSrc: 'data',
            dataType: "json",
            type: 'POST',
            error: function (xhr, error, thrown) {
                if (xhr.status === 403) {
                    showErrorDialog("You are not authorised to view this page", goToDashboard);
                } else {
                    showErrorDialog($('.enabler-dashboard').data("error-msg"), goToDashboard);
                }
            },
            beforeSend: function (xhr) {
                xhr.setRequestHeader("X-Auth-Token", store.getItem("token"));
                xhr.setRequestHeader("Content-type", "application/json");
            },
            data: function (d) {
                d.notificationStatus = enablerDashboard.application.status !== 'ALL' ? enablerDashboard.application.status : null;
                return JSON.stringify(d);
            }
        },
        columnDefs: [
            {name: "id", orderable: false, targets: 0},
            {name: "notificationTitle", targets: 1},
            {name: "submittedOn", targets: 2},
        ],
        "order": [[2, "desc"]],
        columns: [
            {
                data: "id", render: function (id, type, row) {
                    var path = pagePath + ".html?notificationId=" + id;
                    return "<a href=" + path + ">" + id + "</a>";
                }, defaultContent: "-", searchable: true
            },
            {
                data: "notificationTitle", defaultContent: "-", searchable: true, render: function (notificationTitle) {
                    return notificationTitle.length > 100 ?
                        notificationTitle.substr(0, 100) + '…' :
                        notificationTitle;
                }
            },
            {data: "submittedOn", defaultContent: "-", render: formatDate, searchable: false},
        ]
    });
    $('#modal-loader').modal("hide");
};

var goToDraftedApplicationDetails = function (applicationId, type) {
    var createApplicationBaseUrl = $("#enabler-right-section").data("createApplicationBaseUrl");
    sessionStorage.setItem("amsApplicationId", applicationId);
    window.location.href = (createApplicationBaseUrl + "/" + type.toLowerCase().replace("_", "-") + "-details.html");
};

var goToDraftedApplicationQuestion = function (applicationId) {
    var createApplicationBaseUrl = $("#enabler-right-section").data("createApplicationBaseUrl");
    sessionStorage.setItem("amsApplicationId", applicationId);
    window.location.href = (createApplicationBaseUrl + "/select-questions.html?applicationId=" + applicationId);
};

var goToApplicationDashboard = function (applicationId, type) {
    var applicationDashboardBaseUrl = $("#enabler-right-section").data("applicationDashboardBaseUrl");
    sessionStorage.setItem("amsApplicationId", applicationId);
    window.open(applicationDashboardBaseUrl + "/" + type.toLowerCase().replace("_", "-") + ".html?applicationId=" + applicationId,'_blank');
};

var formatDate = function (time) {
    if (typeof time === 'number') {
        var m_names = ["JAN", "FEB", "MAR",
            "APR", "MAY", "JUN", "JUL", "AUG", "SEP",
            "OCT", "NOV", "DEC"];
        var formattedDate = new Date(time);
        return formattedDate.getDate() + " " + m_names[formattedDate.getMonth()] + ", " + formattedDate.getFullYear();
    }
};

var showGeneralTable = function (apiPath, cssClass, pagePath, showSIH_AdminFilters) {
    if (showSIH_AdminFilters) {
        toggleSIH_AdminFilters("show");
    }
    $('.side-cards').show();
    $('.enabler-side-cards-level1').hide();
    $('.enabler-side-cards-level2').hide();

    var template = Handlebars.compile($("#enabler-general-dashboard-template").html());
    $("#enabler-right-section").html(template({}));
    apiPathNotification = apiPath ? apiPath : apiPathNotification;
    cssClassNotification = cssClass ? cssClass : cssClassNotification;
    pagePathNotification = pagePath ? pagePath : pagePathNotification;
    populateApplicationsData(apiPathNotification, cssClassNotification, pagePathNotification);

};

var showApplicantDetails = function (applicationId) {
    toggleSIH_AdminFilters("hide");
    changeActiveApplication(applicationId);
    var template = Handlebars.compile($("#enabler-applicant-dashboard-template").html());
    $("#enabler-right-section").html(template(enablerDashboard));
    populateApplicantData("#level1");
    if( localStorage.getItem('show-tutorial') == null || localStorage.getItem('show-tutorial') === "true") {
        $('.ams-tutorials-overlay').show();
    } else {
        $('.ams-tutorials.step-1').hide();
        $('.ams-tutorials-overlay').hide();
    }
};

function changeActiveApplication(applicationId) {
    enablerDashboard.application.id = applicationId;
}

function changeActiveApplicantStatus(status, parent, element) {
    if (parent === "#level1") {
        enablerDashboard.applicant.level1.status = status;
    } else {
        enablerDashboard.applicant.level2.status = status;
    }
    if (element) {
        $(element).addClass("active").siblings().removeClass("active");
        $("input#applicant-search-component").val("");
    } else {
        $(parent + " .dashboard-status #" + status).addClass("active").siblings().removeClass("active");
    }
}

var populateApplicantData = function (parent) {
    setTitle();
    populateTopStatusBar(enablerDashboard.application.id);
    updateApplicantResponses(parent);
};

var isWorkshopApplication = false;

function populateTopStatusBar(applicationId) {
    if (applicationId) {
        $.ajax({
            url: SIH.getEndPoint("/api/auth/ams/application/" + applicationId + "/response/statusWiseCount"),
            type: 'POST',
            contentType: "application/json",
            headers: {
                "X-Auth-Token": store.getItem("token"),
                "Content-Type": "application/json"
            },
            success: function (data) {
                 winnerCount = parseInt(data.SINGLE_WINNER+data.MULTIPLE_WINNER+data.WINNER+data.WINNER_I+data.WINNER_II+data.WINNER_III);
                    console.log("winnerCount"+winnerCount);
                var context = {
                    applicantStatusCount: data
                };
                var level1Template = Handlebars.compile($("#level1-status-list").html());
                var level2Template = Handlebars.compile($("#level2-status-list").html());
                $("#level-first .enabler-side-cards-levels").html(level1Template(context));
                $("#level-second .enabler-side-cards-levels").html(level2Template(context));
                changeActiveApplicantStatus("PENDING", "#level1");

                $.ajax({
                    url: SIH.getEndPoint("/api/auth/ams/application/" + applicationId),
                    type: 'GET',
                    contentType: "application/json",
                    headers: {
                        "X-Auth-Token": store.getItem("token")
                    },
                    success: function (data) {
                        enablerDashboard.application.currentStatus = data.status;
                        enablerDashboard.application.type = data.type;
                        if (enablerDashboard.application.type === 'WORKSHOP') {
                            $("li.ams-winner").hide();
                            $(".announce-result-btn").hide();
                            isWorkshopApplication = true;
                            if($('.action-button-menu ul.dropdown-menu').length >=3){
                                $('.action-button-menu ul.dropdown-menu:nth-child(1)').remove();
                            }
                            $('.action-button-menu ul.dropdown-menu').prepend('<li><a role="menuitem" data-status="ACCEPT" tabindex="-1" href="javascript:void(0);">APPROVE</a></li>');
                        }

                        if(enablerDashboard.application.currentStatus==='APPROVED' && enablerDashboard.application.type!='WORKSHOP'){
                                resultDaysCount(data);

                        }
                            else {
                            $("li.ams-winner").show();
                            if (enablerDashboard.application.currentStatus === 'COMPLETED') {
                                $(".announce-result>button").attr("disabled", "disabled");
                            }
                        }
                        /*  if (enablerDashboard.application.currentStatus !== 'COMPLETED') {
                              $("li.download-pdf-btn").hide();
                          }*/

                    }, fail: function (error) {
                        log.error(error);
                    }
                });
            },
            error: function (error) {
                showErrorDialog($('.enabler-dashboard').data("error-msg"));
            }
        })
    }
}

function changeLevel1Status(newStatus, element) {
    changeActiveApplicantStatus(newStatus, "#level1", element);
    updateApplicantResponses("#level1");
    $('#level1 .download-pdf').attr("data-status", newStatus);
    registerModalEventBulk();
    $('.top-mark-button #markWinner').addClass('display-n');
    $('.top-mark-button #btn-confirm-winner').addClass('display-n');
    $('.bottom-mark-winner #btn-confirm-winner').prop("disabled",true);
    $('.top-mark-button #btn-confirm-winner').prop("disabled",true);
        enabledCheckbox();
    if(newStatus==='REJECT_LEVEL_I') {
        newStatus='Rejected';

        disabledCheckbox();
    }
    if(newStatus==='PENDING') {
        newStatus='Pending';
        $('.enabler-side-cards-level1 ul').find('li').siblings().removeClass('active');
        $('.enabler-side-cards-level1 ul').find('.ams-pending').addClass('active');
    }
    if(newStatus==='INCOMPLETE') {
        newStatus='Incomplete';
       disabledCheckbox();
    }
    if(isWorkshopApplication){
        if($('.action-button-menu ul.dropdown-menu').length >=3){
            $('.action-button-menu ul.dropdown-menu:nth-child(1)').remove();
        }
        $('.action-button-menu ul.dropdown-menu').prepend('<li><a role="menuitem" data-status="ACCEPT" tabindex="-1" href="javascript:void(0);">APPROVE</a></li>');
    }
    $('#responseStatusHeading').html(newStatus + ' Responses');

}
function disabledCheckbox(){
    $('#mass_select_all').removeClass('selectedCustomTh');
    $('#mass_select_all').prop("disabled",true);
    $('.select-checkbox').prop("disabled",true);
}
function enabledCheckbox() {
    $('#mass_select_all').prop("disabled",false);
    $('.select-checkbox').prop("disabled",false);
}
function changeLevel2Status(newStatus, element) {
    changeActiveApplicantStatus(newStatus, "#level2", element);
    updateApplicantResponses("#level2");
    $('#level2 .download-pdf').attr("data-status", newStatus);
	$('.top-mark-button #markWinner').removeClass('display-n');
    if($('.bottom-mark-winner #btn-confirm-winner').hasClass("display-n")){
		$('.top-mark-button #btn-confirm-winner').addClass('display-n');
    } else {
		$('.top-mark-button #btn-confirm-winner').removeClass('display-n');
    }
    if(selectedWinnerType !== ''){
        selectedWinnerType = '';
        $('.top-mark-button #markWinner').show();
        $('.bottom-mark-winner #markWinner').show();
        $('.top-mark-button #btn-confirm-winner').addClass('display-n');
        $('.bottom-mark-winner #btn-confirm-winner').addClass('display-n');
		$('#sih-enabler-dashboardTable2 .select-checkbox').prop("disabled",true);
    }
    if($('#sih-enabler-dashboardTable2 .dataTables_empty').length > 0){
        //$(".mark-winner #markWinner").attr("disabled","disabled").css("cursor","not-allowed");
        $(".mark-winner #markWinner").hide();
    }
    if(newStatus==='ACCEPT'){

        newStatus='Approved';
        $('.top-mark-button #markWinner').show();
        $('.bottom-mark-winner #markWinner').show();
        $('.enabler-side-cards-level2 ul').find('li').siblings().removeClass('active');
        $('.enabler-side-cards-level2 ul').find('.ams-accept').addClass('active');
        $('#sih-enabler-dashboardTable2 .select-checkbox').prop("disabled",true);

    }
    if(newStatus==='WINNER'){
        newStatus='Winner'
        $('.top-mark-button #markWinner').hide();
        $('.bottom-mark-winner #markWinner').hide();
    }
    if(!isOnlyMyProgram || isWorkshopApplication){
        $('.top-mark-button #markWinner').hide();
        $('.bottom-mark-winner #markWinner').hide();
        $('.top-mark-button #btn-confirm-winner').addClass('display-n');
        $('.bottom-mark-winner #btn-confirm-winner').addClass('display-n');
        $('#sih-enabler-dashboardTable2 .select-checkbox').prop("disabled",true);
    }
    if($('#sih-enabler-dashboardTable2 .dataTables_empty').length > 0){
        /*$(".mark-winner #markWinner").attr("disabled","disabled").css("cursor","not-allowed");*/
        $(".mark-winner #markWinner").hide();
    }
    $('.winner-response').html(winnerCount);
    $('#responseStatusHeading').html(newStatus + ' Responses');
}
var rows_selected= [];
function updateApplicantResponses(parent) {
    $('#modal-loader').modal("show");
    $('.side-cards').hide();
    var status, isLevel1, tableId;
    // if(store.getItem('role')==='SIH_Admin'){
        $('#level1').find('.title-program').removeClass('display-n');
        $('#level2').find('.title-program').removeClass('display-n');
    // }


    if (parent === "#level1") {
        status = enablerDashboard.applicant.level1.status === "PENDING" ? "PENDING" : enablerDashboard.applicant.level1.status;

        isLevel1 = true;
        tableId = "#sih-enabler-dashboardTable1";
        $('.enabler-side-cards-level2').hide();
        $('.enabler-side-cards-level1').show();
        $('#responseStatusHeading').html('Pending Response');
    } else {
        status = enablerDashboard.applicant.level2.status;
        isLevel1 = false;
        tableId = "#sih-enabler-dashboardTable2";
        $('.enabler-side-cards-level1').hide();
        $('.enabler-side-cards-level2').show();
       /* if (status === 'WINNER') {
            $("#announce-result-btn").show();
        } else {
            $("#announce-result-btn").hide();
        }*/
    }
    $('.side-cards').hide();
    if (applicantTable) {
        applicantTable.destroy();
    }
    applicantTable = $(tableId).DataTable({
        /*processing: true,
        serverSide: true,*/
        "pageLength": 20,
        bInfo: false,
        drawCallback: function (settings) {
            console.log(settings);
            if(settings._iRecordsTotal >0 && status == "PENDING"){
                $(".action-button-row button").removeClass("hidden");
            }else{
                $(".action-button-row button").addClass("hidden");
            }
            $('#modal-loader').modal("hide");
        },
        ajax: {
            url: SIH.getEndPoint("/api/auth/ams/application/" + enablerDashboard.application.id + "/response/list"),
            type: 'POST',
            async:false,
            dataType: "json",
            "dataSrc": function (json,index ) {
                var rows=[];
                var acceptedRow=[];
                for( i= 0;json.data.length>i;i++){
                    if (tableId ==='#sih-enabler-dashboardTable1' &&  !winnnerList.includes(json.data[i].status)){
                        if(json.data[i].type!="WORKSHOP") {
                            rows.push(json.data[i]);
                        }
                    }
                    if(tableId ==='#sih-enabler-dashboardTable2') {
                        //console.log("status "+json.data[i].status);
                        acceptedRow.push(json.data[i]);
                    }
                }
                if(tableId ==='#sih-enabler-dashboardTable2'){
                    return acceptedRow;
                }
                return rows;
            },
            error: function (xhr, error, thrown) {
                if (xhr.status === 403) {
                    showErrorDialog("You are not authorised to view this page", goToDashboard);
                } else {
                    showErrorDialog($('.enabler-dashboard').data("error-msg"), goToDashboard);
                }
            },
            beforeSend: function (xhr) {
                xhr.setRequestHeader("X-Auth-Token", store.getItem("token"));
                xhr.setRequestHeader("Content-type", "application/json");
            },
            data: function (d) {
                //console.log(d);
                d.status = status;
                d.level1 = isLevel1;
                d.draw = 0;
                d.columns = [
                    {"data":"check","name":"check","searchable":false,"orderable":false,"search":{"value":"","regex":false}},
                    {"data":"id","name":"id","searchable":true,"orderable":false,"search":{"value":"","regex":false}},
                    {"data":"applicantName","name":"applicantName","searchable":true,"orderable":false,"search":{"value":"","regex":false}},
                    {"data":"dateCreated","name":"dateCreated","searchable":false,"orderable":true,"search":{"value":"","regex":false}},
                    {"data":"marksPercentage","name":"marksPercentage","searchable":true,"orderable":true,"search":{"value":"","regex":false}}
                ];
                d.order= [{"column":4,"dir":"desc"}];
                d.start= 0;
                d.length= 999999999;
                d.search= {"value":"","regex":false};
                return JSON.stringify(d);
            }
        },
        columnDefs: [
            {name: "check", orderable: false, targets: 0, className: "select-checkbox"},
            {name: "id", orderable: false, targets: 1, className: "app-id"},
            {name: "applicantName", orderable: false, targets: 2, className: "application-name"},
            {name: "dateCreated", orderable: true, targets: 3, className: "application-date"},
            {name: "marksPercentage", orderable: true,searchable:true, targets: 4, className: "marksPercentage" ,visible:!marksPercentage}
        ],
        "order": [[4, "desc"]],
        select: {
            style: "multi",
            selector: 'td:first-child'
        },
        columns: [

            {
                data: "check", defaultContent: "", searchable: false,
                render:function (row) {

                }
            },
            {
                data: "id", defaultContent: "-", searchable: true,
                render: function (id, type, row) {
                    var url = $('#enabler-right-section').data("applicantDataUrl") + ".html?responseId=" + id;
                    return '<a href="' + url + '" data-applicant-name="' + escapeHtml(row.applicantName) + '" data-response-id="' + row.id + '">' + row.applicationResponseNo + '</a>';
                }
            },
            {data: "applicantName", defaultContent: "-", searchable: true},
            {data: "dateCreated", defaultContent: "-", render: formatDate, searchable: false},
            /* {
                 data: "userType", defaultContent: "-", searchable: true,
                 render: function (userType, type, row) {
                     return userType ? userType.name : null;
                 }
             },
            {
                 data: "status", defaultContent: "-", searchable: true,
                 render: function (status, type, row) {
                     var placeHolder, text;
                     if (status === "REJECT_LEVEL_I" || status === "REJECT_LEVEL_II") {
                         placeHolder = "reject";
                         text = "rejected";
                     } else {
                         placeHolder = status;
                         text = status;
                     }
                     return '<input type="button" class="ams-' + placeHolder.toLowerCase() + '-button btn-ams" value="' + capitalizeFirstLetter(text) + '">';
                 }
             }*/
            {
                data: "marksPercentage", defaultContent: "-", searchable: true,visible:marksPercentage,
                render: function (marksPercentage, type, row) {

                    if (winnnerList.indexOf(row.status)>-1){

                        return row.totalMarks+'('+ marksPercentage + '%)';
                    }
                }

            },

        ],

    });


}

$(document).on('click', '#mass_select_all', function() {
    if($(this).attr("aria-expanded") == "true"){
        $(this).addClass("selectedCustomTh");
    }else{
        $(this).removeClass("selectedCustomTh");
    }
    if($(this).hasClass("selectedCustomTh")){
        applicantTable.rows().select();
    }else{
        applicantTable.rows().deselect();
    }
});

function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
}

function announceResult() {
    if (enablerDashboard.application.id) {
        $('#modal-loader').modal("show");
        $.ajax({
            url: SIH.getEndPoint("/api/auth/ams/application/" + enablerDashboard.application.id + "/result"),
            type: 'POST',
            contentType: "application/json",
            headers: {
                "X-Auth-Token": store.getItem("token"),
                "Content-Type": "application/json"
            },
            success: function (data) {
                $('#modal-loader').modal("hide");
                $(".announce-result>button").attr("disabled", "disabled");
                //$("li.download-pdf-btn").show();
                alert("The results have been announced successfully.");
            },
            error: function (error) {
                $('#modal-loader').modal("hide");
                if (error.status === 400 && error.responseText) {
                    setTimeout(function () { showErrorDialog(error.responseText); },10);
                } else {
                    setTimeout(function () { showErrorDialog($('.enabler-dashboard').data("error-msg")); },10);
                }
            }
        })
    }
}

function downloadReport(statusAttr) {

    var status = statusAttr ? statusAttr : $('.tab-pane.active').find(".download-pdf").attr("data-status");
    if (enablerDashboard.application.id) {

        $.ajax({
            url: SIH.getEndPoint("/api/auth/ams/application/applicantReport?applicationId=" + enablerDashboard.application.id + "&status=" + status),
            type: 'GET',
            headers: {
                "X-Auth-Token": store.getItem("token")
            },
            success: function (response, status, xhr) {

                const cType = xhr.getResponseHeader('Content-Type');
                const blob = createBlob(response, cType);
                const filename = enablerDashboard.application.id + ".xlsx";

                downloadFile(blob, filename);
            },
            error: function (error) {
                if (error.status === 400 && error.responseText) {
                    showErrorDialog(error.responseText);
                } else {
                    showErrorDialog($('.enabler-dashboard').data("error-msg"));
                }
            }
        })
    }
}

function downloadDocs() {
    if (enablerDashboard.application.id) {
        var a = window.document.createElement("a");
        a.href = SIH.getEndPoint("/api/file/application/docs/" + enablerDashboard.application.id);
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
    }
}
var changeBulkResponseStatus = function (status, comment) {
    var appIds = [];
    applicantTable.rows(".selected").data().each(function(d){
        appIds.push(d.id);
    });
    var data = {
        appIds: appIds,
        status: status,
    };

    if (status === 'REJECT_LEVEL_I') {
        data.rejectionReasonlevelI = comment;
    } else if (status === 'REJECT_LEVEL_II') {
        data.rejectionReasonlevelII = comment;
    } else if (status === 'INCOMPLETE') {
        data.incompleteReason = comment;
    } else if (status === "WINNER") {
        data.winnerRemark = comment;
    } else if (status === "ACCEPT") {
        data.acceptRemark = comment;
    }

    var requestApi = SIH.getEndPoint("/api/auth/ams/application/applicationResponse/bulkUpdateStatus");
    var redirectUrl = $("#applicant-response-details-bulk").data("redirectUrl");

    if (data.appIds.length > 0) {
        $('#modal-loader').modal('show');
        $.ajax({
            url: requestApi,
            type: "POST",
            contentType: 'application/json',
            data: JSON.stringify(data),
            headers: {'X-Auth-Token': store.getItem("token"), 'Content-Type': 'application/json'}
        }).success(function (response) {
            $('#modal-loader').modal('hide');
            $('.thankyou-modal .modal-body p')
                .html('Your request has been updated successfully.');
            $('.thankyou-modal').modal('show');
        }).error(function (xhr, error, thrown) {
            console.error(error);
            $('#modal-loader').modal('hide');
            if (xhr.status === 403) {
                showErrorDialog(xhr.responseText, goToDashboard);
            } else {
                showErrorDialog("Something bad happened", goToDashboard);
            }
        });
    } else {
        $('.ams-error-modal p').html("Please select atleast one application.");
        $(".ams-error-modal").modal("show");
        //$(".buttonRow").find(".btn").attr("disabled", "disabled");
    }
};
var registerModalEventBulk = function () {
    $(document).on("click", ".action-button-menu li a", function () {
    $('.ams-bulk-rejection-modal textarea#ams-approval-comment').val('');
        var status = $(this).data('status');
        $('.ams-bulk-rejection-modal input[name="status"]').val(status);
        var formType = $(this).parent().data('form-type');
        if (status === "REJECT_LEVEL_I" || status === "REJECT_LEVEL_II" || status === "INCOMPLETE" || status === "WINNER") {
            $('.ams-bulk-rejection-modal .ams-submit-btn').attr('data-status', status);
            $('.ams-bulk-rejection-modal').modal('show');
            var heading;
            if (status === "REJECT_LEVEL_I" || status === "REJECT_LEVEL_II") {
                heading = "REJECTED";
                $('.ams-bulk-rejection-modal textarea').attr('placeholder', 'Please enter reason for rejection.')
            } else if (status === "INCOMPLETE") {
                heading = "MARK AS INCOMPLETE";
                $('.ams-bulk-rejection-modal textarea').attr('placeholder', 'Please enter reason for marking as incomplete.')
            } else {
                heading = "WINNER REMARKS";
                $('.ams-bulk-rejection-modal textarea').attr('placeholder', 'Please enter winner remarks. This will be sent to winner when result is announced.')
            }
            $('.ams-bulk-rejection-modal .modal-heading').text(heading);
        } else {
            changeBulkResponseStatus(status);
        }
    });
};
$(document).on('click', ".ams-bulk-rejection-modal .ams-submit-btn", function () {
    var status = $(".ams-bulk-rejection-modal .ams-submit-btn").data("status");
    var comment = $(".ams-bulk-rejection-modal textarea#ams-approval-comment").val().trim();
    if (comment && comment.length >0) {
        changeBulkResponseStatus(status, comment);
        $('.ams-bulk-rejection-modal').modal('hide');
    } else {
        if ($(".ams-bulk-rejection-modal").find(".help-block").length === 0) {
            $(".ams-bulk-rejection-modal textarea#ams-approval-comment").closest(".form-group").addClass("has-error");
            $("<span style='font-size: small' class=\"help-block\">This field is required</span>").insertAfter(".ams-response-rejection-modal textarea#ams-approval-comment")
        }
    }
});

 var getProblemStatement = function(applicationId,event){
                    if(!$(event).closest('tr').next().hasClass('child-elem')) {
                        $(event).addClass('active');
                        $(event).closest("tr").siblings('tr').find('i').removeClass('active');
                        $(event).closest("tr").siblings('.child-elem').remove();
                        var call = $(event).parent().parent().closest('tr');
                        copy_row = $(call).clone().addClass('child-elem');
                        insertRow = $(copy_row).insertAfter(call);
                        $('#modal-loader').modal("show");
                        var source = $("#chellenge-problem-statements").html();
                        var template = Handlebars.compile(source);
                        //var context = {problemStatements: []};
                        $(insertRow).html(template);
                        console.log(applicationId);
                        problemStatementTable = $('#sih-dashboardTable-problem-statement').DataTable({
                            processing: true,
                            serverSide: true,
                            bPaginate: false,
                            bFilter: false,
                            bInfo: false,
                            bSortable: false,
                            drawCallback: function (settings) {
                                $('#modal-loader').modal("hide");
                                if($(event).closest('tr').next().hasClass('child-elem')){
                                    let tableHeight = $(event).closest('tr').next().find('table').outerHeight();
                                    let lineHeight = tableHeight - 44;
                                    $(event).closest('tr').next().find('.view-resp-wrap').css("height",tableHeight);
                                    $(event).closest('tr').next().find('.view-resp-wrap').find('a').css("line-height",`${lineHeight}px`);

                                }
                            },
                            ajax: {
                                url: SIH.getEndPoint("/api/auth/ams/application/getProblemStatement?applicationId=" + applicationId),
                                type: 'GET',
                                dataSrc: '',
                                error: function (xhr, error, thrown) {
                                    console.log("call-error");
                                    if (xhr.status === 403) {
                                        showErrorDialog("You are not authorised to view this page", goToDashboard);
                                    } else {
                                        showErrorDialog($('.enabler-dashboard').data("error-msg"), goToDashboard);
                                    }
                                },
                                beforeSend: function (xhr) {
                                    xhr.setRequestHeader("X-Auth-Token", store.getItem("token"));
                                    xhr.setRequestHeader("Content-type", "application/json");
                                },
                                data: function (d) {

                                    },
                                statusCode:
                                    {
                                        200: function(){
                                            if((store.getItem('role')==='SIH_Admin')&& !isOnlyMyProgram){
                                                $('#sih-dashboardTable-problem-statement_wrapper').closest('td').attr('colspan',4);

                                            }
                                        }

                                },

                            },
                            columnDefs: [
                                {name: "problemStatement", bSort: false,targets: 0},
                                {name: "numberOfResponses",orderable: false, targets: 1}
                                // {name:"id",targets:2}
                            ],
                            columns: [
                                {
                                    data: "problemStatement", defaultContent: "-", render: function (problemStatement) {
                                    // return type.replace("_"," ");
                                    return `<span class="${problemStatement}">${problemStatement.replace("_", " ")}</span>`;
                                }
                                },
                                {
                                    data: "numberOfResponses",
                                    defaultContent: "-",
                                    render: function (numberOfResponses) {
                                        return numberOfResponses;
                                    }
                                },
                                // {

                                //     defaultContent: "<a href=\"javascript:void(0)\" onclick=\"showApplicantDetails('" + applicationId + "')\">View Application</a>",
                                // }
                            ]

                        });
                        var href ="<a href=\"javascript:void(0)\" onclick=\"showApplicantDetails('" + applicationId + "')\">View All Responses</a>";
                        $('.view-responses').after("<div> "+ href +"</div>");

                    }
                    else{
                        $(event).removeClass('active');
                        if($(event).closest('tr').next().hasClass('child-elem')){
                            $(event).closest('tr').next().remove();
                        }
                        $(event).removeClass('active');
                        // $(insertRow).remove();
                        // $(copy_row).removeClass('child-elem');
                    }

};



$(document).ready(function () {
    registerModalEventBulk();
    $('.ams-tutorials.step-2').hide();
    $('button#btn-confirm-winner').hide();
    try {
        jQuery('.ams-badges .modal-body').    jQuery('. .modal-body').mCustomScrollbar();
    }catch(error){}
    //$( ".top-three-winners" ).sortable();
    $('.top-three-winners .form-control').select2({
        tags: true
    });

    $('.ams-tutorials').on('click', '.close', function () {
        $(this).parents('.ams-tutorials').hide()
    });

    $('.ams-tutorials.step-1 .next-step').click(function(){
        $(this).parents('.ams-tutorials').hide();
        $('.ams-tutorials.step-2').show()
    })



});

var selectedWinnerType = '';

$(document).on('click', '#sih-enabler-dashboardTable2 td:first-child', function(event) {
    var actable = $('#sih-enabler-dashboardTable2').DataTable();
    var selectedRows = actable.rows({
        selected: true
    }).ids(true);
    if (selectedWinnerType == 'SINGLE') {
        if ($(selectedRows).length > 1) {
            showErrorDialog("Only single row selection is valid for Single Winner declaration.");
			$(this).closest("tr").removeClass("selected");
            $(this).click();
        } else {
            $("button#btn-confirm-winner").removeAttr("disabled");
        }
    } else if (selectedWinnerType == 'TOP3') {
        if ($(selectedRows).length > 3) {
            showErrorDialog("Only three(3) row selections are valid for Top 3 Winner declaration.");
            $(this).closest("tr").removeClass("selected");
            $(this).click();
        } else if($(selectedRows).length == 3){
            $("button#btn-confirm-winner").removeAttr("disabled");
        } else {
            $("button#btn-confirm-winner").prop("disabled",true);
        }
    } else if (selectedWinnerType == 'MULTIPLE') {
        $("button#btn-confirm-winner").removeAttr("disabled");
    } else {
        $("button#btn-confirm-winner").attr("disabled", "disabled");
    }
});

function markWinners(type) {
    selectedWinnerType = type;
    $("button#markWinner").hide();
    $("button#btn-confirm-winner").removeClass("display-n");
    $("button#btn-confirm-winner").attr("disabled", "disabled");
    $("#sih-enabler-dashboardTable2 .select-checkbox").prop("disabled",false);
}

function openPublishModal() {
    var table = $('#sih-enabler-dashboardTable2').dataTable();
    var actable = $(table.fnGetNodes()).closest("tr.selected");
    if (selectedWinnerType == 'SINGLE') {
        var secondChild = $(actable).find(':nth-child(2) a');
		$('#singleBadgesModal').find("#winner1").val(escapeHtml($(secondChild).data("applicant-name")));
        $('#singleBadgesModal').find("#winner1").attr("data-response-id",$(secondChild).data("response-id"));
        $('button.publish-single-result').attr("onclick","publishresult('SINGLE_WINNER','"+$(secondChild).data("response-id")+"')");
        $('#singleBadgesModal').modal('show');
    } else if (selectedWinnerType == 'TOP3') {
        $('button.publish-top3-result').prop("disabled",true);
        if(actable.length < 3){
			showErrorDialog("You have to select 3 winners.");
            return;
        }
        var responses = [];
		var selectList  = $(".top-three-winners #position1");
		selectList.find('option').not(':first').remove();
		$(actable).each(function(index, value) {
            var secondChild = $(this).find(':nth-child(2) a');
            selectList.append("<option value='" + escapeHtml($(secondChild).data("applicant-name")) +
                "' data-response-id='" + $(secondChild).data("response-id") + "'>" +
                escapeHtml($(secondChild).data("applicant-name")) + "</option>");
        });
        $('#topThreeBadgesModal').modal('show');
    } else if (selectedWinnerType == 'MULTIPLE') {
        $('#multipleBadgesModal').find(".multiple-winners").html("");

        var responses = [];
        $(actable).each(function(index,value){
			var secondChild = $(this).find(':nth-child(2) a');
            var divRes = '<div class="form-group">'+
                            '<label for="winner'+(index+1)+'">Winner '+(index+1)+'</label>'+
                            '<input type="text" id="winner'+(index+1)+'" class="form-control" value="'+
                                escapeHtml($(secondChild).data("applicant-name"))+'" readonly data-response-id="'+$(secondChild).data("response-id")+'" />'+
                         '</div>';
            responses.push($(secondChild).data("response-id"));
            if(sessionStorage.getItem("multipleResponses")) {
                responses = responses.concat(JSON.parse(sessionStorage.getItem("multipleResponses")));
                responses = responses.filter((v, i, a) => a.indexOf(v) === i);
            }
            sessionStorage.setItem("multipleResponses",JSON.stringify(responses));
            $('#multipleBadgesModal').find(".multiple-winners").append(divRes);
            $('#multipleBadgesModal #winner1').focus()
        });
        $('button.publish-multiple-result').attr("onclick","publishresult('MULTIPLE_WINNER')");
        $('#multipleBadgesModal .modal-header p span').text(actable.length);
        $('#multipleBadgesModal').modal('show');
    }
}

function publishresult(type,responseId){
    $('#modal-loader').modal('show')
    var requestJson = createRequestJson(type,responseId);
    console.log(requestJson);
    $.ajax({
        url: SIH.getEndPoint("/api/auth/ams/application/"+enablerDashboard.application.id+"/result"),
        data: JSON.stringify(requestJson),
        type: 'POST',
        contentType: 'application/json',
        headers: {'X-Auth-Token': store.getItem("token"), 'Content-Type': 'application/json'},
        success: function(response){
            console.log("-->"+response);
            window.location.href="/content/sih/en/ams-application/application-saved.html";
            $('#modal-loader').modal('hide')
        },
        error: function (xhr, error, thrown) {
           console.log("call-error");
            if (xhr.status === 403) {
                showErrorDialog("You are not authorised to view this page", goToDashboard);
            } else {
                showErrorDialog(xhr.responseText);
            }
            $('#modal-loader').modal('hide')
        }
    });
    $(this).closest('.modal.ams-badges').modal('hide')
}
/*$(document).bind("change","#topThreeBadgesModal .top-three-winners select:nth-child(1)", function(){
var selectedValue = $(this).find("option:not(selected)");
$("#topThreeBadgesModal .top-three-winners select:nth-child(2)").html();
$("#topThreeBadgesModal .top-three-winners select:nth-child(2)").append(selectedValue);
});
$(document).bind("change","#topThreeBadgesModal .top-three-winners select:nth-child(2)", function(){
var selectedValue = $(this).find("option:not(selected)");
$("#topThreeBadgesModal .top-three-winners select:nth-child(3)").html();
$("#topThreeBadgesModal .top-three-winners select:nth-child(3)").append(selectedValue);
});*/

function createRequestJson(type,responseId){
    var requestArr = [];
    if(type == 'SINGLE_WINNER') {
        var reqJson = {};
        reqJson.winnerCategory = type;
        reqJson.badgeType = type;
        reqJson.badgeImage = "/etc/designs/invest-india/investindialibs/images/single-winner-icon.png";
        reqJson.appplicationResponseId = responseId;
        requestArr.push(reqJson);
    } else if(type == 'MULTIPLE_WINNER' || type == 'TOP3') {
        var responses = JSON.parse(sessionStorage.getItem("multipleResponses"));
        for(i=0;i<responses.length;i++){
            var reqJson = {};
            if(type == 'MULTIPLE_WINNER'){
                reqJson.winnerCategory = type;
                reqJson.badgeType = 'MULTIPLE_WINNER';
                reqJson.badgeImage = "/etc/designs/invest-india/investindialibs/images/multiple-winner-icon.png";
            } else {
                switch(i){
                case 0:    reqJson.winnerCategory = "WINNER_I";
                    reqJson.badgeImage = "/etc/designs/invest-india/investindialibs/images/position-one-icon.png";
                    reqJson.badgeType = "WINNER_I"; break;
                case 1:    reqJson.winnerCategory = "WINNER_II";
                    reqJson.badgeImage = "/etc/designs/invest-india/investindialibs/images/position-two-icon.png";
                    reqJson.badgeType = "WINNER_II"; break;
                case 2:    reqJson.winnerCategory = "WINNER_III";
                    reqJson.badgeImage = "/etc/designs/invest-india/investindialibs/images/position-three-icon.png";
                    reqJson.badgeType = "WINNER_III"; break;
                }

            }

            reqJson.appplicationResponseId = responses[i];
            requestArr.push(reqJson);
        }
    }
    return requestArr;
}

$(document).on('click', '.ams-tutorials .close', function () {
    $(this).parents('.ams-tutorials').hide();
    $('.ams-tutorials-overlay').hide();
});


$(document).on('click', '.step-1 .next-step', function () {
    $(this).parents('.ams-tutorials').hide();
    $('.ams-tutorials.step-2').show();
});

$(document).on('click', '.step-2 .next-step', function () {
    $(this).parents('.ams-tutorials').hide();
    $('.ams-tutorials.step-3').show();
});

$(document).on('click', '.step-3 .next-step', function () {
    $(document).find('.dropdown.action-button-menu').addClass('open');
    $(this).parents('.ams-tutorials').hide();
    $('.ams-tutorials.step-4').show();
    return false;
});

$(document).on('click', '.step-4 .next-step', function () {
    $(document).find('.dropdown.action-button-menu').removeClass('open')
    $(this).parents('.ams-tutorials').hide();
    $('.ams-tutorials.step-5').show();
});

$(document).on('click', '.step-5 .next-step', function () {
    $(this).parents('.ams-tutorials').hide();
    $('.ams-tutorials-overlay').hide();
    $('.result-tutorials-modal').modal('show')
});

$(document).on('click', '.enabler-side-cards-level ul li a', function () {
    $('.enabler-side-cards-level ul li.active').removeClass('active');
    $(this).parents('li').addClass('active');
});

$(document).on('click', '#sih-enabler-dashboardTable1 tbody', function () {
    setTimeout(function(){
         if($('#sih-enabler-dashboardTable1 tr.selected').length >= 1){
            $('#mass_select_all').addClass('selectedCustomTh');
            $('.action-button-menu').addClass('open');

        }else{
                $('#mass_select_all').removeClass('selectedCustomTh');
            $('.action-button-menu').removeClass('open');
        }
		return false;

     }, 500);


});


$(document).ready(function () {
    $('.ams-tutorials.step-2').hide();
    $('.ams-tutorials.step-3').hide();
    $('.ams-tutorials.step-4').hide();
    $('.ams-tutorials.step-5').hide();
    try {
        jQuery('.ams-badges .modal-body').    jQuery('. .modal-body').mCustomScrollbar();
    }catch (e) {

    }

    //$( ".top-three-winners" ).sortable();
    $('.top-three-winners .form-control').select2({
        tags: true
    });



    $(document).on('click','.view-ams-result',function (e) {
        e.preventDefault;
        window.open(window.location.origin +'/content/sih/en/ams-result-dashboard.html','_self');
    });

    $(document).on('click','.ams-enabler-back-arrow a',function (e) {
        enablerDashboard.applicant.level1.status = "PENDING";
        if (store.getItem("role") === "SIH_Admin") {
            showGeneralTable('', '', '', true);
        }else{
            showGeneralTable();
        }
    });
});

$(document).on("click","#sih-enabler-dashboardTable2 .select-checkbox",function (event) {
	var dtable = $('#sih-enabler-dashboardTable2').DataTable();
    var selectedRows = dtable.rows({
        selected: true
    }).ids(true);
    if($(selectedRows).length<=0){
        $('.top-mark-button #btn-confirm-winner').prop("disabled",true);
        $('.bottom-mark-winner #btn-confirm-winner').prop("disabled",true);
    }
    var actable = $(dtable.fnGetNodes()).closest("tr.selected");
    var responses = [];
    $(actable).each(function(index,value){
        var secondChild = $(this).find(':nth-child(2) a');
        responses.push($(secondChild).data("response-id"));
        if(sessionStorage.getItem("multipleResponses")) {
            responses = responses.concat(JSON.parse(sessionStorage.getItem("multipleResponses")));
        }
        sessionStorage.setItem("multipleResponses",JSON.stringify(responses));
    });
});

$(document).on("change",".top-three-winners #position1",function (event) {
	var table = $('#sih-enabler-dashboardTable2').dataTable();
    var actable = $(table.fnGetNodes()).closest("tr.selected");
    if($(this).children("option:selected").val() == '') {
		$(".top-three-winners #position2").prop("disabled",true);
        $(".top-three-winners #position3").prop("disabled",true);
        $('button.publish-top3-result').prop("disabled",true);
    } else {
        var selectList = $(".top-three-winners #position2");
        selectList.find('option').not(':first').remove();
        $(actable).each(function(index, value) {
            var secondChild = $(this).find(':nth-child(2) a');
            selectList.append("<option value='" + $(secondChild).data("applicant-name") +
                "' data-response-id='" + $(secondChild).data("response-id") + "'>" +
                $(secondChild).data("applicant-name") + "</option>");
        });
        selectList.find("option").eq($(this).prop("selectedIndex")).remove();
        $(".top-three-winners #position2").prop("disabled",false);
        $('button.publish-top3-result').prop("disabled",true);
    }
});

$(document).on("change",".top-three-winners #position2",function (event) {
    var table = $('#sih-enabler-dashboardTable2').dataTable();
    var actable = $(table.fnGetNodes()).closest("tr.selected");
    if($(this).children("option:selected").val() == '') {
        $(".top-three-winners #position3").prop("disabled",true);
        $('button.publish-top3-result').prop("disabled",true);
    } else {
        var selectList = $(".top-three-winners #position3");
        selectList.find('option').remove();
        $(actable).each(function(index, value) {
            var secondChild = $(this).find(':nth-child(2) a');
            selectList.append("<option value='" + $(secondChild).data("applicant-name") +
                "' data-response-id='" + $(secondChild).data("response-id") + "'>" +
                $(secondChild).data("applicant-name") + "</option>");
        });
        selectList.find("option").eq($(".top-three-winners #position1").prop("selectedIndex")).remove();
        selectList.find("option").eq($(this).prop("selectedIndex")).remove();
        $(".top-three-winners #position3").prop("disabled",false);
        $('button.publish-top3-result').attr("onclick","publishresult('TOP3')");
        $('button.publish-top3-result').prop("disabled",false);
    }
    var responses = [];
    responses.push($(".top-three-winners #position1").children("option:selected").data("response-id"));
    responses.push($(".top-three-winners #position2").children("option:selected").data("response-id"));
    responses.push($(".top-three-winners #position3").children("option:selected").data("response-id"));
    sessionStorage.setItem("multipleResponses", JSON.stringify(responses));
});

$(document).ready(function() {
    $('#topThreeBadgesModal').on("hidden.bs.modal", function() {
        $(".top-three-winners #position2").prop("disabled",true);
        $(".top-three-winners #position2 option[value='']").prop("selected",true);
        $(".top-three-winners #position3").prop("disabled",true);
        $(".top-three-winners #position3 option[value='']").prop("selected",true);
    });
});

function resultDaysCount(data) {

    var endDate=data.endDate;
    var resultDate=data.resultDate;

    var d = new Date();
    var month = d.getMonth()+1;
    var day = d.getDate();
    var currentDate =  (month<10 ? '0' : '') + month+'/'+(day<10 ? '0' : '') + day+'/'+d.getFullYear();

   console.log("endDate"+data.endDate +"resultDate"+data.resultDate+"currentDate"+currentDate);

   if(currentDate>endDate && currentDate < resultDate) {
       var diff = new Date(Date.parse(data.resultDate) - Date.parse(currentDate));
       var days = diff / 1000 / 60 / 60 / 24;
       $('.result-days-left').html(days);
       $('.result-days').html(days+"days");
       $('.result-last-date').html(data.resultDate);
       $('.result-announcement-modal').modal('show');
   }
}

$(document).ready(function(){
    $('.yes-show-btn').click(function(){
        localStorage.setItem("show-tutorial",true);
        $('.result-tutorials-modal').modal("hide");
    });
    $('.no-show-btn').click(function(){
        localStorage.setItem("show-tutorial",false);
        $('.result-tutorials-modal').modal("hide");
    });
    $('.how-use-ams').removeClass('display-n');
    $('.create-a-program').removeClass('display-n');
});

function escapeHtml(unsafe) {
    return String(unsafe)
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&#039;");
}

function unescapeHtml(unsafe) {
    return String(unsafe)
    .replace(/&amp;/g, "&")
    .replace(/&lt;/g, "<")
    .replace(/&gt;/g, ">")
    .replace(/&quot;/g, "\"")
    .replace(/&#039;/g, "\'");
}

$('.create-a-program').on('click',function(){
    if(!store.getItem('published')){
        alert("you are not eligible to create a AMS program.As your Profile is under moderation");
    }
    {
        window.open(window.location.origin +'/content/sih/en/create-application.html','_blank');
    }
});
var responseObj;

var getApplicantResponse = function (applicantResponseId) {
    var requestApi = $("#applicant-response-details").data("applicationFetchApi");

    if (requestApi && applicantResponseId) {
        $('#modal-loader').modal('show');
        $.ajax({
            url: SIH.getEndPoint(requestApi + applicantResponseId),
            type: "GET",
            contentType: 'application/json',
            headers: {'X-Auth-Token': store.getItem("token"), 'Content-Type': 'application/json'}
        }).done(function (response) {
            responseObj = response;
            var uniqueId = store.getItem("uniqueId");
            var context = {response: response, currentUserId: uniqueId};
            var btnSource = document.getElementById("action-button").innerHTML;
            var btnTemplate = Handlebars.compile(btnSource);
            var dataSource = document.getElementById("ams-applicant-detail-template").innerHTML;
            var dataTemplate = Handlebars.compile(dataSource);
            if(jQuery.inArray( response.application.id, ["5ea181f8e4b0363cb6335eea", "5ede2bdfe4b054cc0b1414c8",
                "5ebbf6e36827795ffb61b1ea", "5ec7bb49e4b03e7099593ee6", "5ec369c6eb2774b6a7cdd49a",
                "5ec369c6eb2774b6a7cdd49b", "5ec369c6eb2774b6a7cdd49c", "5ec369c6eb2774b6a7cdd49d",
                "5ec369c6eb2774b6a7cdd49e", "5ec369c6eb2774b6a7cdd49f", "5ed0dfebe4b054cc0b124f18"] ) < 0 ) {
                $(".form-enabler-btns").html(btnTemplate(context));
            }
            $("#applicant-response-details").html(dataTemplate(context));
            sessionStorage.setItem("applicantResponse",JSON.stringify(response));
            displayApplicationResponse(response.detailedApplicationResponseDTO.responses);
            if(response.parameterValue){
                setMarksOnPage(response.parameterValue);
            }
            $('#modal-loader').modal('hide');
        }).error(function (xhr, error, thrown) {
            console.log(error);
            $('#modal-loader').modal('hide');
            if (xhr.status === 403) {
                showErrorDialog("You are not authorised to view this page.", goToDashboard);
            } else {
                showErrorDialog("Something bad happened", goToDashboard);
            }
        });
    } else {
        $('.ams-error-modal p').html("Invalid Application.");
        $(".ams-error-modal").modal("show");
        $(".buttonRow").find(".btn").attr("disabled", "disabled");
    }
};


var changeResponseStatus = function (status) {
    var requestApi = $("#applicant-response-details").data("changeStatusApi");
    var redirectUrl = $("#applicant-response-details").data("redirectUrl");
	var isValid = false;
    if(status == 'ACCEPT'){
		isValid = setApproveResponse(responseObj,status);
        if(!isValid){
			showErrorDialog("Please provide marks for this application. Marks must be an integer value.");
            return;
        }
    } else {
		responseObj.status = status;
		isValid = true;
    }
    var data = Object.assign({}, responseObj);
    data.detailedApplicationResponseDTO = undefined;
    if (requestApi && data.id && isValid) {
        $('#modal-loader').modal('show');
        $.ajax({
            url: SIH.getEndPoint(requestApi),
            type: "POST",
            contentType: 'application/json',
            data: JSON.stringify(data),
            headers: {'X-Auth-Token': store.getItem("token"), 'Content-Type': 'application/json'}
        }).success(function (response) {
            sessionStorage.setItem("applicationId", responseObj.applicationId);
            window.location.href = redirectUrl + ".html";
            $('#modal-loader').modal('hide');
        }).error(function (xhr, error, thrown) {
            console.error(error);
            $('#modal-loader').modal('hide');
            if (xhr.status === 403) {
                showErrorDialog("You are not authorised to update status", goToDashboard);
            } else {
                showErrorDialog("Something bad happened");
            }
        });
    } else {
        $('.ams-error-modal p').html("Invalid Application.");
        $(".ams-error-modal").modal("show");
        $(".buttonRow").find(".btn").attr("disabled", "disabled");
    }
};

var registerModalEvent = function () {
    $(document).on("click", ".form-enabler-btns .btn", function () {
        $('.ams-response-rejection-modal textarea#ams-approval-comment').val('');
        var status = $(this).data('status');
        $('.ams-response-rejection-modal input[name="status"]').val(status);
        var formType = $(this).parent().data('form-type');
        if (status === "REJECT_LEVEL_I" || status === "REJECT_LEVEL_II" || status === "INCOMPLETE" || status === "WINNER") {
            $('.ams-response-rejection-modal .ams-submit-btn').attr('data-status', status);
            $('.ams-response-rejection-modal').modal('show');
            var heading;
            if (status === "REJECT_LEVEL_I" || status === "REJECT_LEVEL_II") {
                heading = "REJECTED";
                $('.ams-response-rejection-modal textarea').attr('placeholder', 'Please enter reason for rejection.');
            } else if (status === "INCOMPLETE") {
                heading = "MARK AS INCOMPLETE";
                $('.ams-response-rejection-modal textarea').attr('placeholder', 'Please enter reason for marking as incomplete.');
            } else {
                heading = "WINNER REMARKS";
                $('.ams-response-rejection-modal textarea').attr('placeholder', 'Please enter winner remarks. This will be sent to winner when result is announced.')
            }
            $('.ams-response-rejection-modal .modal-heading').text(heading);
        } else {
            changeResponseStatus(status);
        }
    });

    $(document).on('click', ".ams-response-rejection-modal .ams-submit-btn", function () {
        var status = $(".ams-response-rejection-modal .ams-submit-btn").data("status");
        var comment = $(".ams-response-rejection-modal textarea#ams-approval-comment").val();
        if (comment) {
            if (status === 'REJECT_LEVEL_I') {
                responseObj.rejectionReasonlevelI = comment;
            } else if (status === 'REJECT_LEVEL_II') {
                responseObj.rejectionReasonlevelII = comment;
            } else if (status === 'INCOMPLETE') {
                responseObj.incompleteReason = comment;
            } else if (status === "WINNER") {
                responseObj.winnerRemark = comment;
            }
            changeResponseStatus(status);
            $('.ams-response-rejection-modal').modal('hide');
        } else {
            if ($(".ams-response-rejection-modal").find(".help-block").length === 0) {
                $(".ams-response-rejection-modal textarea#ams-approval-comment").closest(".form-group").addClass("has-error");
                $("<span style='font-size: small' class=\"help-block\">This field is required</span>").insertAfter(".ams-response-rejection-modal textarea#ams-approval-comment")
            }
        }
    })
};

var setApproveResponse = function (responseObj,status){
    var inputMarks = $('input[type=number][name=marks]');
	var isValid = true;
    $(inputMarks).each(function(){
        if($(this).val() == '' || parseInt($(this).val())<0 || parseInt($(this).val())>parseInt($(this).data("max"))){
			return isValid = false;
        }
    });
    if(isValid){
		responseObj.status = status;
        var totalMarks = 0;
        var pList = {};
        $(inputMarks).each(function(){
			totalMarks = totalMarks + parseInt($(this).val());
            var key = $(this).data("response-id");
            pList[key] = parseInt($(this).val())
        });
		responseObj.parameterValue = pList;
		responseObj.totalMarks = totalMarks;
        responseObj.marksPercentage = ((parseInt(totalMarks)/parseInt(responseObj.totalWeightage)) * 100).toFixed(2);
    } else {
		showErrorDialog("Please provide marks for this application.");
    }
    return isValid;
};

var validateForm = function (inputs){
    var status = true;

    return status;
};

function setMarksOnPage(parameterValue){
    Object.keys(parameterValue).forEach(function(key) {
    	var value = parameterValue[key];
        $("input[type=number][data-response-id="+key+"]").val(value);
        $("input[type=number][data-response-id="+key+"]").attr("disabled","disabled");
	});
}

function displayApplicationResponse(responses){
    var parent = $('.ams-application-details-reponse.pgf-dashboard #applicant-response-details');
    $(responses).each(function(index,value){
        showResponses(index,value,parent);
    });
}

function showResponses(index,data,parent){
    if(data.type=="QUESTION"){
        var responseDiv = checkAndCreateDiv(data,parent);
		var appendDIv = $(responseDiv).children("div#"+$(responseDiv).attr("id")+"-div").children("ul.list-no-1");
		populateQuestion(data,appendDIv);
    } else if(data.type=="SECTION"){
        var secData = data.responses[0];
        var responseDiv = checkAndCreateDiv(secData,parent);
        var ulNo = responseDiv.find("ul").length + 1;
        var actDiv = $(responseDiv).children("div#"+$(responseDiv).attr("id")+"-div");
        if(data.sectionTitle != 'Additional Questions'){
            $(actDiv).append("<h4 class='sub-title'>"+data.sectionTitle+"</h4><ul class='list-no-"+ulNo+" info-list'></ul>");
        }
		var appendDiv = $(actDiv).children("ul.list-no-"+$(actDiv).find("ul").length);
        $(data.responses).each(function(index,value){
		 	populateQuestion(value,appendDiv);
        });
    } else if(data.type=="LIST"){
        var secData = data.sectionResponseDTOS[0].responses[0];
        var responseDiv = checkAndCreateDiv(secData,parent);
        var ulNo = responseDiv.find("ul").length + 1;
        var actDiv = $(responseDiv).children("div#"+$(responseDiv).attr("id")+"-div");
        $(actDiv).append("<h4 class='sub-title'>"+data.sectionTitle+"</h4><ul class='list-no-"+ulNo+" info-list'></ul>");
        var appendDiv = $(actDiv).children("ul.list-no-"+$(actDiv).find("ul").length);
        $(data.sectionResponseDTOS[0].responses).each(function(index,value){
		 	populateQuestion(value,appendDiv);
        });
		//displayApplicationResponse(secData);
    }
}

function checkAndCreateDiv(data,parent){
    var responseDivId = (data.category == '' || data.category == undefined) ? 'additional-questions' : String(data.category).replace(/ /g, '-').toLowerCase();
    if($('#applicant-response-details #'+responseDivId).length>0) {
        return $('#applicant-response-details #'+responseDivId);
    } else {
        var newDiv = "<div id='"+responseDivId+"' class='pgf-form-details'>"+
            "<h3><a href='#"+responseDivId+"-div' data-toggle='collapse'>"+(data.category == ''? "Additional Questions":data.category)+"</a></h3>"
                    +"<div id='"+responseDivId+"-div' class='collapse in'><ul class='list-no-1 info-list'></ul></div>"
                    +"</div>";
        if(data.category == undefined){
			$(newDiv).insertBefore($(parent).find(".pgf-form-details.parameter-block"));
        } else {
        	$(parent).find(".applicant-details").append(newDiv);
        }
        return $('#applicant-response-details #'+responseDivId);
    }
}

function populateQuestion(data,appendDiv){
	var dataSource = document.getElementById("ams-question-template").innerHTML;
    var dataTemplate = Handlebars.compile(dataSource);
    $(appendDiv).append(dataTemplate(data));
}

$(document).on('blur','input[type=number][name=marks]',function(){
    var marks = $(this).val();
    if(marks.includes("\.")){
        $(this).val(parseInt(marks));
        showErrorModal("Please enter an integer value");
    }
    if(parseInt(marks) > parseInt($(this).data("max"))) {
        $(this).val("0");
        showErrorModal("You cannot enter value greater than the weightage.");
    }
});
/**
 * @author zhixin wen <wenzhixin2010@gmail.com>
 * @version 1.2.1
 *
 * http://wenzhixin.net.cn/p/multiple-select/
 */

/**
 * This has been customised according to some requirements
 */


(function ($) {

    'use strict';

    // it only does '%s', and return '' when arguments are undefined
    var sprintf = function (str) {
        var args = arguments,
            flag = true,
            i = 1;

        str = str.replace(/%s/g, function () {
            var arg = args[i++];

            if (typeof arg === 'undefined') {
                flag = false;
                return '';
            }
            return arg;
        });
        return flag ? str : '';
    };

    var removeDiacritics = function (str) {
        var defaultDiacriticsRemovalMap = [
            {
                'base': 'A',
                'letters': /[\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F]/g
            },
            {'base': 'AA', 'letters': /[\uA732]/g},
            {'base': 'AE', 'letters': /[\u00C6\u01FC\u01E2]/g},
            {'base': 'AO', 'letters': /[\uA734]/g},
            {'base': 'AU', 'letters': /[\uA736]/g},
            {'base': 'AV', 'letters': /[\uA738\uA73A]/g},
            {'base': 'AY', 'letters': /[\uA73C]/g},
            {'base': 'B', 'letters': /[\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181]/g},
            {'base': 'C', 'letters': /[\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E]/g},
            {
                'base': 'D',
                'letters': /[\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779]/g
            },
            {'base': 'DZ', 'letters': /[\u01F1\u01C4]/g},
            {'base': 'Dz', 'letters': /[\u01F2\u01C5]/g},
            {
                'base': 'E',
                'letters': /[\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E]/g
            },
            {'base': 'F', 'letters': /[\u0046\u24BB\uFF26\u1E1E\u0191\uA77B]/g},
            {
                'base': 'G',
                'letters': /[\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E]/g
            },
            {
                'base': 'H',
                'letters': /[\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D]/g
            },
            {
                'base': 'I',
                'letters': /[\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197]/g
            },
            {'base': 'J', 'letters': /[\u004A\u24BF\uFF2A\u0134\u0248]/g},
            {
                'base': 'K',
                'letters': /[\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2]/g
            },
            {
                'base': 'L',
                'letters': /[\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780]/g
            },
            {'base': 'LJ', 'letters': /[\u01C7]/g},
            {'base': 'Lj', 'letters': /[\u01C8]/g},
            {'base': 'M', 'letters': /[\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C]/g},
            {
                'base': 'N',
                'letters': /[\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4]/g
            },
            {'base': 'NJ', 'letters': /[\u01CA]/g},
            {'base': 'Nj', 'letters': /[\u01CB]/g},
            {
                'base': 'O',
                'letters': /[\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C]/g
            },
            {'base': 'OI', 'letters': /[\u01A2]/g},
            {'base': 'OO', 'letters': /[\uA74E]/g},
            {'base': 'OU', 'letters': /[\u0222]/g},
            {'base': 'P', 'letters': /[\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754]/g},
            {'base': 'Q', 'letters': /[\u0051\u24C6\uFF31\uA756\uA758\u024A]/g},
            {
                'base': 'R',
                'letters': /[\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782]/g
            },
            {
                'base': 'S',
                'letters': /[\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784]/g
            },
            {
                'base': 'T',
                'letters': /[\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786]/g
            },
            {'base': 'TZ', 'letters': /[\uA728]/g},
            {
                'base': 'U',
                'letters': /[\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244]/g
            },
            {'base': 'V', 'letters': /[\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245]/g},
            {'base': 'VY', 'letters': /[\uA760]/g},
            {'base': 'W', 'letters': /[\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72]/g},
            {'base': 'X', 'letters': /[\u0058\u24CD\uFF38\u1E8A\u1E8C]/g},
            {
                'base': 'Y',
                'letters': /[\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE]/g
            },
            {
                'base': 'Z',
                'letters': /[\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762]/g
            },
            {
                'base': 'a',
                'letters': /[\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250]/g
            },
            {'base': 'aa', 'letters': /[\uA733]/g},
            {'base': 'ae', 'letters': /[\u00E6\u01FD\u01E3]/g},
            {'base': 'ao', 'letters': /[\uA735]/g},
            {'base': 'au', 'letters': /[\uA737]/g},
            {'base': 'av', 'letters': /[\uA739\uA73B]/g},
            {'base': 'ay', 'letters': /[\uA73D]/g},
            {'base': 'b', 'letters': /[\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253]/g},
            {
                'base': 'c',
                'letters': /[\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184]/g
            },
            {
                'base': 'd',
                'letters': /[\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A]/g
            },
            {'base': 'dz', 'letters': /[\u01F3\u01C6]/g},
            {
                'base': 'e',
                'letters': /[\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD]/g
            },
            {'base': 'f', 'letters': /[\u0066\u24D5\uFF46\u1E1F\u0192\uA77C]/g},
            {
                'base': 'g',
                'letters': /[\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F]/g
            },
            {
                'base': 'h',
                'letters': /[\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265]/g
            },
            {'base': 'hv', 'letters': /[\u0195]/g},
            {
                'base': 'i',
                'letters': /[\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131]/g
            },
            {'base': 'j', 'letters': /[\u006A\u24D9\uFF4A\u0135\u01F0\u0249]/g},
            {
                'base': 'k',
                'letters': /[\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3]/g
            },
            {
                'base': 'l',
                'letters': /[\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747]/g
            },
            {'base': 'lj', 'letters': /[\u01C9]/g},
            {'base': 'm', 'letters': /[\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F]/g},
            {
                'base': 'n',
                'letters': /[\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5]/g
            },
            {'base': 'nj', 'letters': /[\u01CC]/g},
            {
                'base': 'o',
                'letters': /[\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275]/g
            },
            {'base': 'oi', 'letters': /[\u01A3]/g},
            {'base': 'ou', 'letters': /[\u0223]/g},
            {'base': 'oo', 'letters': /[\uA74F]/g},
            {'base': 'p', 'letters': /[\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755]/g},
            {'base': 'q', 'letters': /[\u0071\u24E0\uFF51\u024B\uA757\uA759]/g},
            {
                'base': 'r',
                'letters': /[\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783]/g
            },
            {
                'base': 's',
                'letters': /[\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B]/g
            },
            {
                'base': 't',
                'letters': /[\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787]/g
            },
            {'base': 'tz', 'letters': /[\uA729]/g},
            {
                'base': 'u',
                'letters': /[\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289]/g
            },
            {'base': 'v', 'letters': /[\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C]/g},
            {'base': 'vy', 'letters': /[\uA761]/g},
            {'base': 'w', 'letters': /[\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73]/g},
            {'base': 'x', 'letters': /[\u0078\u24E7\uFF58\u1E8B\u1E8D]/g},
            {
                'base': 'y',
                'letters': /[\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF]/g
            },
            {
                'base': 'z',
                'letters': /[\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763]/g
            }
        ];

        for (var i = 0; i < defaultDiacriticsRemovalMap.length; i++) {
            str = str.replace(defaultDiacriticsRemovalMap[i].letters, defaultDiacriticsRemovalMap[i].base);
        }

        return str;

    };

    function MultipleSelect($el, options) {
        var that = this,
            name = $el.attr('name') || options.name || '';

        this.options = options;

        // hide select element
        this.$el = $el.hide();

        // label element
        this.$label = this.$el.closest('label');
        if (this.$label.length === 0 && this.$el.attr('id')) {
            this.$label = $(sprintf('label[for="%s"]', this.$el.attr('id').replace(/:/g, '\\:')));
        }

        // restore class and title from select element
        this.$parent = $(sprintf(
            '<div class="ms-parent %s" %s/>',
            $el.attr('class') || '',
            sprintf('title="%s"', $el.attr('title'))));

        // add placeholder to choice button
        this.$choice = $(sprintf([
                '<button type="button" class="ms-choice">',
                '<span class="placeholder">%s</span>',
                '<div></div>',
                '</button>'
            ].join(''),
            this.options.placeholder));

        // default position is bottom
        this.$drop = $(sprintf('<div class="ms-drop %s"%s></div>',
            this.options.position,
            sprintf(' style="width: %s"', this.options.dropWidth)));

        this.$el.after(this.$parent);
        this.$parent.append(this.$choice);
        this.$parent.append(this.$drop);

        if (this.$el.prop('disabled')) {
            this.$choice.addClass('disabled');
        }
        this.$parent.css('width',
            this.options.width ||
            this.$el.css('width') ||
            this.$el.outerWidth() + 20);

        this.selectAllName = 'data-name="selectAll' + name + '"';
        this.selectGroupName = 'data-name="selectGroup' + name + '"';
        this.selectItemName = 'data-name="selectItem' + name + '"';

        if (!this.options.keepOpen) {
            $(document).click(function (e) {
                if ($(e.target)[0] === that.$choice[0] ||
                    $(e.target).parents('.ms-choice')[0] === that.$choice[0]) {
                    return;
                }
                if (($(e.target)[0] === that.$drop[0] ||
                    $(e.target).parents('.ms-drop')[0] !== that.$drop[0] && e.target !== $el[0]) &&
                    that.options.isOpen) {
                    that.close();
                }
            });
        }
    }

    MultipleSelect.prototype = {
        constructor: MultipleSelect,

        init: function () {
            var that = this,
                $ul = $('<ul></ul>');

            this.$drop.html('');

            if (this.options.filter) {
                this.$drop.append([
                    '<div class="ms-search">',
                    '<input type="text" autocomplete="off" autocorrect="off" autocapitilize="off" spellcheck="false">',
                    '</div>'].join('')
                );
            }

            if (this.options.selectAll && !this.options.single) {
                $ul.append([
                    '<li class="ms-select-all">',
                    '<label>',
                    sprintf('<input type="checkbox" %s /> ', this.selectAllName),
                    '<div class="control_indicator"></div>',
                    this.options.selectAllText,
                    '</label>',
                    '</li>'
                ].join(''));
            }

            $.each(this.$el.children(), function (i, elm) {
                $ul.append(that.optionToHtml(i, elm));
            });
            $ul.append(sprintf('<li class="ms-no-results">%s</li>', this.options.noMatchesFound));
            this.$drop.append($ul);

            this.$drop.find('ul').css('max-height', this.options.maxHeight + 'px');
            this.$drop.find('.multiple').css('width', this.options.multipleWidth + 'px');

            this.$searchInput = this.$drop.find('.ms-search input');
            this.$selectAll = this.$drop.find('input[' + this.selectAllName + ']');
            this.$selectGroups = this.$drop.find('input[' + this.selectGroupName + ']');
            this.$selectItems = this.$drop.find('input[' + this.selectItemName + ']:enabled');
            this.$disableItems = this.$drop.find('input[' + this.selectItemName + ']:disabled');
            this.$noResults = this.$drop.find('.ms-no-results');

            this.events();
            this.updateSelectAll(true);
            this.update(true);

            if (this.options.isOpen) {
                this.open();
            }
        },

        optionToHtml: function (i, elm, group, groupDisabled) {
            var that = this,
                $elm = $(elm),
                classes = $elm.attr('class') || '',
                title = sprintf('title="%s"', $elm.attr('title')),
                multiple = this.options.multiple ? 'multiple' : '',
                disabled,
                type = this.options.single ? 'radio' : 'checkbox';

            if ($elm.is('option')) {
                var value = $elm.val(),
                    text = that.options.textTemplate($elm),
                    selected = $elm.prop('selected'),
                    style = sprintf('style="%s"', this.options.styler(value)),
                    $el;

                disabled = groupDisabled || $elm.prop('disabled');

                $el = $([
                    sprintf('<li class="%s %s" %s %s>', multiple, classes, title, style),
                    sprintf('<label class="%s">', disabled ? 'disabled' : ''),
                    sprintf('<input type="%s" %s%s%s%s>',
                        type, this.selectItemName,
                        selected ? ' checked="checked"' : '',
                        disabled ? ' disabled="disabled"' : '',
                        sprintf(' data-group="%s"', group)),
                    '<div class="control_indicator"></div>',
                    sprintf('<span>%s</span>', text),
                    '</label>',
                    '</li>'
                ].join(''));
                $el.find('input').val(value);
                return $el;
            }
            if ($elm.is('optgroup')) {
                var label = that.options.labelTemplate($elm),
                    $group = $('<div/>');

                group = 'group_' + i;
                disabled = $elm.prop('disabled');

                $group.append([
                    '<li class="group">',
                    sprintf('<label class="optgroup %s" data-group="%s">', disabled ? 'disabled' : '', group),
                    this.options.hideOptgroupCheckboxes || this.options.single ? '' :
                        sprintf('<input type="checkbox" %s %s>',
                            this.selectGroupName, disabled ? 'disabled="disabled"' : ''),
                    label,
                    '</label>',
                    '</li>'
                ].join(''));

                $.each($elm.children(), function (i, elm) {
                    $group.append(that.optionToHtml(i, elm, group, disabled));
                });
                return $group.html();
            }
        },

        events: function () {
            var that = this,
                toggleOpen = function (e) {
                    e.preventDefault();
                    that[that.options.isOpen ? 'close' : 'open']();
                };

            if (this.$label) {
                this.$label.off('click').on('click', function (e) {
                    if (e.target.nodeName.toLowerCase() !== 'label' || e.target !== this) {
                        return;
                    }
                    toggleOpen(e);
                    if (!that.options.filter || !that.options.isOpen) {
                        that.focus();
                    }
                    e.stopPropagation(); // Causes lost focus otherwise
                });
            }

            this.$choice.off('click').on('click', toggleOpen)
                .off('focus').on('focus', this.options.onFocus)
                .off('blur').on('blur', this.options.onBlur);

            this.$parent.off('keydown').on('keydown', function (e) {
                switch (e.which) {
                    case 27: // esc key
                        that.close();
                        that.$choice.focus();
                        break;
                }
            });

            this.$searchInput.off('keydown').on('keydown', function (e) {
                // Ensure shift-tab causes lost focus from filter as with clicking away
                if (e.keyCode === 9 && e.shiftKey) {
                    that.close();
                }
            }).off('keyup').on('keyup', function (e) {
                // enter or space
                // Avoid selecting/deselecting if no choices made
                if (that.options.filterAcceptOnEnter && (e.which === 13 || e.which == 32) && that.$searchInput.val()) {
                    that.$selectAll.click();
                    that.close();
                    that.focus();
                    return;
                }
                that.filter();
            });

            this.$selectAll.off('click').on('click', function () {
                var checked = $(this).prop('checked'),
                    $items = that.$selectItems.filter(':visible');

                if ($items.length === that.$selectItems.length) {
                    that[checked ? 'checkAll' : 'uncheckAll']();
                } else { // when the filter option is true
                    that.$selectGroups.prop('checked', checked);
                    $items.prop('checked', checked);
                    that.options[checked ? 'onCheckAll' : 'onUncheckAll']();
                    that.update();
                }
            });
            this.$selectGroups.off('click').on('click', function () {
                var group = $(this).parent().attr('data-group'),
                    $items = that.$selectItems.filter(':visible'),
                    $children = $items.filter(sprintf('[data-group="%s"]', group)),
                    checked = $children.length !== $children.filter(':checked').length;

                $children.prop('checked', checked);
                that.updateSelectAll();
                that.update();
                that.options.onOptgroupClick({
                    label: $(this).parent().text(),
                    checked: checked,
                    children: $children.get(),
                    instance: that
                });
            });
            this.$selectItems.off('click').on('click', function () {
                that.updateSelectAll();
                that.update();
                that.updateOptGroupSelect();
                that.options.onClick({
                    label: $(this).parent().text(),
                    value: $(this).val(),
                    checked: $(this).prop('checked'),
                    instance: that
                });

                if (that.options.single && that.options.isOpen && !that.options.keepOpen) {
                    that.close();
                }

                if (that.options.single) {
                    var clickedVal = $(this).val();
                    that.$selectItems.filter(function () {
                        return $(this).val() !== clickedVal;
                    }).each(function () {
                        $(this).prop('checked', false);
                    });
                    that.update();
                }
            });
        },

        open: function () {
            if (this.$choice.hasClass('disabled')) {
                return;
            }
            this.options.isOpen = true;
            this.$choice.find('>div').addClass('open');
            this.$drop[this.animateMethod('show')]();

            // fix filter bug: no results show
            this.$selectAll.parent().show();
            this.$noResults.hide();

            // Fix #77: 'All selected' when no options
            if (!this.$el.children().length) {
                this.$selectAll.parent().hide();
                this.$noResults.show();
            }

            if (this.options.container) {
                var offset = this.$drop.offset();
                this.$drop.appendTo($(this.options.container));
                this.$drop.offset({
                    top: offset.top,
                    left: offset.left
                });
            }

            if (this.options.filter) {
                this.$searchInput.val('');
                this.$searchInput.focus();
                this.filter();
            }
            this.options.onOpen();
        },

        close: function () {
            this.options.isOpen = false;
            this.$choice.find('>div').removeClass('open');
            this.$drop[this.animateMethod('hide')]();
            if (this.options.container) {
                this.$parent.append(this.$drop);
                this.$drop.css({
                    'top': 'auto',
                    'left': 'auto'
                });
            }
            this.options.onClose();
        },

        animateMethod: function (method) {
            var methods = {
                show: {
                    fade: 'fadeIn',
                    slide: 'slideDown'
                },
                hide: {
                    fade: 'fadeOut',
                    slide: 'slideUp'
                }
            };

            return methods[method][this.options.animate] || method;
        },

        update: function (isInit) {
            var selects = this.options.displayValues ? this.getSelects() : this.getSelects('text'),
                $span = this.$choice.find('>span'),
                sl = selects.length;

            if (sl === 0) {
                $span.addClass('placeholder').html(this.options.placeholder);
            } else if (this.options.allSelected && sl === this.$selectItems.length + this.$disableItems.length) {
                $span.removeClass('placeholder').html(this.options.allSelected);
            } else if (this.options.ellipsis && sl > this.options.minimumCountSelected) {
                $span.removeClass('placeholder').text(selects.slice(0, this.options.minimumCountSelected)
                    .join(this.options.delimiter) + '...');
            } else if (this.options.countSelected && sl > this.options.minimumCountSelected) {
                $span.removeClass('placeholder').html(this.options.countSelected
                    .replace('#', selects.length)
                    .replace('%', this.$selectItems.length + this.$disableItems.length));
            } else {
                $span.removeClass('placeholder').text(selects.join(this.options.delimiter));
            }

            if (this.options.addTitle) {
                $span.prop('title', this.getSelects('text'));
            }

            // set selects to select
            this.$el.val(this.getSelects()).trigger('change');

            // add selected class to selected li
            this.$drop.find('li').removeClass('selected');
            this.$drop.find('input:checked').each(function () {
                $(this).parents('li').first().addClass('selected');
            });

            // trigger <select> change event
            if (!isInit) {
                this.$el.trigger('change');
            }
        },

        updateSelectAll: function (isInit) {
            var $items = this.$selectItems;

            if (!isInit) {
                $items = $items.filter(':visible');
            }
            this.$selectAll.prop('checked', $items.length &&
                $items.length === $items.filter(':checked').length);
            if (!isInit && this.$selectAll.prop('checked')) {
                this.options.onCheckAll();
            }
        },

        updateOptGroupSelect: function () {
            var $items = this.$selectItems.filter(':visible');
            $.each(this.$selectGroups, function (i, val) {
                var group = $(val).parent().attr('data-group'),
                    $children = $items.filter(sprintf('[data-group="%s"]', group));
                $(val).prop('checked', $children.length &&
                    $children.length === $children.filter(':checked').length);
            });
        },

        //value or text, default: 'value'
        getSelects: function (type) {
            var that = this,
                texts = [],
                values = [];
            this.$drop.find(sprintf('input[%s]:checked', this.selectItemName)).each(function () {
                texts.push($(this).parents('li').first().text());
                values.push($(this).val());
            });

            if (type === 'text' && this.$selectGroups.length) {
                texts = [];
                this.$selectGroups.each(function () {
                    var html = [],
                        text = $.trim($(this).parent().text()),
                        group = $(this).parent().data('group'),
                        $children = that.$drop.find(sprintf('[%s][data-group="%s"]', that.selectItemName, group)),
                        $selected = $children.filter(':checked');

                    if (!$selected.length) {
                        return;
                    }

                    html.push('[');
                    html.push(text);
                    if ($children.length > $selected.length) {
                        var list = [];
                        $selected.each(function () {
                            list.push($(this).parent().text());
                        });
                        html.push(': ' + list.join(', '));
                    }
                    html.push(']');
                    texts.push(html.join(''));
                });
            }
            return type === 'text' ? texts : values;
        },

        setSelects: function (values) {
            var that = this;
            this.$selectItems.prop('checked', false);
            this.$disableItems.prop('checked', false);
            $.each(values, function (i, value) {
                that.$selectItems.filter(sprintf('[value="%s"]', value)).prop('checked', true);
                that.$disableItems.filter(sprintf('[value="%s"]', value)).prop('checked', true);
            });
            this.$selectAll.prop('checked', this.$selectItems.length ===
                this.$selectItems.filter(':checked').length + this.$disableItems.filter(':checked').length);

            $.each(that.$selectGroups, function (i, val) {
                var group = $(val).parent().attr('data-group'),
                    $children = that.$selectItems.filter('[data-group="' + group + '"]');
                $(val).prop('checked', $children.length &&
                    $children.length === $children.filter(':checked').length);
            });

            this.update();
        },

        enable: function () {
            this.$choice.removeClass('disabled');
        },

        disable: function () {
            this.$choice.addClass('disabled');
        },

        checkAll: function () {
            this.$selectItems.prop('checked', true);
            this.$selectGroups.prop('checked', true);
            this.$selectAll.prop('checked', true);
            this.update();
            this.options.onCheckAll();
        },

        uncheckAll: function () {
            this.$selectItems.prop('checked', false);
            this.$selectGroups.prop('checked', false);
            this.$selectAll.prop('checked', false);
            this.update();
            this.options.onUncheckAll();
        },

        focus: function () {
            this.$choice.focus();
            this.options.onFocus();
        },

        blur: function () {
            this.$choice.blur();
            this.options.onBlur();
        },

        refresh: function () {
            this.init();
        },

        destroy: function () {
            this.$el.show();
            this.$parent.remove();
            this.$el.data('multipleSelect', null);
        },

        filter: function () {
            var that = this,
                text = $.trim(this.$searchInput.val()).toLowerCase();

            if (text.length === 0) {
                this.$selectAll.parent().show();
                this.$selectItems.parent().show();
                this.$disableItems.parent().show();
                this.$selectGroups.parent().show();
                this.$noResults.hide();
            } else {
                this.$selectItems.each(function () {
                    var $parent = $(this).parent();
                    $parent[removeDiacritics($parent.text().toLowerCase()).indexOf(removeDiacritics(text)) < 0 ? 'hide' : 'show']();
                });
                this.$disableItems.parent().hide();
                this.$selectGroups.each(function () {
                    var $parent = $(this).parent();
                    var group = $parent.attr('data-group'),
                        $items = that.$selectItems.filter(':visible');
                    $parent[$items.filter(sprintf('[data-group="%s"]', group)).length ? 'show' : 'hide']();
                });

                //Check if no matches found
                if (this.$selectItems.parent().filter(':visible').length) {
                    this.$selectAll.parent().show();
                    this.$noResults.hide();
                } else {
                    this.$selectAll.parent().hide();
                    this.$noResults.show();
                }
            }
            this.updateOptGroupSelect();
            this.updateSelectAll();
            this.options.onFilter(text);
        }
    };

    $.fn.multipleSelect = function () {
        var option = arguments[0],
            args = arguments,

            value,
            allowedMethods = [
                'getSelects', 'setSelects',
                'enable', 'disable',
                'open', 'close',
                'checkAll', 'uncheckAll',
                'focus', 'blur',
                'refresh', 'destroy'
            ];

        this.each(function () {
            var $this = $(this),
                data = $this.data('multipleSelect'),
                options = $.extend({}, $.fn.multipleSelect.defaults,
                    $this.data(), typeof option === 'object' && option);

            if (!data) {
                data = new MultipleSelect($this, options);
                $this.data('multipleSelect', data);
            }

            if (typeof option === 'string') {
                if ($.inArray(option, allowedMethods) < 0) {
                    throw 'Unknown method: ' + option;
                }
                value = data[option](args[1]);
            } else {
                data.init();
                if (args[1]) {
                    value = data[args[1]].apply(data, [].slice.call(args, 2));
                }
            }
        });

        return typeof value !== 'undefined' ? value : this;
    };

    $.fn.multipleSelect.defaults = {
        name: '',
        isOpen: false,
        placeholder: '',
        selectAll: true,
        selectAllDelimiter: ['[', ']'],
        minimumCountSelected: 3,
        ellipsis: false,
        multiple: false,
        multipleWidth: 80,
        single: false,
        filter: false,
        width: undefined,
        dropWidth: undefined,
        maxHeight: 250,
        container: null,
        position: 'bottom',
        keepOpen: false,
        animate: 'none', // 'none', 'fade', 'slide'
        displayValues: false,
        delimiter: ', ',
        addTitle: false,
        filterAcceptOnEnter: false,
        hideOptgroupCheckboxes: false,

        selectAllText: 'Select all',
        allSelected: 'All selected',
        countSelected: '# of % selected',
        noMatchesFound: 'No matches found',

        styler: function () {
            return false;
        },
        textTemplate: function ($elm) {
            return $elm.html();
        },
        labelTemplate: function ($elm) {
            return $elm.attr('label');
        },

        onOpen: function () {
            return false;
        },
        onClose: function () {
            return false;
        },
        onCheckAll: function () {
            return false;
        },
        onUncheckAll: function () {
            return false;
        },
        onFocus: function () {
            return false;
        },
        onBlur: function () {
            return false;
        },
        onOptgroupClick: function () {
            return false;
        },
        onClick: function () {
            return false;
        },
        onFilter: function () {
            return false;
        }
    };
})(jQuery);

$.pushNotificationForm = function (errorMsg, thankYouMsg, notificationId, fetchErrorMsg) {
    var formData = {};
    var isValidated = true;
    var $submitForm = $("input[name='pushNotificationSubmit']");
    $("input[name=appNotificationImagePath]").attr("disabled", "disabled");

    var showErrorModal = function (errorMessage, callback) {
        $('.ams-error-modal .modal-body p').html(errorMessage);
        $('.ams-error-modal').modal('show').on('hidden.bs.modal', callback);
    };

    if (notificationId) {
        fetchPushNotificationDetails(notificationId);
    }

    function fetchPushNotificationDetails(notificationId) {
        $('#modal-loader').modal("show");
        $.ajax({
            url: SIH.getEndPoint("/api/auth/pushNotification") + "/" + notificationId,
            type: 'GET',
            beforeSend: setAMSAuthTokenHeader

        }).done(function (data) {
            if (data) {
                handlePushNotificationData(data);
                $('#modal-loader').modal("hide");
            } else {
                $('.ams-error-modal .modal-body p').html($("#pushNotificationForm").data("fetch-error"));
                $('.ams-error-modal').modal('show');
            }
        }).fail(function (response) {
            if (response && response.status === 401) {
                $("#loginModal").modal("show");
            }
            else if (response && response.responseText) {
                $('.ams-error-modal .modal-body p').html(response.responseText);
                $('.ams-error-modal').modal('show');
            }
        });

    }

    function handlePushNotificationData(data) {
        var cities = [];
        for (var field in data) {
            var fieldValue = data["" + field];
            if (fieldValue != null) {
                if ($('[name=' + field + ']').is('textarea')) {
                    $("textarea[name=" + field + "]").val(fieldValue);
                } else if ((field === "web" || field === "app" || field === "dashboard") && fieldValue) {
                    $('input#' + field).prop("checked", true).trigger('change');
                } else if (field == "focusAreas" || field == "focusArea") {
                    populateFocusAreas(field, fieldValue);
                }
                else if ($('#' + field).is('select')) {
                    if (field == "userTypes") {
                        var stakeholders = [];
                        $(fieldValue).each(function () {
                            stakeholders.push(this.id);
                        });
                        $('#' + field).val(stakeholders);
                    } else {
                        $('#' + field).val(fieldValue);
                    }
                    $('#' + field).trigger("change");
                }
                else if ($.isArray(fieldValue)) {
                    $.each(fieldValue, function (idx, val) {
                        $("input[type=checkbox][value='" + val.state.id + "']").prop("checked", true);
                        $.each(val.cities, function (id, val) {
                            cities.push(val.id);
                        });
                    });
                } else {
                    $("input[name=" + field + "]").val(fieldValue);
                }
            }
        }

        $(".selectionwithalloption #states").trigger("change", ["", {"cities": cities}]);
        $('.addContainer').each(function () {
            var checkedInputs = $(this).find('input.addAll:checked').length;
            if (checkedInputs && (checkedInputs == $(this).find('input.addAll').length)) {
                $(this).find("input[name=addAll]").prop('checked', true);
            }
        });

        if (data['notificationStatus'] === 'COMPLETED') {
            $('#pushNotificationForm input[type=text],#pushNotificationForm select.form-control,#pushNotificationForm ,#pushNotificationForm .customised-dropdown').attr("disabled", "disabled");
            $('#pushNotificationForm input[name=pushNotificationSubmit]').hide();
        }
    }

    function validateForm(requiredFields, isValidated) {
        isValidated = true;
        $.each(requiredFields, function (index, item) {
            var element = $(item).closest('.form-group').find(".form-control:not(.richTextarea,.customised-dropdown)");
            if (element && element.length > 0 && !element.closest(".modal").length) {
                if (element.attr("type") === "radio") {
                    if (element.is(':checked')) {
                        element.closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
                    }
                    else {
                        element.closest(".form-group").addClass("has-error").find("span.help-block").first().html("This field cannot be left Blank.");
                        isValidated = false;
                    }
                } else if (element.attr("type") === "checkbox" && element.attr("name") === "notificationType" && $('input[name=notificationType]:checked').length === 0) {
                    isValidated = false;
                    showErrorState(element, true);
                } else if (!element.val() || element.val() === "") {
                    isValidated = false;
                    showErrorState(element, true);
                }
                else {
                    showErrorState(element, false);
                }
            }
        });
        var richTextAreas = $('.form-control.richTextarea');
        $.each(richTextAreas, function (index, item) {
            var el = $(item);
            if (el.closest('.form-group').find('sup.required').length > 0) {
                var note = el.val().trim();
                if (note.length > 0 && !el.summernote('isEmpty')) {
                    el.siblings('.note-editor.note-frame').removeClass('note-has-error').addClass('note-writer-text');
                    showErrorState(el, false);
                } else {
                    isValidated = false;
                    el.siblings('.note-editor.note-frame').addClass('note-has-error').removeClass('note-writer-text');
                    showErrorState(el, true);
                }
            }
        });
        var customizedDropDown = $('.form-control.customised-dropdown');
        $.each(customizedDropDown, function (index, item) {
            var el = $(item);
            if (el.closest('.form-group').find('sup.required').length > 0) {
                var selectedFields = el.find('select').length > 0 ? el.find('select option:selected') : el.find('input[type=checkbox]:checked');
                if (!selectedFields || selectedFields.length === 0) {
                    isValidated = false;
                    showErrorState(el, true);
                }
            }
        });

        var regexValidatedfields = $('#pushNotificationForm .regex-val');
        $.each(regexValidatedfields, function (index, item) {
            var element = $(item);
            var re = new RegExp(element.attr("regex"));
            if (element.val() && !re.test(element.val())) {
                isValidated = false;
                //showErrorState(element, true);
                element.closest(".form-group").addClass("has-error");
                element.siblings(".regex-msg").show();
            }
            else {
                if (!(element.closest(".form-group").has("sup.required") && !element.val())) {
                    showErrorState(element, false);
                }
                element.siblings(".regex-msg").hide();
            }
        });
        if ($("select[name=appNotificationLandingPage]").val() === "Dashboard/pushNotifications") {
            if (!$("input[name=appNotificationImagePath]").val()) {
                isValidated = false;
                showErrorState($("input[name=appNotificationImagePath]"), true);
            } else {
                showErrorState($("input[name=appNotificationImagePath]"), false);
            }
        } else {
            showErrorState($("input[name=appNotificationImagePath]"), false);
        }
        var scheduleTime = $('input[name=scheduledTime]').val();
        if (scheduleTime) {
            var scheduleDate = scheduleTime.split(' ');
            var scheduleTimeStr = scheduleDate[0].split('/');
            var scheduleTimeDate = new Date(scheduleTimeStr[1] + "/" + scheduleTimeStr[0] + "/" + scheduleTimeStr[2] + " " + scheduleDate[1]);
            if (scheduleTimeDate < new Date()) {
                isValidated = false;
                $('input[name=scheduledTime]').closest(".form-group").addClass("has-error").find("span.help-block").first().html("Selected Date/Time has passed. Kindly choose another Date/Time.");
            } else {
                $('input[name=scheduledTime]').closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
            }
        }
        if (!isValidated) {
            return false;
        }
        else {
            return true;
        }
    };

    function cleanFormErrors() {
        $('#pushNotificationForm .error-message').addClass('display-n');
        $('#pushNotificationForm .error-message .success-content,#pushNotificationForm .error-message .err-content').addClass('display-n');
    }

    $("select[name=appNotificationLandingPage]").change(function () {
        if ($("select[name=appNotificationLandingPage]").val() === "Dashboard/pushNotifications") {
            $("input[name=appNotificationImagePath]").removeAttr("disabled");
        } else {
            $("input[name=appNotificationImagePath]").attr("disabled", "disabled");
        }
    });

    function getFormData() {
        formData = {};
        isValidated = true;
        var attrValue = "";
        var inputField = $("#pushNotificationForm").find(".form-control:not(.richTextarea,.customised-dropdown)");
        formData["web"] = false;
        formData["app"] = false;
        $.each(inputField, function (index, inputSel) {
            var key = $(inputSel).attr("name");
            attrValue = $(inputSel).val();
            if (typeof key !== "undefined") {
                if ($(inputSel).attr("name") === "notificationType") {
                    $('input[name=notificationType]:checked').each(function () {
                        if ($(this).val() === "web") {
                            formData["web"] = true;
                        }
                        if ($(this).val() === "app") {
                            formData["app"] = true;
                        }
                        if ($(this).val() === "dashboard") {
                            formData["dashboard"] = true;
                        }
                    });
                } else if ($('#' + key).is('select') && key === 'userTypes') {
                    var valueArr = [];
                    $('#' + key).find('option:selected').each(function () {
                        var tagObject = {};
                        tagObject["id"] = $(this).val();
                        tagObject["name"] = $(this).text().trim();
                        tagObject["text"] = $(this).text().trim();
                        valueArr.push(tagObject);
                    });
                    formData["" + key] = valueArr;
                } else if (attrValue) {
                    formData[key] = attrValue.toString();
                }
            }
        });
        var richTextAreas = $("#pushNotificationForm").find('.form-control.richTextarea');
        $.each(richTextAreas, function (index, inputSel) {
            var key = $(inputSel).attr("name");
            attrValue = $(inputSel).val();
            if (typeof key != undefined && attrValue) {
                formData[key] = attrValue.toString();
            }
        });
        formData = addFocusAreas(formData);
        formData = addLocationDetails(formData);
    }

    var showSuccessMessage = function (successMessage) {
        var success = $('#pushNotification-success');
        success.show();
        success.html(successMessage);
        scrollTo(0, success.offset().top - 200);
    };

    function errorBlockScroll(formContainer) {
        $('.has-error').length ? $('html, body').animate({scrollTop: $('.has-error').offset().top - 200}, 500) : formScrollTop(formContainer);
    }

    function formScrollTop(formContainer) {
        $('html, body').animate({
            scrollTop: formContainer.offset().top - 200
        }, 500);
    }

    $('input[name=notificationType]').on('change', function () {
        if ($(this).attr("id") === "web") {
            if (!$('input[name=notificationType][id=dashboard]').prop("checked")) {
                $('input[name=webNotificationLandingPage]').parents('.columncontrol').toggleClass('display-n');
            }
        } else if ($(this).attr("id") === "dashboard") {
            $('select[name=dashboardNotificationCategory]').parents('.columncontrol').toggleClass('display-n');
            if ($('input[name=notificationType][id=web]').prop("checked")) {
                $('input[name=webNotificationLandingPage]').parents('.columncontrol').removeClass('display-n');
            } else {
                $('input[name=webNotificationLandingPage]').parents('.columncontrol').toggleClass('display-n');
            }
        } else {
            $('select#appNotificationLandingPage').parents('.columncontrol').toggleClass('display-n');
        }


    });

    $("select[name=industry]").closest(".form-group").find("label").append("<a href='javascript:void(0)' style='float: right' class='selectAll'>Select All </a>");
    $("select[name=userTypes]").closest(".form-group").find("label").append("<a href='javascript:void(0)' style='float: right' class='selectAll'>Select All </a>");

    $(document).on("click" ,"a.selectAll", function() {
        var selectType = $(this).closest(".form-group").find("select").attr("name");
        switch (selectType) {
            case "industry":
                selectAllOptions("industry");
                break;
            case "userTypes":
                selectAllOptions("userTypes");
                break;
            default:
                break;
        }
    })

    var selectAllOptions = function(selectName) {
        var selected = [];
        $("select[name=" + selectName +"]").find("option").each(function(i,e){
            selected[selected.length]=$(e).attr("value");
        });
        $("select[name=" + selectName +"]").val(selected).trigger("change");
        return false;
    }

    $submitForm.on("click", function () {
        cleanFormErrors();
        if (validateForm($('form#pushNotificationForm sup.required:visible'))) {
            $submitForm.addClass("display-n");
            setTimeout(function () {
                $('#modal-loader').modal("show");
            }, 100);
            getFormData();
            formData["id"] = $('input[name=id]').val() ? $('input[name=id]').val() : null;
            $(this).parents(".form-group").removeClass("has-error").find("span.help-block").addClass("display-n");
            var url = (!$("input[name=scheduledTime]").val() && $('select[name=notificationStatus]').val() === 'ACTIVE') ?
                SIH.getEndPoint("/api/auth/pushNotification/send") :
                SIH.getEndPoint("/api/auth/pushNotification/save");
            $.ajax({
                type: "POST",
                data: JSON.stringify(formData),
                contentType: "application/json",
                url: url,
                headers: {"X-Auth-Token": store.getItem("token")}
            }).done(function (response) {
                $("input[name=id]").val(response.id);
                //showSuccessMessage(thankYouMsg);
                setTimeout(function () {
                    $('#modal-loader').modal("hide");
                    bootbox.alert({
                        message: "Thank You.Your request has been submitted",
                        callback: function () {
                            goToDashboard();
                        }
                    })
                }, 100);

            }).error(function (error) {
                setTimeout(function () {
                    $('#modal-loader').modal("hide");
                }, 100);
                if (error.status === 403) {
                    showErrorModal(errorMsg, goToDashboard);
                } else {
                    showErrorModal("Something went wrong. Please try again later.", goToDashboard);
                }
            });
        }
        else {
            errorBlockScroll("#pushNotificationForm");
            return false;
        }
    });
};
$.form80iac = function () {
    var cin;
    var authToken = store.getItem("token");
    var inputTypes = ["text", "email", "number"];
    var formData = {};
    var date;
    var isValidated = false;
    var isValid80User = false;
    var itReturnArray = [], accountDetailArray = [];
    var balanceSheet = {}, tradingProfitAndLossAccount = {}, income = {};
    var annualAccountStatement = {}, itrStatement = {};
    const clarificationClone = $(".multiple-clarifications .dipp-tax-values").prop('outerHTML');
    var existingClarifications = [];
    $(".button.submit-cta").prop("disabled",true);
    getIncorpNo80iac();
    function getIncorpNo80iac() {
        setTimeout(function () {
                        $('#modal-loader').modal('show');
                    },100);
        $.ajax({
            type: "GET",
            async: false,
            url: SIH.getEndPoint("/api/auth/user/cin"),
            headers: {"X-Auth-Token": authToken}
        }).success(function (data) {
            if (data) {
                cin = data.cin;
                formData.id = data.form80id;
                get80DataByCin(cin,"cin");
            }
            else {
                setTimeout(function () {
                        $('#modal-loader').modal('hide');
                    },50);
                $('.recognition-error-modal .modal-body p').html("<h5>You are not eligible to fill this form. Only DIPP recognized Startups incorporated after 1st April 2016 may do so, provided:<h5><br> <ol type='a'><li>Application is not already under process</li> <li>The application has not been rejected in the past</li></ol>");
                setTimeout(function () {
                        $('.recognition-error-modal').modal('show');
                    },200);
            }
        }).error(function () {
            setTimeout(function () {
                        $('#modal-loader').modal('hide');
                    },50);
            console.log("Error");
            $(".recognition-form-error-message").modal('show');
        });
    }
    function get80DataByCin(appIdOrCin,type){
        $.ajax({
            type: "POST",
            dataType: "json",
            data: JSON.stringify(formData),
            contentType: "application/json",
            url: SIH.getEndPoint("/api/auth/dpiit/services/checkandgetform/"+type+"/"+appIdOrCin+"/FORM80"),
            headers: {"X-Auth-Token": store.getItem("token")},
            success: function (data) {
                setTimeout(function () {
                        $('#modal-loader').modal('hide');
                    },50);
                if (data.status == true) {
                    setTimeout(function () {
                        $('#modal-loader').modal('hide');
                    },50);
                    checkEligibility80iac(data.data);
                    var currentTodayDate = new Date();
                    if (isValid80User) {
                        if(data.data.recognition) {
                            eligibilitySuccess80iac(data.data.recognition);
                            fillRest80iac(data.data);
                            var updated80iacPan = $("input[name='pan_number']").val();
                            formData["recognition"] = {
                                "id": data.data.recognition.id,
                                "incorporationNumber": data.data.recognition.incorporationNumber,
                                "startupEntity": {
                                    "panNumber": updated80iacPan
                                }
                            };
                        }else{
                            eligibilitySuccess80iac(data.data);
                            var updated80iacPan = $("input[name='pan_number']").val();
                            formData["recognition"] = {
                                "id": data.data.id,
                                "incorporationNumber": data.data.incorporationNumber,
                                "startupEntity": {
                                    "panNumber":updated80iacPan
                                }
                            };
                        }
                    }else{
                        disableAll80Fields();
                    }
                    if(data.data.recognition) {
                        form80ApplicationStatus = data.data.recognition.startupEntity.eightyIACFormStatus;
                    }else{
                        form80ApplicationStatus = data.data.startupEntity.eightyIACFormStatus;
                    }
                    populateClarifications(data.data);
                    $("input[name=pan_number]").attr("disabled", "disabled");

                    if(form80ApplicationStatus != "NA") {
                        if (form80ApplicationStatus && form80ApplicationStatus != "INCOMPLETE") {
                            disableAll80Fields();
                            if (data.data.applicationDate) {
                                var form80CreatedDate = new Date(data.data.applicationDate);
                                $('input[name=date_80_iac]').datepicker("setDate", form80CreatedDate).attr("disabled", "disabled");
                            }
                        } else {
                            $("input[type=file]").each(function (i, element) {
                                $(this).removeClass("display-n");
                            });
                            $('input[name=date_80_iac]').datepicker("setDate", currentTodayDate).attr("disabled", "disabled");
                            $(".button.submit-cta").show();
                            $("input[name=self-certify]").prop("checked", false);
                            $("input[name=startupVideo]").removeAttr("disabled");
                            $("input[name=fifty_six_details]").removeAttr("disabled");
                            $("input[name=name_authorised_signatory]").removeAttr("disabled");
                            $("input[name=designation_80_iac]").removeAttr("disabled");
                            $("input[name=place_80_iac]").removeAttr("disabled");
                        }
                        $(".multiple-clarifications").find('.dipp-tax-values.no-del').find('input[type=file]').addClass('display-n');
                    }else{
                        $('input[name=date_80_iac]').datepicker("setDate", currentTodayDate).attr("disabled", "disabled");
                        $("input[type=file]").each(function (i, element) {
                            $(this).removeClass("display-n");
                        });
                    }
                }else if(data.status == false){
                    setTimeout(function () {
                        $('#modal-loader').modal('hide');
                    },50);
                    $('.recognition-error-modal .modal-body p').html(data.message);
                    setTimeout(function () {
                        $('.recognition-error-modal').modal('show');
                    },200);
                }
            },
            error: function (data) {
                setTimeout(function () {
                        $('#modal-loader').modal('hide');
                    },50);
                $('.recognition-error-modal .modal-body p').html("Something went wrong. Please try again.");
                setTimeout(function () {
                        $('.recognition-error-modal').modal('show');
                    },200);
            }
        });
    }
    function eligibilitySuccess80iac(data) {
        dateValidationForFinancialYear80iac(data);
        var formFields = $('.startupRecognition.form80').find('.form-control:not(.richTextarea)');
        $.each(formFields, function (index, value) {
            var name = $(value).attr("name");
            var fieldValue = getFieldValue80iac(data, name);
            if (fieldValue) {
                if ($('[name=' + name + ']').is('input') && $.inArray($('input[name=' + name + ']').attr("type"), inputTypes) == -1) {
                    var fileEntity = $("input[name=upload_" + name + "]").siblings("a");
                    fileEntity.html("View Document").removeClass("display-n");
                    fileEntity.prop("href", link + fieldValue);
                    fileEntity.prop("target", "_blank");
                }
                else {
                    if ($('[name=' + name + ']').hasClass("hasDatepicker")) {
                        var date = fieldValue.split('-');
                        var fieldDate = date[0] + "/" + date[1] + "/" + date[2];
                        $('[name=' + name + ']').val(fieldDate);
                        if (name === "share_issue_date") {
                            $('[name=' + name + ']').trigger("change");
                        }
                        if ($('[name=' + name + ']').hasClass("disabled-field")) {
                            $('[name=' + name + ']').attr("disabled", "disabled")
                        }
                    } else {
                        $('[name=' + name + ']').val(fieldValue);
                    }
                    if ($('[name=' + name + ']').closest(".form-group").hasClass("disabled-field") || $('[name=' + name + ']').hasClass("disabled-field")) {
                        $('[name=' + name + ']').attr("disabled", "disabled");
                    }
                }
            }
        });
        $('textarea[name=fifty_six_details]').val(data['56_details']);
        setTimeout(function () {
                        $('#modal-loader').modal('hide');
                    },50);
    }
    function dateValidationForFinancialYear80iac(data) {
        if(data.recognition) {
            data = data.recognition;
        }else {
            data = data;
        }
        date = new Date();
        var yyyy = date.getFullYear() - 1; // Current Financial Year
        var today = date.getDate();
        var month = date.getMonth() + 1;
        current_date = yyyy + "-" + month + "-" + today;
        itr_date = yyyy + "-" + "09" + "-" + "30";
        console.log(itr_date);
        if (month >= 3) {
            yyyy += 1;
        }
        console.log("current_date" + current_date);
        var registration_year = data["startupEntity"].incorporationDate.split('-');
        var startUp_year = registration_year[2];
        var registration_month = registration_year[1];
        console.log("registration_month" + registration_month);
        if (registration_month <= 3) {
            startUp_year = startUp_year - 1;
        }
        console.log("startUp_year" + startUp_year);
        var difference = yyyy - startUp_year;
        cloneFinancialYearDetails80iac(difference, yyyy, data);

        $(".financial-year .dipp-tax-values").on('change', "input[type=file]", function (event) {
            var formats = ["application/pdf"];
            isValidated = checkFileUploadReturn(formats, event.target, 5150000, isValidated);

            if(event.currentTarget.getAttribute('data-propname') === "balance_sheet"){
                validateFinancialYearConditionally(event, 3)
            }
            if(event.currentTarget.getAttribute('data-propname') === "trading_account"){
                validateFinancialYearConditionally(event, 2)
            }

            return false;
        });

        $(".income-tax .dipp-tax-values").on('change', "input[type=file]", function (event) {
            var formats = ["application/pdf"];
            isValidated = checkFileUploadReturn(formats, event.target, 5150000, isValidated);
            return false;
        });

        $(document).on('change',  '.multiple-clarifications .dipp-tax-values input[type=file]', function (event) {
            var formats = ["application/pdf","image/png"];
            isValidated = checkFileUploadReturn(formats, event.target, 5150000, isValidated);
            return false;
        })
    }
    function validateFinancialYearConditionally(event, col){
        var row = event.delegateTarget;
        var td = row.getElementsByTagName('td').item(col);
        td.getElementsByTagName('span')[0].classList.add('display-n');
        td.getElementsByTagName('input')[0].classList.remove('validate');
        td.getElementsByClassName('help-block')[0].innerText = "";
        if (event.target && event.target.files && event.target.files.length){
            td.getElementsByTagName('span')[0].classList.remove('display-n');
            td.getElementsByTagName('input')[0].classList.add('validate');
        }
    }

    $("input[type=file][name=upload_pitchDeck80iac]").on('change', function (event) {
        var formats = ["application/pdf","application/vnd.ms-powerpoint","application/vnd.openxmlformats-officedocument.presentationml.presentation"];
        isValidated = checkFileUploadReturn(formats, event.target, 10300000, isValidated);
        return false;
    });

    $("input[name=upload_memorandum_association],input[name=upload_board_resolution]").on('change', function (event) {
        var formats = ["application/pdf","image/png"];
        isValidated = checkFileUploadReturn(formats, event.target, 5150000, isValidated);
        return false;
    });

    function cloneFinancialYearDetails80iac(year_difference, current_year, data) {
        var previous_year;
        var previous_financial_year;
        var finance_year;
        var table = $(".financial-year .dipp-tax-values").prop('outerHTML');
        var incomeTax_table = $(".income-tax .dipp-tax-values").prop('outerHTML');


        if (year_difference === 0) {
            previous_year = current_year;
            var next_financial_year = previous_year + 1;
            finance_year = previous_year + "-" + next_financial_year;

            var tds_financial = $(".financial-year .dipp-tax-values").find('td');
            tds_financial.eq(0).html(1);
            tds_financial.eq(1).html(finance_year);
            annualAccountStatement["financialYear"] = finance_year;
            accountDetailArray.push(annualAccountStatement);

            var tds_income = $(".income-tax .dipp-tax-values").find('td');
            tds_income.eq(0).html(1);
            tds_income.eq(1).html(finance_year);
            itrStatement["financialYear"] = finance_year;
            itReturnArray.push(itrStatement);
        }
        else {
            year_difference = year_difference >= 3 ? 3 : year_difference;
            for (var i = 0; i < year_difference - 1; i++) {
                $(".financial-year table").append(table);
                $(".income-tax table").append(incomeTax_table);
            }

            $(".financial-year .dipp-tax-values").each(function (index, e) {
                if (index < 3) {
                    previous_year = current_year - index;
                    previous_financial_year = current_year - (index + 1);
                    finance_year = previous_financial_year + "-" + previous_year;
                    var tds = $(this).find('td');
                    tds.eq(0).html(index + 1);
                    tds.eq(1).html(finance_year);
                    annualAccountStatement["financialYear"] = finance_year;
                    accountDetailArray.push(annualAccountStatement);

                    var balanceSheetIndex = accountDetailArray[index].balanceSheet;
                    var tradingIndex = accountDetailArray[index].tradingProfitAndLossAccount;
                    setTableAttribute80iac(tds.eq(2), balanceSheetIndex);
                    setTableAttribute80iac(tds.eq(3), tradingIndex);

                    // if (index >= 1) {
                    //     if (index === 1 && (new Date(current_date) > new Date(itr_date))) {
                    //         tds.eq(2).find("input[type=file]").siblings(".fileUploadRequired").removeClass("display-n");
                    //         tds.eq(3).find("input[type=file]").siblings(".fileUploadRequired").removeClass("display-n");
                    //     }
                    //     if (index === 2) {
                    //         tds.eq(2).find("input[type=file]").siblings(".fileUploadRequired").removeClass("display-n");
                    //         tds.eq(3).find("input[type=file]").siblings(".fileUploadRequired").removeClass("display-n");
                    //     }
                    // }
                }
            });

            $(".income-tax .dipp-tax-values").each(function (index, e) {
                if (index < 3) {
                    var table_data = $(this).find('td');
                    table_data.eq(0).html(index + 1);
                    var it_previous_year = current_year - index;
                    var it_previous_financial_year = current_year - (index + 1);
                    var it_finance_year = it_previous_financial_year + "-" + it_previous_year;
                    table_data.eq(1).html(it_finance_year);
                    itrStatement["financialYear"] = finance_year;
                    itReturnArray.push(itrStatement);

                    var itReturnIndex = itReturnArray[index].income;
                    itrStatement["financialYear"] = finance_year;
                    itReturnArray.push(itrStatement);

                    setTableAttribute80iac(table_data.eq(2), itReturnIndex);
                    // if (index >= 1) {
                    //     if (index === 1 && (new Date(current_date) > new Date(itr_date))) {
                    //         table_data.eq(2).find("input[type=file]").siblings(".fileUploadRequired").removeClass("display-n");
                    //         table_data.eq(3).find("input[type=file]").siblings(".fileUploadRequired").removeClass("display-n");
                    //     }
                    //     if (index === 2) {
                    //         table_data.eq(2).find("input[type=file]").siblings(".fileUploadRequired").removeClass("display-n");
                    //         table_data.eq(3).find("input[type=file]").siblings(".fileUploadRequired").removeClass("display-n");
                    //     }
                    // }
                }
            });
        }
    }

    function setTableAttribute80iac(element, value) {
        $(element).find("input[type=file]").attr("data-propname", value).attr("name", "upload_" + value).attr("data-propdisplay", value + "FileName").siblings(".fileName").attr("name", value).siblings("fileDisplayName").attr("name", value + "FileName");
    }

    function disableAll80Fields() {
        $('.startupRecognition.form80').each(function () {
            $('.startupRecognition input[type=text],.startupRecognition input[type=email],.startupRecognition select.form-control,.startupRecognition input[type=number],.startupRecognition input[type=radio],.startupRecognition input[type=file], .startupRecognition textarea').attr("disabled", "disabled");
            $('.startupRecognition input[type=button]').hide();
            $("input[name=self-certify]").prop("checked", true).attr("disabled", "disabled")
        });
    }

    function checkEligibility80iac(data) {
        if(data.recognition) {
            if (data.recognition.startupEntity.eligibility80IAC) {
                isValid80User = true;
            } else {
                setTimeout(function () {
                        $('#modal-loader').modal('hide');
                    },50);
                $('.recognition-error-modal .modal-body p').html("<h5>You are not eligible to fill this form. Only DIPP recognized Startups incorporated after 1st April 2016 may do so, provided:<h5><br> <ol type='a'><li>Application is not already under process</li> <li>The application has not been rejected in the past</li></ol>");
                setTimeout(function () {
                        $('.recognition-error-modal').modal('show');
                    },200);
            }
        }else {
            if (data.startupEntity.eligibility80IAC) {
                isValid80User = true;
            } else {
                setTimeout(function () {
                        $('#modal-loader').modal('hide');
                    },50);
                $('.recognition-error-modal .modal-body p').html("<h5>You are not eligible to fill this form. Only DIPP recognized Startups incorporated after 1st April 2016 may do so, provided:<h5><br> <ol type='a'><li>Application is not already under process</li> <li>The application has not been rejected in the past</li></ol>");
                setTimeout(function () {
                        $('.recognition-error-modal').modal('show');
                    },200);
            }
        }
    }
    function getFieldValue80iac(data, name) {
        if(data.recognition) {
            data = data.recognition;
        }else{
            data = data;
        }
        if(name == "entity_name") return data.startupEntity.name;
        if(name == "incorporation_date") return data.startupEntity.incorporationDate;
        if(name == "incorporation_no") return data.incorporationNumber;
        var address = data.address.address1 + ", " + data.address.address2 + ", " + ((data.address.address3 != undefined) ? (data.address.address3 + ", ") : "") + data.address.districtName + ", " + data.address.city + ", " + data.address.stateName + ", " + data.address.pinCode;
        if(name == "office_address") return address;
        if(name == "nature_of_entity") return data.startupEntity.startupNatureOfEntity.orderFlag;
        if(name == "randum_reg") return data.startupEntity.recognitionNumber;
        if(name == "rep_mobile") return data.representative.mobile;
        if(name == "rep_email") return data.representative.email;
        if(name == "pan_number") return data.startupEntity.panNumber;
    }

    $('.submit-cta').on("click", function () {
        validateFields80iac();
        if (isValidated) {
            setTimeout(function () {
                $('#modal-loader').modal('show');
            },100);
            $('.submitFormErrorMessage').html("").addClass("display-n");
            setTimeout(function(){
                getDataFromFields80iac();
                saveData80iac();
            }, 500);
            setTimeout(function () {
                $('#modal-loader').modal('hide');
            },50);
        } else {
            $('.submit-cta').prop("disabled",false);
            $('.submitFormErrorMessage').html("There are some errors in form. Please recheck and submit again").removeClass("display-n");
        }
    });

    function validateFields80iac() {
        var requiredFields = $('.form80 sup.required');
        if (requiredFields) {
            isValidated = true;
            $.each(requiredFields, function (index, item) {
                var element = $(item).closest('.form-group').find(".form-control:visible");
                if(element.val()) {
                    element.val().trim();
                }
                var type = $(element).attr('type');
                if (type && type !== "file" && (!element.val() || element.val().trim() === "")) {
                    isValidated = false;
                    showErrorState(element, true);
                } else if (type && type === 'checkbox') {
                    if (element.is(':checked')) {
                        showErrorState(element, false);
                    } else {
                        isValidated = false;
                        showErrorState(element, true);
                    }
                } else {
                    showErrorState(element, false);
                }
            });
        }

        var requiredFiles = $('.startupRecognition.form80 .fileuploadMultipurpose sup.required');
        isValidated = validateFileField(requiredFiles, null, isValidated);

        var financialYearFiles = $('.startupRecognition.form80 .financial-year .fileuploadMultipurpose .validate');
        isValidated = validateFileField(financialYearFiles, null, isValidated);

        var incomeTaxFiles = $('.startupRecognition.form80 .income-tax .fileuploadMultipurpose .validate');
        isValidated = validateFileField(incomeTaxFiles, null, isValidated);

        var clarificationFiles = $('.startupRecognition.form80 .multiple-clarifications .fileuploadMultipurpose .validate');
        isValidated = validateFileField(clarificationFiles, null, isValidated);

        var regexValidatedFields = $('.form80 .regex-val');

        isValidated = validateRegexFields(regexValidatedFields, isValidated);
    }

    function getDataFromFields80iac() {
        var filesArr = [
                        "input[name=upload_memorandum_association]",
                        "input[name=upload_board_resolution]",
                        "input[name=upload_pitchDeck80iac]"
                       ];
        $(filesArr).each(function (index, fileEle) {
            var responseData, fileJson = {};
            if($(fileEle).attr("name") == "upload_memorandum_association" && $(fileEle)[0].files[0]) {
                responseData = upload80iacFiles($(fileEle)[0].files[0],"ASSOCIATION_MEMORANDUM");
                fileJson = responseData.responseJSON.data;
                formData["associationMemorandum"] = fileJson;
            }
            if($(fileEle).attr("name") == "upload_board_resolution" && $(fileEle)[0].files[0]) {
                responseData = upload80iacFiles($(fileEle)[0].files[0],"BOARD_RESOLUTION");
                fileJson = responseData.responseJSON.data;
                formData["boardResolution"] = fileJson;
            }
            if($(fileEle).attr("name") == "upload_pitchDeck80iac" && $(fileEle)[0].files[0]) {
                responseData = upload80iacFiles($(fileEle)[0].files[0],"EIGHTY_IAC_PITCHDECK");
                fileJson = responseData.responseJSON.data;
                var pitchJson = {};
                pitchJson["name"] = "PITCH_DECK";
                pitchJson["file"] = fileJson;
                formData["pitchDeck"] = pitchJson;
            }
        });

        var itrTableRows = $(".dipp-tax-table.income-tax").find("tr.dipp-tax-values");
        var itrArr = [];
        $.each(itrTableRows, function (index, element) {
            var tds = $(element).find("td");
            var responseData, itrJson = {};
            itrJson["financialYear"] = $(tds[1]).text();
            var fileEle = $(tds[2]).find("input[type=file]");
            if($(fileEle)[0].files[0]) {
                responseData = upload80iacFiles($(fileEle)[0].files[0],"INCOME_TAX_RETURN_DOC");
                itrJson["income"] = responseData.responseJSON.data;
                itrArr.push(itrJson) ;
            }
        });
        if(itrArr.length > 0) {
            formData["itrStatement"] = itrArr;
        }

        var clarificationRows = $(".dipp-tax-table.multiple-clarifications").find("tr.dipp-tax-values");
        var clarificationArr = [];
        $.each(clarificationRows, function (index, element) {
            var tds = $(element).find("td");
            var responseData, clarificationJSON = {};
            clarificationJSON["clarificationDate"] = changeDateFormat80iac($(tds[1]).text(), 2);
            var fileEle = $(tds[2]).find("input[type=file]");
            if($(fileEle)[0].files[0]) {
                responseData = upload80iacFiles($(fileEle)[0].files[0],"OLD_MIGRATED_CLARIFICATION_DOC");
                clarificationJSON["clarification"] = responseData.responseJSON.data;
                clarificationArr.push(clarificationJSON);
            } else {
                if (existingClarifications[index] && existingClarifications[index]["clarificationDate"]) {
                    var unformattedDate = new Date(existingClarifications[index]["clarificationDate"]).toLocaleDateString();
                    clarificationJSON["clarificationDate"] = changeDateFormat80iac(unformattedDate.replaceAll("/", "-"), 2);
                    clarificationJSON["clarification"] = existingClarifications[index]["clarification"];
                    clarificationArr.push(clarificationJSON) ;
                }
            }
        });
        if(clarificationArr.length > 0) {
            formData["clarifications"] = clarificationArr;
        }

        var accTable = $(".dipp-tax-table.financial-year").find("tr.dipp-tax-values");
        var aasArr = [];
        $.each(accTable, function (index, element) {
            var tds = $(element).find("td");
            var responseData1, responseData2, accJson = {};
            accJson["financialYear"] = $(tds[1]).text();
            var fileEle1 = $(tds[2]).find("input[type=file]");
            var fileEle2 = $(tds[3]).find("input[type=file]");
            if($(fileEle1)[0].files[0] || $(fileEle2)[0].files[0]) {
                responseData1 = upload80iacFiles($(fileEle1)[0].files[0],"BALANCE_SHEET_DOC");
                responseData2 = upload80iacFiles($(fileEle2)[0].files[0],"TRADING_PROFIT_AND_LOSS_ACCOUNT_DOC");
                accJson["balanceSheet"] = responseData1.responseJSON.data;
                accJson["tradingProfitAndLossAccount"] = responseData2.responseJSON.data;
                aasArr.push(accJson);
            }
        });
        if(aasArr.length > 0) {
            formData["annualAccountStatement"] = aasArr;
        }
        var startUpVideo = {};
        startUpVideo.name = "VIDEOS";
        startUpVideo.url = $("input[name=startupVideo]").val();
        formData["startupVideoLink"] = startUpVideo;
        formData["certificateUnderSection56"] = $("textarea[name=fifty_six_details]").val().trim();
        //Signatory Details
        formData["forField"] = $("input[name=entity_name]").val();
        formData["authorisedSignatory"] = $("input[name=name_authorised_signatory]").val();
        formData["designation"] = $("input[name=designation_80_iac]").val();
        formData["place"] = $("input[name=place_80_iac]").val();
        formData["applicationDate"] = changeDateFormat80iac($("input[name=date_80_iac]").val(), 1);
    }

    $("input[name=self-certify]").on("change",function(){
        if($(this).prop("checked") == true){
            $(".button.submit-cta").prop("disabled",false);
        }
        else if($(this).prop("checked") == false){
            $(".button.submit-cta").prop("disabled",true);
        }
    });

    function changeDateFormat80iac(newDate, type) {
        /*
        * type 1 - MM/DD/YYYY
        * type 2 - DD-MM-YYYY
        * */
        if (type === 1) {
            var date = new Date(newDate);
            return date.getFullYear()+"-"+(("0" + (date.getMonth() + 1)).slice(-2))+"-"+(("0" + date.getDate()).slice(-2));
        } else if (type === 2) {
            var splitDate = newDate.split("-");
            return splitDate[2] + "-" + splitDate[1] + "-" + splitDate[0];
        }
    }
    function upload80iacFiles(file, docType) {
        if (file) {
            var data = new FormData();
            data.append("file", file);
            data.append("documentType", docType);
            var responseData = $.ajax({
                url: $('.notification-container').attr('admin-service-base-url')+"/s3/upload/document",
                type: 'POST',
                data: data,
                cache: false,
                async: false,
                contentType: false,
                processData: false,
                success: function (data) {
                    return data.data;
                }, error: function (data) {
                }
            });
            return responseData;
        }
    }
    function saveData80iac(){
        setTimeout(function () {
                        $('#modal-loader').modal('show');
                    },100);
        $.ajax({
            type: "POST",
            dataType: "json",
            data: JSON.stringify(formData),
            contentType: "application/json",
            url: SIH.getEndPoint("/api/auth/dpiit/services/form80iac/save"),
            headers: {"X-Auth-Token": store.getItem("token")},
            success: function (data) {
                setTimeout(function () {
                        $('#modal-loader').modal('hide');
                    },50);
                if (data.status == true) {
                    window.location.href = "/content/sih/en/thank-you.html";
                } else if(data.status == false){
                    $('.recognition-error-modal .modal-body p').html(data.message);
                    setTimeout(function () {
                        $('.recognition-error-modal').modal('show');
                    },200);

                }
            },
            error: function (data) {
                setTimeout(function () {
                        $('#modal-loader').modal('hide');
                    },50);
                $('.recognition-error-modal .modal-body p').html("Something went wrong. Please try again.");
                setTimeout(function () {
                        $('.recognition-error-modal').modal('show');
                    },200);
            }
        });
    }

    function fillRest80iac(data){
        setAllFilesLink(data);
        formData["associationMemorandum"] = {};
        formData["associationMemorandum"] = data.associationMemorandum;
        formData["boardResolution"] = {};
        formData["boardResolution"] = data.boardResolution;
        formData["pitchDeck"] = {};
        formData["pitchDeck"] = data.pitchDeck;
        formData["itrStatement"] = [];
        formData["itrStatement"] = data.itrStatement;
        formData["annualAccountStatement"] = [];
        formData["annualAccountStatement"] = data.annualAccountStatement;
        $("input[name=startupVideo]").val(data.startupVideoLink.url);
        $("textarea[name=fifty_six_details]").val(data.certificateUnderSection56);
        $("input[name=name_authorised_signatory]").val(data.authorisedSignatory);
        $("input[name=designation_80_iac]").val(data.designation);
        $("input[name=place_80_iac]").val(data.place);
    }
    function setAllFilesLink(data) {
        if (data.associationMemorandum && data.annualAccountStatement) {
            formData["associationMemorandum"] = data.associationMemorandum;
            $("input[type=file]").each(function (i, element) {
                $(this).addClass("display-n");
                var href = "";
                if ($(element).attr("name") == "upload_memorandum_association" && data.associationMemorandum) href = data.associationMemorandum.publicUrl;
                else if ($(element).attr("name") == "upload_board_resolution" && data.boardResolution) href = data.boardResolution.publicUrl;
                else if ($(element).attr("name") == "upload_pitchDeck80iac" && data.pitchDeck.file) href = data.pitchDeck.file.publicUrl;
                if (href != "") {
                    $(this).siblings(".presentationLink").removeClass("display-n")
                        .attr("href", $('.notification-container').attr('admin-service-base-url') + href)
                        .attr("target", "_blank").html("View Document");
                } else {
                    $(this).siblings(".presentationLink").removeAttr( "href").removeClass("display-n").html("No Document Uploaded");
                }
                $.each(data.itrStatement, function (i, val) {
                    var fileHref = "";
                    var finYear = $(element).parents(".dipp-tax-values").find("td:nth-child(2)").text();
                    if ($(element).data("propname") == "IT_returns" && finYear == val.financialYear) {
                        fileHref = val.income.publicUrl;
                        if (fileHref != "") {
                            $(element).siblings(".presentationLink").removeClass("display-n")
                                .attr("href", $('.notification-container').attr('admin-service-base-url') + fileHref)
                                .attr("target", "_blank").html("View Document");
                        } else {
                            $(element).siblings(".presentationLink").removeAttr( "href").removeClass("display-n").html("No Document Uploaded");
                        }
                    }
                });
                $.each(data.annualAccountStatement, function (i, val) {
                    var balHref = "", tradeHref = "";
                    var finYear = $(element).parents(".dipp-tax-values").find("td:nth-child(2)").text();
                    if ($(element).data("propname") == "balance_sheet" && finYear == val.financialYear) {
                        try{
                            balHref = val.balanceSheet.publicUrl;
                        }catch (e) {
                            console.error(e);
                        }

                        if (balHref) {
                            $(element).siblings(".presentationLink").removeClass("display-n")
                                .attr("href", $('.notification-container').attr('admin-service-base-url')+ balHref)
                                .attr("target", "_blank").html("View Document");
                        } else {
                            $(element).siblings(".presentationLink").removeAttr( "href").removeClass("display-n").html("No Document Uploaded");
                        }
                    }
                    if ($(element).data("propname") == "trading_account" && finYear == val.financialYear) {
                        tradeHref = val.tradingProfitAndLossAccount.publicUrl;
                        if (tradeHref != "") {
                            $(element).siblings(".presentationLink").removeClass("display-n")
                                .attr("href", $('.notification-container').attr('admin-service-base-url')+ tradeHref)
                                .attr("target", "_blank").html("View Document");
                        } else {
                            $(element).siblings(".presentationLink").removeAttr( "href").removeClass("display-n").html("No Document Uploaded");
                        }
                    }
                });
            });
        }
    }

    function populateClarifications(data) {
        var clarifications_wrapper = $(".multiple-clarifications");
        if (data.clarifications && data.clarifications.length) {
            existingClarifications = data.clarifications;
            $.each(data.clarifications, function (i, val) {
                if (i === 0) {
                    clarifications_wrapper.find('.dipp-tax-values').eq(0).addClass('no-del');
                    var columns = clarifications_wrapper.find('.dipp-tax-values td');
                    columns.eq(1).html(new Date(val.clarificationDate).toLocaleDateString().replaceAll("/", "-"));
                    columns.eq(2).find('input[name=upload_clarification]').siblings(".presentationLink").removeClass("display-n")
                        .attr("href", $('.notification-container').attr('admin-service-base-url')+ val.clarification.publicUrl)
                        .attr("target", "_blank").html("View Document");
                } else
                    addNewClarification(false, val);
            });
        } else {
            var columns = clarifications_wrapper.find('.dipp-tax-values td');
            var currentDate = new Date().toLocaleDateString().replaceAll('/','-');
            columns.eq(1).html(currentDate);
        }
        if (form80ApplicationStatus === "INCOMPLETE" || form80ApplicationStatus === "NA")
            clarifications_wrapper.append('<a href="javascript:void(0)" class="add-clarification">Add Clarification</a>')
    }

    $(document).on('click', '.add-clarification', function () {
        var count = $(".multiple-clarifications").find('.dipp-tax-values').length
        if (count === 20) {
            alert("Cannot add more Clarifications. Maximum limit (20) reached.")
            return false;
        } else
            addNewClarification(true);
    })

    $(document).on('click', '.delete-clarification', function () {
        $(this).closest('.dipp-tax-values').remove();
        addDeleteToLastClarification();
    })

    function addDeleteToLastClarification() {
        var clarificationRows = $(".multiple-clarifications").find('.dipp-tax-values');
        if (clarificationRows && clarificationRows.length > 1 && !clarificationRows.last().hasClass('no-del'))
            clarificationRows.last().find('.form-group .row .col-md-7').append('<a href="javascript:void(0)" class="delete-clarification"><span>Delete</span></a>')
    }

    function addNewClarification(deletable, data) {
        var clone = clarificationClone;
        $(".multiple-clarifications").find('.dipp-tax-values').last().find('.delete-clarification').remove();
        var lastIndexStr = $(".multiple-clarifications").find('.dipp-tax-values').last().find('td').eq(0).html();
        var lastIndex = Number(lastIndexStr.trim());
        var newCols = $('.multiple-clarifications').find('.table tbody').append(clone)
            .find('.dipp-tax-values').last().find('td');
        if (deletable)
            addDeleteToLastClarification()
        newCols.eq(0).html(lastIndex + 1);
        newCols.eq(1).html(new Date().toLocaleDateString().replaceAll('/','-'));
        if (data) {
            newCols.closest('.dipp-tax-values').addClass('no-del');
            newCols.eq(1).html(new Date(data.clarificationDate).toLocaleDateString().replaceAll("/", "-"));
            newCols.eq(2).find('input[name=upload_clarification]').siblings(".presentationLink").removeClass("display-n")
                .attr("href", $('.notification-container').attr('admin-service-base-url')+ data.clarification.publicUrl)
                .attr("target", "_blank").html("View Document");
        }
    }
};
$.form56 = function () {
    var cin = "";
    var isValid56User = false;
    var form56ApplicationStatus = "";
    var formData = {};
    var declaration_signed_date = $("input[name='declaration_signed_date']");
    var formats = ["application/pdf"];
    var isValidated = true;
    var section56Id = getUrlParameter("applicationId");
    setEntities();
    if(section56Id){
        formData.id = section56Id;
        get56DataByCinOrAppId(section56Id, "appId");
    }else {
        get56IncorpNo();
    }
    function get56IncorpNo() {
        setTimeout(function(){ $('#modal-loader').modal('show'); }, 10);
        $.ajax({
            type: "GET",
            async: false,
            url: SIH.getEndPoint("/api/auth/user/cin"),
            headers: {"X-Auth-Token": store.getItem("token")}
        }).success(function (data) {
            if (data) {
                cin = data.cin;
                get56DataByCinOrAppId(cin,"cin");
            }
            else {
                setTimeout(function(){ $('#modal-loader').modal('hide'); }, 10);
                $('.recognition-error-modal .modal-body p').html("You are not eligible to fill this form. Only DIPP recognized startups can fill the form");
                setTimeout(function(){ $('.recognition-error-modal').modal('show'); }, 10);
                disableAll56Fields();
            }
        }).error(function () {
            setTimeout(function(){ $('#modal-loader').modal('hide'); }, 10);
            setTimeout(function(){ $(".recognition-form-error-message").modal('show'); }, 10);
        });
    }
    function get56DataByCinOrAppId(appIdOrCin, type){
        setTimeout(function(){ $('#modal-loader').modal('show'); }, 10);
        $.ajax({
            type: "POST",
            async: false,
            url: SIH.getEndPoint("/api/auth/dpiit/services/checkandgetform/"+type+"/"+appIdOrCin+"/FORM56"),
            headers: {"X-Auth-Token": store.getItem("token")}
        }).success(function (data) {
            if (data.status == true) {
                setTimeout(function(){ $('#modal-loader').modal('hide'); }, 10);
                checkForm56Eligibility(data.data);
                if (isValid56User) {
                    autoPopulate56Details(data.data);
                }
                if(data.data.startupRecognition) {
                    form56ApplicationStatus = data.data.startupRecognition.startupEntity.section56CommonStatus;
                }else {
                    form56ApplicationStatus = data.data.startupEntity.section56CommonStatus;
                }
                if(form56ApplicationStatus == "NA"){
                    formData.id = "";
                }
                if(form56ApplicationStatus != "NA" && section56Id) {
                        disableAll56Fields();
                    /*if (form56ApplicationStatus && form56ApplicationStatus != "INCOMPLETE") {

                    } else {
                        declaration_signed_date.removeAttr("disabled");
                        $("input[name='pan_number']").removeAttr("disabled");
                        $('.form56 input[type=file]').removeAttr("disabled", "disabled");
                        $('.form56 input[type=button]').show();
                    }*/
                }
            }else if(data.status == false){
                setTimeout(function(){ $('#modal-loader').modal('hide'); }, 10);
                $('.recognition-error-modal .modal-body p').html(data.message);
                setTimeout(function(){ $('.recognition-error-modal').modal('show'); }, 10);
            }
        }).error(function () {
            setTimeout(function(){ $('#modal-loader').modal('hide'); }, 10);
            setTimeout(function(){ $(".recognition-form-error-message").modal('show'); }, 10);
        });
    }


    function checkForm56Eligibility(data) {
        if(data.startupRecognition){
            if (data.startupRecognition.startupEntity.eligibilitySec56) {
                isValid56User = true;
            } else {
                $('.recognition-error-modal .modal-body p').html("<h5>You are not eligible to fill this form. Only DIPP recognized Startups incorporated can fill the form</h5>");
                setTimeout(function(){ $('.recognition-error-modal').modal('show'); }, 10);
                disableAll56Fields();
            }
        }else {
            if (data.startupEntity.eligibilitySec56) {
                isValid56User = true;
            } else {
                $('.recognition-error-modal .modal-body p').html("<h5>You are not eligible to fill this form. Only DIPP recognized Startups incorporated can fill the form</h5>");
                setTimeout(function(){ $('.recognition-error-modal').modal('show'); }, 10);
                disableAll56Fields();
            }
        }
    }

    function autoFillRecognitionFormDetails(data) {
        var updatedPan = $("input[name='pan_number']").val();
        if(data.startupRecognition) {
            formData["startupRecognition"] = {
                "id": data.startupRecognition.id,
                "incorporationNumber": data.startupRecognition.incorporationNumber,
                "startupEntity": {
                    "panNumber": updatedPan
                }
            };
        }else {
            formData["startupRecognition"] = {
                "id": data.id,
                "incorporationNumber": data.incorporationNumber,
                "startupEntity": {
                    "panNumber": updatedPan
                }
            };
        }
        if(data.startupRecognition) {
            data = data.startupRecognition;
        }else {
            data = data;
        }
        $("input[name='entity_name']").val(data.startupEntity.name).prop("disabled", true);
        $("input[name='incorporation_date']").val(data.startupEntity.incorporationDate).prop("disabled", true);
        $("input[name='incorporation_no']").val(data.incorporationNumber).prop("disabled", true);
        var address = data.address.address1 + ", " + data.address.address2 + ", " + ((data.address.address3 != undefined) ? (data.address.address3 + ", ") : "") + data.address.districtName + ", " + data.address.city + ", " + data.address.stateName + ", " + data.address.pinCode;
        $("input[name='office_address']").val(address).prop("disabled", true);
        $("[name='nature_of_entity']").find("option:contains("+data.startupEntity.startupNatureOfEntity.name+")").attr("selected","selected");
        $("[name='nature_of_entity']").prop("disabled", true);
        $("input[name='rep_mobile']").val(data.representative.mobile).prop("disabled", true);
        $("input[name='rep_email']").val(data.representative.email).prop("disabled", true);
        $("input[name='pan_number']").val(data.startupEntity.panNumber);
        $("input[name='randum_reg']").val(data.startupEntity.recognitionNumber).prop("disabled", true);

    }
    $('.startupRecognition.form56 .fileuploadMultipurpose input[type=file]').change(fileUpload)
    function fileUpload(e) {
        isValidated = checkFileUploadReturn(formats, e.target, 5150000, isValidated);
        if (isValidated) {
            $(e.target).siblings("a").html("").addClass("display-n").attr("href", "");
            showErrorState($(e.target), false);
        }
    }

    $('.submit-cta').on("click", function () {
        $(this).prop("disabled", true);
        setTimeout(function(){ $('#modal-loader').modal('show'); }, 10);
        validateForm();
        if (isValidated) {
            $('.submitFormErrorMessage').html("").addClass("display-n");
            getDataFromFields();
            saveData();
        } else {
            setTimeout(function(){ $('#modal-loader').modal('hide'); }, 10);
            $('.submitFormErrorMessage').html("There are some errors in form.Please recheck and submit again").removeClass("display-n");
            $(".accordionitem").find(".accordion-section-title").removeClass("active").end()
                .find(".accordion-section-content").hide();
            var _firstErrorElem = $(".form-group.has-error,.scroll-error,.certify-has-error,.add_doc_file.has-error, td.has-error:first").first();
            _firstErrorElem.closest(".accordionitem").find(".accordion-section-title").addClass("active").siblings('.   accordion-section-content').show();
            if (_firstErrorElem && _firstErrorElem.offset()) {
                $('html, body').animate({
                    scrollTop: _firstErrorElem.offset().top - 100
                }, 500);
            }
        }
    });
    function validateForm() {
        var requiredFields = $('.form56 sup.required');
        isValidated = true;
        validateFields(requiredFields);

        var requiredFiles = $('.startupRecognition.form56 .fileuploadMultipurpose sup.required');
        isValidated = validateFileField(requiredFiles, null, isValidated);

        var regexValidatedFields = $('.form56 .regex-val');
        isValidated = validateRegexFields(regexValidatedFields, isValidated);
    }
    function validateFields(requiredFields, removeError) {
        if (removeError) {
            $.each(requiredFields, function (index, item) {
                var element = $(item).closest('.form-group').find(".form-control");
                showErrorState(element, false);
            });
        } else {
            if (requiredFields) {
                $.each(requiredFields, function (index, item) {
                    var element = $(item).closest('.form-group').find(".form-control:not(.fileName,.fileDisplayName,.validate-ignore)");
                    if (element && element.length) {
                        var type = $(element).attr('type');
                        if (type !== "file" && (!element.val() || element.val() === "")) {
                            isValidated = false;
                            showErrorState(element, true);
                        } else if (type === 'checkbox') {
                            if (element.is(':checked')) {
                                showErrorState(element, false);
                            } else {
                                isValidated = false;
                                showErrorState(element, true);
                            }
                        } else {
                            showErrorState(element, false);
                        }
                    }
                });
            }
        }
    }
    function getDataFromFields() {
        var responseData, fileJson = {};
        var fileEle = "input[name=upload_declaration_file]";
        if ($(fileEle).attr("name") == "upload_declaration_file" && $(fileEle)[0].files[0]) {
            responseData = upload56Files($(fileEle)[0].files[0], "DECLARATION_DOC");
            fileJson = responseData.responseJSON.data;
            formData["declarationForm"] = fileJson;
        }
        formData["declarationDate"] = changeDate56Format($("input[name=declaration_signed_date]").val());
    }

    function changeDate56Format(newDate) {
        var declarationDate = newDate.split("/");
        return declarationDate[2]+"-"+declarationDate[0]+"-"+declarationDate[1]  ;
    }
    function upload56Files(file, docType) {
        if (file) {
            var data = new FormData();
            data.append("file", file);
            data.append("documentType", docType);
            var responseData = $.ajax({
                url: $('.notification-container').attr('admin-service-base-url')+"/s3/upload/document",
                type: 'POST',
                data: data,
                cache: false,
                async: false,
                contentType: false,
                processData: false,
                success: function (data) {
                    return data.data;
                }, error: function (data) {
                }
            });
            return responseData;
        }
    }
    function saveData() {
        setTimeout(function(){ $('#modal-loader').modal('show'); }, 10);
        $.ajax({
            type: "POST",
            url: SIH.getEndPoint("/api/auth/dpiit/services/form56/save"),
            data: JSON.stringify(formData),
            dataType: "json",
            contentType: "application/json",
            async: false,
            headers: {"X-Auth-Token": store.getItem("token")},
            success: function (data) {
                if (data.status) {
                    setTimeout(function(){ $('#modal-loader').modal('hide'); }, 10);
                    window.location.href = "/content/sih/en/thank-you.html";
                }
            },
            error: function (data) {
                $(this).prop("disabled", false);
                setTimeout(function(){ $('#modal-loader').modal('hide'); }, 10);
                setTimeout(function(){ $(".recognition-form-error-message").modal('show'); }, 10);
            }
        });
    }
    function autoPopulate56Details(data) {
        autoFillRecognitionFormDetails(data);
        autoFillDeclarationFormDetails(data);
    }

    function autoFillDeclarationFormDetails(data) {
        //autofill date
        if (data.declarationDate) {
            var actDate = data.declarationDate.split("T");
            var regDate = actDate[0].replace(new RegExp("-", "g"), "/").split("/");
            regDate = regDate[1] + "/" + regDate[0] + "/" + regDate[2];
            declaration_signed_date.val(regDate).attr("disabled", "disabled");
            formData["declarationDate"] = regDate;
        }
        //autofill file
        if (data.declarationForm) {
            var $declarationForm = $("input[name=upload_declaration_file]").siblings("a");
            $declarationForm.html(data.declarationForm.compressedName).removeClass("display-n");
            $declarationForm.prop("href", $('.notification-container').attr('admin-service-base-url')+data.declarationForm.publicUrl);
            $declarationForm.prop("target", "_blank");
            formData["declarationForm"] = {};
            formData["declarationForm"] = data.declarationForm;
        }
    }

    function setEntities() {
        $.ajax({
            type: "GET",
            async: false,
            url: SIH.getEndPoint("/api/auth/dpiit/services/list/entities"),
            headers: {"X-Auth-Token": store.getItem("token")}
        }).done(function (data) {
            $.each(data.data, function (i, value) {
                $("select[name='nature_of_entity']").append("<option value=" + value.id + ">" + value.name + "</option>");
            });
        });
    }

    function disableAll56Fields(){
        $('.form56 input[type=text]').attr("disabled","disabled");
        $('.form56 input[type=file]').attr("disabled","disabled");
        $('.form56 input[type=number]').attr("disabled","disabled");
        $('.form56 input[type=email]').attr("disabled","disabled");
        $('.form56 select').attr("disabled","disabled");
        $('.form56 input[type=button]').hide();
        setTimeout(function(){ $('#modal-loader').modal('hide'); }, 10);
    }
};
$("#submitConnectWitUs").on('click', function () {

    $("#submitConnectWitUs").prev('div.err-div').remove();

    var formdata = $("#connect-with-us").serializeObject();

    var url = SIH.getEndPoint("/api/noauth/email/connect-with-us");

    $.ajax({
        type: "POST",
        url: url,
        data: JSON.stringify(formdata),
        contentType: "application/json",
    }).done(function (data) {
        showThankYouModal('connectwithus');
        $("#connect-with-us").reset();
    }).fail(function (error) {
        $("<div class='err-div'></div>").insertBefore("#submitConnectWitUs").text(JSON.parse(error.responseText)[0].defaultMessage || $("#connect-with-us").attr('error-message'));
    });
});
$.eodb_form = function (msg1, msg2, problemPage) {
    var formData = {};
    var isValidated = true;
    var $applicantName = $("input[name='applicantName']");
    var $email = $("input[name='email']");
    var $mobile = $("input[name='mobile']");
    var $videoFileName = $("input[name='videoLink']");
    var $submitChallengeForm = $("input[name='eodbFormSubmit']");
    prepopulateAllForm();
    getChallengeCountryList();

    function getChallengeCountryList() {
        $.ajax({
            type: "GET",
            url: "/services/tags/countries.json",
        }).done(function (data) {
            $.each(data, function (index, result) {
                var options = "<option  id='" + result.id + "' value='" + result.id + "'>" + result.text + "</option>";
                $("#countryList").append(options + "<br>")
            });
        });
    }

    $("#entityType").change(function () {
        var entityType = $("#entityType").val();
        if (entityType === "Other Entity") {
            $("#otherEntities").closest('.form-group').removeClass("display-n");
        } else {
            $("#otherEntities").closest('.form-group').addClass("display-n");
        }
    });

    function getMinistriesList() {
        $.ajax({
            type: "GET",
            url: "/services/tags/children.json?tag=sih:ministry",
        }).done(function (data) {
            $.each(data, function (index, result) {
                var options = "<option  id='" + result.id + "' value='" + result.text + "'>" + result.text + "</option>";
                $("#ministrySelection").append(options + "<br>")
            });
            var option = "<option  id='do-not-know' value='Do not Know'>" + 'Do not Know' + "</option>";
            $("#ministrySelection").append(option + "<br>")
        });
    }


    function getFormData() {
        formData = {};
        isValidated = true;
        var attrValue = "";
        var inputField = $("#eodbChallengeForm").find(".form-control");
        $.each(inputField, function (index, inputSel) {

            var key = $(inputSel).attr("name");
            if (typeof key != "undefined") {
                attrValue = $(inputSel).attr("type") === "radio" ? $('input[name="' + inputSel.name + '"]:checked').val() : $(inputSel).val();
                /* if(key === "ministrySelection" && attrValue && !$.isArray(attrValue)){
                     var valueArr = [];
                     valueArr.push(attrValue);
                     attrValue = valueArr;
                 }*/
                if (attrValue) {
                    formData[key] = attrValue;
                }
                checkRequiredField(attrValue, inputSel);
            }
        });
        formData['additionalDocuments'] = $('input[type=hidden][name=additionalDocuments]').val();
        formData['problemCode'] = store.getItem('themeCode');
        formData['problemDescription'] = store.getItem('themeTitle');
    }

    function checkRequiredField(attrValue, inputSel) {
        var requiredField = $(inputSel).closest(".form-group").find("sup.required");
        if (requiredField && requiredField.length > 0 && (!attrValue || attrValue === "")) {
            isValidated = false;
            $(inputSel).closest(".form-group").addClass("has-error").find("span.help-block").first().html("This field cannot be left Blank.");
        } else {
            $(inputSel).closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
        }
    }


    function checkFileUpload(selectedFormats, fileToValidate, fileSize, extensions) {

        var message = "";
        if ($(fileToValidate).val() !== "") {
            if (fileToValidate.files[0].size > fileSize) {
                message = "File Should not be greater then " + Math.floor(fileSize / 1000000) + " MB.";
            }
            if (jQuery.inArray(fileToValidate.files[0].type, selectedFormats) === -1) {
                message = message + " Please upload " + extensions.toString() + " file formats.";
            }
            if (message !== "") {
                isValidated = false;
                $(fileToValidate).siblings(".help-block").html(message).parents(".form-group").addClass("has-error");
                $(fileToValidate).val("");
            } else {
                $(fileToValidate).siblings(".help-block").html("").parents(".form-group").removeClass("has-error");
                var data = new FormData();
                data.append("file", fileToValidate.files[0]);
                $(".modal.loader").modal("show");
                $.ajax({
                    type: "POST",
                    data: data,
                    dataType: 'json',
                    contentType: false,
                    processData: false,
                    url: SIH.getEndPoint("/api/file/eodbChallenge/doc"),
                }).done(function (data) {
                    $(".modal.loader").modal("hide");
                    $(fileToValidate).siblings("input[type='hidden']").val(data.name);
                }).error(function () {
                    $(".modal.loader").modal("hide");
                    $(".agriculture-challenge-error-message").modal("show");
                    return false;
                });
            }
        }
        return false;
    }

    $("#eodbChallengeForm .textBoxOut").on("change", ".fileUploadField input[type='file']", function () {
        var formats = ["application/vnd.ms-powerpoint", "application/vnd.openxmlformats-officedocument.presentationml.presentation", "application/pdf"];
        var extensions = ["ppt", "pptx", "pdf"];
        checkFileUpload(formats, this, 2062594, extensions);
        return false;
    });

    function prepopulateAllForm() {
        if (store.getItem('themeTitle')) {
            $('#eodbChallengeForm .problem-statement-wrapper img').attr('src', store.getItem('themeImage'));
            $('#eodbChallengeForm .problem-statement-wrapper .static-heading').html(store.getItem('themeTitle'));
        } else {
            window.location = $('.statement-wrapper').data('redirect-path') + ".html";
        }
        if (store.getItem('themeCode') && store.getItem('themeCode') === "001") {
            $(".central-gov").removeClass("display-n")
            getMinistriesList();
        } else {
            $(".central-gov").addClass("display-n")
        }
        $("#otherEntities").closest('.form-group').addClass("display-n");
        // $('#eodbChallengeForm .problem-statement-wrapper .description').html(store.getItem('themeDescription'));
    }

    $submitChallengeForm.on("click", function () {
        $('#modal-loader').modal("show");
        getFormData();
        if (isValidated) {
            $(this).parents(".form-group").removeClass("has-error").find("span.help-block").addClass("display-n");
            $.ajax({
                type: "POST",
                data: JSON.stringify(formData),
                contentType: "application/json",
                dataType: "json",
                url: SIH.getEndPoint("/api/noauth/eodbChallenge/apply"),
            }).done(function () {
                $('#modal-loader').modal("hide");
                $(".israel-challenge-submit-message").modal('show');
                window.location = $submitChallengeForm.attr("data-path") + ".html";
            }).error(function () {
                $('#modal-loader').modal("hide");
                $(".agriculture-error-message").modal("show");
            });
        } else {
            $('#modal-loader').modal("hide");
            $(this).parents(".form-group").addClass("has-error").find("span.help-block").removeClass("display-n");
        }

    });
    $("#agricultureChallengeForm").find('#state').on("change", function (event) {
        event.stopPropagation();
    });

};

$.badge_manager_events = function () {

    $("select[name=badgeAssign]").attr("disabled", "disabled");
    $("select[name=badgeUnassign]").attr("disabled", "disabled");
    $(".cancelUpdateBadge").click(function () {
        bootbox.confirm("Do you want to cancel the updation?", function () {
            resetBadgeForms($(".badgeCreateTab"));
        });
    });
    $("input[name='iconName']").on('change', function (event) {
        var target = event.target;
        var $target = $(target);
        var file = target.files[0];
        if (file && !validateIcon(file)) {
            return false;
        }
        var imgIcon = $target.parent().siblings(".image-section").find('span.camera-image');
        var imageTag = $target.parent().siblings(".image-section").find("img.browse")[0];
        if (file) {
            var data = new FormData();
            data.append("file", file);
            $('#modal-loader').modal("show");
            $.ajax({
                url: SIH.getEndPoint("/api/file/badge/icon"),
                type: 'POST',
                data: data,
                cache: false,
                contentType: false,
                processData: false,
                success: function (data) {
                    $('#modal-loader').modal("hide");
                    if (data && data.name) {
                        imageTag.src = window.URL.createObjectURL(target.files[0]);
                        $(imageTag).css("display", "block");
                        $(imgIcon).css("display", "none");
                        $target.attr("data-iconfile", data.name);
                    }
                }, error: function (data) {
                    $('#modal-loader').modal("hide");
                    bootbox.alert("Error while uploading icon. Please try again.");
                }
            });
        }
    });

    function validateIcon(file) {
        var allowedExtensionsForImage = ["image/png", "image/jpeg", "image/jpg"];
        var maxImageSizeInBytes = 1048576;
        if ($.inArray(file.type, allowedExtensionsForImage) < 0) {
            bootbox.alert("Supported Formats for file uploads are: " + allowedExtensionsForImage.join(" , "));
            return false;
        }
        if (file.size > maxImageSizeInBytes) {
            bootbox.alert("Maximum file size allowed is 1 MB ");
            return false;
        }
        return true;
    }

    $(".updateBadge").click(function () {
        var formData = {}, $openTab = $(".badgeCreateTab");
        var $title = $openTab.find("input[name='title']");
        if ($title.val()) {
            formData["id"] = $openTab.find("input[name='badgeId']").val();
            formData["title"] = $title.val();
            formData["description"] = $openTab.find("textarea[name='description']").val();
            formData["iconName"] = $openTab.find("input[name='iconName']").data("iconfile");
            submitBadgeForm(formData, "/api/auth/badge/update", $openTab, "Badge updated successfully");
        } else {
            showErrorState($title, true, "Please enter a valid badge title.");
        }
    });

    $(".assignBadge").click(function () {
        var formData = {}, $openTab = $(".badgeAssignTab");
        var $selectedBadges = $("select[name=badgeAssign]");
        var badges = [];
        $.each($selectedBadges.val(), function (idx, badgeId) {
            var badge = {};
            badge["id"] = badgeId;
            badges.push(badge);
        });
        var userIds = [];
        $(".textTag").each(function () {
            var userId = $(this).data("userid");
            if (userId && userIds.indexOf(userId) < 0) userIds.push(userId);
        });
        if (!userIds.length) {
            showErrorState($("input[name='user_badgeAssign']"), true, "Please select a user.");
        } else if (!badges.length) {
            showErrorState($selectedBadges, true, "Please select atleast 1 badge.");
        } else {
            formData["assignedBadges"] = badges;
            formData["assignedUserIds"] = userIds;
            submitBadgeForm(formData, "/api/auth/badge/assign", $openTab, "Badges assigned successfully");
        }
    });

    $(".unassignBadge").click(function () {
        var formData = {}, $openTab = $(".badgeUnassignTab");
        var $user = $openTab.find("input[name='user_badgeUnassign']");
        var $selectedBadges = $("select[name=badgeUnassign]");
        var badges = [];
        $.each($selectedBadges.val(), function (idx, badgeId) {
            var badge = {};
            badge["id"] = badgeId;
            badges.push(badge);
        });
        if (!$user.val()) {
            showErrorState($user, true, "Please select a user.");
        } else if (!badges.length) {
            showErrorState($selectedBadges, true, "Please select atleast 1 badge.");
        } else {
            formData["uniqueId"] = $user.data("userid");
            formData["assignedBadges"] = badges;
            submitBadgeForm(formData, "/api/auth/badge/unassign", $openTab, "Badges un-assigned successfully");
        }
    });

    function submitBadgeForm(formData, path, $openTab, message) {
        $.ajax({
            url: SIH.getEndPoint(path),
            type: "POST",
            data: JSON.stringify(formData),
            beforeSend: setAuthTokenHeader,
            contentType: "application/json"
        }).success(function (response) {
            bootbox.alert(message);
            resetBadgeForms($openTab);
            showBadges();
        }).error(function () {
            bootbox.alert("Error in submitting form. Please try again.");
        });
    }

    function resetBadgeForms($openTab) {
        $openTab.find(".form-control").val("");
        $("#badgeUpdateId").remove();
        $(".cancelUpdateBadge").addClass("hidden");
        $(".updateBadge").closest(".cta").removeClass("floatingCta");
        var $selectTarget = $openTab.find("select");
        $selectTarget.val(null).trigger("change").attr("disabled", "disabled");
        $selectTarget.select2({
            data: []
        });
        showErrorState($selectTarget, false, "");
        $(".textTags").html("");
        $openTab.find(".richTextarea").summernote("code", "");
        $openTab.find("img.browse").hide();
        $openTab.find(".camera-image").show();
        $openTab.find("input[name='iconName']").attr("data-iconfile", "");
    }

    $(".cinSearch").click(function () {
        var assignFunction = !!$(this).closest(".badgeAssignTab").length;
        var $target = assignFunction ? $("input[name='user_badgeAssign']") : $("input[name='user_badgeUnassign']");
        var $selectTarget = assignFunction ? $("select#badgeAssign") : $("select#badgeUnassign");
        if ($target.val()) {
            verifyUser($target, $selectTarget, assignFunction);
        }
        else {
            showErrorState($target, true, "Please enter a valid user-email.");
            $selectTarget.attr("disabled", "disabled");
        }
    });

    function verifyUser($target, $selectTarget, multi) {
        $('#modal-loader').modal("show");
        var userEmail = $target.val(), data = {};
        data["email"] = userEmail;
        $.ajax({
            url: SIH.getEndPoint("/api/auth/user/get"),
            data: JSON.stringify(data),
            type: 'POST',
            beforeSend: setAuthTokenHeader,
            dataType: "json",
            contentType: "application/json",
            success: function (userDetail) {
                showErrorState($target, false, "");
                if (multi) {
                    if (!$("#tag_" + userDetail.uniqueId).length) {
                        var textTag = "<span class='textTag' id='tag_" + userDetail.uniqueId + "' data-userid='" + userDetail.uniqueId + "'>" + userEmail +
                            "<i class='textTagClose fa fa-close' onclick=\"removeTextTag('tag_" + userDetail.uniqueId + "')\"></i></span>";
                        $target.parent().siblings(".textTags").append(textTag).show();
                        $target.val("");
                    }
                    loadBadgeSelection($selectTarget);
                } else {
                    $('#modal-loader').modal("hide");
                    $target.attr("data-userid", userDetail.uniqueId);
                    var selectData = [];
                    $.each(userDetail.assignedBadges, function (idx, badgeObj) {
                        var selectObj = {};
                        selectObj["id"] = badgeObj.id;
                        selectObj["text"] = badgeObj.title;
                        selectData.push(selectObj);
                    });
                    $selectTarget.val(null).trigger("change").attr("disabled", false);
                    $selectTarget.select2({
                        data: selectData
                    });
                }
            },
            error: function () {
                $('#modal-loader').modal("hide");
                showErrorState($target, true, "Please enter a valid user-email");
                $selectTarget.attr("disabled", "disabled");
            }
        });
    }

    function showErrorState(el, hasError, errorMsg) {
        if (hasError) {
            if (!errorMsg) errorMsg = "This field cannot be left Blank.";
            el.siblings('.help-block').show();
            el.closest(".form-group").addClass("has-error").find("span.help-block").first().html(errorMsg);
        } else {
            el.closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
        }
    }

    $(".dynamicTabs li:nth-child(4)").click(function () {
        badgeViewTable.ajax.reload();
    });
    $(".dynamicTabs li:nth-child(5)").click(function () {
        badgeUsersTable.ajax.reload();
    });
};

var badgeViewTable;
var showBadges = function () {
    $('#modal-loader').modal("show");
    var template = Handlebars.compile($("#badge-dashboard-template").html());
    var context = {badges: []};
    $(".badge-dashboard-table").html(template(context));
    badgeViewTable = $('#badge-dashboardTable').DataTable({
        processing: true,
        serverSide: true,
        lengthChange: false,
        ajax: {
            url: SIH.getEndPoint("/api/auth/badge/list"),
            dataSrc: 'data',
            dataType: "json",
            type: 'POST',
            error: function (xhr, error, thrown) {
                if (xhr.status === 403) {
                    bootbox.alert("You are not authorised to view this page");
                } else {
                    bootbox.alert("Error in loading badges.");
                }
            },
            beforeSend: function (xhr) {
                xhr.setRequestHeader("X-Auth-Token", store.getItem("token"));
                xhr.setRequestHeader("Content-type", "application/json");
            },
            data: function (d) {
                d.title = null;
                return JSON.stringify(d);
            }
        },
        columnDefs: [
            {name: "title", orderable: false, targets: 0},
            {name: "description", orderable: false, targets: 1},
            {name: "iconName", orderable: false, targets: 2},
            {name: "id", orderable: false, targets: 3}
        ],
        columns: [
            {
                data: "title", defaultContent: "-", render: function (title) {
                    return "<div class='hoverText'>" + title + "</div>";
                }
            },
            {
                data: "description", defaultContent: "-", render: function (description) {
                    return description ? "<div class='hoverText'>" + description + "</div>" : "-";
                }
            },
            {
                data: "iconName", defaultContent: "-", searchable: false, render: function (iconName) {
                    var getIconAPI = SIH.getEndPoint("/api/file/badge/icon") + "?fileName=" + iconName;
                    return iconName ? "<img src='" + getIconAPI + "' width='65' height='65'/>" : "-";
                }
            },
            {
                data: "id", defaultContent: "-", render: function (id) {
                    return "<div><a href=\"javascript:void(0)\" onclick=\"editBadge('" + id + "')\"><span style='color: green;'>Update</span></a>" +
                        "&nbsp;&nbsp;&nbsp;<a href=\"javascript:void(0)\" onclick=\"removeBadge('" + id + "')\"><span style='color: red;'>Remove</span></a></div>";
                }
            }
        ]
    });
    $('#modal-loader').modal("hide");
};

var badgeUsersTable;
var showBadgeUsers = function () {
    $('#modal-loader').modal("show");
    var template = Handlebars.compile($("#badgeUser-dashboard-template").html());
    var context = {badges: []};
    $(".badgeUser-dashboard-table").html(template(context));
    badgeUsersTable = $('#badgeUser-dashboardTable').DataTable({
        processing: true,
        serverSide: true,
        lengthChange: false,
        ajax: {
            url: SIH.getEndPoint("/api/auth/badge/users"),
            dataSrc: 'data',
            dataType: "json",
            type: 'POST',
            error: function (xhr, error, thrown) {
                if (xhr.status === 403) {
                    bootbox.alert("You are not authorised to view this page");
                } else {
                    bootbox.alert("Error in loading badge users.");
                }
            },
            beforeSend: function (xhr) {
                xhr.setRequestHeader("X-Auth-Token", store.getItem("token"));
                xhr.setRequestHeader("Content-type", "application/json");
            },
            data: function (d) {
                d.title = null;
                return JSON.stringify(d);
            }
        },
        columnDefs: [
            {name: "name", className: "dt-left", orderable: false, targets: 0},
            {name: "email", className: "dt-left", orderable: false, targets: 1},
            {name: "assignedBadges", className: "dt-left", orderable: false, targets: 2}
        ],
        columns: [
            {
                data: "name", defaultContent: "-"
            },
            {
                data: "email", defaultContent: "-"
            },
            {
                data: "assignedBadges", defaultContent: "-", searchable: false, render: function (assignedBadges) {
                    var badges = "<ul>";
                    $.each(assignedBadges, function (idx, badgeObj) {
                        badges += "<li data-badgeid='" + badgeObj.id + "'>" + badgeObj.title + "</li>";
                    });
                    return badges + "</ul>";
                }
            }
        ]
    });
    $('#modal-loader').modal("hide");
};

function loadBadgeSelection($selectTarget, badgeId) {
    var data = {};
    if (badgeId) data["id"] = badgeId;
    $.ajax({
        url: SIH.getEndPoint("/api/auth/badge/get"),
        data: JSON.stringify(data),
        type: 'POST',
        beforeSend: setAuthTokenHeader,
        dataType: "json",
        contentType: "application/json",
        success: function (response) {
            $('#modal-loader').modal("hide");
            if (badgeId) {
                if (response.length > 0) populateBadgeUpdation(response[0]);
                else bootbox.alert("Unable to fetch badge(s).Please try again.");
            } else {
                var selectData = [];
                $.each(response, function (idx, badgeObj) {
                    var selectObj = {};
                    selectObj["id"] = badgeObj.id;
                    selectObj["text"] = badgeObj.title;
                    selectData.push(selectObj);
                });
                $("select[name='badgeAssign']").select2({
                    data: selectData
                });
                $selectTarget.attr("disabled", false);
            }
        },
        error: function () {
            $('#modal-loader').modal("hide");
            bootbox.alert("Unable to fetch badge(s).Please try again.");
        }
    });
}

function removeTextTag(tagId) {
    $("#" + tagId).remove();
}

function editBadge(badgeId) {
    $(".link-tabs:first").trigger("click");
    $('html, body').animate({
        scrollTop: 0
    });
    loadBadgeSelection(null, badgeId);
}

function removeBadge(badgeId) {
    bootbox.confirm("Are you sure you want to delete this badge?", function () {
        var data = {};
        data["id"] = badgeId;
        $.ajax({
            url: SIH.getEndPoint("/api/auth/badge/remove"),
            data: JSON.stringify(data),
            type: 'POST',
            beforeSend: setAuthTokenHeader,
            contentType: "application/json",
            success: function () {
                $('#modal-loader').modal("hide");
                bootbox.alert("Badge removed successfully.");
                showBadges();
            },
            error: function () {
                $('#modal-loader').modal("hide");
                bootbox.alert("Error in deleting badge. Please try again");
            }
        });
    });
}

function populateBadgeUpdation(badgeObj) {
    $openTab = $(".badgeCreateTab");
    $(".cancelUpdateBadge").removeClass("hidden").closest(".cta").addClass("floatingCta");
    $(".updateBadge").closest(".cta").addClass("floatingCta");
    $openTab.find(".component-wrapper").append("<input type='hidden' id='badgeUpdateId' name='badgeId' value='" + badgeObj.id + "'/>");
    $openTab.find("input[name='title']").val(badgeObj.title);
    $openTab.find("textarea[name='description']").summernote("code", badgeObj.description);
    var $target = $openTab.find("input[name='iconName']");
    var imgIcon = $target.parent().siblings(".image-section").find('span.camera-image');
    var imageTag = $target.parent().siblings(".image-section").find("img.browse")[0];
    loadIconImage(badgeObj.iconName, $target, imgIcon, imageTag);
}

function loadIconImage(iconName, $target, imgIcon, imageTag) {
    var getIconAPI = SIH.getEndPoint("/api/file/badge/icon");
    imageTag.src = getIconAPI + "?fileName=" + iconName;
    $(imageTag).css("display", "block");
    $(imgIcon).css("display", "none");
    $target.attr("data-iconfile", iconName);
}
function mentorshipFormEvents() {
    $('[name=tie_email],[name=tie_password],[name=verify-tie-btn],[name=otherThanTieLVDescription]').closest('.form-group').hide();
    $(".successStories").closest(".baseformfield").addClass("display-n");

    var $mentorshipToggle = $("input:checkbox[name='mentorshipParticipant']");
    var $mentorshipCityTrigger = $(".mentor_selection_offline:checkbox:first");
    if ($mentorshipToggle.length && !$mentorshipToggle.is(":checked")) $(".mentorshipComp").addClass("mentorshipComp-hidden");
    if (!$mentorshipCityTrigger.is(":checked")) $(".mentorCity").addClass("mentorshipComp-hidden");
    $mentorshipCityTrigger.click(function () {
        $(".mentorCity").toggle(this.checked).toggleClass("hidden", !this.checked);
    });
    $mentorshipToggle.click(function () {
        $(".mentorshipProgram").toggle(this.checked);
        $(".mentorshipComp:not(.mentorCity)").toggleClass("mentorshipComp-hidden", !this.checked);
        if (!$(this).is(":checked")) {
            $("select[name=mentorDomains]").val("").trigger("change");
            $("input[type=checkbox][name=mentorMeans]").prop("checked", false);
            $("input[name=mentorCategory]").prop("checked", false);
            $("select[name=mentorHours]").val("");
            $("select[name=mentorCity]").val("").addClass("mentorshipComp-hidden");
            $(".mentorCity").hide();
            $("input[name=noOfStartupsToMentor]").val("");
        }
    });

    $("input:checkbox[name='hasStories']").change(function () {
        $(".successStories").closest(".baseformfield").toggleClass("display-n", !this.checked);
    });

    $('[name=TiEOrLetsVenture]').click(function (e) {
        var selectedRadio = $(this).val();
        if (selectedRadio === 'isTIE') {
            $('[name=otherThanTieLVDescription]').closest('.form-group').hide();
            $('[name=tie_email],[name=tie_password],[name=verify-tie-btn]').closest('.form-group').show();
        } else if (selectedRadio === 'others') {
            $('[name=tie_email],[name=tie_password],[name=verify-tie-btn]').closest('.form-group').hide();
            tieOrlvSpecificMessage(null, null, false);
            $('[name=otherThanTieLVDescription]').closest('.form-group').show();
        }
    });
}


function addMentorshipProgramDetails(data, mentorshipParticipant) {
    var formData = data || {};
    formData["mentorshipParticipant"] = mentorshipParticipant ? mentorshipParticipant : $("input[name=mentorshipParticipant]").is(":checked");
    formData["mentorship"] = {};
    formData["mentorship"]["mentorCategory"] = $("input[name='mentorCategory']:checked").val();
    formData["mentorship"]["mentorCity"] = $("select[name='mentorCity']").children("option:selected").val();
    formData["mentorship"]["mentorHours"] = $("select[name='mentorHours']").children("option:selected").val();
    formData["mentorship"]["noOfStartupsToMentor"] = $("input[name='noOfStartupsToMentor']").val();
    var mentorMeans = [];
    $.each($("input[name='mentorMeans']:checked"), function () {
        mentorMeans.push($(this).val());
    });
    formData["mentorship"]["mentorMeans"] = mentorMeans;
    formData["mentorship"]["mentorDomains"] = $("select[name='mentorDomains']").val();
    return formData;
}

function populateMentorshipProgramDetails(mentorshipObj) {
    $.each(mentorshipObj, function (key, value) {
        if (key == "mentorDomains") {
            populateMultiSelectOption(key, value);
        } else if (key == "mentorMeans") {
            $.each(value, function (idx, val) {
                $("input[type=checkbox][name=" + key + "][value='" + val + "']").trigger("click");
            });
        } else if (key == "mentorHours" || key == "mentorCity") {
            populateSingleSelect(key, value);
        } else if (key == "mentorCategory") {
            $("input[name=" + key + "][value='" + value + "']").prop("checked", true);
        } else {
            $("input[name=" + key + "]").val(value);
        }
    });
}

function validateMentorshipFields(isValidated, isUpdateFlow) {
    var role = store.getItem("role"), personaType = store.getItem("personatype");
    if ($("input:checkbox[name='mentorshipParticipant']").is(":checked") || role === 'Mentor' || personaType === 'mentor') {
        var element = $("input[type=checkbox][name=mentorMeans]");
        if (element.closest("div.section-block").attr("validate") == "1" || isUpdateFlow) {
            var helpBlock = $(".mentor_selection_offline").find("span.help-block").first();
            if (element.is(':checked')) {
                element.closest(".form-group").removeClass("has-error");
                helpBlock.html("");
            } else {
                element.closest(".form-group").addClass("has-error");
                helpBlock.html("Please select atleast one of the 4 options above.");
                isValidated = false;
            }
        }
    }
    return isValidated;
}

function validateTieLvVerifications(isValidated) {
    var $tieLvError = $(".tieOrlvSpecificMessage");
    if ($tieLvError.length) {
        isValidated = false;

    }
    return isValidated;
}
(function($){
    $(window).on("load",function(){

        // TimeLine Images
        $('.timeline-content .timeline .image-section').each(function(){
            var x = $(this).children("a").length;
            if(x > 6){
                $(this).children('a:nth-child(6)').append('<div class="count"> +'+(x-6)+'</div>')
            }
            $(this).addClass( " " + "image-count"+x);
        });

// Header Search bar

        $('.search-bar .fa-search').click(function(){
            $(this).parent().toggleClass('show-input');
        });

        // Search Bar Mobile

        $('.search-mobile').click(function(){
            $('.search-form').addClass('show');
        });

        $('.cross-icon .fa-times').click(function(){
            $('.search-form').removeClass('show');
        });

// Mobile Menu Js

        $('.menu-icon').click(function(){
            $('.mobile-menu-wrapper').addClass('show');
            //$('html').css('overflow','hidden');
        })

        $('.close-menu').click(function(){
            $('.mobile-menu-wrapper').removeClass('show');
            $('html').css('overflow','initial');
        })

        $('.dropbtn').click(function(){
            $(this).parent().toggleClass('show-menu');
            $(this).closest('li').siblings().removeClass('show-menu');
        })


//  Login Js

        $('.login-wrapper').click(function(){
            $(this).toggleClass('show-login');
        });

// Accordion


        // Sticky Header
        if($('.mid-header-wrap').length) {
            var headerHeight = $('.mid-header-wrap').offset().top;
            $(window).scroll(function () {
                if (!$('.persona-body').length) {
                    var scroll = $(window).scrollTop();

                    if (scroll > headerHeight) {
                        $('.mid-header-wrap, .main-header').addClass('sticky');
                    }
                    else {
                        $('.mid-header-wrap, .main-header').removeClass('sticky');
                    }
                }
            });
        }

        jQuery('.benefit-outer-wrapper').prepend("<div class='notice-part-bg'></div>")
        winWidth = jQuery(window).width();
        containerWidth = jQuery('.benefit-inner-wrapper').outerWidth();
        //noticePercentWidth = (containerWidth * 25) / 100;
        noticePercentWidth = jQuery('.benefit-inner-wrapper > .row-container').first().outerWidth();
        noticeWidth = noticePercentWidth + ((winWidth - containerWidth) / 2);
        jQuery('.notice-part-bg').css('width',noticeWidth);
        jQuery(window).resize(function(){
            winWidth = jQuery(window).width();
            containerWidth = jQuery('.benefit-inner-wrapper').outerWidth();
            //noticePercentWidth = (containerWidth * 25) / 100;
            noticePercentWidth = jQuery('.benefit-inner-wrapper > .row-container').first().outerWidth();
            noticeWidth = noticePercentWidth + ((winWidth - containerWidth) / 2);
            jQuery('.notice-part-bg').css('width',noticeWidth);
        });

    });
    $(window).on('load resize',function(){
        if($(window).width() > 991){
            $(".timeline-bottom, .faq-home .accordion,.faqs-wrapper .accordion").mCustomScrollbar();
        }
        if($(window).width() > 1024){
            $(".home-notice-board").mCustomScrollbar({'autoHideScrollbar':true});
        }
        // else{
        //     $('.notice-board-display-wrapper').slick({
        //         infinite: true,
        //         slidesToScroll: 1,
        //         dots:false,
        //         autoplay:false,
        //         slidesToShow: 2,
        //         responsive: [
        //             {
        //                 breakpoint: 1024,
        //                 settings: {
        //                     slidesToShow: 2
        //                 }
        //             },
        //             {
        //                 breakpoint: 450,
        //                 settings: {
        //                     slidesToShow: 1
        //                 }
        //             }
        //         ]
        //     });
        // }
    });
})($);
var player = {};
$(document).ready(function () {

    $('div:not(.inner-slider-wrap) .carouselherobanner .home-banner').not('.slick-initialized').slick({
        infinite: true,
        slidesToShow: 1,
        slidesToScroll: 1,
        prevArrow: '<div class="button-prev">Previous Slide</div>',
        nextArrow: '<div class="button-next">Next Slide</div>',
        autoplay: 1,
        autoplaySpeed: 6000,
        responsive: [
            {
                breakpoint: 767,
                settings: {
                    adaptiveHeight: true
                }
            }
        ]
    });

    $(".resources-container.resource-tab-section #tab-2").on("click", function () {
        $('.carouselherobanner .home-banner').slick("unslick").slick({
            infinite: true,
            slidesToShow: 1,
            slidesToScroll: 1,
            prevArrow: '<div class="button-prev">Previous Slide</div>',
            nextArrow: '<div class="button-next">Next Slide</div>',
            autoplay: 1,
            responsive: [
                {
                    breakpoint: 767,
                    settings: {
                        adaptiveHeight: true
                    }
                }
            ]
        });
    });

    var playState = true;
    if ($(window).width() < 1024) {
        playState = false;
    }
    var muteState = true;
    var fullScreenPlayState = false;
    var fullScreen = false;
    var interval = null;
    var bannerTimer = null;
    var userPaused = false;
    var usercenterPaused = false;
    var isYoutubeVideo = false;
    var currentId = null;
    var isPlayerScriptLoaded = false;


    if ($('.video').length > 0) {
        var isVideo = $('.slick-active').find('video');
        $('.hero-container .black-bar').click(function (e) {

            if ($(window).width() > 1023) {
                playpauseHandle();
                if (e && e.hasOwnProperty('originalEvent')) {
                    usercenterPaused = !usercenterPaused;
                }
            }
        });
        if (isVideo.length && $(window).width() > 1023) {
            isVideo.get(0).play();
            isVideo.get(0).addEventListener('ended', addReplyButton);
        } else {
            isYoutubeVideo = true;
            var videoContainerCssId = $('.slick-active').find('.player-container').attr('id');
            currentId = videoContainerCssId;
            if (!player[currentId] && videoContainerCssId) {
                if (!isPlayerScriptLoaded) {
                    isPlayerScriptLoaded = true;
                    var tag = document.createElement('script');
                    tag.src = "https://www.youtube.com/iframe_api";
                    var firstScriptTag = document.getElementsByTagName('script')[0];
                    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
                    var videoSrc = $('.slick-active').find('#player-src').data('url');
                    if (!videoSrc) {
                        return;
                    }
                    var re = /https?:\/\/(?:[0-9A-Z-]+\.)?(?:youtu\.be\/|youtube(?:-nocookie)?\.com\S*?[^\w\s-])([\w-]{11})(?=[^\w-]|$)(?![?=&+%\w.-]*(?:['"][^<>]*>|<\/a>))[?=&+%\w.-]*/ig;
                    var videoId = videoSrc.replace(re, '$1');

                    var url = document.createElement('a');
                    url.href = videoSrc;
                    var loop = getParameterFromUrl(url.search, "loop");
                    muteState = getParameterFromUrl(url.search, "mute");

                    function getParameterFromUrl(url,name) {
                        var regexS = "[\\?&]" + name + "=([^&#]*)",
                            regex = new RegExp(regexS),
                            results = regex.exec(url);
                        if (results == null) {
                            return "";
                        } else {
                            return decodeURIComponent(results[1].replace(/\+/g, " "));
                        }
                    }

                    function onYouTubeIframeAPIReady() {
                        player[videoContainerCssId] = new YT.Player(videoContainerCssId, {
                            height: '453',
                            width: '100%',
                            videoId: videoId,
                            playerVars: {
                                autoplay: playState ? 1 : 0,
                                controls: 0,
                                mute: muteState ? 1 : 0,
                                showinfo: 0,
                                disablekb: 1,
                                rel: 0,
                                loop: loop ? 1 : 0
                            },
                            events: {
                                'onReady': onPlayerReady,
                                'onStateChange': onPlayerStateChange
                            }
                        });

                        /*player[videoContainerCssId].cuePlaylist(videoId);
                        player[videoContainerCssId].setLoop(loop ? true : false);
                        console.log(player[videoContainerCssId].getPlaylist());*/
                    }
                }

                window.onYouTubeIframeAPIReady = onYouTubeIframeAPIReady;

                function onPlayerReady(event) {
                    event.target.mute()
                }

                var done = false;

                function onPlayerStateChange(event) {
                    if (isYoutubeVideo) {
                        if (event.data == YT.PlayerState.PLAYING) {
                            $('.play-control').find('.control').toggleClass('pause play');
                            if (!playState) {
                                // $('.play-control').find('.control').toggleClass('pause play');
                                playState = !playState;
                                fullScreenPlayState = false;
                            } else {
                                $('div:not(.inner-slider-wrap) .carouselherobanner .home-banner').slick('slickPause')
                            }
                        }
                        if (event.data == YT.PlayerState.PAUSED) {
                            $('.play-control').find('.control').toggleClass('pause play');
                            if (playState) {
                                // $('.play-control').find('.control').toggleClass('pause play');
                                playState = !playState;
                                fullScreenPlayState = false;
                            }
                        }
                        if (event.data == YT.PlayerState.ENDED) {
                            addReplyButton();
                            $('div:not(.inner-slider-wrap) .carouselherobanner .home-banner').slick('slickPlay')
                        }
                    }
                }
            } else {
                slideNext(this);
            }
        }

        /* var heroBanner = new Waypoint.Inview({
           element: document.querySelector('.home-hero-banner-content .button-next.slick-arrow'),
           enter: function (direction) {
             if(window.innerHeight != screen.height){
               if ($('.slick-current .control').hasClass('play') && !userPaused && !usercenterPaused) {
                 $('.slick-current .control').click();
               }
             }
           },
           exited: function (direction) {
             if(window.innerHeight != screen.height){
               if (!$('.slick-current .control').hasClass('play')) {
                 $('.slick-current .control').click();
               }
             }

           }
         });*/

        function bindFullScreenEvent() {
            document.removeEventListener("fullscreenchange", onFullScreenChange, false);
            document.removeEventListener("webkitfullscreenchange", onFullScreenChange, false);
            document.removeEventListener("mozfullscreenchange", onFullScreenChange, false);

            document.addEventListener("fullscreenchange", onFullScreenChange, false);
            document.addEventListener("webkitfullscreenchange", onFullScreenChange, false);
            document.addEventListener("mozfullscreenchange", onFullScreenChange, false);
        }

        function onFullScreenChange() {
            var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement;
            var videoElem = $('.slick-active').find('video');
            if (videoElem.length && !fullscreenElement) {
                var isMuted = videoElem.get(0).muted;
                var isPlaying = !videoElem.get(0).paused;
                muteState = isMuted;
                playState = isPlaying;
                if (isMuted) {
                    // $('.volume').removeClass('unmute');
                }
                else {
                    // $('.volume').addClass('unmute');
                }
                if (isPlaying) {
                    // $('.play-control').find('.control').removeClass('play').addClass('pause');
                }
                else {
                    // $('.play-control').find('.control').removeClass('pause').addClass('play');
                }
            }
        }

        $(document).idle({
            onIdle: function () {
                $('.hero-container').addClass('hideOnVideo')
            },
            onActive: function () {
                $('.hero-container').removeClass('hideOnVideo')
            },
            idle: 10000
        })
        bindFullScreenEvent();
        $(".slick-slider").on("beforeChange", function (event, slick, currentSlide, nextSlide) {

            var imgElem = $('.slick-active', this).find('.video');
            if (imgElem.length) {
                $('.home-banner').addClass('notVideo');
            }

            var videoElem = $('.slick-active', this).find('video');
            var imgWrapper = $('.slick-active', this).find('.images-wrapper');
            if (videoElem.length) {
                $('.coundownTimer').addClass('hideTimer');
                videoElem.get(0).pause();
                videoElem.get(0).removeEventListener('ended', addReplyButton);
            } else if (imgWrapper.length) {
                slideNext(this);
            } else if (isYoutubeVideo) {
                isYoutubeVideo = false;
                player[currentId] && player[currentId].pauseVideo && player[currentId].pauseVideo();
            }
        });

        $(".slick-slider").on("afterChange", function (e, slick, currentSlide) {
            var imgElem = $('.slick-active', this).find('.video');
            if (imgElem.length) {
                $('.home-banner').removeClass('notVideo');
            }


            /*var count = $('.slick-track .slick-slide',this).length;
            var curSlideIndex = parseInt($('.slick-track .slick-active',this).attr('data-slick-index'));
            if (curSlideIndex == 0) {
                $('.button-prev',this).hide();
                $('.button-next',this).show();
            }
            else {
                $('.button-prev',this).show();
            }

            //If we're on the last slide hide the Next button.
            if (count == curSlideIndex + 1) {
                $('.button-next',this).hide();
            }*/
            var videoElem = $('.slick-active', this).find('video');
            var imgWrapper = $('.slick-active', this).find('.images-wrapper');
            if (videoElem.length) {
                isYoutubeVideo = false;
                if (playState || fullScreenPlayState) {
                    videoElem.get(0).play();
                    $('.slick-active', this).find('.play-control').removeClass('replay').find('.control').removeClass('play').addClass('pause');
                    playState = true;
                }
                videoElem.get(0).addEventListener('ended', addReplyButton);
                videoElem.get(0).muted = muteState;

            }
            else if (imgWrapper.length) {
                slideNext(this);
            }
            else {
                /* case for rendering youtube player */

                isYoutubeVideo = true;
                var videoContainerCssId = $('.slick-active', this).find('.player-container').attr('id');
                currentId = videoContainerCssId;
                if (!player[currentId]) {

                    if (!isPlayerScriptLoaded) {
                        isPlayerScriptLoaded = true;
                        var tag = document.createElement('script');
                        tag.src = "https://www.youtube.com/iframe_api";
                        var firstScriptTag = document.getElementsByTagName('script')[0];
                        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
                        var videoSrc = $('.slick-active').find('#player-src').data('url');
                        if (!videoSrc) {
                            return;
                        }
                        var re = /https?:\/\/(?:[0-9A-Z-]+\.)?(?:youtu\.be\/|youtube(?:-nocookie)?\.com\S*?[^\w\s-])([\w-]{11})(?=[^\w-]|$)(?![?=&+%\w.-]*(?:['"][^<>]*>|<\/a>))[?=&+%\w.-]*/ig;
                        var videoId = videoSrc.replace(re, '$1');

                        function onYouTubeIframeAPIReady() {
                            player[videoContainerCssId] = new YT.Player(videoContainerCssId, {
                                height: '100%',
                                width: '100%',
                                videoId: videoId,
                                playerVars: {
                                    autoplay: playState ? 1 : 0,
                                    controls: 0,
                                    mute: muteState ? 1 : 0,
                                    showinfo: 0,
                                    disablekb: 1,
                                    rel: 0
                                },
                                events: {
                                    'onReady': onPlayerReady,
                                    'onStateChange': onPlayerStateChange
                                }
                            });
                        }
                    } else {
                        var videoSrc = $('.slick-active', this).find('#player-src').data('url');
                        if (!videoSrc) {
                            return;
                        }
                        var re = /https?:\/\/(?:[0-9A-Z-]+\.)?(?:youtu\.be\/|youtube(?:-nocookie)?\.com\S*?[^\w\s-])([\w-]{11})(?=[^\w-]|$)(?![?=&+%\w.-]*(?:['"][^<>]*>|<\/a>))[?=&+%\w.-]*/ig;
                        var videoId = videoSrc.replace(re, '$1');
                        player[videoContainerCssId] = new YT.Player(videoContainerCssId, {
                            height: '100%',
                            width: '100%',
                            videoId: videoId,
                            playerVars: {
                                autoplay: playState ? 1 : 0,
                                controls: 0,
                                mute: muteState ? 1 : 0,
                                showinfo: 0,
                                disablekb: 1,
                                rel: 0
                            },
                            events: {
                                'onReady': onPlayerReady,
                                'onStateChange': onPlayerStateChange
                            }
                        });

                    }

                    window.onYouTubeIframeAPIReady = onYouTubeIframeAPIReady;

                    function onPlayerReady(event) {
                        event.target.mute();
                    }

                    var done = false;

                    function onPlayerStateChange(event) {
                        if (isYoutubeVideo) {
                            if (event.data == YT.PlayerState.PLAYING) {
                                $('.play-control').find('.control').toggleClass('pause play');
                                if (!playState) {
                                    playState = !playState;
                                    fullScreenPlayState = false;
                                } else {
                                    $('div:not(.inner-slider-wrap) .carouselherobanner .home-banner').slick('slickPause')
                                }
                            }
                            if (event.data == YT.PlayerState.PAUSED) {
                                $('.play-control').find('.control').toggleClass('pause play');
                                if (playState) {
                                    playState = !playState;
                                    fullScreenPlayState = false;
                                }
                            }
                            if (event.data == YT.PlayerState.ENDED) {
                                addReplyButton();
                                $('div:not(.inner-slider-wrap) .carouselherobanner .home-banner').slick('slickPlay')
                            }
                        }
                    }
                } else {
                    if (playState) {
                        // $('.slick-active').find('.play-control').removeClass('replay').find('.control').removeClass('play').addClass('pause');
                        player[currentId].playVideo();
                        if (muteState) {
                            player[currentId].mute();
                        } else {
                            player[currentId].unMute();
                        }
                    }
                }
            }
        });
    }

    //End

    function addReplyButton() {
        $('.slick-active').find('.play-control').addClass('replay');
        var videoElem = $('.slick-active').find('video').get(0);
        fullScreenPlayState = true;

        // var exitFullScreen = document.exitFullscreen || document.mozCancelFullScreen || document.webkitExitFullscreen || document.msExitFullscreen;
        // if (exitFullScreen) {
        //     exitFullScreen.call(document);
        // }
        // bannerTimer = setTimeout(function () {
        //     $('.home-banner').slick('next')
        // }, 5000)
        //coundownTimer();
    }

    function slideNext(thisObj) {
        /* setTimeout(function () {
             $('.home-banner',thisObj).slick('next')
         }, 10000);*/
    }


    function addVideEndEvent() {
        var isVideo = $('.slick-active').find('video');
        if (isVideo.length) {
            isVideo.get(0).addEventListener('ended', addReplyButton);
        }
    }

    /*Playpause handling function*/
    function playpauseHandle(e) {
        // $('.play-control').find('.control').toggleClass('pause play');
        clearTimeout(bannerTimer);
        var isVideo = $('.slick-active').find('video');
        var isReplayActive = $(this).hasClass('replay');
        if (isReplayActive) {
            if (isYoutubeVideo) {
                player[currentId].playVideo();
            } else {
                isVideo.get(0).play();
            }
            // $(this).removeClass('replay').find('.control').removeClass('play').addClass('pause');
            return;
        }
        $(this).removeClass('replay');
        playState = !playState;
        if (e && e.hasOwnProperty('originalEvent')) {
            userPaused = !userPaused;
            usercenterPaused = !usercenterPaused;
        }

        fullScreenPlayState = false;
        if (isYoutubeVideo) {
            if (playState) {
                if (player[currentId]) {
                    player[currentId].playVideo();
                }
            }
            else {
                player[currentId].pauseVideo();
            }
        } else {
            if (playState) {
                isVideo.get(0).play();
            }
            else {
                isVideo.get(0).pause();
            }
        }
    }

    $('body').on("click", '.hero-container .play-control', playpauseHandle)

    $('body').on("click", '.hero-container .volume', function () {
        // $('.volume').toggleClass('unmute');
        var isVideo = $('.slick-active').find('video');
        muteState = !muteState;
        if (isYoutubeVideo) {
            if (muteState) {
                player[currentId].mute()
            }
            else {
                player[currentId].unMute()
            }
        } else {
            if (muteState) {
                isVideo.get(0).muted = true;
            }
            else {
                isVideo.get(0).muted = false;
            }
        }
    });

    $("body").on('click', '.hero-container #fullScreen', function () {
        if (isYoutubeVideo) {
            var playerElement = $('.slick-active').find('#' + currentId).get(0);
            var requestFullScreen = playerElement.requestFullScreen || playerElement.mozRequestFullScreen || playerElement.webkitRequestFullScreen;
            if (requestFullScreen) {
                requestFullScreen.bind(playerElement)();
            }
        } else {
            var videoElem = $('.slick-active').find('video').get(0);
            var isFullScreenAllow = videoElem.requestFullscreen || videoElem.mozRequestFullScreen || videoElem.webkitRequestFullscreen;
            if (isFullScreenAllow) {
                isFullScreenAllow.call(videoElem);
            }
            else {
                alert('full screen not supported by browser')
            }
        }
    });
    if(onYouTubeIframeAPIReady) {
        onYouTubeIframeAPIReady();
    }
});
(function () {
    // 'use strict';

    // Does the browser actually support the video element?
    var supportsVideo = !!document.createElement('video').canPlayType;
    if ($(".offline-video").length) {


        if (supportsVideo) {
            // Obtain handles to main elements
            var videoContainer = $('.off-videoContainer');
            var video = $('.off-video');
            var videoControls = $('.video-controls');

            // Hide the default controls
            $(".off-videoContainer video").controls = false;

            // Display the user defined video controls
            for (var i = 0; i < videoControls.length; i++) {
                videoControls[i].setAttribute('data-state', 'visible');
            }
            // Obtain handles to buttons and other elements
            var playpause = $('.off-playpause');
            var stop = $('.off-stop');
            var mute = $('.off-mute');
            var volinc = $('.off-volinc');
            var voldec = $('.off-voldec');
            var progress = $('.off-progress');
            var progressBar = $('off-progress-bar');
            var fullscreen = $('.off-fs');

            // If the browser doesn't support the progress element, set its state for some different styling
            var supportsProgress = (document.createElement('progress').max !== undefined);
            if (!supportsProgress) progress.setAttribute('data-state', 'fake');

            // Check if the browser supports the Fullscreen API
            var fullScreenEnabled = !!(document.fullscreenEnabled || document.mozFullScreenEnabled || document.msFullscreenEnabled || document.webkitSupportsFullscreen || document.webkitFullscreenEnabled || document.createElement('video').webkitRequestFullScreen);
            // If the browser doesn't support the Fulscreen API then hide the fullscreen button
            if (!fullScreenEnabled) {
                fullscreen.style.display = 'none';
            }

            // Check the volume
            var checkVolume = function (dir) {
                if (dir) {
                    var currentVolume = Math.floor(video.volume * 10) / 10;
                    if (dir === '+') {
                        if (currentVolume < 1) video.volume += 0.1;
                    }
                    else if (dir === '-') {
                        if (currentVolume > 0) video.volume -= 0.1;
                    }
                    // If the volume has been turned off, also set it as muted
                    // Note: can only do this with the custom control set as when the 'volumechange' event is raised, there is no way to know if it was via a volume or a mute change
                    if (currentVolume <= 0) video.muted = true;
                    else video.muted = false;
                }
                changeButtonState('mute');
            }

            // Change the volume
            var alterVolume = function (dir) {
                checkVolume(dir);
            }

            // Set the video container's fullscreen state
            var setFullscreenData = function (state) {
                videoContainer.setAttribute('data-fullscreen', !!state);
                // Set the fullscreen button's 'data-state' which allows the correct button image to be set via CSS
                fullscreen.setAttribute('data-state', !!state ? 'cancel-fullscreen' : 'go-fullscreen');
            }

            // Checks if the document is currently in fullscreen mode
            var isFullScreen = function () {
                return !!(document.fullScreen || document.webkitIsFullScreen || document.mozFullScreen || document.msFullscreenElement || document.fullscreenElement);
            }

            // Fullscreen
            var handleFullscreen = function (that) {
                // If fullscreen mode is active...
                if (isFullScreen()) {
                    // ...exit fullscreen mode
                    // (Note: this can only be called on document)
                    if (document.exitFullscreen) document.exitFullscreen();
                    else if (document.mozCancelFullScreen) document.mozCancelFullScreen();
                    else if (document.webkitCancelFullScreen) document.webkitCancelFullScreen();
                    else if (document.msExitFullscreen) document.msExitFullscreen();
                    setFullscreenData(false);
                }
                else {
                    // ...otherwise enter fullscreen mode
                    // (Note: can be called on document, but here the specific element is used as it will also ensure that the element's children, e.g. the custom controls, go fullscreen also)
                    if (videoContainer.requestFullscreen) videoContainer.requestFullscreen();
                    else if (videoContainer.mozRequestFullScreen) videoContainer.mozRequestFullScreen();
                    else if (videoContainer.webkitRequestFullScreen) {
                        // Safari 5.1 only allows proper fullscreen on the video element. This also works fine on other WebKit browsers as the following CSS (set in styles.css) hides the default controls that appear again, and
                        // ensures that our custom controls are visible:
                        // figure[data-fullscreen=true] video::-webkit-media-controls { display:none !important; }
                        // figure[data-fullscreen=true] .controls { z-index:2147483647; }
                        video.webkitRequestFullScreen();
                    }
                    else if (videoContainer.msRequestFullscreen) videoContainer.msRequestFullscreen();
                    setFullscreenData(true);
                }
            }

            // Only add the events if addEventListener is supported (IE8 and less don't support it, but that will use Flash anyway)
            if (document.addEventListener) {
                // Wait for the video's meta data to be loaded, then set the progress bar's max value to the duration of the video
                for (var i = 0; i < video.length; i++) {
                    video[i].addEventListener('loadedmetadata', function () {
                        for (var i = 0; i < progress.length; i++) {
                            progress[i].setAttribute('max', video.duration);
                        }
                    });
                }

                // Changes the button state of certain button's so the correct visuals can be displayed with CSS
                var changeButtonState = function (type) {
                    // Play/Pause button
                    if (type == 'playpause') {
                        if (video.paused || video.ended) {

                            playpause[0].setAttribute('data-state', 'play');
                        }
                        else {
                            playpause[0].setAttribute('data-state', 'pause');
                        }
                    }
                    // Mute button
                    else if (type == 'mute') {
                        mute.attr('data-state', video.muted ? 'unmute' : 'mute');
                    }
                }

                // Add event listeners for video specific events
                //     for (var i = 0 ; i < video.length; i++){
                //     video[i].addEventListener('play', function () {
                //         changeButtonState('playpause');
                //     }, false);
                // }
                // for (var i = 0 ; i < video.length; i++){
                //     video[i].addEventListener('pause', function () {
                //         changeButtonState('playpause');
                //     }, false);
                // }
                video.on('play', function () {
                    if ($(this).get(0).paused || $(this).get(0).ended) {

                        $(this).siblings(".controls").find(playpause).attr('data-state', 'play');
                    }
                    else {
                        $(this).siblings(".controls").find(playpause).attr('data-state', 'pause');
                    }
                });
                video.on('pause', function () {
                    if ($(this).get(0).paused || $(this).get(0).ended) {

                        $(this).siblings(".controls").find(playpause).attr('data-state', 'play');
                    }
                    else {
                        $(this).siblings(".controls").find(playpause).attr('data-state', 'pause');
                    }
                });

                // for (var i = 0; i < video.length; i++) {
                //     video[i].addEventListener('volumechange', function () {
                //         checkVolume();
                //     }, false);
                // }
                // Add events for all buttons
                //     for (var i = 0 ; i < playpause.length; i++){
                //     playpause[i].addEventListener('click', function (e) {
                //         if (video[i].paused || video[i].ended) video[i].play();
                //         else video[i].pause();
                //     });
                // }
                playpause.click(function () {
                    if ($(this).closest(".controls").siblings("video").get(0).paused || $(this).closest(".controls").siblings("video").get(0).ended)
                        $(this).closest(".controls").siblings("video").get(0).play();
                    else
                        $(this).closest(".controls").siblings("video").get(0).pause();
                })

                // The Media API has no 'stop()' function, so pause the video and reset its time and the progress bar
                // for (var i = 0; i < video.length; i++) {
                //     stop[i].addEventListener('click', function (e) {
                //         video[i].pause();
                //         video[i].currentTime = 0;
                //         progress[i].value = 0;
                //         // Update the play/pause button's 'data-state' which allows the correct button image to be set via CSS
                //         changeButtonState('playpause');
                //     });
                // }
                // for (var i = 0; i < video.length; i++) {
                //     mute[i].addEventListener('click', function (e) {
                //         video[i].muted = !video[i].muted;
                //         changeButtonState('mute');
                //     });
                // }
                mute.click(function(){
                    let vid = $(this).closest(".controls").siblings("video").get(0);
                    $(this).closest(".controls").siblings("video").get(0).muted = !$(this).closest(".controls").siblings("video").get(0).muted; 
                    $(this).attr('data-state', $(this).closest(".controls").siblings("video").get(0).muted ? 'mute' : 'unmute');
                })
                for (var i = 0; i < video.length; i++) {
                    volinc[i].addEventListener('click', function (e) {
                        alterVolume('+');
                    });
                }
                for (var i = 0; i < video.length; i++) {
                    voldec[i].addEventListener('click', function (e) {
                        alterVolume('-');
                    });
                }
                // for (var i = 0; i < video.length; i++) {
                //     fullscreen[i].addEventListener('click', function (e) {
                //         handleFullscreen();
                //     });
                // }
                fullscreen.click(function(){
                    $(this).closest(".controls").siblings("video").get(0).requestFullscreen();
                })
                // As the video is playing, update the progress bar
                /* video.addEventListener('timeupdate', function () {
                     // For mobile browsers, ensure that the progress element's max attribute is set
                     if (!progress.getAttribute('max')) progress.setAttribute('max', video.duration);
                     progress.value = video.currentTime;
                     progressBar.style.width = Math.floor((video.currentTime / video.duration) * 100) + '%';
                 });*/

                // React to the user clicking within the progress bar
                /* progress.addEventListener('click', function (e) {
                     //var pos = (e.pageX  - this.offsetLeft) / this.offsetWidth; // Also need to take the parent into account here as .controls now has position:relative
                     var pos = (e.pageX - (this.offsetLeft + this.offsetParent.offsetLeft)) / this.offsetWidth;
                     video.currentTime = pos * video.duration;
                 });*/

                // Listen for fullscreen change events (from other controls, e.g. right clicking on the video itself)
                document.addEventListener('fullscreenchange', function (e) {
                    setFullscreenData(!!(document.fullScreen || document.fullscreenElement));
                });
                document.addEventListener('webkitfullscreenchange', function () {
                    setFullscreenData(!!document.webkitIsFullScreen);
                });
                document.addEventListener('mozfullscreenchange', function () {
                    setFullscreenData(!!document.mozFullScreen);
                });
                document.addEventListener('msfullscreenchange', function () {
                    setFullscreenData(!!document.msFullscreenElement);
                });
            }
        }
    }

})();
/*!
 * http://suyati.github.io/line-control
 * LineControl 1.1.0
 * Copyright (C) 2014, Suyati Technologies
 * This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *
*/

(function ($) {
    var editorObj;
    var methods = {
        saveSelection: function () {
            //Function to save the text selection range from the editor
            $(this).data('editor').focus();
            if (window.getSelection) {
                sel = window.getSelection();
                if (sel.getRangeAt && sel.rangeCount) {
                    $(this).data('currentRange', sel.getRangeAt(0));
                }
            } else if (document.selection && document.selection.createRange) {
                $(this).data('currentRange', document.selection.createRange());
            }
            else
                $(this).data('currentRange', null);
        },

        restoreSelection: function (text, mode) {
            //Function to restore the text selection range from the editor
            var node;
            typeof text !== 'undefined' ? text : false;
            typeof mode !== 'undefined' ? mode : "";
            var range = $(this).data('currentRange');
            if (range) {
                if (window.getSelection) {
                    if (text) {
                        range.deleteContents();
                        if (mode == "html") {
                            var el = document.createElement("div");
                            el.innerHTML = text;
                            var frag = document.createDocumentFragment(), node, lastNode;
                            while ((node = el.firstChild)) {
                                lastNode = frag.appendChild(node);
                            }
                            range.insertNode(frag);
                        }
                        else
                            range.insertNode(document.createTextNode(text));

                    }
                    sel = window.getSelection();
                    sel.removeAllRanges();
                    sel.addRange(range);
                }
                else if (document.selection && range.select) {
                    range.select();
                    if (text) {
                        if (mode == "html")
                            range.pasteHTML(text);
                        else
                            range.text = text;
                    }
                }
            }
        },

        restoreIESelection: function () {
            //Function to restore the text selection range from the editor in IE
            var range = $(this).data('currentRange');
            if (range) {
                if (window.getSelection) {
                    sel = window.getSelection();
                    sel.removeAllRanges();
                    sel.addRange(range);
                } else if (document.selection && range.select) {
                    range.select();
                }
            }
        },

        insertTextAtSelection: function (text, mode) {
            var sel, range, node;
            typeof mode !== 'undefined' ? mode : "";
            if (window.getSelection) {
                sel = window.getSelection();
                if (sel.getRangeAt && sel.rangeCount) {
                    range = sel.getRangeAt(0);
                    range.deleteContents();
                    var textNode = document.createTextNode(text);

                    if (mode == "html") {
                        var el = document.createElement("div");
                        el.innerHTML = text;
                        var frag = document.createDocumentFragment(), node, lastNode;
                        while ((node = el.firstChild)) {
                            lastNode = frag.appendChild(node);
                        }
                        range.insertNode(frag);
                    }
                    else {
                        range.insertNode(textNode);
                        range.selectNode(textNode);
                    }
                    sel.removeAllRanges();
                    range = range.cloneRange();
                    range.collapse(false);
                    sel.addRange(range);
                }
            } else if (document.selection && document.selection.createRange) {
                range = document.selection.createRange();
                range.pasteHTML(text);
                range.select();
            }
        },

        imageWidget: function () {
            //Class for Widget Handling the upload of Files
            var _idSuffix = this.attr("id");
            var row = $('<div/>', {
                "class": "row"
            }).append($('<div/>', {
                id: "imgErrMsg_" + _idSuffix
            }));
            var container = $('<div/>', {'class': "tabbable tabs-left"});
            var navTabs = $('<ul/>',
                {
                    class: "nav nav-tabs"
                }).append($('<li/>',
                {
                    class: "active"
                }).append($('<a/>', {
                    "href": "#uploadImageBar_" + _idSuffix,
                    "data-toggle": "tab"
                }).html("From Computer")
            )).append($('<li/>').append($('<a/>', {
                "href": "#imageFromLinkBar_" + _idSuffix,
                "data-toggle": "tab"
            }).html("From URL")));

            var tabContent = $("<div/>", {class: "tab-content"});
            var uploadImageBar = $("<div/>", {
                id: "uploadImageBar_" + _idSuffix,
                class: "tab-pane active"
            });

            handleFileSelect = function (evt) {
                var files = evt.target.files; // FileList object
                var output = [];
                for (var i = 0, f; f = files[i]; i++) {
                    //Loop thorugh all the files
                    if (!f.type.match('image.*') || !f.name.match(/(?:gif|jpg|png|jpeg)$/)) { //Process only Images
                        methods.showMessage.apply(this, ["imgErrMsg_" + _idSuffix, "Invalid file type"]);
                        continue;
                    }
                    var reader = new FileReader();
                    reader.onload = (function (imageFile) {
                        return function (e) {
                            //Render Thumnails
                            var li = $('<li/>', {class: "col-xs-12 col-sm-6 col-md-3 col-lg-3"});
                            var a = $('<a/>', {
                                href: "javascript:void(0)",
                                class: "thumbnail"
                            });
                            var image = $('<img/>', {
                                src: e.target.result,
                                title: escape(imageFile.name)
                            }).appendTo(a).click(function () {
                                $('#imageList_' + _idSuffix).data('current', $(this).attr('src'));
                            });
                            li.append(a).appendTo($('#imageList_' + _idSuffix));
                        }
                    })(f);
                    reader.readAsDataURL(f);
                }
            }
            var chooseFromLocal = $('<input/>', {
                type: "file",
                class: "inline-form-control",
                multiple: "multiple"
            });
            chooseFromLocal.on('change', handleFileSelect);
            uploadImageBar.append(chooseFromLocal);
            var imageFromLinkBar = $("<div/>", {
                id: "imageFromLinkBar_" + _idSuffix,
                class: "tab-pane"
            });
            var getImageURL = $("<div/>", {class: "input-group"});
            var imageURL = $('<input/>', {
                type: "url",
                class: 'form-control',
                id: "imageURL_" + _idSuffix,
                placeholder: "Enter URL"
            }).appendTo(getImageURL);
            var getURL = $("<button/>", {
                class: "btn btn-success",
                type: "button"
            }).html("Go!").click(function () {
                var url = $('#imageURL_' + _idSuffix).val();
                if (url == '') {
                    methods.showMessage.apply(this, ["imgErrMsg_" + _idSuffix, "Please enter image url"]);
                    return false;
                }
                var li = $('<li/>', {class: "span6 col-xs-12 col-sm-6 col-md-3 col-lg-3"});
                var a = $('<a/>', {
                    href: "javascript:void(0)",
                    class: "thumbnail"
                });
                var image = $('<img/>', {
                    src: url,
                }).error(function () {
                    methods.showMessage.apply(this, ["imgErrMsg_" + _idSuffix, "Invalid image url"]);
                    return false;
                }).load(function () {
                    $(this).appendTo(a).click(function () {
                        $('#imageList_' + _idSuffix).data('current', $(this).attr('src'));
                    });
                    li.append(a).appendTo($('#imageList_' + _idSuffix));
                });
            }).appendTo($("<span/>", {class: "input-group-btn form-control-button-right"}).appendTo(getImageURL));

            imageFromLinkBar.append(getImageURL);
            tabContent.append(uploadImageBar).append(imageFromLinkBar);
            container.append(navTabs).append(tabContent);

            var imageListContainer = $("<div/>", {'class': 'col-xs-12 col-sm-12 col-md-12 col-lg-12'});
            var imageList = $('<ul/>', {
                "class": "thumbnails padding-top list-unstyled",
                "id": 'imageList_' + _idSuffix
            }).appendTo(imageListContainer);
            row.append(container).append(imageListContainer);
            return row;
        },

        tableWidget: function (mode) {
            //Function to generate the table input form
            var idExtn = "_" + $(this).attr("id");
            if (typeof mode !== 'undefined') {
                idExtn = "_" + editorObj.attr("id") + "_Edt";
            }
            var tblCntr = $('<div/>', { //Outer Container Div
                class: "row-fluid"
            }).append($('<div/>', { //Err Message Div
                id: "tblErrMsg" + idExtn
            })).append($('<form/>', { //Form
                    id: "tblForm" + idExtn
                }).append($('<div/>', { //Inner Container Div
                    class: "row"
                }).append($('<div/>', { //Left input Container Div
                    id: "tblInputsLeft" + idExtn,
                    class: "col-xs-12 col-sm-6 col-md-6 col-lg-6"
                }).append($('<label/>', {for: "tblRows" + idExtn, text: "Rows"}
                )).append($('<input/>', {
                    id: "tblRows" + idExtn,
                    type: "text",
                    class: "form-control form-control-width",
                    value: 2
                })).append($('<label/>', {for: "tblColumns" + idExtn, text: "Columns"}
                )).append($('<input/>', {
                    id: "tblColumns" + idExtn,
                    type: "text",
                    class: "form-control form-control-width",
                    value: 2
                })).append($('<label/>', {for: "tblWidth" + idExtn, text: "Width"}
                )).append($('<input/>', {
                    id: "tblWidth" + idExtn,
                    type: "text",
                    class: "form-control form-control-width",
                    value: 400
                })).append($('<label/>', {for: "tblHeight" + idExtn, text: "Height"}
                )).append($('<input/>', {
                    id: "tblHeight" + idExtn,
                    type: "text",
                    class: "form-control form-control-width",
                }))
                ).append($('<div/>', { //Right input Container Div
                    id: "tblInputsRight" + idExtn,
                    class: "col-xs-12 col-sm-6 col-md-6 col-lg-6"
                }).append($('<label/>', {for: "tblAlign" + idExtn, text: "Alignment"}
                )).append($('<select/>', {id: "tblAlign" + idExtn, class: "form-control form-control-width"}
                ).append($('<option/>', {text: "Choose", value: ""}
                )).append($('<option/>', {text: "Left", value: "left"}
                )).append($('<option/>', {text: "Center", value: "center"}
                )).append($('<option/>', {text: "Right", value: "right"}))
                ).append($('<label/>', {for: "tblBorder" + idExtn, text: "Border size"}
                )).append($('<input/>', {
                    id: "tblBorder" + idExtn,
                    type: "text",
                    class: "form-control form-control-width",
                    value: 1
                })).append($('<label/>', {for: "tblCellspacing" + idExtn, text: "Cell spacing"}
                )).append($('<input/>', {
                    id: "tblCellspacing" + idExtn,
                    type: "text",
                    class: "form-control form-control-width",
                    value: 1
                })).append($('<label/>', {for: "tblCellpadding" + idExtn, text: "Cell padding"}
                )).append($('<input/>', {
                    id: "tblCellpadding" + idExtn,
                    type: "text",
                    class: "form-control form-control-width",
                    value: 1
                }))
                )
                )
            )
            return tblCntr;
        },

        imageAttributeWidget: function () {

            var edtTablecntr = $('<div/>', {
                    class: "row-fluid"
                }
            ).append($('<div/>', { //Err Message Div
                id: "imageErrMsg"
            })).append($('<input/>', {
                id: "imgAlt",
                type: "text",
                class: "form-control form-control-link ",
                placeholder: "Alt Text",
            })).append($('<input/>', {
                id: "imgTarget",
                class: "form-control form-control-link ",
                type: "text",
                placeholder: "Link Target"
            })).append($('<input/>', {
                id: "imgHidden",
                type: "hidden"
            }))

            return edtTablecntr;

        },

        getHTMLTable: function (tblRows, tblColumns, attributes) {
            //Function to generate html table. Supplied arguments: tablerows-no.of rows, no.of columns, table attributes.
            var tableElement = $('<table/>', {class: "table"});
            for (var i = 0; i < attributes.length; i++) {
                if (attributes[i].value != '') {
                    if (attributes[i].attribute == "width" || attributes[i].attribute == "height")
                        tableElement.css(attributes[i].attribute, attributes[i].value);
                    else
                        tableElement.attr(attributes[i].attribute, attributes[i].value);
                }
            }
            for (var i = 1; i <= tblRows; i++) {
                var tblRow = $('<tr/>');
                for (var j = 1; j <= tblColumns; j++) {
                    var tblColumn = $('<td/>').html('&nbsp;');
                    tblColumn.appendTo(tblRow);
                }
                tblRow.appendTo(tableElement);
            }
            return tableElement;
        },

        init: function (options) {
            if ($(this).attr("id") === undefined || $(this).attr("id") === "") {
                $(this).attr("id", Date.now());
            }
            var fonts = {
                "Sans serif": "arial,helvetica,sans-serif",
                "Serif": "times new roman,serif",
                "Wide": "arial black,sans-serif",
                "Narrow": "arial narrow,sans-serif",
                "Comic Sans MS": "comic sans ms,sans-serif",
                "Courier New": "courier new,monospace",
                "Garamond": "garamond,serif",
                "Georgia": "georgia,serif",
                "Tahoma": "tahoma,sans-serif",
                "Trebuchet MS": "trebuchet ms,sans-serif",
                "Verdana": "verdana,sans-serif"
            };

            var styles = {
                "Heading 1": "<h1>",
                "Heading 2": "<h2>",
                "Heading 3": "<h3>",
                "Heading 4": "<h4>",
                "Heading 5": "<h5>",
                "Heading 6": "<h6>",
                "Paragraph": "<p>"
            };

            var fontsizes = {
                "Small": "2",
                "Normal": "3",
                "Medium": "4",
                "Large": "5",
                "Huge": "6"
            };

            var colors = [{name: 'Black', hex: '#000000'},
                {name: 'MediumBlack', hex: '#444444'},
                {name: 'LightBlack', hex: '#666666'},
                {name: 'DimBlack', hex: '#999999'},
                {name: 'Gray', hex: '#CCCCCC'},
                {name: 'DimGray', hex: '#EEEEEE'},
                {name: 'LightGray', hex: '#F3F3F3'},
                {name: 'White', hex: '#FFFFFF'},

                {name: 'libreak', hex: null},

                {name: 'Red', hex: '#FF0000'},
                {name: 'Orange', hex: '#FF9900'},
                {name: 'Yellow', hex: '#FFFF00'},
                {name: 'Lime', hex: '#00FF00'},
                {name: 'Cyan', hex: '#00FFFF'},
                {name: 'Blue', hex: '#0000FF'},
                {name: 'BlueViolet', hex: '#8A2BE2'},
                {name: 'Magenta', hex: '#FF00FF'},

                {name: 'libreak', hex: null},

                {name: 'LightPink', hex: '#FFB6C1'},
                {name: 'Bisque', hex: '#FCE5CD'},
                {name: 'BlanchedAlmond', hex: '#FFF2CC'},
                {name: 'LightLime', hex: '#D9EAD3'},
                {name: 'LightCyan', hex: '#D0E0E3'},
                {name: 'AliceBlue', hex: '#CFE2F3'},
                {name: 'Lavender', hex: '#D9D2E9'},
                {name: 'Thistle', hex: '#EAD1DC'},

                {name: 'LightCoral', hex: '#EA9999'},
                {name: 'Wheat', hex: '#F9CB9C'},
                {name: 'NavajoWhite', hex: '#FFE599'},
                {name: 'DarkSeaGreen', hex: '#B6D7A8'},
                {name: 'LightBlue', hex: '#A2C4C9'},
                {name: 'SkyBlue', hex: '#9FC5E8'},
                {name: 'LightPurple', hex: '#B4A7D6'},
                {name: 'PaleVioletRed', hex: '#D5A6BD'},

                {name: 'IndianRed', hex: '#E06666'},
                {name: 'LightSandyBrown', hex: '#F6B26B'},
                {name: 'Khaki', hex: '#FFD966'},
                {name: 'YellowGreen', hex: '#93C47D'},
                {name: 'CadetBlue', hex: '#76A5AF'},
                {name: 'DeepSkyBlue', hex: '#6FA8DC'},
                {name: 'MediumPurple', hex: '#8E7CC3'},
                {name: 'MediumVioletRed', hex: '#C27BA0'},

                {name: 'Crimson', hex: '#CC0000'},
                {name: 'SandyBrown', hex: '#E69138'},
                {name: 'Gold', hex: '#F1C232'},
                {name: 'MediumSeaGreen', hex: '#6AA84F'},
                {name: 'Teal', hex: '#45818E'},
                {name: 'SteelBlue', hex: '#3D85C6'},
                {name: 'SlateBlue', hex: '#674EA7'},
                {name: 'VioletRed', hex: '#A64D79'},

                {name: 'Brown', hex: '#990000'},
                {name: 'Chocolate', hex: '#B45F06'},
                {name: 'GoldenRod', hex: '#BF9000'},
                {name: 'Green', hex: '#38761D'},
                {name: 'SlateGray', hex: '#134F5C'},
                {name: 'RoyalBlue', hex: '#0B5394'},
                {name: 'Indigo', hex: '#351C75'},
                {name: 'Maroon', hex: '#741B47'},

                {name: 'DarkRed', hex: '#660000'},
                {name: 'SaddleBrown', hex: '#783F04'},
                {name: 'DarkGoldenRod', hex: '#7F6000'},
                {name: 'DarkGreen', hex: '#274E13'},
                {name: 'DarkSlateGray', hex: '#0C343D'},
                {name: 'Navy', hex: '#073763'},
                {name: 'MidnightBlue', hex: '#20124D'},
                {name: 'DarkMaroon', hex: '#4C1130'}];

            var specialchars = [{name: "Exclamation ", text: "!"},
                {name: "At", text: "@"},
                {name: "Hash", text: "#"},
                {name: "Percentage", text: "%"},
                {name: "Uppercase", text: "^"},
                {name: "Ampersand", text: "&"},
                {name: "Asterisk", text: "*"},
                {name: "OpenBracket", text: "("},
                {name: "CloseBracket", text: ")"},
                {name: "Underscore", text: "_"},
                {name: "Hiphen", text: "-"},
                {name: "Plus", text: "+"},
                {name: "Equalto", text: "="},
                {name: "OpenSquareBracket", text: "["},
                {name: "CloseSquareBracket", text: "]"},
                {name: "OpenCurly", text: "{"},
                {name: "CloseCurly", text: "}"},
                {name: "Pipe", text: "|"},
                {name: "Colon", text: ":"},
                {name: "Semicolon", text: ";"},
                {name: "Single quote", text: "&#39;"},
                {name: "Double quote", text: "&#34;"},
                {name: "Left single curly quote", text: "&lsquo;"},
                {name: "right single curly quote", text: "&rsquo;"},
                {name: "Forward-slash", text: "&#47;"},
                {name: "Back-slash", text: "&#92;"},
                {name: "LessThan", text: "<"},
                {name: "GreaterThan", text: ">"},
                {name: "QuestionMark", text: "?"},
                {name: "Tilda", text: "~"},
                {name: "Grave accent", text: "`"},
                {name: "Micron", text: "&micro;"},
                {name: "Paragraph sign", text: "&para;"},
                {name: "Plus/minus", text: "&plusmn;"},
                {name: "Trademark", text: "&trade;"},
                {name: "Copyright", text: "&copy;"},
                {name: "Registered", text: "&reg;"},
                {name: "Section", text: "&sect;"},
                {name: "right double angle quotes", text: "&#187;"},
                {name: "fraction one quarter", text: "&#188;"},
                {name: "fraction one half", text: "&#189;"},
                {name: "fraction three quarters", text: "&#190;"},
                {name: "Dollar", text: "$"},
                {name: "Euro", text: "&euro;"},
                {name: "Pound", text: "&pound;"},
                {name: "Yen", text: "&yen;"},
                {name: "Cent", text: "&#162;"},
                {name: "IndianRupee", text: "&#8377;"},];

            var menuItems = {
                'fonteffects': true,
                'texteffects': true,
                'aligneffects': true,
                'textformats': true,
                'actions': true,
                'insertoptions': true,
                'extraeffects': true,
                'advancedoptions': true,
                'screeneffects': true,

                'fonts': {
                    "select": true,
                    "default": "Font",
                    "tooltip": "Fonts",
                    "commandname": "fontName",
                    "custom": null
                },

                'styles': {
                    "select": true,
                    "default": "Formatting",
                    "tooltip": "Paragraph Format",
                    "commandname": "formatBlock",
                    "custom": null
                },

                'font_size': {
                    "select": true,
                    "default": "Font size",
                    "tooltip": "Font Size",
                    "commandname": "fontSize",
                    "custom": null
                },

                'color': {
                    "text": "A",
                    "icon": "fa fa-font",
                    "tooltip": "Text/Background Color",
                    "commandname": null,
                    "custom": function (button) {
                        var editor = $(this);
                        var flag = 0;
                        var paletteCntr = $('<div/>', {
                            id: "paletteCntr",
                            class: "activeColour",
                            css: {"display": "none", "width": "335px"}
                        }).click(function (event) {
                            event.stopPropagation();
                        });
                        var paletteDiv = $('<div/>', {id: "colorpellete"});
                        var palette = $('<ul />', {id: "color_ui"}).append($('<li />').css({
                            "width": "145px",
                            "display": "Block",
                            "height": "25px"
                        }).html('<div>Text Color</div>'));
                        var bgPalletteDiv = $('<div/>', {id: "bg_colorpellete"});
                        var bgPallette = $('<ul />', {id: "bgcolor_ui"}).append($('<li />').css({
                            "width": "145px",
                            "display": "Block",
                            "height": "25px"
                        }).html('<div>Background Color</div>'));
                        if (editor.data("colorBtn")) {
                            flag = 1;
                            editor.data("colorBtn", null);
                        }
                        else
                            editor.data("colorBtn", 1);
                        if (flag == 0) {
                            for (var i = 0; i < colors.length; i++) {
                                if (colors[i].hex != null) {
                                    palette.append($('<li />').css('background-color', colors[i].hex).mousedown(function (event) {
                                        event.preventDefault();
                                    }).click(function () {
                                        var hexcolor = methods.rgbToHex.apply(this, [$(this).css('background-color')]);
                                        methods.restoreSelection.apply(this);
                                        methods.setStyleWithCSS.apply(this);
                                        document.execCommand('forecolor', false, hexcolor);
                                        $('#paletteCntr').remove();

                                        editor.data("colorBtn", null);
                                    }));

                                    bgPallette.append($('<li />').css('background-color', colors[i].hex).mousedown(function (event) {
                                        event.preventDefault();
                                    }).click(function () {
                                        var hexcolor = methods.rgbToHex.apply(this, [$(this).css('background-color')]);
                                        methods.restoreSelection.apply(this);
                                        methods.setStyleWithCSS.apply(this);
                                        document.execCommand('backColor', false, hexcolor);
                                        $('#paletteCntr').remove();
                                        editor.data("colorBtn", null);
                                    }));
                                }
                                else {
                                    palette.append($('<li />').css({
                                        "width": "145px",
                                        "display": "Block",
                                        "height": "5px"
                                    }));
                                    bgPallette.append($('<li />').css({
                                        "width": "145px",
                                        "display": "Block",
                                        "height": "5px"
                                    }));
                                }
                            }
                            palette.appendTo(paletteDiv);
                            bgPallette.appendTo(bgPalletteDiv);
                            paletteDiv.appendTo(paletteCntr);
                            bgPalletteDiv.appendTo(paletteCntr)
                            paletteCntr.insertAfter(button);
                            $('#paletteCntr').slideDown('slow');
                        }
                        else
                            $('#paletteCntr').remove();
                    }
                },

                'bold': {
                    "text": "B",
                    "icon": "fa fa-bold",
                    "tooltip": "Bold",
                    "commandname": "bold",
                    "custom": null
                },

                'italics': {
                    "text": "I",
                    "icon": "fa fa-italic",
                    "tooltip": "Italics",
                    "commandname": "italic",
                    "custom": null
                },

                'underline': {
                    "text": "U",
                    "icon": "fa fa-underline",
                    "tooltip": "Underline",
                    "commandname": "underline",
                    "custom": null
                },

                'strikeout': {
                    "text": "Strikeout",
                    "icon": "fa fa-strikethrough",
                    "tooltip": "Strike Through",
                    "commandname": "strikeThrough",
                    "custom": null
                },

                'ol': {
                    "text": "N",
                    "icon": "fa fa-list-ol",
                    "tooltip": "Insert/Remove Numbered List",
                    "commandname": "insertorderedlist",
                    "custom": null
                },

                'ul': {
                    "text": "Bullet",
                    "icon": "fa fa-list-ul",
                    "tooltip": "Insert/Remove Bulleted List",
                    "commandname": "insertunorderedlist",
                    "custom": null
                },

                'undo': {
                    "text": "undo",
                    "icon": "fa fa-undo",
                    "tooltip": "Undo",
                    "commandname": "undo",
                    "custom": null
                },

                'redo': {
                    "text": "redo",
                    "icon": "fa fa-repeat",
                    "tooltip": "Redo",
                    "commandname": "redo",
                    "custom": null
                },

                'l_align': {
                    "text": "leftalign",
                    "icon": "fa fa-align-left",
                    "tooltip": "Align Left",
                    "commandname": "justifyleft",
                    "custom": null
                },

                'r_align': {
                    "text": "rightalign",
                    "icon": "fa fa-align-right",
                    "tooltip": "Align Right",
                    "commandname": "justifyright",
                    "custom": null
                },

                'c_align': {
                    "text": "centeralign",
                    "icon": "fa fa-align-center",
                    "tooltip": "Align Center",
                    "commandname": "justifycenter",
                    "custom": null
                },

                'justify': {
                    "text": "justify",
                    "icon": "fa fa-align-justify",
                    "tooltip": "Justify",
                    "commandname": "justifyfull",
                    "custom": null
                },

                'unlink': {
                    "text": "Unlink",
                    "icon": "fa fa-unlink",
                    "tooltip": "Unlink",
                    "commandname": "unlink",
                    "custom": null
                },

                'insert_link': {
                    "modal": true,
                    "modalId": "InsertLink_" + $(this).attr("id"),
                    "icon": "fa fa-link",
                    "tooltip": "Insert Link",
                    "modalHeader": "Insert Hyperlink",
                    "modalBody": $('<div/>', {
                        class: "form-group"
                    }).append($('<div/>', {
                        id: "errMsg_" + $(this).attr("id")
                    })).append($('<input/>', {
                        type: "text",
                        id: "inputText_" + $(this).attr("id"),
                        class: "form-control form-control-link ",
                        placeholder: "Text to Display",
                    })).append($('<input/>', {
                        type: "text",
                        id: "inputUrl_" + $(this).attr("id"),
                        required: true,
                        class: "form-control form-control-link",
                        placeholder: "Enter URL"
                    })),
                    "beforeLoad": function () {
                        editorObj = this;
                        var _idSuffix = "_" + this.attr("id");
                        $('#inputText' + _idSuffix);
                        $('#inputUrl' + _idSuffix);
                        $(".alert").alert("close");
                        if ($(editorObj).data('currentRange') != '') {
                            $('#inputText_' + _idSuffix).val($(editorObj).data('currentRange'));
                        }
                    },
                    "onSave": function () {
                        var urlPattern = /(http|ftp|https):\/\/[\w-]+(\.[\w-]+)+([\w.,@?^=%&amp;:\/~+#-]*[\w@?^=%&amp;\/~+#-])?/;
                        var _idSuffix = "_" + editorObj.attr("id");
                        var targetText = $('#inputText' + _idSuffix).val();
                        var targetURL = $('#inputUrl' + _idSuffix).val();
                        var range = $(editorObj).data('currentRange');
                        if (targetURL == '') {
                            methods.showMessage.apply(editorObj, ["errMsg", "Please enter url"]);
                            return false;
                        }
                        if (!targetURL.match(urlPattern)) {
                            methods.showMessage.apply(editorObj, ["errMsg", "Enter valid url"]);
                            return false;
                        }
                        if (range == '' && targetText == '') {
                            targetText = targetURL;
                        }
                        if (navigator.userAgent.match(/MSIE/i) || navigator.userAgent.match(/Windows NT.*Trident\//)) {
                            var targetLink = '<a href="' + targetURL + '" target="_blank">' + targetText + '</a>';
                            methods.restoreSelection.apply(editorObj, [targetLink, 'html']);
                        }
                        else {
                            methods.restoreSelection.apply(editorObj, [targetText]);
                            document.execCommand('createLink', false, targetURL);
                        }
                        $(editorObj).data("editor").find('a[href="' + targetURL + '"]').each(function () {
                            $(this).attr("target", "_blank");
                        });
                        $(".alert").alert("close");
                        $("#InsertLink" + _idSuffix).modal("hide");
                        $(editorObj).data("editor").focus();
                        return false;
                    }
                },

                'insert_img': {
                    "modal": true,
                    "modalId": "InsertImage_" + $(this).attr("id"),
                    "icon": "fa fa-picture-o",
                    "tooltip": "Insert Image",
                    "modalHeader": "Insert Image",
                    "modalBody": methods.imageWidget.apply(this),
                    "beforeLoad": function () {
                        editorObj = this;
                        var _idSuffix = editorObj.attr("id");
                        $('#imageURL_' + _idSuffix).val("");
                        $("#uploadImageBar_" + _idSuffix + " :input").val("");
                        $('#imageList_' + _idSuffix).data('current', "");
                    },
                    "onSave": function () {
                        var _idSuffix = "_" + editorObj.attr("id");
                        methods.restoreSelection.apply(this);
                        if ($('#imageList' + _idSuffix).data('current')) {
                            if (navigator.userAgent.match(/MSIE/i) || navigator.userAgent.match(/Windows NT.*Trident\//)) {
                                var imageStr = '<img src="' + $('#imageList' + _idSuffix).data('current') + '"/>'
                                methods.restoreSelection.apply(this, [imageStr, 'html'])
                            }
                            else {
                                document.execCommand('insertimage', false, $('#imageList' + _idSuffix).data('current'));
                            }
                        }
                        else {
                            methods.showMessage.apply(this, ["imgErrMsg" + _idSuffix, "Please select an image"]);
                            return false;
                        }
                        $("#InsertImage" + _idSuffix).modal("hide");
                        $(this).data("editor").focus();
                    }
                },

                'insert_table': {
                    "modal": true,
                    "modalId": "InsertTable_" + $(this).attr("id"),
                    "icon": "fa fa-table",
                    "tooltip": "Insert Table",
                    "modalHeader": "Insert Table",
                    "modalBody": methods.tableWidget.apply(this),
                    "beforeLoad": function () {
                        editorObj = this;
                        $('#tblForm_' + editorObj.attr("id")).each(function () {
                            this.reset();
                        });
                    },
                    "onSave": function () {
                        _idSuffix = "_" + editorObj.attr("id");
                        methods.restoreSelection.apply(this);
                        var tblRows = $('#tblRows' + _idSuffix).val();
                        var tblColumns = $('#tblColumns' + _idSuffix).val();
                        var tblWidth = $('#tblWidth' + _idSuffix).val();
                        var tblHeight = $('#tblHeight' + _idSuffix).val();
                        var tblAlign = $('#tblAlign' + _idSuffix).val();
                        var tblBorder = $('#tblBorder' + _idSuffix).val();
                        var tblCellspacing = $('#tblCellspacing' + _idSuffix).val();
                        var tblCellpadding = $('#tblCellpadding' + _idSuffix).val();
                        var intReg = /^[0-9]+$/;
                        var cssReg = /^auto$|^[+-]?[0-9]+\.?([0-9]+)?(px|em|ex|%|in|cm|mm|pt|pc)?$/ig;
                        var numReg = /^[0-9]+\.?([0-9])?$/;

                        if (!tblRows.match(intReg)) {
                            methods.showMessage.apply(this, ["tblErrMsg", "Rows must be a positive number"]);
                            return false;
                        }
                        if (!tblColumns.match(intReg)) {
                            methods.showMessage.apply(this, ["tblErrMsg", "Columns must be a positive number"]);
                            return false;
                        }
                        if (tblWidth != "" && !tblWidth.match(cssReg)) {
                            methods.showMessage.apply(this, ["tblErrMsg", "Please enter positive number with or without a valid CSS measurement unit (px,em,ex,%,in,cm,mm,pt,pc)"]);
                            return false;
                        }
                        if (tblHeight != "" && !tblHeight.match(cssReg)) {
                            methods.showMessage.apply(this, ["tblErrMsg", "Please enter positive number with or without a valid CSS measurement unit (px,em,ex,%,in,cm,mm,pt,pc)"]);
                            return false;
                        }
                        if (tblBorder != "" && !tblBorder.match(numReg)) {
                            methods.showMessage.apply(this, ["tblErrMsg", "Border size must be a positive number"]);
                            return false;
                        }
                        if (tblCellspacing != "" && !tblCellspacing.match(numReg)) {
                            methods.showMessage.apply(this, ["tblErrMsg", "Cell spacing must be a positive number"]);
                            return false;
                        }
                        if (tblCellpadding != "" && !tblCellpadding.match(numReg)) {
                            methods.showMessage.apply(this, ["tblErrMsg", "Cell padding must be a positive number"]);
                            return false;
                        }

                        var htmlTableCntr = $('<div/>');
                        var tblAttributes = [
                            {attribute: "align", value: tblAlign},
                            {attribute: "border", value: tblBorder},
                            {attribute: "cellspacing", value: tblCellspacing},
                            {attribute: "cellpadding", value: tblCellpadding},
                            {attribute: "width", value: tblWidth},
                            {attribute: "height", value: tblHeight},
                        ];
                        var htmlTable = methods.getHTMLTable.apply(this, [tblRows, tblColumns, tblAttributes]);
                        htmlTable.appendTo(htmlTableCntr);
                        if (navigator.userAgent.match(/MSIE/i) || navigator.userAgent.match(/Windows NT.*Trident\//))
                            methods.restoreSelection.apply(this, [htmlTableCntr.html(), 'html']);
                        else
                            document.execCommand('insertHTML', false, htmlTableCntr.html());
                        $("#InsertTable" + _idSuffix).modal("hide");
                        $(this).data("editor").focus();
                    }
                },

                'hr_line': {
                    "text": "HR",
                    "icon": "fa fa-minus",
                    "tooltip": "Horizontal Rule",
                    "commandname": "insertHorizontalRule",
                    "custom": null
                },

                'block_quote': {
                    "text": "Block Quote",
                    "icon": "fa fa-quote-right",
                    "tooltip": "Block Quote",
                    "commandname": null,
                    "custom": function () {
                        methods.setStyleWithCSS.apply(this);
                        if (navigator.userAgent.match(/MSIE/i) || navigator.userAgent.match(/Windows NT.*Trident\//)) {
                            document.execCommand('indent', false, null);
                        }
                        else {
                            document.execCommand('formatBlock', false, '<blockquote>');
                        }
                    }
                },

                'indent': {
                    "text": "Indent",
                    "icon": "fa fa-indent",
                    "tooltip": "Increase Indent",
                    "commandname": "indent",
                    "custom": null
                },

                'outdent': {
                    "text": "Outdent",
                    "icon": "fa fa-outdent",
                    "tooltip": "Decrease Indent",
                    "commandname": "outdent",
                    "custom": null
                },

                'print': {
                    "text": "Print",
                    "icon": "fa fa-print",
                    "tooltip": "Print",
                    "commandname": null,
                    "custom": function () {
                        oDoc = $(this).data("editor");
                        var oPrntWin = window.open("", "_blank", "width=450,height=470,left=400,top=100,menubar=yes,toolbar=no,location=no,scrollbars=yes");
                        oPrntWin.document.open();
                        oPrntWin.document.write("<!doctype html><html><head><title>Print</title></head><body onload=\"print();\">" + oDoc.html() + "</body></html>");
                        oPrntWin.document.close();
                    }
                },

                'rm_format': {
                    "text": "Remove format",
                    "icon": "fa fa-eraser",
                    "tooltip": "Remove Formatting",
                    "commandname": "removeformat",
                    "custom": null
                },

                'select_all': {
                    "text": "Select all",
                    "icon": "fa fa-file-text",
                    "tooltip": "Select All",
                    "commandname": null,
                    "custom": function () {
                        document.execCommand("selectall", null, null);
                    }
                },

                'togglescreen': {
                    "text": "Toggle Screen",
                    "icon": "fa fa-arrows-alt",
                    "tooltip": "Toggle Screen",
                    "commandname": null,
                    "custom": function (button, parameters) {
                        $(this).data("editor").parent().toggleClass('fullscreen');
                        var statusdBarHeight = 0;
                        if ($(this).data("statusBar").length) {
                            statusdBarHeight = $(this).data("statusBar").height();
                        }
                        if ($(this).data("editor").parent().hasClass('fullscreen'))
                            $(this).data("editor").css({"height": $(this).data("editor").parent().height() - ($(this).data("menuBar").height() + statusdBarHeight) - 13});
                        else
                            $(this).data("editor").css({"height": ""});
                    }
                },

                'splchars': {
                    "text": "S",
                    "icon": "fa fa-asterisk",
                    "tooltip": "Insert Special Character",
                    "commandname": null,
                    "custom": function (button) {
                        methods.restoreIESelection.apply(this);
                        var flag = 0;
                        var splCharDiv = $('<div/>', {
                            id: "specialchar",
                            class: "specialCntr",
                            css: {"display": "none"}
                        }).click(function (event) {
                            event.stopPropagation();
                        });
                        var splCharUi = $('<ul />', {id: "special_ui"});
                        var editor_Content = this;
                        if ($(this).data("editor").data("splcharsBtn")) {
                            flag = 1;
                            $(this).data("editor").data("splcharsBtn", null);
                        }
                        else
                            $(this).data("editor").data("splcharsBtn", 1);

                        if (flag == 0) {
                            for (var i = 0; i < specialchars.length; i++) {
                                splCharUi.append($('<li />').html(specialchars[i].text).attr('title', specialchars[i].name).mousedown(function (event) {
                                    event.preventDefault();
                                }).click(function (event) {
                                    if (navigator.userAgent.match(/MSIE/i) || navigator.userAgent.match(/Windows NT.*Trident\//)) {
                                        var specCharHtml = $(this).html();
                                        methods.insertTextAtSelection.apply(this, [specCharHtml, 'html']);
                                    }
                                    else {
                                        document.execCommand('insertHTML', false, $(this).html());
                                    }
                                    $('#specialchar').remove();
                                    $(editor_Content).data("editor").data("splcharsBtn", null);
                                }));
                            }
                            splCharUi.prependTo(splCharDiv);
                            splCharDiv.insertAfter(button)
                            $('#specialchar').slideDown('slow');
                        }
                        else
                            $('#specialchar').remove();
                    }
                },

                'source': {
                    "text": "Source",
                    "icon": "fa fa-code",
                    "tooltip": "Source",
                    "commandname": null,
                    "custom": function (button, params) {
                        methods.getSource.apply(this, [button, params])
                    }
                },
                "params": {"obj": null},
            };

            var menuGroups = {
                'texteffects': ['bold', 'italics', 'underline', 'color'],
                'aligneffects': ['l_align', 'c_align', 'r_align', 'justify'],
                'textformats': ['indent', 'outdent', 'block_quote', 'ol', 'ul'],
                'fonteffects': ['fonts', 'styles', 'font_size'],
                'actions': ['undo', 'redo'],
                'insertoptions': ['insert_link', 'unlink', 'insert_img', 'insert_table'],
                'extraeffects': ['strikeout', 'hr_line', 'splchars'],
                'advancedoptions': ['print', 'rm_format', 'select_all', 'source'],
                'screeneffects': ['togglescreen']
            };

            var settings = $.extend({
                'texteffects': true,
                'aligneffects': true,
                'textformats': true,
                'fonteffects': true,
                'actions': true,
                'insertoptions': true,
                'extraeffects': true,
                'advancedoptions': true,
                'screeneffects': true,
                'bold': true,
                'italics': true,
                'underline': true,
                'ol': true,
                'ul': true,
                'undo': true,
                'redo': true,
                'l_align': true,
                'r_align': true,
                'c_align': true,
                'justify': true,
                'insert_link': true,
                'unlink': true,
                'insert_img': true,
                'hr_line': true,
                'block_quote': true,
                'source': true,
                'strikeout': true,
                'indent': true,
                'outdent': true,
                'fonts': fonts,
                'styles': styles,
                'print': true,
                'rm_format': true,
                'status_bar': true,
                'font_size': fontsizes,
                'color': colors,
                'splchars': specialchars,
                'insert_table': true,
                'select_all': true,
                'togglescreen': true
            }, options);

            var containerDiv = $("<div/>", {class: "row-fluid Editor-container"});
            var $this = $(this).hide();
            $this.after(containerDiv);
            var menuBar = $("<div/>", {
                id: "menuBarDiv_" + $(this).attr("id"),
                class: "row-fluid line-control-menu-bar"
            }).prependTo(containerDiv);
            var editor = $("<div/>", {
                class: "Editor-editor",
                css: {overflow: "auto"},
                contenteditable: "true"
            }).appendTo(containerDiv);
            var statusBar = $("<div/>", {
                id: "statusbar_" + $(this).attr("id"),
                class: "row-fluid line-control-status-bar",
                unselectable: "on",
            }).appendTo(containerDiv);
            $(this).data("menuBar", menuBar);
            $(this).data("editor", editor);
            $(this).data("statusBar", statusBar);
            var editor_Content = this;
            if (settings['status_bar']) {
                editor.keyup(function (event) {
                    var wordCount = methods.getWordCount.apply(editor_Content);
                    var charCount = methods.getCharCount.apply(editor_Content);
                    $(editor_Content).data("statusBar").html('<div class="label">' + 'Words : ' + wordCount + '</div>');
                    $(editor_Content).data("statusBar").append('<div class="label">' + 'Characters : ' + charCount + '</div>');
                });
            }


            for (var item in menuItems) {
                if (!settings[item]) { //if the display is not set to true for the button in the settings.
                    if (settings[item] in menuGroups) {
                        for (var each in menuGroups[item]) {
                            settings[each] = false;
                        }
                    }
                    continue;
                }
                if (item in menuGroups) {
                    var group = $("<div/>", {class: "btn-group"});
                    for (var index = 0; index < menuGroups[item].length; index++) {
                        var value = menuGroups[item][index];
                        if (settings[value]) {
                            var menuItem = methods.createMenuItem.apply(this, [menuItems[value], settings[value], true]);
                            group.append(menuItem);
                        }
                        settings[value] = false;
                    }
                    menuBar.append(group);
                }
                else {
                    var menuItem = methods.createMenuItem.apply(this, [menuItems[item], settings[item], true]);
                    menuBar.append(menuItem);
                }
            }

            //For contextmenu
            $(document.body).mousedown(function (event) {
                var target = $(event.target);
                if (!target.parents().andSelf().is('#context-menu')) { // Clicked outside
                    $('#context-menu').remove();
                }
                if (!target.parents().andSelf().is('#specialchar') && (target.closest('a').html() != '<i class="fa fa-asterisk"></i>')) { //Clicked outside
                    if ($("#specialchar").is(':visible')) {
                        $(editor_Content).data("editor").data("splcharsBtn", null);
                        $('#specialchar').remove();
                    }
                }
                if (!target.parents().andSelf().is('#paletteCntr') && (target.closest('a').html() != '<i class="fa fa-font"></i>')) { //Clicked outside
                    if ($("#paletteCntr").is(':visible')) {
                        $(editor_Content).data("editor").data("colorBtn", null);
                        $('#paletteCntr').remove();
                    }
                }
            });
            editor.bind("contextmenu", function (e) {
                if ($('#context-menu').length)
                    $('#context-menu').remove();
                var cMenu = $('<div/>', {
                    id: "context-menu"
                }).css({
                    position: "absolute", top: e.pageY, left: e.pageX, "z-index": 9999
                }).click(function (event) {
                    event.stopPropagation();
                });
                var cMenuUl = $('<ul/>', {class: "dropdown-menu on", "role": "menu"});
                e.preventDefault();
                if ($(e.target).is('a')) {
                    methods.createLinkContext.apply(this, [e, cMenuUl]);
                    cMenuUl.appendTo(cMenu);
                    cMenu.appendTo('body');
                }
                else if ($(e.target).is('td') || $(e.target).is("th")) {
                    methods.createTableContext.apply(this, [e, cMenuUl]);
                    cMenuUl.appendTo(cMenu);
                    cMenu.appendTo('body');
                }
                else if ($(e.target).is('img')) {

                    methods.createImageContext.apply(this, [e, cMenuUl]);
                    cMenuUl.appendTo(cMenu);
                    cMenu.appendTo('body');
                }
            });
        },
        createLinkContext: function (event, cMenuUl) {
            var cMenuli = $('<li/>').append($('<a/>', {
                id: "rem_link",
                "href": "javascript:void(0)",
                "text": "RemoveLink"
            }).click(function (e) {
                return function () {
                    $(e.target).contents().unwrap();
                    $('#context-menu').remove();
                }
            }(event)));
            cMenuli.appendTo(cMenuUl);

        },

        createImageContext: function (event, cMenuUl) {
            var cModalId = "imgAttribute";
            var cModalHeader = "Image Attributes";
            var imgModalBody = methods.imageAttributeWidget.apply(this, ["edit"]);
            var onSave = function () {
                var urlPattern = /(http|ftp|https):\/\/[\w-]+(\.[\w-]+)+([\w.,@?^=%&amp;:\/~+#-]*[\w@?^=%&amp;\/~+#-])?/;
                var imageAlt = $('#imgAlt').val();
                var imageTarget = $('#imgTarget').val();
                if (imageAlt == "") {
                    methods.showMessage.apply(this, ["imageErrMsg", "Please enter image alternative text"]);
                    return false;
                }
                if (imageTarget != "" && !imageTarget.match(urlPattern)) {
                    methods.showMessage.apply(this, ["imageErrMsg", "Please enter valid url"]);
                    return false;
                }
                if ($("#imgHidden").val() != "") {
                    var imgId = $("#imgHidden").val();
                    $("#" + imgId).attr('alt', imageAlt);
                    if (imageTarget != "") {
                        if ($("#wrap_" + imgId).length)
                            $("#wrap_" + imgId).attr("href", imageTarget);
                        else
                            $("#" + imgId).wrap($('<a/>', {id: "wrap_" + imgId, href: imageTarget, target: "_blank"}));
                    }
                    else {
                        if ($("#wrap_" + imgId).length)
                            $("#" + imgId).unwrap();
                    }
                }
                $("#imgAttribute").modal("hide");
                editorObj.data("editor").focus();
            };
            methods.createModal.apply(this, [cModalId, cModalHeader, imgModalBody, onSave]);
            var modalTrigger = $('<a/>', {
                href: "#" + cModalId,
                "text": "Image Attributes",
                "data-toggle": "modal"
            }).click(function (e) {
                return function () {
                    $('#context-menu').remove();
                    var stamp = (new Date).getTime();
                    $('#imgAlt').val($(e.target).closest("img").attr("alt"));
                    $('#imgTarget').val('');

                    if (typeof $(e.target).closest("img").attr("id") !== "undefined") {
                        var identifier = $(e.target).closest("img").attr("id");
                        $('#imgHidden').val(identifier);
                        if ($('#wrap_' + identifier).length)
                            $('#imgTarget').val($('#wrap_' + identifier).attr("href"));
                        else
                            $('#imgTarget').val('');
                    }
                    else {
                        $(e.target).closest("img").attr("id", "img_" + stamp)
                        $('#imgHidden').val("img_" + stamp);
                    }

                }
            }(event));
            cMenuUl.append($('<li/>').append(modalTrigger))
                .append($('<li/>').append($('<a/>', {text: "Remove Image"}).click(
                    function (e) {
                        return function () {
                            $('#context-menu').remove();
                            $(e.target).closest("img").remove();
                        }
                    }(event))));
        },

        createTableContext: function (event, cMenuUl) {
            var _idSuffix = "_" + editorObj.attr("id") + "_Edt";
            var modalId = "editProperties_" + editorObj.attr("id");
            $("#" + modalId).remove();
            var modalHeader = "Table Properties";
            var tblModalBody = methods.tableWidget.apply(this, ["edit"]);
            var onSave = function () {
                var tblWidthEdt = $('#tblWidth' + _idSuffix).val();
                var tblHeightEdt = $('#tblHeight' + _idSuffix).val();
                var tblBorderEdt = $('#tblBorder' + _idSuffix).val();
                var tblAlignEdt = $('#tblAlign' + _idSuffix).val();
                var tblCellspacingEdt = $('#tblCellspacing' + _idSuffix).val();
                var tblCellpaddingEdt = $('#tblCellpadding' + _idSuffix).val();
                var tblEdtCssReg = /^auto$|^[+-]?[0-9]+\.?([0-9]+)?(px|em|ex|%|in|cm|mm|pt|pc)?$/ig;
                var tblEdtNumReg = /^[0-9]+\.?([0-9])?$/;
                if (tblWidthEdt != "" && !tblWidthEdt.match(tblEdtCssReg)) {
                    methods.showMessage.apply(this, ["tblErrMsgEdt", "Please enter positive number with or without a valid CSS measurement unit (px,em,ex,%,in,cm,mm,pt,pc)"]);
                    return false;
                }
                if (tblHeightEdt != "" && !tblHeightEdt.match(tblEdtCssReg)) {
                    methods.showMessage.apply(this, ["tblErrMsgEdt", "Please enter positive number with or without a valid CSS measurement unit (px,em,ex,%,in,cm,mm,pt,pc)"]);
                    return false;
                }
                if (tblBorderEdt != "" && !tblBorderEdt.match(tblEdtNumReg)) {
                    methods.showMessage.apply(this, ["tblErrMsgEdt", "Border size must be a positive number"]);
                    return false;
                }
                if (tblCellspacingEdt != "" && !tblCellspacingEdt.match(tblEdtNumReg)) {
                    methods.showMessage.apply(this, ["tblErrMsgEdt", "Cell spacing must be a positive number"]);
                    return false;
                }
                if (tblCellpaddingEdt != "" && !tblCellpaddingEdt.match(tblEdtNumReg)) {
                    methods.showMessage.apply(this, ["tblErrMsgEdt", "Cell padding must be a positive number"]);
                    return false;
                }
                $(event.target).closest('table').css('width', tblWidthEdt);
                if (tblHeightEdt != "")
                    $(event.target).closest('table').css('height', tblHeightEdt);
                $(event.target).closest('table').attr('align', tblAlignEdt);
                $(event.target).closest('table').attr('border', tblBorderEdt);
                $(event.target).closest('table').attr('cellspacing', tblCellspacingEdt);
                $(event.target).closest('table').attr('cellpadding', tblCellpaddingEdt);
                $("#" + modalId).modal("hide");
                editorObj.data("editor").focus();
            };
            methods.createModal.apply(this, [modalId, modalHeader, tblModalBody, onSave]);
            var modalTrigger = $('<a/>', {
                href: "#" + modalId,
                "text": "Table Properties",
                "data-toggle": "modal"
            }).click(function (e) {
                return function () {
                    var _idSuffix = "_" + editorObj.attr("id") + "_Edt";
                    $('#context-menu').remove();
                    $('#tblRows' + _idSuffix).val($(e.target).closest('table').prop('rows').length);
                    $('#tblColumns' + _idSuffix).val($(e.target).closest('table').find('tr')[0].cells.length);
                    $('#tblRows' + _idSuffix).attr('disabled', 'disabled');
                    $('#tblColumns' + _idSuffix).attr('disabled', 'disabled');
                    $('#tblWidth' + _idSuffix).val($(e.target).closest('table').get(0).style.width);
                    $('#tblHeight' + _idSuffix).val($(e.target).closest('table').get(0).style.height);
                    $('#tblAlign' + _idSuffix).val($(e.target).closest('table').attr("align"));
                    $('#tblBorder' + _idSuffix).val($(e.target).closest('table').attr("border"));
                    $('#tblCellspacing' + _idSuffix).val($(e.target).closest('table').attr("cellspacing"));
                    $('#tblCellpadding' + _idSuffix).val($(e.target).closest('table').attr("cellpadding"));


                }
            }(event));

            cMenuUl.append($('<li/>', {class: "dropdown-submenu", css: {display: "block"}})
                .append($('<a/>', {"tabindex": "-1", href: "javascript:void(0)", "text": "Row"}))
                .append($('<ul/>', {class: "dropdown-menu"})
                    .append($('<li/>').append($('<a/>', {
                        id: "tbl_addrow",
                        "href": "javascript:void(0)",
                        "text": "Add Row"
                    }).click(function (e) {
                        return function () {
                            $("#context-menu").remove();
                            var selectedRow = $(e.target).closest("tr");
                            var newRow = $("<tr/>");
                            selectedRow.children().each(function () {
                                var newColumn = $("<" + $(this).prop("nodeName") + "/>").html("&nbsp;");
                                newRow.append(newColumn);
                            });
                            selectedRow.after(newRow);
                        }
                    }(event))))
                    .append($('<li/>').append($('<a/>', {text: "Remove Row"}).click(
                        function (e) {
                            return function () {
                                $('#context-menu').remove();
                                $(e.target).closest("tr").remove();
                            }
                        }(event))))
                )).append($('<li/>', {class: "dropdown-submenu", css: {display: "block"}})
                .append($('<a/>', {"tabindex": "-1", href: "javascript:void(0)", "text": "Column"}))
                .append($('<ul/>', {class: "dropdown-menu"})
                    .append($('<li/>').append($('<a/>', {
                        id: "tbl_addcolumn",
                        "href": "javascript:void(0)",
                        "text": "Add Column",
                    }).click(function (e) {
                        return function () {
                            $('#context-menu').remove();
                            var selectedCell = $(e.target);
                            var columnIndex = selectedCell.siblings().addBack().index(selectedCell);
                            selectedCell.closest("table").find("tr").each(function () {
                                var cellInSelectedColumn = $(this).children(":eq(" + columnIndex + ")");
                                var newCell = $("<" + cellInSelectedColumn.prop("nodeName") + "/>").html("&nbsp;");
                                cellInSelectedColumn.after(newCell);
                            });
                        }
                    }(event))))
                    .append($('<li/>').append($('<a/>', {text: "Remove Column"}).click(
                        function (e) {
                            return function () {
                                $('#context-menu').remove();
                                var selectedCell = $(e.target);
                                var columnIndex = selectedCell.siblings().addBack().index(selectedCell);
                                selectedCell.closest("table").find("tr").each(function () {
                                    $(this).children(":eq(" + columnIndex + ")").remove();
                                });
                            }
                        }(event))))
                ));
            cMenuUl.append($('<li/>').append(modalTrigger))
                .append($('<li/>', {class: "divider"}))
                .append($('<li/>').append($('<a/>', {text: "Remove Table"}).click(
                    function (e) {
                        return function () {
                            $('#context-menu').remove();
                            $(e.target).closest("table").remove();
                        }
                    }(event))));

        },

        createModal: function (modalId, modalHeader, modalBody, onSave) {
            //Create a Modal for the button.
            var modalTrigger = $('<a/>', {
                href: "#" + modalId,
                role: "button",
                class: "btn btn-default",
                "data-toggle": "modal"
            });
            var modalElement = $('<div/>', {
                id: modalId,
                class: "modal fade",
                tabindex: "-1",
                role: "dialog",
                "aria-labelledby": "h3_" + modalId,
                "aria-hidden": "true"
            }).append($('<div>', {
                    class: "modal-dialog"
                }).append($('<div>', {
                    class: "modal-content"
                }).append($('<div>', {
                    class: "modal-header"
                }).append($('<button/>', {
                    type: "button",
                    class: "close",
                    "data-dismiss": "modal",
                    "aria-hidden": "true"
                }).html('x')
                ).append($('<h3/>', {
                    id: "h3_" + modalId
                }).html(modalHeader))
                ).append($('<div>', {
                    class: "modal-body"
                }).append(modalBody)
                ).append($('<div>', {
                    class: "modal-footer"
                }).append($('<button/>', {
                    type: "button",
                    class: "btn btn-default",
                    "data-dismiss": "modal",
                    "aria-hidden": "true"
                }).html('Cancel')
                ).append($('<button/>', {
                    type: "button",
                    class: "btn btn-success",
                }).html('Done').mousedown(function (e) {
                    e.preventDefault();
                }).click(function (obj) {
                    return function () {
                        onSave.apply(obj)
                    }
                }(this)))
                )
                )
            );
            modalElement.appendTo("body");
            return modalTrigger;
        },

        createMenuItem: function (itemSettings, options, returnElement) {
            //Function to perform multiple actions.supplied arguments: itemsettings-list of buttons and button options, options: options for select input, returnelement: boolean.
            //1.Create Select Options using Bootstrap Dropdown.
            //2.Create modal dialog using bootstrap options
            //3.Create menubar buttons binded with corresponding event actions
            typeof returnElement !== 'undefined' ? returnElement : false;

            if (itemSettings["select"]) {
                var menuWrapElement = $("<div/>", {class: "btn-group"});
                var menuElement = $("<ul/>", {class: "dropdown-menu"});
                menuWrapElement.append($('<a/>', {
                    class: "btn btn-default dropdown-toggle",
                    "data-toggle": "dropdown",
                    "href": "javascript:void(0)",
                    "title": itemSettings["tooltip"]
                }).html(itemSettings["default"]).append($("<span/>", {class: "caret"})).mousedown(function (e) {
                    e.preventDefault();
                }));
                $.each(options, function (i, v) {
                    var option = $('<li/>')
                    $("<a/>", {
                        tabindex: "-1",
                        href: "javascript:void(0)"
                    }).html(i).appendTo(option);

                    option.click(function () {
                        $(this).parent().parent().data("value", v);
                        $(this).parent().parent().trigger("change")
                    });
                    menuElement.append(option);
                });
                var action = "change";
            }
            else if (itemSettings["modal"]) {
                var menuWrapElement = methods.createModal.apply(this, [itemSettings["modalId"], itemSettings["modalHeader"], itemSettings["modalBody"], itemSettings["onSave"]]);
                var menuElement = $("<i/>");
                if (itemSettings["icon"])
                    menuElement.addClass(itemSettings["icon"]);
                else
                    menuElement.html(itemSettings["text"]);
                menuWrapElement.append(menuElement);
                menuWrapElement.mousedown(function (obj, methods, beforeLoad) {
                    return function (e) {
                        e.preventDefault();
                        methods.saveSelection.apply(obj);
                        if (beforeLoad) {
                            beforeLoad.apply(obj);
                        }
                    }
                }(this, methods, itemSettings["beforeLoad"]));
                menuWrapElement.attr('title', itemSettings['tooltip']);
                return menuWrapElement;
            }
            else {
                var menuWrapElement = $("<a/>", {href: 'javascript:void(0)', class: 'btn btn-default'});
                var menuElement = $("<i/>");
                if (itemSettings["icon"])
                    menuElement.addClass(itemSettings["icon"]);
                else
                    menuElement.html(itemSettings["text"]);
                var action = "click";
            }
            if (itemSettings["custom"]) {
                menuWrapElement.bind(action, (function (obj, params) {
                    return function () {
                        methods.saveSelection.apply(obj);
                        itemSettings["custom"].apply(obj, [$(this), params]);
                    }
                })(this, itemSettings['params']));
            }
            else {
                menuWrapElement.data("commandName", itemSettings["commandname"]);
                menuWrapElement.data("editor", $(this).data("editor"));
                menuWrapElement.bind(action, function () {
                    methods.setTextFormat.apply(this)
                });
            }
            menuWrapElement.attr('title', itemSettings['tooltip']);
            menuWrapElement.css('cursor', 'pointer');
            menuWrapElement.append(menuElement);
            if (returnElement)
                return menuWrapElement;
            $(this).data("menuBar").append(menuWrapElement);
        },

        setTextFormat: function () {
            //Function to run the text formatting options using execCommand.
            methods.setStyleWithCSS.apply(this);
            document.execCommand($(this).data("commandName"), false, $(this).data("value") || null);
            $(this).data("editor").focus();
            return false;
        },

        getSource: function (button, params) {
            //Function to show the html source code to the editor and toggle the text display.
            var flag = 0;
            if (button.data('state')) {
                flag = 1;
                button.data('state', null);
            }
            else
                button.data('state', 1);
            $(this).data("source-mode", !flag);
            var editor = $(this).data('editor');
            var content;
            if (flag == 0) { //Convert text to HTML
                content = document.createTextNode(editor.html());
                editor.empty();
                editor.attr('contenteditable', false);
                preElement = $("<pre/>", {
                    contenteditable: true
                });
                preElement.append(content);
                editor.append(preElement);
                button.parent().siblings().hide();
                button.siblings().hide();
            }
            else {
                var html = editor.children().first().text();
                editor.html(html);
                editor.attr('contenteditable', true);
                button.parent().siblings().show();
                button.siblings().show();
            }
        },

        countWords: function (node) {
            //Function to count the number of words recursively as the text grows in the editor.
            var count = 0;
            var textNodes = node.contents().filter(function () {
                return (this.nodeType == 3);
            });
            for (var index = 0; index < textNodes.length; index++) {
                text = textNodes[index].textContent;
                text = text.replace(/[^-\w\s]/gi, ' ');
                text = $.trim(text);
                count = count + text.split(/\s+/).length;
            }
            var childNodes = node.children().each(function () {
                count = count + methods.countWords.apply(this, [$(this)]);
            });
            return count
        },

        countChars: function (node) {
            //Function to count the number of characters recursively as the text grows in the editor.
            var count = 0;
            var textNodes = node.contents().filter(function () {
                return (this.nodeType == 3);
            });
            for (var index = 0; index < textNodes.length; index++) {
                text = textNodes[index].textContent;
                count = count + text.length;
            }
            var childNodes = node.children().each(function () {
                count = count + methods.countChars.apply(this, [$(this)]);
            });
            return count;
        },

        getWordCount: function () {
            //Function to return the word count of the text in the editor
            return methods.countWords.apply(this, [$(this).data("editor")]);
        },

        getCharCount: function () {
            //Function to return the character count of the text in the editor
            return methods.countChars.apply(this, [$(this).data("editor")]);
        },

        rgbToHex: function (rgb) {
            //Function to convert the rgb color codes into hexadecimal code
            rgb = rgb.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
            return "#" +
                ("0" + parseInt(rgb[1], 10).toString(16)).slice(-2) +
                ("0" + parseInt(rgb[2], 10).toString(16)).slice(-2) +
                ("0" + parseInt(rgb[3], 10).toString(16)).slice(-2);
        },

        showMessage: function (target, message) {
            //Function to show the error message. Supplied arguments:target-div id, message-message text to be displayed.
            var errorDiv = $('<div/>', {class: "alert alert-danger"}
            ).append($('<button/>', {
                type: "button",
                class: "close",
                "data-dismiss": "alert",
                html: "x"
            })).append($('<span/>').html(message));
            errorDiv.appendTo($('#' + target));
            setTimeout(function () {
                $('.alert').alert('close');
            }, 3000);
        },

        getText: function () {
            //Function to get the source code.
            if (!$(this).data("source-mode"))
                return $(this).data("editor").html();
            else
                return $(this).data("editor").children().first().text();
        },

        setText: function (text) {
            //Function to set the source code
            if (!$(this).data("source-mode"))
                $(this).data("editor").html(text);
            else
                $(this).data("editor").children().first().text(text);
        },

        setStyleWithCSS: function () {
            if (navigator.userAgent.match(/MSIE/i)) {	//for IE10
                try {
                    Editor.execCommand("styleWithCSS", 0, false);
                } catch (e) {
                    try {
                        Editor.execCommand("useCSS", 0, true);
                    } catch (e) {
                        try {
                            Editor.execCommand('styleWithCSS', false, false);
                        }
                        catch (e) {
                        }
                    }
                }
            }
            else {
                document.execCommand("styleWithCSS", null, true);
            }
        },

    }

    $.fn.Editor = function (method) {

        if (methods[method]) {
            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
        } else if (typeof method === 'object' || !method) {
            return methods.init.apply(this, arguments);
        } else {
            $.error('Method ' + method + ' does not exist on jQuery.Editor');
        }
    };
})(jQuery);

$(document).ready(function (e) {
    $description = $(".description");
    $map = [];
    var stateData = {
        "states": {
            "IN-UP": {
                "id": "IN-UP",
                "name": "Uttar Pradesh",
                "stats": {
                    "MENTORS": 45895,
                    "INVESTORS": 26543,
                    "STARTUPS": 41200,
                    "ACCELERATORS": 895,
                    "INCUBATORS": 7685
                }
            },
            "IN-GA": {
                "id": "IN-GA",
                "name": "Goa",
                "stats": {
                    "MENTORS": 45895,
                    "INVESTORS": 26543,
                    "STARTUPS": 41200,
                    "ACCELERATORS": 895,
                    "INCUBATORS": 7685
                }
            },
            "IN-MP": {
                "id": "IN-MP",
                "name": "Madhya Pradesh",
                "stats": {
                    "MENTORS": 45895,
                    "INVESTORS": 26543,
                    "STARTUPS": 41200,
                    "ACCELERATORS": 895,
                    "INCUBATORS": 7685
                }
            }
        }
    }
    var shiftPositionObject = {
        'IN-GA': {
            x: 1,
            y: 30
        },
        'IN-MN': {
            x: -5,
            y: 30
        },
        'IN-NL': {
            x: -5,
            y: 30
        },
        'IN-AS': {
            x: -5,
            y: 18
        },
        'IN-ML': {
            x: 1,
            y: 25
        },
        'IN-MZ': {
            x: 1,
            y: 25
        },
        'IN-TR': {
            x: 1,
            y: 30
        },
        'IN-SK': {
            x: 1,
            y: 30
        },
        'IN-AR': {
            x: -5,
            y: 20
        },
        'IN-WB': {
            x: 1,
            y: -25
        },
        'IN-BR': {
            x: 1,
            y: 10
        },
        'IN-JH': {
            x: 8,
            y: 10
        },
        'IN-AP': {
            x: 20,
            y: -20
        },
        'IN-KL': {
            x: 1,
            y: 10
        },
        'IN-KA': {
            x: 1,
            y: -25
        },
        'IN-MH': {
            x: 15,
            y: 5
        },
        'IN-MP': {
            x: 5,
            y: -15
        },
        'IN-HR': {
            x: 1,
            y: 15
        },
        'IN-UT': {
            x: 1,
            y: 15
        },
        'IN-PB': {
            x: 1,
            y: 10
        },
        'IN-HP': {
            x: 1,
            y: 15
        },
        'IN-JK': {
            x: 5,
            y: 25
        },
        'IN-LADAKH': {
            x: -10,
            y: 10
        },
        'IN-UP': {
            x: 5,
            y: -5
        },
        'IN-TG': {
            x: 5,
            y: 10
        },
        'IN-DL': {
            x: 1,
            y: 32
        },
        'IN-LD': {
            x: 8,
            y: 30
        }
    }

    $('.enabled').hover(function () {
        stopAutoAnim();
        $description.addClass('active');
        $description.html($(this).attr('title'));
    }, function () {
        var listOfPaths = $('.enabled');
        listOfPaths.map(function (currentPath) {
            if ($(listOfPaths[currentPath]).hasClass('selected')) {
                $description.html($(this).attr('title'));
                mouseEneter(listOfPaths[currentPath]);
            }
        })
    });

    $('.enabled').click(clickedAnimation);

    $('.india-map').on('mouseenter', function (e) {
        stopAutoAnim();
    });
    $('.india-map-details').on('mouseenter', function (e) {
        stopAutoAnim();
    });
    $('.enabled').on('mouseenter', function (e) {
        mouseEneter(e);
    });

    $('.india-map').on('mouseleave', function (e) {
        var _autoAnim = setTimeout(function () {
            clearTimeout(_autoAnim);
            startAutoAnim();
        }, 0);
    });


    var autoStart = null;
    var index = 0;

    function stopAutoAnim() {
        autoStart && clearInterval(autoStart);
    }

    function startAnimOnInit() {
        stopAutoAnim();
        var listOfStates = ['IN-MP'];
        var listOfPaths = $('.enabled');
        listOfPaths.map(function (currentPath) {
            if ($(listOfPaths[currentPath]).attr('id') === listOfStates[index]) {
                $(listOfPaths[currentPath]).trigger('click');
                $description.addClass('active');
                $description.html($(this).attr('title'));
                mouseEneter(listOfPaths[currentPath]);
            }
        })
        index++;
        if (index >= listOfStates.length) {
            index = 0;
        }
        clickedAnimation();
    }

    startAnimOnInit();

    function startAutoAnim() {
        stopAutoAnim();
        autoStart = setInterval(function () {
            if ($('.more-on-map-div').length) {
                var listOfStates = ['IN-JK', 'IN-UP', 'IN-MP', 'IN-WB', 'IN-BR'];
                var listOfPaths = $('.enabled');
                listOfPaths.map(function (currentPath) {
                    if ($(listOfPaths[currentPath]).attr('id') === listOfStates[index]) {
                        $(listOfPaths[currentPath]).trigger('click');
                        $description.addClass('active');
                        $description.html($(this).attr('title'));
                        mouseEneter(listOfPaths[currentPath]);
                    }
                })
                index++;
                if (index >= listOfStates.length) {
                    index = 0;
                }
            }
        }, 3000);
    }

//startAutoAnim();

    function clickedAnimation() {
        $('.IN-LD').find('.enabled').prev().removeClass('makeVisible');
        $('.IN-LD').find('.enabled').removeClass('selected');
        $(this).addClass('selected');
        $(this).prev().addClass('makeVisible');
        $(this).parent().siblings().find('.enabled').prev().removeClass('makeVisible');
        $(this).parent().siblings().find('.enabled').removeClass('selected');
        if ($(this).attr('id') != 'IN-LD') {
            $(this).parent().appendTo('#map-parent');
        }
        if ($('#more-on-map-div').length) {
            var obj = $(this);
            $.ajax({
                type: "GET",
                contentType: "application/json",
                url: SIH.getEndPoint("/api/common/stateCount?stateId=" + $(this).attr('stateid'))
            }).done(function (data) {
                var name = $(obj).attr('title');
                var id = $(obj).attr('stateid');
                if (data && id) {
                    $(".india-map-details .sector-text h2").text(name);
                    var url = "/content/sih/en/search.html?states=" + id + "&roles=Startup&page=0";
                    $(".india-map-details .state-details .startup a").attr("href", url);
                    $(".india-map-details .state-details .startup .data").text(data.stats.Startup ? data.stats.Startup : "0");
                    url = "/content/sih/en/search.html?states=" + id + "&roles=Mentor&page=0";
                    $(".india-map-details .state-details .mentor a").attr("href", url);
                    $(".india-map-details .state-details .mentor .data").text(data.stats.Mentor ? data.stats.Mentor : 0);
                    url = "/content/sih/en/search.html?states=" + id + "&roles=Investor&page=0";
                    $(".india-map-details .state-details .investor a").attr("href", url);
                    $(".india-map-details .state-details .investor .data").text(data.stats.Investor ? data.stats.Investor : 0);
                    url = "/content/sih/en/search.html?states=" + id + "&roles=Incubator&page=0";
                    $(".india-map-details .state-details .incubator a").attr("href", url);
                    $(".india-map-details .state-details .incubator .data").text(data.stats.Incubator ? data.stats.Incubator : 0);
                    url = "/content/sih/en/search.html?states=" + id + "&roles=Accelerator&page=0";
                    $(".india-map-details .state-details .accelerator a").attr("href", url);
                    $(".india-map-details .state-details .accelerator .data").text(data.stats.Accelerator ? data.stats.Accelerator : 0);
                    url = "/content/sih/en/search.html?states=" + id + "&roles=Corporate&page=0";
                    $(".india-map-details .state-details .corporate a").attr("href", url);
                    $(".india-map-details .state-details .corporate .data").text(data.stats.Corporate ? data.stats.Corporate : 0);
                }
            });
        }

    }

    function mouseEneter(e) {
        var id = (e.hasOwnProperty('currentTarget') && e.currentTarget.id) || $(e).attr('id');
        var idElem = document.getElementById(id);
        var clientReact = idElem.getBoundingClientRect();
        var description = document.querySelector('.description');
        var descPosition = description.getBoundingClientRect();
        var isSmallState = shiftPositionObject[id] || 0;
        /*$(description).css({
            right: clientReact.x + clientReact.width / 2 - descPosition.width / 2 - ((isSmallState && isSmallState.x) || isSmallState),
            top: document.documentElement.scrollTop + clientReact.y - ((isSmallState && isSmallState.y) || isSmallState)
        });*/
        var mapContainer = document.getElementsByClassName('india-map')[0];
        var mapContainerRect = mapContainer.getBoundingClientRect();
        $(description).css({
            left: clientReact.left - mapContainerRect.left + clientReact.width / 2 - descPosition.width / 2 - ((isSmallState && isSmallState.x) || isSmallState),
            top: clientReact.top - mapContainerRect.top - ((isSmallState && isSmallState.y) || isSmallState)
        });
    }

});

var uniqueProfileId;
var applicationLink;
var $modal;
var imageContent;
var profileData;
var businessDocTitle;
var userJoiningDate;
var userJoiningYear;
var $reviewModal;
var teamSlickSlider;
var galleryItems = null;
var pageNum = 0;
var totalPages = 999999999;

$(document).ready(function(){
    $reviewModal = $(".review-modal");
});

var galleryItem = function (data,usr){
    var source = $('#gallery-template').html();
    if(source) {
        var template = Handlebars.compile(source);
        //if (data) {
        var galleryItemsValues = null;
        if(usr.role=="Startup") {
            galleryItemsValues = {
                ProductPortfolio: [],
                Events: [],
                Other: []
            };
        }else{
            galleryItemsValues = {
                ResearchFacilities: [],
                Campus: [],
                Workspaces: []
            };
        }
        if (data) {
            $.each(galleryItemsValues, function (index, val) {
                galleryItemsValues[index] = data[index]
            });
        }
        $('#gallery').html(template(galleryItemsValues));
        $(".html5lightbox").html5lightbox();
        setTimeout(function () {
            $("div.galleryImageDiv").mCustomScrollbar({
                'autoHideScrollbar': false,
                theme: "dark",
                scrollButtons: {
                    enable: true
                }
            });
        }, 2000);

        //}
    }
}


function createProfilePage(uid) {
    store.removeItem("connectTo");
    var path = "";
    var customHeader = {};
    if (store.getItem("token")) {
        path = "/api/auth/user/profile";
        customHeader["X-Auth-Token"] = store.getItem("token");
    }
    else {
        path = "/api/common/user/profile";
    }
    if (uid !== "") {
        var url = (uid == store.getItem("uniqueId") ? path : path + "/" + uid);
        $.ajax({
            type: "GET",
            url: SIH.getEndPoint(url),
            headers: customHeader
        }).done(function (data) {
            var pathname = window.location.pathname.split('.');
            var urlRole =pathname[1].toLowerCase();
            var profileRole = data.user.role.toLowerCase();
            urlRole = urlRole === 'int-startup' ? 'startup' :  urlRole;
            urlRole = urlRole === 'int-mentor' ? 'mentor' :  urlRole;
            urlRole = urlRole === 'int-investor' ? 'investor' :  urlRole;
            urlRole = urlRole === 'int-accelerator' ? 'accelerator' :  urlRole;
            urlRole = urlRole === 'int-corporate' ? 'corporate' :  urlRole;
            urlRole = urlRole === 'int-incubator' ? 'incubator' :  urlRole;
            urlRole = urlRole === 'int-individual' ? 'individual' :  urlRole;
            currUser = data.user;
            if(urlRole === profileRole){
                uniqueProfileId = uid;
                personaProfile(data);
                personaAttributes(data);
                personaSocialInfo(data);
                otherPersona(data, customHeader);
                personaDescription(data);
                personaDocuments(data);
                if(data.user.role=="Startup"){
                    galleryItems= {
                        ProductPortfolio: "Product Portfolio",
                        Events: "Events",
                        Other: "Other"
                    };
                }
                else{
                    galleryItems= {
                        ResearchFacilities: "Research Facilities",
                        Campus: "Campus",
                        Workspaces: "Workspaces"
                    };
                }
                if(data.user.role=="Startup") {
                    if (data.user.gallery && ((data.user.gallery.ProductPortfolio && data.user.gallery.ProductPortfolio.length > 0)
                        || (data.user.gallery.Events && data.user.gallery.Events.length > 0)
                        || (data.user.gallery.Other && data.user.gallery.Other.length > 0))
                        || store.getItem('uniqueId') == uid) {
                        galleryItem(data.user.gallery,data.user);
                    } else {
                        $('#gallery').html("<p class='no-image-msg'>" + $('#gallery').data('noimagemsg') + "</p>");
                    }
                }else {
                    if(data.user.gallery && ((data.user.gallery.Campus && data.user.gallery.Campus.length > 0)
                        || (data.user.gallery.ResearchFacilities && data.user.gallery.ResearchFacilities.length > 0)
                        || (data.user.gallery.Workspaces && data.user.gallery.Workspaces.length > 0))
                        || store.getItem('uniqueId') == uid) {
                        galleryItem(data.user.gallery,data.user);
                    }else{
                        $('#gallery').html("<p class='no-image-msg'>"+$('#gallery').data('noimagemsg')+"</p>");
                    }
                }
                if(profileRole == 'mentor' || profileRole == 'investor' || profileRole == 'individual'|| profileRole == 'governmentbody'){
                    try{
                        personaMember(data);
                    }catch (e) {

                    }
                }
                personaSuccessStories(data);
                reviewNrating(uid);
                personaBadges(data);
                personaIncubateeDetails(data);
                personaLocation(data);
                if(data.user.role === "GovernmentBody"){
                    var param = {
                        'ministry':data.user.agency.ministry.id,
                        'department':data.user.agency.department.id
                    };
                    displayContentListing(createQueryString(param));
                }
                //below code commented to enable Enablers to write reviews and rating
                // to any profile as per new connection logic
                /*if (!data.connectionStatus.connected) {
                    disableReviewButton();
                }*/
                if(data.connectionStatus.connected || store.getItem('uniqueId') === store.getItem('profileUniqueId')) {
                    setReviewButtonTitle();
                }

                if(!data.allowProfileEdit && store.getItem('uniqueId') === store.getItem('profileUniqueId')){
                    showSnackbar('<i class="fa-2x fa-info-circle"></i>Your profile is under moderation', "alert-info", 5000);
                }

                moreContent();
            }else{

                window.location.replace($('.notification-container').attr('error-page') + "/404.html");
            }

            $(".user-profile-banner-wrapper.connect").on("click", "div.connect-action div.cta a", function () {
                // setting uniqueId when enabler want to send message to non-connected user
                var enablers = ["Mentor","Incubator","Accelerator","Investor","Corporate"];
                if(enablers.indexOf(store.getItem("role")) > -1){
                    sessionStorage.setItem("messageToUniqueId", uid);
                }
                // end
            });
            // displaying block button
            /*if(store.getItem("uniqueId") !== store.getItem("profileUniqueId")){
                $('button[name="block"]').removeClass('hidden');
            }else{
                $('button[name="block"]').addClass('hidden');
            }*/


        }).error(function (xhr) {
            if (xhr.status == 404) {
                window.location.replace($('.notification-container').attr('error-page') + "/404.html");
            }
        });
    }
}

function personaSocialInfo(data){
    var activeSice;
    var role = data.user.role;
    var doe = role === "Incubator" ? data.user.dateOfEstablishment : data.createdOn;
    if(doe){
        var dateOfEstablishment = new Date(doe);
        if(data.lastPublishedOn) {
            var publishedOn = new Date(data.lastPublishedOn);
            activeSice = publishedOn.getDate() + "/" + (publishedOn.getMonth() + 1) + "/" + publishedOn.getFullYear();
        }
        var dateOfEstablishment = dateOfEstablishment.toDateString().split(" ");
        userJoiningDate = dateOfEstablishment[1] + " " + dateOfEstablishment[2] + ", " + dateOfEstablishment[3] ;
        userJoiningYear = dateOfEstablishment[3];

    }

    var user = data.user ? data.user : data;
    if($("#persona-social-template").length && user){
        $("div.persona-profile-social-wrapper").closest(".profile-sidebar-social").removeClass("hidden");
        var template = Handlebars.compile($("#persona-social-template").html());
        if(user.startup) {
            if (user.startup.socialInfos && user.startup.socialInfos.length) {
                $("div.persona-profile-social-wrapper").prepend(template(user.startup));
                $("div.persona-profile-social-wrapper .preview-profile").removeClass("hidden");
            } else if (user.startup.members && user.startup.members.length) {
                $("div.persona-profile-social-wrapper").prepend(template(user.startup.members[0]));
                if (user.startup.members.socialInfos && user.startup.members.socialInfos.length) {
                    $("div.persona-profile-social-wrapper .preview-profile").removeClass("hidden");
                }
            } else {
                $("div.persona-profile-social-wrapper").prepend(template([]));
            }
        }else{
            if (user.socialInfos && user.socialInfos.length) {
                $("div.persona-profile-social-wrapper").prepend(template(user));
                $("div.persona-profile-social-wrapper .preview-profile").removeClass("hidden");
            } else {
                $("div.persona-profile-social-wrapper").prepend(template([]));
            }
        }
    }
    if(user.role=="Incubator"){
        $("p .joining-date").text("Year of Establishment: " + userJoiningYear);
        $(".company-name .active-since strong").text(activeSice);
    } else {
        $("p .joining-date").text("Joined Startup India: " + userJoiningDate);
        $(".company-name .active-since strong").text(activeSice);
    }
}

function personaAttributes(data) {

    data = data.user ? data.user : data;
    var allServices = data.startup ? data.startup.services : data.services;
    $.ajax({
        url: SIH.getEndPoint("/api/noauth/resource/startupServices/all"),
        type: "POST",
        async: false,
        data: JSON.stringify(allServices),
        dataType: "json",
        contentType: "application/json"
    }).done(function (res) {
        var all = [];
        $.each(res,function(ind,val){
            all.push(val.serviceName);
        });
        if(data.startup){
            data.startup.services = all;
        } else if(data.services) {
            data.services = all;
        }
    });
    var source = $("#persona-attributes-template").html();
    if (source) {
        var template = Handlebars.compile(source);
        $('.persona-attributes-container .advantage-grid-wrap,.persona-attributes-container .list-unstyled').html(template(data));
    }
    if (data.startup) {
        var startup = data.startup;
        $("input[value='" + startup.stage + "']").prop('checked', true);
        if (startup.location.state) {
            $("#state").val(startup.location.state.id).trigger('change');
            $("#city").val(startup.location.city.id).trigger('change');
        }
        if(startup.focusArea){
            if(startup.focusArea.industry) {
                $("#startupindustry").val(startup.focusArea.industry.id).trigger('change');
            }
            if(startup.focusArea.sectors.length > 0) {
                $("#sector").val(startup.focusArea.sectors[0].id).trigger('change');
            }
            $("#services").val(startup.services).trigger('change');
        }
    }
    // Focused Sectors
    var focusSection = $(".focusSection .content");
    if(focusSection.length) {
        $(focusSection).each(function(i,v){
            var str = $(this).text();
            if (str.length > 100) {
                str = str.substr(0, 100);
                $(this).text(str.substr(0, str.lastIndexOf(",")));
                $(this).parents(".focusSection").find(".view-all").removeClass('hidden');
            } else {
                $(this).parents(".focusSection").find(".view-all").addClass('hidden');
            }
        })
    }
    return false;
}

function personaProfile(data) {
    var source = $("#persona-profile-template").html();
    if (source) {
        var connections = data.connectionStatus;
        store.setItem("connectTo", connections);
        store.setItem("userProfileRole", data.user.role);
        store.setItem("allowProfileEdit",data.allowProfileEdit);
        applicationLink = completeLink(data.user.applicationLink);
        // var cin = getCinNumber(data);
        //console.log("cinnnnnn"+cin);
        var updatedDate = new Date(data.lastUpdatedOn);
        var dateSplit = updatedDate.toString().split(" ");
        var timeSplit = dateSplit[4].split(":");
        var timezone = "AM";
        var hour = timeSplit[0];
        if (parseInt(timeSplit[0]) > 12) {
            hour = parseInt(timeSplit[0]) - 12;
            timezone = "PM"
        }
        if (parseInt(timeSplit[0]) === 12 && parseInt(timeSplit[1]) > 0) {
            timezone = "PM"
        }
        data.lastUpdatedOn = dateSplit[1] + " " + dateSplit[2] + " " + dateSplit[3] + " at " + timeSplit[0] + ":" + timeSplit[1] + " " + timezone;

        if(parseInt(timeSplit[0]) > 12){
            timezone = "PM"
        }if(parseInt(timeSplit[0]) === 12 && parseInt(timeSplit[1]) > 0){
            timezone = "PM"
        }
        data.lastUpdatedOn = dateSplit[1] +" "+  dateSplit[2] +" "+ dateSplit[3] + " at "+ hour+":"+timeSplit[1]+" "+timezone;

        var template = Handlebars.compile(source);
        $('.persona-profile-container').prepend(template(data));
        $('.connect-action').html($('.connect-content').html());
        $('.connect-content').remove();


        showConnectionWidgetCard("persona-connections-widget-template","persona-connections-widget-div", store.getItem("profileUniqueId"), pageNum);

        // equalHeightsForSelector(".personaprofilerevamp .side-cards.persona-attributes-container.user-profile .advantage-grid-wrap .content-section");
    }



    function showConnectionWidgetCard(cardId, displayCardId, puid, pageNumber){
        var connectionCard = $("#" + cardId).html();
        if(connectionCard) {
            let template = Handlebars.compile(connectionCard);
            let mainDiv = $("#" + displayCardId);
            let uid = store.getItem("uid");
            let path = mainDiv.data("path");

            if(puid){
                path = path + "/" + puid;
            }
            if (path && pageNum < totalPages) {
                var data = {};
                data["page"] = pageNumber;
                $.ajax({
                    type: "GET",
                    url: SIH.getEndPoint(path),
                    data: data,
                    success: function (response) {
                        totalPages = response.totalPages;
                        if(response.content.length > 0 || store.getItem("uniqueId") == store.getItem("profileUniqueId")){
                            if($(".connections-widget-container").length > 0){
                                if(pageNum && pageNum > 0){
                                    $(mainDiv).find(".modal.connection-showing-data .modal-body ").append(template(response));
                                }
                                mainDiv.html(template(response));
                                $(".connections-widget-container").removeClass("display-n");
                            }
                        }
                    }
                }).done(function (response) {
                    pageNum = pageNum + 1;
                    if (response.content.length > 0 && pageNum == 1) {
                        $(".modal.fade.connection-showing-data.in .modal-content .modal-body").mCustomScrollbar('destroy');
                        $(".modal.fade.connection-showing-data.in .modal-content .modal-body").mCustomScrollbar({
                            'autoHideScrollbar': false,
                            theme: "dark",
                            callbacks: {
                                onInit: function () {
                                    $(this).data("mCS").opt.callbacks.onTotalScrollOffset =
                                        Math.abs(this.mcs.content.innerHeight() - ($("#modal-content").position().top + $("#modal-content").outerHeight(true)));
                                },
                                onTotalScroll: function () {
                                    showConnectionWidgetCard("connection-pop-list-template", "persona-connections-widget-div", puid, pageNum);
                                },
                                alwaysTriggerOffsets: true
                            },
                            scrollButtons: {
                                enable: true
                            }
                        });
                    }
                });
            }
        }
    }

    var stageLevel = ["Explorer","Maverick","Star","Superstar","Champion"];
    var points = data.points;
    var level;
    if (points > 1000) {
        level = 5;
    } else if (points > 800) {
        level = 4;
    } else if (points > 500) {
        level = 3;
    } else if (points > 301) {
        level = 2;
    } else {
        level = 1;
    }
    if(data.user.role == "Incubator" || data.user.role == "Mentor" || data.user.role == "Accelerator"||  data.user.role == "Corporate"){
        $.ajax({
            type: "GET",
            url: SIH.getEndPoint("/api/common/connection-accepted/stats/"+uniqueProfileId),
            async: false
        }).done(function (response) {
            if(data.user.role == "Mentor"){
                data.user.connectionsAccepted = response;
                $(".orglevel strong").text(stageLevel[level - 1]);
            }else {
                $(".orglevel:not(.active-since)").parent("h6").html("Connections Accepted: &nbsp;<span class='orglevel'><strong>"+response+"% </strong></span>");
            }
        });

    }else {
        $(".orglevel strong").text(stageLevel[level - 1]);
    }
    return false;
}

store.eventing.on(ContextHub.Constants.EVENT_DATA_UPDATE, function(){
    if(store.getItem("uniqueId") !== store.getItem("profileUniqueId")
        && store.getItem('connectTo/connectionSent')){
        $('button[name="request-sent"]').removeClass('hidden');
    }else{
        $('button[name="request-sent"]').addClass('hidden');
    }
}, "connectTo/connectionSent");

store.eventing.on(ContextHub.Constants.EVENT_DATA_UPDATE, function(){
    if(store.getItem('connectTo/connectionRecieved')){
        $('button[name="accept-cta"]').removeClass('hidden');
        $('button[name="reject-cta"]').removeClass('hidden');
    }else{
        $('button[name="accept-cta"]').addClass('hidden');
        $('button[name="reject-cta"]').addClass('hidden');
    }
}, "connectTo/connectionRecieved");

store.eventing.on(ContextHub.Constants.EVENT_DATA_UPDATE, function(){
    var enablers = ["Mentor","Incubator","Accelerator","Investor","Corporate"];
    // || (enablers.indexOf(store.getItem("role")) > -1)
    if(store.getItem('connectTo/connected')
    /*|| (enablers.indexOf(store.getItem("role")) > -1)
    && store.getItem("uniqueId") !== store.getItem("profileUniqueId")*/){

        $('div.connect-action div.cta a').removeClass('hidden');
    }else{
        $('div.connect-action div.cta a').addClass('hidden');
    }
}, "connectTo/connected");

store.eventing.on(ContextHub.Constants.EVENT_DATA_UPDATE, function(){
    if(store.getItem("uniqueId") !== store.getItem("profileUniqueId")
        && store.getItem('connectTo/connectionAllowed') && !store.getItem('connectTo/connectionRecieved')){

        $('button[name="connect-cta"]').removeClass('hidden');
    }else{
        $('button[name="connect-cta"]').addClass('hidden');
    }
}, "connectTo/connectionAllowed");


function personaProfileSocial(data){
    var source = $("#persona-profile-social-template").html();
    if (source) {
        var template = Handlebars.compile(source);
        $('.persona-profile-social-container').prepend(template(data));
    }

    return false;
}

function cta (data,uid){
    if((store.getItem('token')) && (uid == store.getItem("uniqueId"))){
        $(".profile-cta").removeClass("profile-cta-hidden");
    }
}

function personaBadges(data){
    if((data.badges && data.badges.length) || (data.assignedBadges && data.assignedBadges.length)){
        var source = $("#persona-profile-badges-template").html();
        if (source) {
            var template = Handlebars.compile(source);
            $('.user-profile-badges').prepend(template(data));
        }
    }
    return false;

}

function otherPersona(data, customHeader) {
    var source = $("#other-persona-template").html();
    if (source) {
        var path = "";
        var template = Handlebars.compile(source);
        if(customHeader["X-Auth-Token"]){
            path = "/api/auth/search/similar/";
        }else {
            path = "/api/noauth/search/similar/";
        }
        $.ajax({
            url: SIH.getEndPoint(path + data.user.role + "?id=" + data.user.uniqueId),
            type: "GET",
            headers: customHeader
        }).done(function (data) {
            $('.other-persona-container').append(template(data));
            for(var i=0; i<Math.floor(data.accumaltiveRating); i++) {
                $(".other-persona-container").find(".otherPersonaRating.rating input[value='" + i +"']").prop("checked", "checked");
            }
        });
    }
    return false;
}

function personaDescription(data) {
    data = data.user ? data.user : data;
    var source = $("#persona-description-template").html();
    if (source) {
        var template = Handlebars.compile(source);
        $('.persona-description-container').append(template(data));
    }
    //$("[name=ideaBrief]").hide();
    return false;
}

function personaLocation(data, isEditMode) {
    data = data.user ? data.user : data;
    data.isEditMode = isEditMode;
    if(data.centerLocations || store.getItem("uniqueId") == store.getItem("profileUniqueId") ) {

        $(".location-widget-container").removeClass("display-n");
        var source = $("#persona-map-loction-template").html();
        if (source) {
            var template = Handlebars.compile(source);
            $('.person-map-content-placeholder').html(template(data));
        }

        source = $("#add-location-outer-template").html();
        if (source) {
            var templateMap = Handlebars.compile(source);
            $('.person-loc-map-content-placeholder').html(templateMap({"isEditMode":isEditMode}));
        }

        if(data.centerLocations && data.centerLocations.length > 0) {
            $.each(data.centerLocations, function (i, v) {
                compileLocationMapTemplate(v);
            });
        }else{
            var locationMapTemplate = $("#add-location-inner-template").html();
            if(locationMapTemplate) {
                locationMapTemplate = Handlebars.compile(locationMapTemplate);
                $("#addLocationTemplate").append(locationMapTemplate({}));
            }
        }

        $(".location-selection").on('change', function(){
            $(this).find("option:selected").each(function(){
                var optionValue = $(this).attr("value");
                console.log(optionValue);
                if(optionValue){
                    $(".box").not("." + optionValue).hide();
                    $("." + optionValue).show();
                } else{
                    $(".box").hide();
                }
            });
        });
    }
    return false;
}


function personaIncubateeDetails(data, isEditMode) {
    data = data.user ? data.user : data;
    data.isEditMode = isEditMode;
    if(data.numberOfIncubatees && data.numberOFIncubateesGraduated) {
        var source = $("#persona-incubatees-details-template").html();
        if (source) {
            var template = Handlebars.compile(source);
            $('.persona-incubatees-details-placeholder').html(template(data));
        }
    }
    return false;
}

function personaDocuments(data) {
    data = data.user ? data.user : data;
    var source = $("#persona-documents-template").html();
    if (source && (data.startup.businessPlan
            || store.getItem("uniqueId") == store.getItem("profileUniqueId")))  {

        $(".business-doc-container").removeClass("display-n");
        var template = Handlebars.compile(source);
        $('.persona-documents-container :not(h3)').remove();
        $('.persona-documents-container').append(template(data));
    }
    source = $("#add-documents-btn-template").html();
    if(store.getItem("allowProfileEdit") && source){
        var template = Handlebars.compile(source);
        $(".profile-sidebar-business-doc .edit-document").html(template);
    }
    return false;
}

function loadFirstMember(data, isMemberInfo) {
    var memberData = {};
    var firstMember = data;
    if(firstMember.user && firstMember.user.startup){
        firstMember = firstMember.user.startup;
    }else if(firstMember.user && (firstMember.user.members || firstMember.user.contacts)){
        firstMember = firstMember.user;
    }
    memberData.memberGroup = {};
    memberData.memberGroup.members = [];
    if(firstMember.members && firstMember.members.length > 0){
        memberData.memberGroup.members.push(firstMember.members[0]);
        firstMember = memberData;
    }else if(isMemberInfo){
        memberData.memberGroup.members.push(firstMember);
        firstMember = memberData;
    }

    var source = $("#persona-member-template").html();
    if (source && firstMember || store.getItem("uniqueId") == store.getItem("profileUniqueId")) {

        $(".profile-team-members-container").removeClass("display-n");
        var template = Handlebars.compile(source);
        $('.persona-member-container').append(template(firstMember));
        $('.single-team-member').html(template(firstMember));
        $(".single-team-member .member-info").mCustomScrollbar({
            theme: "dark",
            scrollButtons: {
                enable: true
            }
        });
    }
}

function personaMember(data) {

    var records= $(".records").val();

    loadFirstMember(data);
    loadMembers(data);
    if(data.user.startup) {
        data = data.user.startup;
    }else if(data.user){
        data = data.user;
    }
    if(data){
        var source = $("#add-team-outer-template").html();
        if (store.getItem("allowProfileEdit") && source) {
            var templatek = Handlebars.compile(source);
            $('#add-team-outer-div').append(templatek);
            if (data.members && data.members.length) {
                $.each(data.members, function (i, v) {
                    compileTeamMemberTemplate(v);
                });
            } else {
                compileTeamMemberTemplate();
            }
        }

        if(data.members && $.isArray(data.members) && data.members.length > records){
            $("#show-more").show();
            showMore(records);
        }
        else {
            $(".user-profile-btn").hide();
        }
    }

    return false;
}



function loadMembers(data){
    var memberData = {};
    memberData.memberGroup = {};
    if(data.user.startup){
        memberData.memberGroup.members = data.user.startup.members;
    }else{
        memberData.memberGroup.members = data.user.members;
    }
    if(memberData.memberGroup.members && memberData.memberGroup.members.length > 1){
        if(teamSlickSlider){
            teamSlickSlider.slick('unslick');
        }
        var otherMembersTemplate = Handlebars.compile($("#persona-other-member-template").html());
        $('.member-slider-wrap .team-member-slider').html("");
        $('.member-slider-wrap .team-member-slider').html(otherMembersTemplate(memberData));

        createTeamSlider();
    }
}

function showMore(y){

    $(".profile-records").addClass('display-n');
    var size_data= $('.profile-records').size();
    var listing =  $('.profile-records:lt('+ y +')');
    $(listing).removeClass('display-n');
    $(".user-profile-btn").click(function () {

        y = parseInt(y)+2 <= size_data ? parseInt(y)+2 : size_data;

        if(y==size_data){
            $("#show-more").hide();
            $(".user-profile-btn").html("No More Data To Display");
        }
        $('.profile-records:lt('+ y +')').removeClass('display-n');

    });
}
function personaSuccessStories(data, editMode) {
    data = data.user ? data.user : data;
    var source = $("#success-stories-template").html();
    if (source) {
        var template = Handlebars.compile(source);
        $('.success-stories-container').append(template(data));

        $("button.delete-success-story").on("click", function(){
            $(".modal.confirmation-modal").modal('show');
        });

        $(".success-stories-container .story-list").mCustomScrollbar({
            theme: "dark",
            scrollButtons: {
                enable: true
            }
        });
    }
    if(editMode){
        $(".edit-success-story").toggleClass("hidden");
        $(".delete-success-story").toggleClass("hidden");
    }
    return false;
}
function reviewNrating(uid) {
    getAllReviews(uid);
    getAvgReview(uid);
}

$(document).on('click', ".review-modal .modal-body button", function () {
    var comment = $reviewModal.find('textarea').val();
    $(this).prev('div.err-div').remove();
    var uid = store.getItem("profileUniqueId");

    if(comment){
        var postData = {
            "comment": comment,
            "rating": $(".modal.review-modal").find(".rating > input:checked ~ label").length
        };
        $.ajax({
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify(postData),
            url: SIH.getEndPoint("/api/auth/user/review/" + uid),
            headers: {"X-Auth-Token": store.getItem("token")}
        }).done(function (data) {
            $("div.rating-star").find(".rating input[value='" + Math.floor(data.accumaltiveRating) +"']").prop("checked", true);
            disableReviewButton();
        }).always(function (){
            getAllReviews(uid);
            getAvgReview(uid);
        });

        $(".modal-backdrop.fade.in").each(function(){
            $(this).removeClass("in");
            $(this).addClass("out");
        });
    }else{
        $("<div class='err-div'></div>").insertBefore(this).text("Please add your comments.");
    }
});

function getAllReviews(uid) {
    var token = store.getItem('token');
    if (!token) {
        disableReviewButton();
    }
    $.ajax({
        type: "GET",
        contentType: "application/json",
        url: SIH.getEndPoint("/api/common/user/" + uid + "/reviews")
    }).done(function (data) {
        var source = $("#persona-reviewNrating-template").html();
        if((source && data.content.length > 0)
            || store.getItem("uniqueId") == store.getItem("profileUniqueId")) {

            $(".reviewNrating-row-container").removeClass("display-n");
            var template = Handlebars.compile(source);
            var $allReview = $(".persona-reviewNrating").find(".allReviews");
            $allReview.html('');
            // $allReview.append("<hr class='empty'>");
            $allReview.append(template(data.content));
            var allPersonaShowRating = $allReview.find(".persona-showRating");
            $.each(data.content, function (index, ratings) {
                $(allPersonaShowRating[index]).find("input[value='" + ratings.rating + "']").prop("checked", true);
            });

            $('.faqs-wrapper .home-left-quick-tabs ul.dynamicTabs li').each(function(){
                var className = $(this).children().find('.tab-data-wrapper').text().toLowerCase();
                $(this).addClass(className);
            });

            $('.persona-reviewNrating .allReviews').owlCarousel({
                loop:true,
                margin:10,
                items:1,
                autoPlay: true,
                autoPlayTimeout: 1000,
                autoHeight: true,
                autoplayHoverPause:true,
                stopOnHover:true
            });

            moreContent();
        }else{
            $('.faqs-wrapper .home-left-quick-tabs ul.dynamicTabs li').each(function(){
                var className = $(this).children().find('.tab-data-wrapper').text().toLowerCase();
                $(this).addClass(className);
            });

            $(".faqs-wrapper .home-left-quick-tabs ul.dynamicTabs li.reviews").addClass("display-n");
            $(".profile-team-sec.startup").addClass("display-n");
            $(".persona-reviewNrating .allReviews").html("<h3>No Reviews</h3>");
        }
    }).fail(
        function(error){
            $('.faqs-wrapper .home-left-quick-tabs ul.dynamicTabs li').each(function(){
                var className = $(this).children().find('.tab-data-wrapper').text().toLowerCase();
                $(this).addClass(className);
            });
            $(".faqs-wrapper .home-left-quick-tabs ul.dynamicTabs li.reviews").addClass("display-n");
            $(".profile-team-sec.startup").addClass("display-n");
            $(".persona-reviewNrating .allReviews").html("<h3>No Reviews</h3>");
        }
    );
}

function getAvgReview(uid) {

    var options = {
        type: "GET"
    };
    if (store.getItem('token')) {
        options.url = SIH.getEndPoint("/api/auth/user/" + uid + "/reviews/average");
        options.headers = {"X-Auth-Token": store.getItem("token")};
    } else {
        options.url = SIH.getEndPoint("/api/common/user/" + uid + "/reviews/average");
    }
    $.ajax(options).done(function (data) {
        if (data.numberOfReview > 0) {
            $("div.rating-star").find(".rating input[value='" + Math.floor(data.accumaltiveRating) +"']").prop("checked", true);


            if (!data.canReview) {
                disableReviewButton();
            }
        }
        var source = $("#persona-profile-rating-template").html();
        if(source){
            var template = Handlebars.compile(source);
            $("#persona-profile-rating-container").html(template({
                'avgRating': Math.floor(data.accumaltiveRating),
                'ratingCount': data.numberOfReview,
                'canReview': data.canReview
            }));
        }
    }).fail(function () {
        var source = $("#persona-profile-rating-template").html();
        if(source){
            var template = Handlebars.compile($("#persona-profile-rating-template").html());
            $("#persona-profile-rating-container").html(template({
                'avgRating': 0,
                'ratingCount': 0,
                'canReview': uid == store.getItem("uniqueId") ? false : true
            }));
        }
    });
}

function disableReviewButton() {
    $('.persona-reviewNrating').find(".head-panel button").attr("disabled", "disabled");
}

function setReviewButtonTitle() {
    $('.persona-reviewNrating').find(".head-panel button").attr("title", "");
}



$("ul.profile-tabs").html($(".tab-container-headings").html());

$(document).ready(function(){

    $modal = $(".modal.review-modal");

    $modal.find("button.close").click(function () {
        $modal.find('input[type="radio"]:checked').prop("checked", false);
        $modal.find("textarea.form-control").val('');
    });

    $(".persona-reviewNrating .head-panel").find("button.writeReview").click(function () {
        $modal.find('input[type="radio"]:last').prop("checked", true);
    });
    $modal.find(".rating label").click(function () {
        var id = $(this).attr("for");
        $modal.find('.rating').children("#"+id).prop('checked', true);
    });
    $('.rating label').click(function(e){e.preventDefault();e.stopPropagation()});

});

function createTeamSlider() {

    teamSlickSlider = $('.team-member-slider').slick({
        infinite: true,
        slidesToShow: 3,
        slidesToScroll: 3,
        centerPadding: '30px',
        dots: true,

        responsive: [
            {
                breakpoint: 1024,
                settings: {
                    slidesToShow: 3,
                    slidesToScroll: 3,
                    infinite: true,
                    dots: true
                }
            },
            {
                breakpoint: 600,
                settings: {
                    slidesToShow: 2,
                    slidesToScroll: 2
                }
            },
            {
                breakpoint: 480,
                settings: {
                    slidesToShow: 1,
                    slidesToScroll: 1
                }
            }
        ]
    });
}

var teamCounter = 0;
function compileTeamMemberTemplate(members){
    var membersData = {'counter':++teamCounter};
    if(members) {
        membersData = members;
        $.each(members, function (i, v) {
            membersData.counter = teamCounter;
        });
        compileTeamTemplate(membersData);
    }
}

function compileTeamTemplate(membersData) {
    var teamMemberTemplate = $("#add-team-inner-template").html();
    teamMemberTemplate = Handlebars.compile(teamMemberTemplate);
    $("#addTeamTemplate").append(teamMemberTemplate(membersData));
}

var locationCounter = 0;
function compileLocationMapTemplate(locations, isNew){
    var locationsData = {'counter':++locationCounter};
    var locationMapTemplate = $("#add-location-inner-template").html();
    if((locationMapTemplate && locations) || (locationMapTemplate && isNew)) {
        locationMapTemplate = Handlebars.compile(locationMapTemplate);
        locationsData = isNew ? {} : locations;
        $("#addLocationTemplate").append(locationMapTemplate(locationsData));
    }
}

$(document).on('click', 'div.remove-location', function(){
    $(this).parent("div.add-loc-info-part").remove();
});



function viewAllFocusSectors(id,title){
    bootbox.dialog({
        title: title,
        message: $("#"+id).html(),
        onEscape: true,
        className: 'view-all-focus-sectors tag-view',

    });
    $(".bootbox.modal.fade.view-all-focus-sectors.tag-view .modal-content .modal-body").mCustomScrollbar({
        'autoHideScrollbar': true,
        theme: "dark",
        scrollButtons: {
            enable: true
        }
    });
}

function changeImage(title, resolution){
    var template = Handlebars.compile($("#change-image-template").html())
    bootbox.dialog({
        title: 'Change ' + (title ? title.charAt(0).toUpperCase()+title.slice(1) : '') + ' Image',
        message: template({'title':title,'resolution':resolution}),
        onEscape: true,
        className: 'view-all-focus-sectors designer-cta text-center',
        buttons: {
            OK: {
                label: 'Upload',
                className: 'button',
                callback: upload
            },
        }
    });
}

$(document).on('change', 'div.add-employee-sec input[name=dp-image]', function(e){
    upload($('div.add-employee-sec input[name=dp-image]'), e);
});

upload = function(targetEle, e, callback){
    var targetName;
    var file;
    var description;
    if(e && $(e.target).is(':file')){
        targetName = $(e.target).prop("name");
        file = e.target.files[0];
    } else {
        if(targetEle instanceof $.Event){
            targetName = $(this).find("input[type='file']")[0].name;
            file = $(this).find('input[name="'+targetName+'"]')[0].files[0];
            description = $(this).find('input[name="imageDesc"]').val();
        }else{
            targetName = $(targetEle).prop('name');
            file = $(targetEle).prop('files')[0];
        }
    }

    var filename = file ? file.name : "";
    var personaType = store.getItem("role");
    if (file && validateFile(targetName, file)) {
        var apiPath = SIH.getEndPoint("/api/file/");

        if (targetName.includes('cover')) {
            apiPath = apiPath + "user/cover/image/" + personaType;
        } else if (targetName === 'image') {
            apiPath = apiPath + "user/image/" + personaType;
        } else if (targetName === 'dp-image') {
            apiPath = apiPath + "member/pic";
        } else if (targetName === 'storyStartupLogo') {
            apiPath = apiPath + "user/image/" + personaType;
        } else if(targetName === 'galleryImage'){
            apiPath = apiPath+"user/gallery"
        }else {
            apiPath = apiPath + "user/doc/" + personaType;
        }

        var data = new FormData();
        data.append("file", file);
        $('#modal-loader').modal("show");
        $.ajax({
            url: apiPath,
            type: 'POST',
            data: data,
            cache: false,
            contentType: false,
            processData: false,
            success: function (fileInfo) {
                $('#modal-loader').modal("hide");
                if (fileInfo) {
                    if (targetName.includes('cover')) {
                        profileData[targetName] = fileInfo.name;
                        $(".user-profile-banner-wrapper").css("background-image", 'url(' + imageContent + ')');
                    } else if (targetName === 'dp-image') {
                        $(e.target).siblings("input[name=pic]").val(fileInfo.name);
                        $(e.target).siblings("span.square")
                            .css({"background-image": "url(" + imageContent + ")", "background-size": "100% auto"});
                        $(e.target).siblings("span.caption").text("Change Photo");
                    } else if (targetName === 'image') {
                        profileData[targetName] = fileInfo.name;
                        $(".user-profile-banner .image-section img").attr('src', imageContent);
                    } else if (targetName == 'storyStartupLogo') {
                        callback(fileInfo.name);
                    }  else if(targetName === 'galleryImage'){
                        fileInfo.originalFilename = filename;
                        fileInfo.description = description;
                        addImageAfterUpload(fileInfo)
                    }else {
                        if (profileData.startup.businessPlan) {
                            profileData.startup.businessPlan.push({
                                'title': businessDocTitle,
                                'fileName': fileInfo.name
                            });
                        } else {
                            profileData.startup.businessPlan = [{
                                'title': businessDocTitle,
                                'fileName': fileInfo.name
                            }];
                        }

                        personaDocuments(profileData);
                        $(".e-edit").removeClass("hidden");
                    }
                }
            }, error: function (data) {
                $('#modal-loader').modal("hide");
                alert("Error while uploading file :-The file is corrupt and cannot be uploaded");
            }
        });
    }else{
        if (targetName == 'storyStartupLogo') {
            callback($("#upload-startuplogo").data("filename"));
        }
        $(".businessDocsUploadDiv").find("span.text-danger").removeClass("display-n");
        if (targetName == 'galleryImage') {
            $(".gallery-image-error").removeClass("display-n");
            $(".gallery-image-error").removeClass("display-n");
        }
        return false;
    }
}

function addVideoAction() {
    var tabId= $("#gallery .tab-content .tab-pane.active").attr("id");
    var videoLink = $("[name=galleryVideo]").val();
    if(videoLink) {
        $("#videoUploadDiv div.text-danger").addClass("display-n");
        var videoThumbnail = "https://img.youtube.com/vi/" + getYoutubeVideoId(videoLink) + "/0.jpg";
        var video = "<a href='" + videoThumbnail + "' data-group='"+tabId+"' class='html5lightbox'>\n" +
            "<span class=\"cross-icon e-edit\" onclick=\"removeImageFromGallery(event)\"></span>" +
            "                <img src=" + videoThumbnail + " data-id=" + videoLink + " class='video gallery-item'>\n" +
            "            </a>";
        var isImageExists = $("#gallery .tab-content .tab-pane.active .galleryImageDiv .mCSB_container");
        $("#gallery .tab-content .tab-pane.active .galleryImageDiv .no-content-msg").remove();
        if(isImageExists.length){
            $("#gallery .tab-content .tab-pane.active .galleryImageDiv .mCSB_container").append(video);
        }else{
            $("#gallery .tab-content .tab-pane.active .galleryImageDiv").append(video);
            $("div.galleryImageDiv").mCustomScrollbar({
                'autoHideScrollbar': false,
                theme: "dark",
                scrollButtons: {
                    enable: true
                }
            });
        }
        //updateUserGallery();
    }else{
        $("#videoUploadDiv div.text-danger").removeClass("display-n");
        return false;
    }
}

function addImageAfterUpload(fileInfo) {
    var tabId= $("#gallery .tab-content .tab-pane.active").attr("id");
    var desc;
    var description = fileInfo.description === 'undefined' ? '' : fileInfo.description;
    if(fileInfo.description) {
        desc = fileInfo.description.replace(/ /g, "_");
    }

    var imagePath = SIH.getEndPoint("/api/file/user/gallery?fileName=" + fileInfo.name);
    var thumbnailPath = SIH.getEndPoint("/api/file/user/gallery?fileName=" + fileInfo.compressedName);
    var image = "<a href='" + imagePath + "' data-group='"+tabId+"' class='html5lightbox'>\n" +
        "<span class=\"cross-icon e-edit\" onclick=\"removeImageFromGallery(event)\"></span>" +
        "                <img src=" + thumbnailPath + " data-id=" + fileInfo.name + " data-thumbnail=" + fileInfo.compressedName + " data-description=" + desc + " class='gallery-item'>\n" +
        "            <div id=\"imgdesc\">" +description+ "</div></a>";
    var isImageExists = $("#gallery .tab-content .tab-pane.active .galleryImageDiv .mCSB_container");
    $("#gallery .tab-content .tab-pane.active .galleryImageDiv .no-content-msg").remove();
    if(isImageExists.length){
        $("#gallery .tab-content .tab-pane.active .galleryImageDiv .mCSB_container").append(image);
    }else{
        $("#gallery .tab-content .tab-pane.active .galleryImageDiv").append(image);
        $("div.galleryImageDiv").mCustomScrollbar({
            'autoHideScrollbar': false,
            theme: "dark",
            scrollButtons: {
                enable: true
            }
        });
    }
    //updateUserGallery();
}

function removeImageFromGallery(e) {

    $(".modal.del-gallery-image-confirmation-modal").modal('show');

    var modalConfirm = function(callback){
        $("#go-ahead").off().on("click", function(){
            callback(true);
            $(".modal.del-gallery-image-confirmation-modal").modal('hide');
        });

        $("#dont-delete").off().on("click", function(){
            callback(false);
            $(".modal.del-gallery-image-confirmation-modal").modal('hide');
        });
    };

    modalConfirm(function(confirm){
        if(confirm){
            $(e.target).closest(".html5lightbox").remove();
            //updateUserGallery($(e.target).parent(".html5lightbox").data("group"));
        }
    });

    e.preventDefault();
    e.stopPropagation();
}

function updateUserGallery(tabId){
    var galleryJson = {};
    $(".tab-content.gallery-tab-content .tab-pane").each(function (index, val) {
        var tabItemArray = [];
        $(this).find("a img.gallery-item").each(function (i, v) {
            var galleryItem = {};
            if($(this).hasClass('video')){
                galleryItem.videoURL = $(this).data("id");
            }else {
                galleryItem.fileName = $(this).data("id");
                galleryItem.thumbnail = $(this).data("thumbnail");
                var description = $(this).data("description") === 'undefined' ? '' : $(this).data("description");
                if(description!='') {
                    var desc = $(this).data("description").replace(/_/g, " ");
                    galleryItem.description = desc;
                }
            }
            galleryItem.title = $(this).data("title");
            tabItemArray.push(galleryItem);
        });
        galleryJson[$(this).attr('id')] = tabItemArray;
    });

    if(tabId && galleryJson[tabId].length <= 0){
        $("div.galleryImageDiv").mCustomScrollbar("destroy");
        $("#gallery .tab-content .tab-pane.active .galleryImageDiv")
            .html("<p class=\"no-content-msg\">No image or video has been uploaded yet.</p>");
    }

    $.ajax({
        type: "POST",
        url: SIH.getEndPoint("/api/auth/user/updateUserGallery"),
        data: JSON.stringify(galleryJson),
        dataType: 'json',
        contentType: "application/json",
        processData: false,
        headers: {"X-Auth-Token": store.getItem("token")}
    }).done(function (response) {
        $(".html5lightbox").html5lightbox();
    });
}
$(document).on('change', "#imageUploadDiv input[type='file'], .inner-add-info input[type=file], #upload-startuplogo", function(e){
    $("#imageUploadDiv img").remove();

    var reader = new FileReader();

    reader.onload = function(e) {
        imageContent = e.target.result;
        if(store.getItem("role")){
            $("form[name=storyForm]").find("span.square")
                .css({"background-image": "url(" + imageContent + ")", "background-size": "100% auto"});
        }
        $('<img>').attr({src: e.target.result}).prependTo("#imageUploadDiv");
    }

    reader.readAsDataURL($(this)[0].files[0]);
});


$(document).on('click', 'button.addBusinessDocsBtn', function(){
    var template = Handlebars.compile($("#add-business-documents-template").html())
    bootbox.dialog({
        title: 'Add business document',
        message: template(),
        onEscape: true,
        className: 'view-all-focus-sectors designer-cta',
        buttons: {
            upload: {
                label: 'Upload',
                className: 'button',
                callback: upload
            },
        }
    });

    $('input[name="doctitle"]').on('input', function(){
        businessDocTitle = $(this).val();
    });
});

$(document).on('click', 'a.add-social' ,function(){
    $(this).closest('div.edit-inner').next('div.social-edit').slideDown('2000');
    $(this).parent().hide();
    $("div.persona-profile-social-wrapper .preview-profile").hide();
});

function validateFile(targetName, file) {

    var allowedExtensionsForImage = ["image/png", "image/jpeg", "image/jpg"];
    var allowedExtensionsForFile = ["application/pdf", "application/vnd.ms-excel",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "application/vnd.openxmlformats-officedocument.wordprocessingml.document", "application/msword",
        "application/vnd.openxmlformats-officedocument.presentationml.presentation", "application/vnd.ms-powerpoint"];
    var maxFileSizeInBytes = 2097152;
    var maxImageSizeInBytes = 1048576;
    if ($('input[name="'+targetName+'"]').hasClass("file")) {
        if ($.inArray(file.type, allowedExtensionsForFile) < 0) {
            alert("Supported Formats for file uploads are: " + allowedExtensionsForFile.join(" , "));
            return false;
        }
        if (file.size > maxFileSizeInBytes) {
            alert("Maximum file size allowed is 2 MB ");
            return false;
        }
    } else {
        if ($.inArray(file.type, allowedExtensionsForImage) < 0) {
            alert("Supported Formats for file uploads are: " + allowedExtensionsForImage.join(" , "));
            return false;
        }
        if (file.size > maxImageSizeInBytes) {
            alert("Maximum file size allowed is 1 MB ");
            return false;
        }
    }
    return true;
}

$(document).on('click', '#save-button', function(event){
    if(validateIdeaBrief(event)){
        $('textarea[name=ideaBrief]').summernote("destroy");
        $('div.read').html($('textarea[name=ideaBrief]').val());
        $('div.read').show();
        $('[name=ideaBrief]').hide();
        $('#save-button').addClass('hidden');
        $('#edit-button').show();

        if($('div.read').height()>90){
            $(this).parents("div.more-content").addClass('more-content-height-fixed');
            $(this).parents("div.more-content").siblings("a.read-desc").removeClass("hidden");
            $(this).siblings('.more-content-foot').css("display", "block");
        }

        $(".attr-edit").toggleClass("hidden");

        if(profileData.startup){
            profileData.startup.ideaBrief = $('div.read').html();
        }else{
            profileData.description = $('div.read').html();
        }
        // personaAttributes(profileData);
    }
});

function validateIdeaBrief(e){
    var valid = false;
    if($('textarea[name=ideaBrief]').val().replace(/<[^>]*>/g, "").trim() || $('div.read').html()){
        $('textarea[name=ideaBrief]').siblings(".text-danger").addClass("display-n");
        valid = true;
    }else{
        $('textarea[name=ideaBrief]').siblings(".text-danger").removeClass("display-n");
        window.scrollTo({ top: $('.note-editable').offset().top - 200, behavior: 'smooth' });
    }
    return valid;
}

function editor(e){
    $('div.read').hide();
    $('[name=ideaBrief]').summernote(personaJSON);
    $('textarea[name=ideaBrief]').summernote('code', $('div.read').html());
    $('div.read').html("");
    $('#edit-button').hide();
    $('#save-button').removeClass('hidden');
    //$(".attr-edit").toggleClass("hidden");
    $(e.target).parents("div.more-content").removeClass('more-content-height-fixed');
    $(e.target).parents("div.more-content").siblings("a.read-desc").addClass("hidden");
    $(e.target).parents("div.more-content").siblings("a.readLess").addClass("hidden");
    $(e.target).siblings('.more-content-foot').css("display", "none");
}

function editStory(e, storyIndex){
    var source = $("#storyFormTemplate").html();
    if(source){
        var template = Handlebars.compile(source);
        var data = {};
        data.portfolio = profileData.portfolios ? profileData.portfolios[storyIndex] : {};
        data.role = profileData.role;
        $("div.success-stories-container .story-form").html(template(data));
        $('textarea[name=storyGuidanceAreas]').summernote(personaJSON);
        $('textarea[name=storyBrief]').summernote(personaJSON);
        $("#save-story-btn").data("storyIndex", storyIndex);
        $("input[name=storyStartupEntryDate]").datepicker({
            "showButtonPanel": true,
            closeText: 'Clear',
            changeMonth: true,
            changeYear: true,
            yearRange: "c-50:c+10"
        });
    }

    $('div.success-stories-container .story-list').remove();
    $('.success-stories-container .story-form').removeClass('hidden');
}

function delStory(storyIndex) {
    event.stopPropagation();
    event.preventDefault();
    var modalConfirm = function(callback){
        $("#modal-btn-yes").off().on("click", function(){
            callback(true);
            $(".modal.confirmation-modal").modal('hide');
        });

        $("#modal-btn-no").off().on("click", function(){
            callback(false);
            $(".modal.confirmation-modal").modal('hide');
        });
    };

    modalConfirm(function(confirm){
        if(confirm){
            profileData.portfolios.splice(storyIndex, 1);
            $('div.success-stories-container .story-list').remove();
            personaSuccessStories(profileData, true);
        }
    });
}

$(document).on('click', '#save-story-btn', function () {
    var storyIndex = $(this).data("storyIndex");
    if(validateStory()) {
        if(store.getItem("role") == "Incubator" || store.getItem("role") == "Accelerator"|| store.getItem("role") == "Corporate") {
            upload($("#upload-startuplogo"), null, function (filename) {

                updateStory(storyIndex, filename);


            });
        }else if(store.getItem("role") == "Mentor"){
            updateStory(storyIndex);
        }
    }

    function updateStory(storyIndex, filename){
        if(storyIndex){
            profileData.portfolios[storyIndex] = {
                brief: $('textarea[name=storyBrief]').summernote('code'),
                sihProfileUrl: $("input[name=storySihProfileUrl]").val(),
                startupName: $("input[name=storyStartupName]").val(),
                url: $("input[name=storyWebsiteUrl]").val(),
                guidanceAreas: $('textarea[name=storyGuidanceAreas]').length ? $('textarea[name=storyGuidanceAreas]').summernote('code').replace(/<[^>]*>/g, "").trim() : "",
                startupLogo: filename ? filename : "",
                startupEntryDate: $("input[name=storyStartupEntryDate]").length ? $("input[name=storyStartupEntryDate]").val() : ""
            }
        } else {
            profileData.portfolios = Array.isArray(profileData.portfolios) ? profileData.portfolios : [];
            profileData.portfolios.push({
                brief: $('textarea[name=storyBrief]').summernote('code'),
                sihProfileUrl: $("input[name=storySihProfileUrl]").val(),
                startupName: $("input[name=storyStartupName]").val(),
                url: $("input[name=storyWebsiteUrl]").val(),
                guidanceAreas: $('textarea[name=storyGuidanceAreas]').length ? $('textarea[name=storyGuidanceAreas]').summernote('code') : "",
                startupLogo: filename ? filename : "",
                startupEntryDate: $("input[name=storyStartupEntryDate]").length ? $("input[name=storyStartupEntryDate]").val() : ""
            });
        }
        $('textarea[name=storyGuidanceAreas]').summernote('destroy');
        $('textarea[name=storyBrief]').summernote('destroy');

        $("div.success-stories-container .story-form").html("");

        personaSuccessStories(profileData, true);

        $('.success-stories-container .story-form').addClass('hidden');
    }

    $(".success-stories-container .story-list").mCustomScrollbar({
        'autoHideScrollbar': false,
        theme: "dark",
        scrollButtons: {
            enable: true
        }
    });
});

$(document).on('click', '#cancel-story-btn', function () {
    personaSuccessStories(profileData, true);
    $('.success-stories-container .story-form').addClass('hidden');
    $(".success-stories-container .story-list").mCustomScrollbar({
        'autoHideScrollbar': false,
        theme: "dark",
        scrollButtons: {
            enable: true
        }
    });
});

function validateStory() {
    var isValid = true;
    $("form[name=storyForm] input[data-member=true],form[name=storyForm] textarea[data-member=true]").each(function(i) {
        if($(this).prop('required')){
            if(!$(this).val()){
                console.log($(this));
                $(this).siblings("div.text-danger").removeClass("display-n");
                if(i == 0){
                    $(this).focus();
                }
                isValid = false;
            }else{
                $(this).siblings("div.text-danger").addClass("display-n");
            }
        }
    });
    return isValid;
}

$(document).on("click", "#add-story-button", function(e){
    editStory();
});

function removeBuzDoc(event, fileName){
    $.each(profileData.startup.businessPlan, function(i, v) {
        if (v.fileName == fileName) {
            profileData.startup.businessPlan.pop(v);
        }
    });

    personaDocuments(profileData);
}

function validateUrl(inputField) {
    var res = true;
    var re = /((http(s)?(\:\/\/))+(www\.)?([\w\-\.\/])*(\.[a-zA-Z]{2,3}\/?))[^\s\b\n|]*[^.,;:\?\!\@\^\$ -]/g;
    if ($(inputField).val()  && !re.test($(inputField).val())) {
        $(inputField).closest(".input-group").siblings("span.text-danger").removeClass("display-n");
        $(inputField).focus();
        res = false;
    }else{
        $(inputField).closest(".input-group").siblings("span.text-danger").addClass("display-n");
    }
    return res;
}

$(document).on('click', '.social-edit button', function(){
    var twitter = $("input[name='twitterInput']");
    var linkedin = $("input[name='linkedinInput']");
    var facebook = $("input[name='facebookInput']");

    if(profileData.startup){
        profileData.startup.socialInfos = [];
    }else{
        profileData.socialInfos = [];
    }

    if (twitter.val() && validateUrl(twitter)) {
        if(profileData.startup){
            profileData.startup.socialInfos.push({'social':'Twitter','url':twitter.val()});
        }else{
            profileData.socialInfos.push({'social':'Twitter','url':twitter.val()});
        }
    }
    if (linkedin.val() && validateUrl(linkedin)) {
        if(profileData.startup){
            profileData.startup.socialInfos.push({'social':'Linkedin','url':linkedin.val()});
        }else{
            profileData.socialInfos.push({'social':'Linkedin','url':linkedin.val()});
        }
    }
    if (facebook.val() && validateUrl(facebook)) {
        if(profileData.startup){
            profileData.startup.socialInfos.push({'social':'Facebook','url':facebook.val()});
        }else{
            profileData.socialInfos.push({'social':'Facebook','url':facebook.val()});
        }
    }
    if(validateUrl(twitter) && validateUrl(linkedin) && validateUrl(facebook)){
        personaSocialInfo(profileData);

        $(this).closest('div.social-edit').slideUp('1000');
        $("div.persona-profile-social-wrapper .preview-profile").removeClass("hidden");
        $("div.persona-profile-social-wrapper .edit-profile").removeClass("hidden");
    }
});

$(document).on('click', '#save-incubatees-button', function(){
    var currincubatees = $("input[name='currincubatees']");
    var gradincubatees = $("input[name='gradincubatees']");
    if (currincubatees.val()!=null) {
        profileData.numberOfIncubatees=currincubatees.val();
    }
    if (gradincubatees.val() !=null) {
        profileData.numberOFIncubateesGraduated=gradincubatees.val();
    }
    personaIncubateeDetails(profileData, true);
    $("#edit-incubatees-button").removeClass("hidden");
});

$(document).on('click', '#save-location-button', function(){
    saveLocation();
});


$(document).on('click', '#edit-incubatees-button', function(){
    $(".incubatees").toggleClass("hidden");
    $("#edit-incubatees-button").addClass("hidden");

});

$(document).on('click', '#edit-location-button', function(){
    $(".locationshowhide").toggleClass("hidden");
    $("#edit-location-button").toggleClass("hidden");

});

function saveLocation() {
    if(profileData){
        profileData.centerLocations = [];
        var valRes= true;
        $(".person-loc-map-content-placeholder .add-loc-info-part").each(function(i,v){
            var locationObj = {};
            var incubCentLocVal = $(this).find("input[name=incubationCenterLocation]").val();
            var incubCentLocAddrVal = $(this).find("input[name=incubatorCenterLocationAddress]").val();
            if((!incubCentLocVal && incubCentLocAddrVal) || (incubCentLocVal && !incubCentLocAddrVal)){
                if(!incubCentLocVal){
                    $(this).find("input[name=incubationCenterLocation]").siblings("span.text-danger").removeClass("display-n");
                    $(this).find("input[name=incubatorCenterLocationAddress]").siblings("span.text-danger").addClass("display-n");
                }else if(!incubCentLocAddrVal){
                    $(this).find("input[name=incubatorCenterLocationAddress]").siblings("span.text-danger").removeClass("display-n");
                    $(this).find("input[name=incubationCenterLocation]").siblings("span.text-danger").addClass("display-n");
                }
                valRes = false;
            }
            if(valRes){
                if($(this).find("input[name=incubationCenterLocation]").val() && $(this).find("input[name=incubatorCenterLocationAddress]").val()) {
                    locationObj.incubationCenterLocation = $(this).find("input[name=incubationCenterLocation]").val();
                    locationObj.incubatorCenterLocationAddress = $(this).find("input[name=incubatorCenterLocationAddress]").val();
                    profileData.centerLocations.push(locationObj);
                }
            }
        });
        if(valRes) {
            if (profileData.centerLocations) {
                personaLocation(profileData, true);
            }
            $(".locationshowhide").toggleClass("hidden");
            $("#edit-location-button").toggleClass("hidden");
        }
    }
}

$(document).on('change', 'div.swipe-btn input[type=checkbox]', function(){
    if(this.checked){
        $(this).closest("div.inner-add-info")
            .siblings(".add-social-link")
            .children("input[name="+$(this)
                .data('switch')+"]").removeClass("display-n");
    }else{
        $(this).closest("div.inner-add-info")
            .siblings(".add-social-link")
            .children("input[name="+$(this)
                .data('switch')+"]").addClass("display-n").val("");
        $(this).closest("div.inner-add-info")
            .siblings(".add-social-link").children(".text-danger").addClass("display-n");
    }
});

$(document).on('click', 'div.remove-member', function(){
    $(this).parent("div.add-info-part").remove();
});

function saveTeam() {
    if(validateTeamForm()){
        if(profileData.startup){
            profileData.startup.members = [];
        }else if(profileData){
            profileData.members = [];
        }
        if(profileData){
            var memberInfo = $("div.add-employee-sec").find("div.add-info-part");
            $(memberInfo).each(function(i,v){
                var memberObj = {};
                memberObj.socialInfos = [];
                $(this).find("input[data-member='true'], textarea[data-member='true'], input[data-member='true']:hidden").each(function () {
                    if($(this).val()){
                        if($(this).prop('name') === 'Twitter' || $(this).prop('name') === 'Linkedin'){
                            var socialObj = {};
                            socialObj.social = $(this).prop('name');
                            socialObj.url = $(this).val();
                            memberObj.socialInfos.push(socialObj);
                        }else{
                            memberObj[$(this).prop('name')] = $(this).val();
                        }
                    }
                });
                if(profileData.startup && profileData.startup.members){
                    profileData.startup.members.push(memberObj);
                }else if(profileData.members){
                    profileData.members.push(memberObj);
                }
            });
            $("#addTeamTemplate").html("");
            if(profileData.startup && profileData.startup.members){
                $.each(profileData.startup.members, function(i,v){
                    compileTeamMemberTemplate(v);
                });
            }else if(profileData.members){
                $.each(profileData.members, function(i,v){
                    compileTeamMemberTemplate(v);
                });
            }
            var userData = {};
            userData.user = profileData;
            loadMembers(userData);
            //showSnackbar();
        }
        return true;
    }else{
        return false;
    }
}

function validateTeamForm(){
    var res = true;
    $("div.add-employee-sec").find("div.add-info-part").each(function(){
        $(this).find("input[data-member='true'], textarea[data-member='true']").each(function () {
            if($(this).prop('required')){
                if(!$(this).val()){
                    $(this).siblings("span.text-danger").removeClass("display-n");
                    $(this).focus();
                    res = false;
                }else{
                    $(this).siblings("span.text-danger").addClass("display-n");
                }
            }
            if($(this).attr("name") === 'Twitter' || $(this).attr("name") === 'Linkedin'){
                var re = /((http(s)?(\:\/\/))+(www\.)?([\w\-\.\/])*(\.[a-zA-Z]{2,3}\/?))[^\s\b\n|]*[^.,;:\?\!\@\^\$ -]/g;
                if (!$(this).hasClass("display-n") && !re.test($(this).val()) && $(this).val().length > 0) {
                    //alert("url error");
                    $(this).siblings("span.text-danger").removeClass("display-n");
                    $(this).focus();
                    res = false;
                }else{
                    $(this).siblings("span.text-danger").addClass("display-n");
                }
            }
        });
    });
    return res;
}
function showSnackbar(message, classname, showtime) {
    $("#snackbar").addClass("show");
    $("#snackbar").addClass(classname);

    if(message){
        $("#snackbar").html(message);
    }

    setTimeout(function(){
        $("#snackbar").removeClass("show");
        $("#snackbar").removeClass(classname);
    }, showtime || 7000);
}

$(document).on("click", "span a[name=profile-save-changes],button[name=profile-save-changes]", function(event){
    if(validateIdeaBrief() && saveTeam()) {
        $('#modal-loader').modal("show");
        if (profileData.startup && profileData.startup.dippNumber === "") {
            profileData.startup.dippNumber = null;
        }
        var $target = $(event.target);
        var path = $target.data("path");
        path = path + store.getItem("role").toLowerCase();
        if (path) {
            $.ajax({
                type: "POST",
                url: SIH.getEndPoint(path),
                data: JSON.stringify(profileData),
                dataType: 'json',
                contentType: "application/json",
                processData: false,
                headers: {"X-Auth-Token": store.getItem("token")}
            }).done(function (response) {
                $('#modal-loader').modal("hide");
                $('.thankyou-modal .modal-body .heading').html("Success");
                /*if(response.role == "Startup"){
                    $('.thankyou-modal .modal-body p')
                        .html('Your profile has been updated successfully.');
                }else {
                    $('.thankyou-modal .modal-body p')
                        .html('Your profile has been submitted. Your changes will reflect once approved');
                }*/
                $('.thankyou-modal .modal-body p')
                    .html('Your profile has been updated successfully.');
                $('.thankyou-modal').modal('show');
            }).fail(function (xhr) {
                $('#modal-loader').modal("hide");
                var res = JSON.parse(xhr.responseText);
                showSnackbar(res[0].defaultMessage);
                //alert("something went wrong");
            });
        }

        updateUserGallery();
    }
});

function editProfile(e){
    $('#modal-loader').modal("show");

    var updateProfileAPI = SIH.getEndPoint("/api/auth/user/edit/profile");
    $.ajax({
        url: updateProfileAPI,
        type: "GET",
        headers: {"X-Auth-Token": store.getItem("token")},
        datatype: "json",
        success: function (response) {
            profileData = response;
            setTimeout(function () {
                $(".e-edit").toggleClass("hidden");
                $('#modal-loader').modal("hide");
                $(e.target).hide();
            }, 500);
        },
        error: function (response) {
            $('#modal-loader').modal("hide");
            if (response.status == 403) {
                showSnackbar('<i class="fa-2x fa-info-circle"></i>Your profile is under moderation. Please try later once your profile is active.', "alert-info");
            } else {
                showSnackbar('<i class="fa-2x fa-exclamation-triangle"></i>Something went wrong. We are unable to fetch the profile. Please try later.', "alert-danger");
            }
        }
    });
}

function discardChanges(){
    location.reload(true);
}

$(document).on('click' ,'div.member-slider-wrap div.member', function () {
    var data = $(this).data('member');
    loadFirstMember(data, true);
});

$(document).ready(function(){
    $(".profile-vertical-tab-container .static-content-section, .success-stories-container .story-list").mCustomScrollbar({
        'autoHideScrollbar': false,
        theme: "dark",
        scrollButtons: {
            enable: true
        }
    });

    $('.profile-vertical-tab-container.mentor .static-content-section').mCustomScrollbar('destroy');



});

$(document).ajaxStart(function(){
    // Show image container
    $("#loader").show();
});
$(document).ajaxComplete(function(){
    // Hide image container
    $("#loader").hide();
});

$(document).ready(function(){
    $('.allReviews hr.empty').remove();


});

$(window).on('load', function(){
    $(".profile-vertical-tab-container .static-content-section, .success-stories-container .story-list").mCustomScrollbar({
        'autoHideScrollbar': false,
        theme: "dark",
        scrollButtons: {
            enable: true
        }
    });
    // ============
    $('.allReviews').slick({
        infinite: true,
        slidesToShow: 1,
        slidesToScroll: 1,
        dots: true,

    });
});

// $(window).on('resize load',function(){
// if($(window).width() < 768){
//     $().mCustomScrollbar({
//         axis: 'x',
//         advanced: { autoExpandHorizontalScroll: true }
//     })
// }
// })
$(document).ready(function () {
   var pageNumber = 0;
   var searchTerm = getUrlParameter('source');
   var searchPage = $('.notification-container').attr('search-page');
   if (searchTerm) {
      $('#search-listing-input').val(searchTerm);
      if (!(sessionStorage.getItem("tokenValidity") && (new Date().getTime() >= parseInt(sessionStorage.getItem("tokenValidity"))))) {
         getToken();
      }
      getSearch(sessionStorage.getItem("searchToken"));
      getRelatedResult(sessionStorage.getItem("searchToken"));
   }
    
    $("#bucket-list-nav ul.nav-bucket > li > a").on("click", function () {
       var bucket_dict = {
          All: "",
          Resource: "Other",
          Schemes: "Scheme",
          Programs: "Program",
          Challenges: "Challenge",
          Startups: "Funding"
       };
       bucket_name = bucket_dict[$(this).text()];
       console.log("Bucket Name : ", bucket_name);
       const searchTerm = document.getElementById("search-listing-input");
       var req = {
          "maxResults": 10,
          "pageNumber": 0,
          "searchTerm": searchTerm,
          "domainGroup": "INTERNAL",
          "webPageType": "",
          "bucketName": bucket_name
       };
       console.log("Search keyword : ", bucket_name);
       $(".modal.loader").modal("show");
       $.ajax({
          url: "https://search.startupindia.gov.in/search-api/v1/search",
          method: "POST",
          headers: {
             "Content-Type": "application/json",
             "apiKey": sessionStorage.getItem("searchToken")
          },
          data: JSON.stringify(req),
          success: function (data) {
             console.log("Search keyword success: ", bucket_name);
             var source = $('#search-result-listing-template').html();
             var template = Handlebars.compile(source);
             $('#search-list').append(template(data.data));
             if ((parseInt(data.data.searchInformation.pageNumber + 1) * 10) < parseInt(data.data.searchInformation.totalResults)) {
                $(".search-load-more").removeClass('display-n');
             } else {
                $(".search-load-more").addClass('display-n');
             }
             $(".modal.loader").modal("hide");
          }
       });
    });



   $(document).on('keyup', 'input#search-listing-input', function (e) {
      var code = (e.keyCode ? e.keyCode : e.which);
      if (code === 13) {
         var searchListingInput = $('#search-listing-input').val();
         ga('set', 'metric1', 1);
         var dimensionValue = searchListingInput;
         ga('set', 'dimension1', dimensionValue);
         ga("send", "pageview");
         searchTerm = searchListingInput;
         location.href = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + searchPage + '.' + 'html' + (location.port ? '?wcmmode=disabled&' : '?') + 'source=' + searchListingInput
      }
   });

   function getSearch(token) {
      var req = {
         "maxResults": 10,
         "pageNumber": 0,
         "searchTerm": searchTerm,
         "domainGroup": "INTERNAL",
         "webPageType": ""
      };
      var reqExt = {
         "maxResults": 3,
         "pageNumber": 0,
         "searchTerm": searchTerm,
         "domainGroup": "EXTERNAL",
         "webPageType": ""
      };
      var reqDocs = {
         "maxResults": 3,
         "pageNumber": 0,
         "searchTerm": searchTerm,
         "domainGroup": "EXTERNAL",
         "webPageType": "DOC"
      };
      getInternalSearchResult(req, token);
      $.ajax({
         url: "https://search.startupindia.gov.in/search-api/v1/search",
         method: "POST",
         headers: {
            "Content-Type": "application/json",
            "apiKey": token
         },
         data: JSON.stringify(reqExt),
         success: function (data) {
            var template_source = $("#search-result-related-listing-template").html();
            var listingTemplate = Handlebars.compile(template_source);
            searchlist = $('#search-list-right').html(listingTemplate(data.data));
            $(".modal.loader").modal("hide");
         }
      });
      $.ajax({
         url: "https://search.startupindia.gov.in/search-api/v1/search",
         method: "POST",
         headers: {
            "Content-Type": "application/json",
            "apiKey": token
         },
         data: JSON.stringify(reqDocs),
         success: function (data) {
            var template_doc_source = $("#search-related-result-template").html();
            var docsTemplate = Handlebars.compile(template_doc_source);
            $('.document .search-related').html(docsTemplate(data.data));
            $(".modal.loader").modal("hide");
         }
      });
   }

   function getInternalSearchResult(req, token) {
      $(".modal.loader").modal("show");
      $.ajax({
         url: "https://search.startupindia.gov.in/search-api/v1/search",
         method: "POST",
         headers: {
            "Content-Type": "application/json",
            "apiKey": token
         },
         data: JSON.stringify(req),
         success: function (data) {
            var source = $('#search-result-listing-template').html();
            var template = Handlebars.compile(source);
            $('#search-list').append(template(data.data));
            if ((parseInt(data.data.searchInformation.pageNumber + 1) * 10) < parseInt(data.data.searchInformation.totalResults)) {
               $(".search-load-more").removeClass('display-n');
            } else {
               $(".search-load-more").addClass('display-n');
            }
            $(".modal.loader").modal("hide");
         }
      });
   }

   function getRelatedResult(token) {
      var settings = {
         "url": "https://search.startupindia.gov.in/search-api/v1/trendingTerms?maxResults=10&country=India",
         "method": "GET",
         "headers": {
            "apiKey": token,
            "Content-Type": "application/json"
         },
         "processData": false
      }
      $.ajax(settings).done(function (response) {
         var source = $('#search-related-trending-result-template').html();
         var template = Handlebars.compile(source);
         $('.terms .search-related').html(template(response.data));
      });
   }
   $("#loadmore-search").on('click', function () {
      ++pageNumber;
      var req = {
         "maxResults": 10,
         "pageNumber": pageNumber,
         "searchTerm": searchTerm,
         "domainGroup": "INTERNAL",
         "webPageType": ""
      };
      if (!(sessionStorage.getItem("tokenValidity") && (new Date().getTime() >= parseInt(sessionStorage.getItem("tokenValidity"))))) {
         getToken();
      }
      getInternalSearchResult(req, sessionStorage.getItem("searchToken"));
   });

   function getToken() {
      var d = {
         "password": "Test@123",
         "userName": "investindia@gmail.com"
      };
      $.ajax({
         type: "POST",
         url: "https://search.startupindia.gov.in/search-api/v1/getAuthToken",
         contentType: "application/json",
         data: JSON.stringify(d),
         success: function (data) {
            sessionStorage.setItem("searchToken", data.data);
            sessionStorage.setItem("tokenValidity", (new Date()).getTime() + 3000000);
         }
      });
   }
});
(function (factory) {
  'use strict';
  if (typeof define === 'function' && define.amd) {
      // AMD. Register as an anonymous module.
      define(['jquery'], factory);
  } else if (typeof module === 'object' && module.exports) {
      // Node/CommonJS
      module.exports = factory(require('jquery'));
  } else {
      // Browser globals
      factory(jQuery);
  }
}(function ($) {
  'use strict';
  var caretClass   = 'textarea-helper-caret'
    , dataKey      = 'textarea-helper'

    // Styles that could influence size of the mirrored element.
    , mirrorStyles = [ 
                       // Box Styles.
                       'box-sizing', 'height', 'width', 'padding-bottom'
                     , 'padding-left', 'padding-right', 'padding-top'
  
                       // Font stuff.
                     , 'font-family', 'font-size', 'font-style' 
                     , 'font-variant', 'font-weight'
  
                       // Spacing etc.
                     , 'word-spacing', 'letter-spacing', 'line-height'
                     , 'text-decoration', 'text-indent', 'text-transform' 
                     
                      // The direction.
                     , 'direction'
                     ];

  var TextareaHelper = function (elem) {
    if (elem.nodeName.toLowerCase() !== 'textarea') return;
    this.$text = $(elem);
    this.$mirror = $('<div/>').css({ 'position'    : 'absolute'
                                   , 'overflow'    : 'auto'
                                   , 'white-space' : 'pre-wrap'
                                   , 'word-wrap'   : 'break-word'
                                   , 'top'         : 0
                                   , 'left'        : -9999
                                   }).insertAfter(this.$text);
  };

  (function () {
    this.update = function () {

      // Copy styles.
      var styles = {};
      for (var i = 0, style; style = mirrorStyles[i]; i++) {
        styles[style] = this.$text.css(style);
      }
      this.$mirror.css(styles).empty();
      
      // Update content and insert caret.
      var caretPos = this.getOriginalCaretPos()
        , str      = this.$text.val()
        , pre      = document.createTextNode(str.substring(0, caretPos))
        , post     = document.createTextNode(str.substring(caretPos))
        , $car     = $('<span/>').addClass(caretClass).css('position', 'absolute').html('&nbsp;');
      this.$mirror.append(pre, $car, post)
                  .scrollTop(this.$text.scrollTop());
    };

    this.destroy = function () {
      this.$mirror.remove();
      this.$text.removeData(dataKey);
      return null;
    };

    this.caretPos = function () {
      this.update();
      var $caret = this.$mirror.find('.' + caretClass)
        , pos    = $caret.position();
      if (this.$text.css('direction') === 'rtl') {
        pos.right = this.$mirror.innerWidth() - pos.left - $caret.width();
        pos.left = 'auto';
      }

      return pos;
    };

    this.height = function () {
      this.update();
      this.$mirror.css('height', '');
      return this.$mirror.height();
    };

    // XBrowser caret position
    // Adapted from http://stackoverflow.com/questions/263743/how-to-get-caret-position-in-textarea
    this.getOriginalCaretPos = function () {
      var text = this.$text[0];
      if (text.selectionStart) {
        return text.selectionStart;
      } else if (document.selection) {
        text.focus();
        var r = document.selection.createRange();
        if (r == null) {
          return 0;
        }
        var re = text.createTextRange()
          , rc = re.duplicate();
        re.moveToBookmark(r.getBookmark());
        rc.setEndPoint('EndToStart', re);
        return rc.text.length;
      } 
      return 0;
    };

  }).call(TextareaHelper.prototype);
  
  $.fn.textareaHelper = function (method) {
    this.each(function () {
      var $this    = $(this)
        , instance = $this.data(dataKey);
      if (!instance) {
        instance = new TextareaHelper(this);
        $this.data(dataKey, instance);
      }
    });
    if (method) {
      var instance = this.first().data(dataKey);
      return instance[method]();
    } else {
      return this;
    }
  };

}));

//
// var slideWrapWidth = 0;
// $(window).on('load',function(){
//     $('.form-slide-container').closest(".row-container").addClass('form-slide-outer-container clearfix');
//     $('.persona-steps-form-wrap .step-previous').closest(".button").addClass('step-previous-wrap');
//     $('.persona-steps-form-wrap .step-next').closest(".button").addClass('step-next-wrap');
//     slideWidth = $(".form-slide-container").outerWidth();
//
//     $(".form-slide-container .row-container").each(function(){
//         slideWrapWidth = slideWrapWidth + slideWidth;
//     })
//
//     $(".form-slide-container").css("width",slideWrapWidth);
//     $(".form-slide-container .row-container:first-child").addClass('active');
//
// })
// $(function(){
//     var stepPosition = 0;
//     $(".persona-steps-form-wrap input[name='next']").click(function(){
//         if($(".form-slide-container .row-container.active").next('.row-container').length){
//         stepPosition = stepPosition - slideWidth; //next slide
//         }
//         $(".form-slide-container .row-container.active").next('.row-container').addClass('active');
//         $(".form-slide-container .row-container.active").prev('.row-container').removeClass('active');
//         $(".form-slide-container").css("left",stepPosition);
//         $(".persona-timeline-wrap .time-stamp-outer.active").next('.time-stamp-outer').addClass('active');
//         $(".persona-timeline-wrap .time-stamp-outer.active").prev('.time-stamp-outer').removeClass('active');
//         $(".persona-timeline-wrap .time-stamp-outer.active").prev('.time-stamp-outer').addClass('done');
//         var wrapHeight = $(".form-slide-container .row-container.active").outerHeight();
//         $(".form-slide-container").css("height",wrapHeight);
//     });
//     $(".persona-steps-form-wrap input[name='previous']").click(function(){
//         if($(".form-slide-container .row-container.active").prev('.row-container').length) {
//             stepPosition = stepPosition + slideWidth; // previous slide
//         }
//         $(".form-slide-container .row-container.active").prev('.row-container').addClass('active');
//         $(".form-slide-container .row-container.active").next('.row-container').removeClass('active');
//         $(".form-slide-container").css("left",stepPosition);
//         $(".persona-timeline-wrap .time-stamp-outer.active").prev('.time-stamp-outer').addClass('active');
//         $(".persona-timeline-wrap .time-stamp-outer.active").next('.time-stamp-outer').removeClass('active');
//         $(".persona-timeline-wrap .time-stamp-outer.active").removeClass('done');
//         var wrapHeight = $(".form-slide-container .row-container.active").outerHeight();
//         $(".form-slide-container").css("height",wrapHeight);
//     });
// });
function amsResultDetails(applicationId) {
    $('#modal-loader').modal("show");
    $.ajax({
        url: SIH.getEndPoint("/api/noauth/ams/application/" + applicationId + "/result"),
        type: 'GET',
        contentType: "application/json",
    }).done(function (resultData) {
        var data = resultData;
        if (data) {
            $('#modal-loader').modal("hide");
            var dashboardTemplate = Handlebars.compile($("#application-result-details-template").html());
            $("div.application-result-details").html(dashboardTemplate(data));
            if(data.winner.length == 1 && data.winner[0].badgeType == 'SINGLE_WINNER'){
                $('.ams-results-winners > h3').text('Winner');
                $('.winner-list').removeClass('top-three-winner');
                $('.winner-list').removeClass('multiple-winner');
                $('.winner-list').addClass('single-winner');
            }else if(data.winner.length == 3 && data.winner[0].badgeType == 'WINNER_I' || data.winner[0].badgeType == 'WINNER_II' || data.winner[0].badgeType == 'WINNER_III'){
                $('.ams-results-winners  > h3').text('Top 3 Winners');
                $('.winner-list').removeClass('single-winner');
                $('.winner-list').removeClass('multiple-winner');
                $('.winner-list').addClass('top-three-winner');
                $('.top-three-winner li:nth-child(2) .position .position-type sup').text('nd');
                $('.top-three-winner li:nth-child(3) .position .position-type sup').text('rd')
            }else {
                $('.ams-results-winners > h3').text('Multiple Winners (' + data.winner.length + ')' );
                $('.winner-list').removeClass('single-winner');
                $('.winner-list').removeClass('top-three-winner');
                $('.winner-list').addClass('multiple-winner');
            }
        } else {
            bootbox.alert("Error while retrieving data, Please contact support team .");
        }
    }).fail(function (error) {
        if (error && error.responseText) {
            $('#modal-loader').modal("hide");
            if (error.status === 400 && error.responseText) {
                $('.ams-result-error-modal .modal-body p').html(error.responseText);
                $('.ams-result-error-modal').modal('show');
            }else {
                $('.ams-result-error-modal .modal-body p').html(error.responseText);
                $('.ams-result-error-modal').modal('show');
            }
        }
    });
}
function amsDashboardStats() {
    $('#modal-loader').modal("show");
    $.ajax({
        type: "GET",
        url: SIH.getEndPoint("/api/noauth/ams/application/dashboard/result/stats"),
        type: 'GET',
        contentType: "application/json",
        success: function (resultData) {
            $('#modal-loader').modal("hide");
            if(resultData) {
                var dashboardTemplate = Handlebars.compile($("#application-result-dashboard-template").html());
                $("div.application-result-dashboard").html(dashboardTemplate(resultData));

                var background = {
                    type: 'linearGradient',
                    x0: 0,
                    y0: 0,
                    x1: 0,
                    y1: 1,
                    colorStops: [{
                        offset: 0,
                        color: '#d2e6c9'
                    }, {
                        offset: 1,
                        color: 'white'
                    }]
                };
                var programsType = resultData.appTypeCount;

                var programs =  [];

                for(i= 0; i < programsType.length; i++){
                    var data="";
                    if(programsType[i].type == "ACCELERATOR_PROGRAM"){
                        var programsTypeValue =  "ACCELERATOR PROGRAM";
                        data = [programsTypeValue, programsType[i].count]
                        programs.push(data);
                    }
                    else if(programsType[i].type == "INCUBATOR_PROGRAM"){
                        var programsTypeValue =  "INCUBATOR PROGRAM";
                        data = [programsTypeValue, programsType[i].count]
                        programs.push(data);
                    }else{
                        data = [programsType[i].type, programsType[i].count]
                        programs.push(data);
                    }

                }

                setTimeout(function(){
                    $('#jqChart').jqChart({
                        legend: {
                            title: 'Programs Live on the Portal',
                            visible: false
                        },
                        border: {
                            strokeStyle: '#f0f6ff'
                        },
                        background: '#f0f6ff',
                        animation: {
                            duration: 1
                        },
                        shadows: {
                            enabled: true
                        },
                        series: [{
                            type: 'doughnut',
                            innerExtent: 0.5,
                            outerExtent: 1.0,
                            fillStyles: [ '#f7c144', '#43d49f', '#3AABDC', 'rgb(125, 93, 223)'],
                            labels: {
                                stringFormat: '%.1f%%',
                                valueType: 'percentage',
                                font: '18px sans-serif',
                                fillStyle: 'white'
                            },
                            data: programs
                        }]
                    });

                }, 1000);
            }else {
                $('.ams-result-error-modal .modal-body p').html("Error while retrieving data, Please contact support team");
                $('.ams-result-error-modal').modal('show');
            }
        }, error: function (error) {
            if (error && error.responseText) {
                $('#modal-loader').modal("hide");
                if (error.status === 400 && error.responseText) {
                    $('.ams-result-error-modal .modal-body p').html(error.responseText);
                    $('.ams-result-error-modal').modal('show');
                }else {
                    $('.ams-result-error-modal .modal-body p').html(error.responseText);
                    $('.ams-result-error-modal').modal('show');
                }
            }
        }
    })
}
function amsDashboardList() {
    searchAmsResult();
}
var loadMoreOpt = function (data) {
    if (amsSearchResultFilter.page < data.totalPages - 1) {
        $('#loadMoreNew').show();
    } else {
        $('#loadMoreNew').hide();
    }
}
var searchAmsResult = function (type) {
    $('#modal-loader').modal('show');
    $.ajax({
        url: SIH.getEndPoint("/api/noauth/ams/application/result/dashboard"),
        type: 'POST',
        contentType: "application/json",
        dataType: 'json',
        data: JSON.stringify(amsSearchResultFilter),
        success: function (data) {
            if (data) {
                $('#modal-loader').modal("hide");
                if (data.content && data.content.length) {
                    $('#totalEleCount').html(data.totalElements)
                    var dashboardTemplate = Handlebars.compile($("#owl-demo-recent-result-listing").html());
                    $("div#owl-demo-recent-listing").append(dashboardTemplate(data));
                    if(type) {
                        $("#apptype").val(type);
                    }
                    loadMoreOpt(data);
                } else {
                    $('.amsresult-dashboard').find('#loadmoreicon').hide();
                }
            } else {
                $('.ams-result-error-modal .modal-body p').html("Error while retrieving data, Please contact support team");
                $('.ams-result-error-modal').modal('show');
            }
        },
        error: function (error) {
            $('#modal-loader').modal('hide');
            if (error && error.responseText) {
                $('#modal-loader').modal("hide");
                if (error.status === 400 && error.responseText) {
                    $('.ams-result-error-modal .modal-body p').html(error.responseText);
                    $('.ams-result-error-modal').modal('show');
                }else {
                    $('.ams-result-error-modal .modal-body p').html(error.responseText);
                    $('.ams-result-error-modal').modal('show');
                }
            }
        }
    });
};

var amsSearchResultNext = function () {
    amsSearchResultFilter.page = parseInt(amsSearchResultFilter.page) + 1;
    searchAmsResult();
};

var amsSearchResultFilter = {
    query: "",
    page: getParameterByName("page") ? getParameterByName("page") : 0,
    pageSize:9,
    appType: ""
};
if (amsSearchResultFilter.query) {
    $("#search-result-component").val(amsSearchResultFilter.query);
}
$(document).on("change", '#apptype' , function() {
    $('#owl-demo-recent-listing').html("");
    amsSearchResultFilter.page = 0;
    amsSearchResultFilter.query = "";
    amsSearchResultFilter.appType = $("#apptype").val();
    searchAmsResult($("#apptype").val());
});
$(document).on("click", '#search-result-icon' , function(event) {
    $('#owl-demo-recent-listing').html("");
    amsSearchResultFilter.query = $("#search-result-component").val();
    amsSearchResultFilter.page = 0;
    var apptype = $("#apptype").val();
    if(apptype!='' || apptype!='undefined'){
        amsSearchResultFilter.appType = apptype;
    }

    searchAmsResult();
});
$(document).on("keypress", '#search-result-component' , function(event) {
    if (event.which == 13) {
        $('#owl-demo-recent-listing').html("");
        amsSearchResultFilter.query = $("#search-result-component").val();
        var type = $("#apptype").val();
        if(type!='' || type!='undefined'){
            amsSearchResultFilter.appType = type;
        }
        amsSearchResultFilter.page = 0;
        searchAmsResult();
    }
});
(function ($) {
    $(document).on("ready", function () {
        
        $('.partnership-banner .home-banner').prepend(`<div id="particles-js"></div>`);
        try{
        particlesJS("particles-js", {
            "particles": {
                "number": {
                    "value": 80,
                    "density": {
                        "enable": false,
                        "value_area": 800
                    }
                },
                "color": {
                    "value": "#ffffff"
                },
                "shape": {
                    "type": "circle",
                    "stroke": {
                        "width": 0,
                        "color": "#000000"
                    },
                    "polygon": {
                        "nb_sides": 5
                    },
                    "image": {
                        "src": "img/github.svg",
                        "width": 100,
                        "height": 100
                    }
                },
                "opacity": {
                    "value": 0.5,
                    "random": false,
                    "anim": {
                        "enable": false,
                        "speed": 1,
                        "opacity_min": 0.1,
                        "sync": false
                    }
                },
                "size": {
                    "value": 3,
                    "random": true,
                    "anim": {
                        "enable": false,
                        "speed": 40,
                        "size_min": 0.1,
                        "sync": false
                    }
                },
                "line_linked": {
                    "enable": true,
                    "distance": 150,
                    "color": "#ffffff",
                    "opacity": 0.4,
                    "width": 1
                },
                "move": {
                    "enable": true,
                    "speed": 3,
                    "direction": "none",
                    "random": false,
                    "straight": false,
                    "out_mode": "out",
                    "bounce": false,
                    "attract": {
                        "enable": false,
                        "rotateX": 600,
                        "rotateY": 1200
                    }
                }
            },
            "interactivity": {
                "detect_on": "canvas",
                "events": {
                    "onhover": {
                        "enable": false,
                        "mode": "repulse"
                    },
                    "onclick": {
                        "enable": false,
                        "mode": "push"
                    },
                    "resize": true
                },
                "modes": {
                    "grab": {
                        "distance": 400,
                        "line_linked": {
                            "opacity": 1
                        }
                    },
                    "bubble": {
                        "distance": 400,
                        "size": 40,
                        "duration": 2,
                        "opacity": 8,
                        "speed": 3
                    },
                    "repulse": {
                        "distance": 200,
                        "duration": 0.4
                    },
                    "push": {
                        "particles_nb": 4
                    },
                    "remove": {
                        "particles_nb": 2
                    }
                }
            },
            "retina_detect": true
        });
        var count_particles, stats, update;
        stats = new Stats;
        stats.setMode(0);
        stats.domElement.style.position = 'absolute';
        stats.domElement.style.left = '0px';
        stats.domElement.style.top = '0px';
        document.body.appendChild(stats.domElement);
        count_particles = document.querySelector('.js-count-particles');
        update = function () {
            stats.begin();
            stats.end();
            if (window.pJSDom[0].pJS.particles && window.pJSDom[0].pJS.particles.array) {
                count_particles.innerText = window.pJSDom[0].pJS.particles.array.length;
            }
            requestAnimationFrame(update);
        };
        requestAnimationFrame(update);
    }
    catch(err){
        console.error('particle.js failed');
    }
    });

    $( document ).ready(function() {
        var isMobile = window.matchMedia("(max-width: 767px)").matches;
        if (isMobile) {
            $('.reports-tab .reports-items').slick({
                infinite: false,
                speed: 300,
                slidesToShow: 1,
                slidesToScroll: 1,
                centerMode: true,
                dots: false,
                arrows: false,
                centerPadding: '60px',
            });
            $('.blogs-tab .blogs-items').slick({
                infinite: false,
                speed: 300,
                slidesToShow: 1,
                slidesToScroll: 1,
                centerMode: true,
                dots: false,
                arrows: false,
                centerPadding: '60px',
            })
            
            $('.resources-container #tab-1 a').click(function(){
                $('.blogs-tab .blogs-items').slick('unslick');
                $('.blogs-tab .blogs-items').slick({
                    infinite: false,
                    speed: 300,
                    slidesToShow: 1,
                    slidesToScroll: 1,
                    centerMode: true,
                    dots: false,
                    arrows: false,
                    centerPadding: '60px',
                })
            });
            $('.yt-playlist-card .inner').slick({
                infinite: false,
                    speed: 300,
                    slidesToShow: 1,
                    slidesToScroll: 1,
                    centerMode: true,
                    dots: false,
                    arrows: false,
                    centerPadding: '60px',
                });
        }
        
    });

    $(window).on('resize', function() {
        console.log('resize');
        
        var isMobile = window.matchMedia("(max-width: 767px)").matches;
        if (isMobile) {
           
            $('.reports-tab .reports-items').slick({
                infinite: false,    
                slidesToScroll: 1,
                centerMode: true,
                dots: false,
                arrows: false,
                centerPadding: '60px',
            });
            $('.blogs-tab .blogs-items').slick({
                infinite: false,
                speed: 300,
                slidesToShow: 1,
                slidesToScroll: 1,
                centerMode: true,
                dots: false,
                arrows: false,
                centerPadding: '60px',
            })
            
            $('.resources-container #tab-1 a').click(function(){
                $('.blogs-tab .blogs-items').slick('unslick');
                $('.blogs-tab .blogs-items').slick({
                    infinite: false,
                    speed: 300,
                    slidesToShow: 1,
                    slidesToScroll: 1,
                    centerMode: true,
                    dots: false,
                    arrows: false,
                    centerPadding: '60px',
                })
            });
            $('.yt-playlist-card .inner').slick({
                infinite: false,
                    speed: 300,
                    slidesToShow: 1,
                    slidesToScroll: 1,
                    centerMode: true,
                    dots: false,
                    arrows: false,
                    centerPadding: '60px',
                });
        }
    });

    $(window).on("load resize", function () {
        let containerW = $(".key-features .container").outerWidth();
        let windowW = $(window).width();
        let cornerW = (windowW - containerW) / 2;
        let sliderW = windowW - cornerW;
        $('.current-campaign-slider.container').css({
            "max-width": sliderW,
            "width": sliderW
        });
        $('.current-campaign-slider.container').closest('.row-container').addClass("clearfix");
        $('.current-campaign-slider').slick({
            infinite: true,
            speed: 300,
            slidesToShow: 3,
            slidesToScroll: 1,
            centerMode: false,
            dots: false,
            centerMode: true,
            centerPadding: '60px',

            responsive: [{
                    breakpoint: 768,
                    settings: {
                        slidesToShow: 2,
                        slidesToScroll: 1,
                        infinite: false,
                    }
                },
                {
                    breakpoint: 480,
                    settings: {
                        slidesToShow: 1,
                        slidesToScroll: 1,
                        infinite: false,
                    }
                }
            ]
        });

        $(".current-campaign-slider .slick-next").css("right", `${cornerW + 15}px`);
        $(".current-campaign-slider .slick-prev").css("right", `${cornerW + 75}px`);
        
    });
    $('.logo-slider-wrap').slick({
        infinite: true,
        speed: 300,
        slidesToShow: 5,
        slidesToScroll: 5,
        centerMode: false,
        dots: false,
        variableWidth: false,
        responsive: [{
                breakpoint: 768,
                settings: {
                    slidesToShow: 2,
                    slidesToScroll: 1,
                    centerMode: true,
                }
            },
            {
                breakpoint: 480,
                settings: {
                    slidesToShow: 1,
                    slidesToScroll: 1,
                    centerMode: true,
                }
            }
        ]
    });

    try {
        $('.counter').counterUp({
            delay: 10,
            time: 1000
        });
    }catch (e) {
        
    }
    $(".testimonial-cards").mCustomScrollbar({'autoHideScrollbar':true});
})(jQuery);
// ===========================================================
/*
const $element = $('.unicorn-banner.partnership-banner img');
const imagePath = '/content/dam/invest-india/partnership/partner-banner';
const totalFrames = 112;
const animationDuration = 2000;
const timePerFrame = animationDuration / totalFrames;
let timeWhenLastUpdate;
let timeFromLastUpdate;
let frameNumber = 1;

// 'step' function will be called each time browser rerender the content
// we achieve that by passing 'step' as a parameter to the 'requestAnimationFrame' function
function step(startTime) {
    // 'startTime' is provided by requestAnimationName function, and we can consider it as current time
    // first of all we calculate how much time has passed from the last time when frame was update
    if (!timeWhenLastUpdate) timeWhenLastUpdate = startTime;
    timeFromLastUpdate = startTime - timeWhenLastUpdate;

    // then we check if it is time to update the frame
    if (timeFromLastUpdate > timePerFrame) {
        // and update it accordingly
        $element.attr('src', imagePath + `/partnership_banner_${frameNumber}.png`);
        // reset the last update time
        timeWhenLastUpdate = startTime;

        // then increase the frame number or reset it if it is the last frame
        if (frameNumber >= totalFrames) {
            frameNumber = 1;
        } else {
            frameNumber = frameNumber + 1;
        }
    }

    requestAnimationFrame(step);
}

// create a set of hidden divs
// and set their background-image attribute to required images
// that will force browser to download the images
$(document).ready(() => {
    for (var i = 00000; i < totalFrames + 1; i++) {
        $('body').append(`<div id="preload-image-${i}" style="background-image: url('${imagePath}/partnership_banner_${i}.png');"></div>`);
    }
});

// wait for images to be downloaded and start the animation
$(window).on('load', () => {
    requestAnimationFrame(step);
});*/

(function(){
    
   
    $(".offline-video-thumb .offline-play-pause").on("click",function(){
        $("#loginModal").modal('show');
    })
    $(window).load(function(){

        $(".hero-container .slick-slide").each(function(){
            
            if($(this).find(".offline-video-thumb").length){
                if(store.getItem("token")){
                    $(this).find(".offline-video-thumb").remove();
                }   
                else{
                    $(this).find(".off-videoContainer").remove();
                    // $("#videoContainer").remove();
                }
            }
        });
    })
    
    // $('.carouselherobanner .home-banner').on('beforeChange', function(event, slick, currentSlide, nextSlide){
    //     console.log(currentSlide);
    //     // #video.pause()
    //   });
})(jQuery);
function getToDetailsPage(applicationDetailBaseUrl) {
    $('#modal-loader').modal('show');
    var applicationObj = JSON.parse(sessionStorage.getItem("applicationObj"));
    window.location.href = applicationDetailBaseUrl + "/" + applicationObj.application.type.toLowerCase().replace("_", "-") + "-details.html";
    $('#modal-loader').modal('hide');
}
var finalSubmit = false;
var isWorkshopApp = false;
function saveDetailsForm() {
    			var data = JSON.parse(sessionStorage.getItem('programDetailsReq'));
    			data.status = "SUBMITTED";
                $.ajax({
                url: SIH.getEndPoint("/api/auth/ams/application/updateApplication"),
                data: JSON.stringify(data),
                type: 'POST',
                dataType: 'json',
                async:false,
                contentType: "application/json",
                beforeSend: setAuthTokenHeader,
                success: function (response) {
                    if (response && response.id) {
                        sessionStorage.setItem('amsApplicationId', response.id);
                    }
                    finalSubmit = true;
                    isWorkshopApp = response.data.type == 'WORKSHOP';
                },
                error: function (response) {
                    if (response && response.status === 400) {
                        populateFormErrors(response, null, $target);
                        amsErrorBlockScroll();
                    } else if (response && response.status === 403) {
                        $('.ams-error-modal .modal-body p').html("You are not authorized to perform the action");
                        $('.ams-error-modal').modal('show');
                    }
                    else {
                        $('.ams-app-container .error-message').addClass('alert-danger').removeClass('alert-success');
                        if (response && response.responseText) {
                            $('.ams-app-container .error-message .err-content').text(response.responseText);
                        }
                        $('.ams-app-container .error-message , .ams-app-container .error-message .err-content').removeClass('display-n');
                        amsFormScrollTop();
                    }
                    $('#modal-loader').modal('hide');
                }
            });
}
addBtnList();
paramLoadEvent();

function paramLoadEvent(){
    $('div[class*="sub-parameter-"]').hide();
    if(sessionStorage.getItem("amsApplicationId")){
        fetchAllParameters();
    }
}

function saveQuestionForm(){
    var acdata = JSON.parse(sessionStorage.getItem('questionReq'));
    acdata.status = "SUBMITTED";
    var saveSuccess = function (data) {
        if (data) {
            applicationObj = data;
            sessionStorage.setItem("questionReq",JSON.stringify(applicationObj));
            sessionStorage.setItem("applicationObj",JSON.stringify(data));
            sessionStorage.setItem("amsApplicationId",applicationObj.application.id);
            if (status === 'DETAILS_DRAFTED') {
                renderAdditionalQuestionData();
                showSuccessMessage("Application saved successfully.")
            } else if (status === 'SUBMITTED') {
                showSuccessMessage("Application saved successfully.");
            }
            finalSubmit = true;
            if(isWorkshopApp) {
                isWorkshopApp = applicationObj.application.type == 'WORKSHOP';
            }
        }
        $('#modal-loader').modal('hide');
        };
    $.ajax({
        url: SIH.getEndPoint("/api/auth/ams/application/" + acdata.application.id + "/questions"),
        type: 'POST',
        contentType: "application/json",
        headers: {
            "X-Auth-Token": store.getItem("token")
        },
        async:false,
        data: JSON.stringify(acdata),
        success: saveSuccess,
        error: function (data) {
            if (data && data.responseText) {
                showErrorMessage(data.responseText);
            } else {
                console.error("Something bad happened at Server while fetching the existing application. Please check the following error log.");
                console.error(data);
            }
            $('#modal-loader').modal('hide');
        }
    })
}

function amsFinalSubmit(){
    saveDetailsForm();
    if(finalSubmit){
    	saveQuestionForm();
    }
    if(finalSubmit && !isWorkshopApp){
    var acdata = JSON.parse(sessionStorage.getItem('parameterApplicationReq'));
    var saveSuccess = function (data) {
        if (data) {
            if(status == "PARAMETER_DRAFTED"){
                sessionStorage.setItem('amsParameterAppId', data.id);
                sessionStorage.setItem('parameterApplicationReq',JSON.stringify(parameterObj));
                showSuccessMessage("Application saved successfully.");
            }
            if(status == "SUBMIT"){
                sessionStorage.setItem('parameterApplicationReq',JSON.stringify(parameterObj));
                showSuccessMessage("Application saved successfully.");
                previewApplicationStep(data);
            }
        }
        $('#modal-loader').modal('hide');
    };
    $.ajax({
        url: SIH.getEndPoint("/api/auth/ams/application/parameter"),
        type: 'POST',
        dataType: 'json',
        contentType: "application/json",
        data: JSON.stringify(acdata),
        async:false,
        headers: {
                'Content-Type': 'application/json',
                "X-Auth-Token": store.getItem("token")
            },
        success: saveSuccess,
        error: function (data) {
            if (data && data.responseText) {
                showErrorModal(data.responseText);
            } else {
                showErrorModal("Some error occurred while saving the application.");
                console.error(data);
            }
            finalSubmit = false;
            $('#modal-loader').modal('hide');
        }
    });
    }
    if(finalSubmit){
        sessionStorage.removeItem("programDetailsReq");
        sessionStorage.removeItem("amsaApplicationPath");
        sessionStorage.removeItem("applicationObj");
        sessionStorage.removeItem("questionReq");
		window.location.href="/content/sih/en/create-application/application-saved.html";
    } else {
		showErrorModal("Some error occurred while saving the application.");
	}
}



$(document).on('change', '#parameter', function (event) {
    var parent = $(this).closest(".parameter-fields");
    $(parent).find('input[type=checkbox]').prop("checked",false);
    $(parent).find('input[type=text]').val("");
    $(parent).find('div[class*="sub-parameter-"]').hide();
    $(parent).find('.sub-parameter-'+$(this).children('option:selected').val()).show();
});
$(document).on('click', '.parameter-repeat .repeat-add', function (event) {
    var $target = $(event.target);
    var maxLimit = $(".parameter-repeat .repeat-add").data("limit");
    var parent = $target.closest(".parameter-repeat");
    var toRepeat = parent.find(".parameter-fields").first();
    var clone = toRepeat.clone();
    clone.find("button.repeat-add").remove();

    var nowId = $.now();
    clone.attr("id", nowId);
    clearElements(clone);

    clone.find(".ams-title.ams-selector-heading .weightage-head")
        .append('<div class="close-repeat-fields btn btn-primary personaOrangeCTA" data-close-id="' + nowId + '">Remove</div>');

    clone.find(".ams-title.ams-selector-heading h3").text("Parameter " + (parent.find(".parameter-fields").length+1));
    clone.find("input[type=checkbox]").each(function(){
		var forAttr = $(this).closest("label.control").attr("for");
		$(this).closest("label.control").attr("for",forAttr+"-"+nowId);
        var id = $(this).attr("id");
		$(this).attr("id",id+"-"+nowId);
    });
    clone.insertBefore("div button.repeat-add");
    clone.find('div[class*="sub-parameter-"]').hide();
    clone.find('.help-block').html("");
    if (maxLimit && parent.find(".parameter-fields").length >= maxLimit ) {
            parent.find(".repeat-add").hide();
    }
});
$(document).on('click', '.parameter-fields .close-repeat-fields', function(){
    var parent = $(this).closest(".parameter-repeat");
    var closeId= $(this).data('close-id');
    $(this).closest('#'+closeId).next().find(".ams-title.ams-selector-heading h3").html("Parameter " + ($(this).closest(".parameter-fields").length + 1));
    $(this).closest('#'+closeId).each(function(index){
		$(this).find(".ams-title.ams-selector-heading h3").html("Parameter " + index);

    });
	var closeValue = parseInt($(this).closest('#'+closeId).find(".ams-title.ams-selector-heading .weightage-head span").html());
    //var totalValue = parseInt($('.ams-title.ams-selector-heading.ams-selector-total span').html());
    //$('.ams-title.ams-selector-heading.ams-selector-total span').html(totalValue);
    $('#'+closeId).remove();

    var total = 0;
    parent.find(".parameter-fields").each(function(index){
        $(this).find(".ams-title.ams-selector-heading h3").html("Parameter " + (index+1));
        var weightage = $(this).find("input[type=number][name=weightage]").val();
        if(weightage!=''){
			total = parseInt(total) + parseInt(weightage);
        }
    });
	$('.ams-title.ams-selector-heading.ams-selector-total span.total-marks').html(parseInt(total));
    parent.find(".repeat-add").show();
});
$(document).on('blur', '.parameter-repeat .weightage', function (event) {
	var $target = $(event.target);
    var grandParent = $target.closest(".parameter-repeat");
    var parent = $target.closest(".parameter-fields");
    var weightage = $target.val();
    var selectorTotal = $('.ams-title.ams-selector-heading.ams-selector-total span.total-marks');
    if(weightage == '') {
        var total = 0;
        $(grandParent).find("input[name='weightage']").each(function(index,value){
            if($(this).val()!=''){
				total = parseInt(total) + parseInt($(this).val());
            }
        });
        selectorTotal.text(total);
        $target.val("");
        weightage = 0;
    }
    if(weightage.includes("\.")){
        $(this).val(parseInt(weightage));
        showErrorMessage("Please enter an integer value");
    }
    if(weightage>=0 &&weightage<=100) {
        var total = 0;
        $(grandParent).find("input[name='weightage']").each(function(index,value){
            if($(this).val()!=''){
				total = parseInt(total) + parseInt($(this).val());
            }
        });
        selectorTotal.text(total);
    } else {
		$target.val("");
    }
});
function addBtnList() {
    var formType = null;
    if(sessionStorage.getItem("programDetailsReq")) {
        formType = JSON.parse(sessionStorage.getItem("programDetailsReq")).formType;
    }
    $(".ams-application-form").find("ul.param-action-btn-list").html(
            "                <li>\n" +
            "                    <a href='javascript:void(0)' onclick=\"goToQuestionSelectionPage()\" class=\"back-btn\"> &lt; PREVIOUS</a>\n" +
            "                </li>\n" +
            "                <li>\n" +
            "                    <button type=\"button\" onclick=\"submitParameterApplication('PARAMETER_DRAFTED',false,'"+formType+"')\" class=\"draft-btn\">save as draft</button>\n" +
            "                </li>\n" +
            "                <li>\n" +
            "                    <button type=\"button\" onclick=\"submitParameterApplication('SUBMIT',false,'"+formType+"')\" class=\"next-btn\" style=\"width:270px;\">Preview & Submit</button>\n" +
            "                </li>");
}

function goToQuestionSelectionPage() {
	var $form = $("#amsParameterSelector");
    var applicationDetailBaseUrl = $form.data("question-selection-base-url");
    window.location.href = applicationDetailBaseUrl + ".html?applicationId=" + sessionStorage.getItem("amsApplicationId");
}

function previewApplicationStep(data){
	var previewLink = $('#amsParameterSelector').data('preview-base-url');
    var applicationObj = JSON.parse(sessionStorage.getItem("applicationObj"));
    //if(applicationObj==null){
       //applicationObj={application:{type:"challenge"}};
       // alert('applicationObj is null');
    //}
    window.location.href = previewLink + "/" + applicationObj.application.type.toLowerCase().replace("_", "-") + ".html?applicationId=" + data.applicationId;
}

var submitParameterApplication = function (status, isFinal, formType) {
    if(formType == 'WORKSHOP'){
        var isValid = submitApplication('DETAILS_DRAFTED');
        if(isValid){
            $('#modal-loader').modal('show');
            var applicationObj = JSON.parse(sessionStorage.getItem("programDetailsReq"));
            if(applicationObj) {
                var previewLink = $('#amsQuestionnaire').data('preview-base-url');
                window.location.href = previewLink + "/" + applicationObj.type.toLowerCase().replace("_", "-") + ".html?applicationId=" + (applicationObj.id != null?applicationObj.id : sessionStorage.getItem("amsApplicationId"));
            } else {
                checkUserProfileExists();
            }
            $('#modal-loader').modal('hide');
        }
        return;
    } else {
        var parameterObj = {};
        var isValid = validateParameterSelection();
        if (isValid) {
                if(!sessionStorage.getItem("amsApplicationId")){
                    showErrorMessage("This application cannot be saved!");
                    return;
                }
                $('#modal-loader').modal('show');
                parameterObj = createFinalJson(parameterObj);
                if(isFinal){
                    parameterObj.id = sessionStorage.getItem('parameterApplicationObj');
                }
                var saveSuccess = function (data) {
                    if (data) {
                        if(status == "PARAMETER_DRAFTED"){
                            sessionStorage.setItem('amsParameterAppId', data.id);
                            sessionStorage.setItem('parameterApplicationReq',JSON.stringify(parameterObj));
                            showSuccessMessage("Application saved successfully.");
                        }
                        if(status == "SUBMIT"){
                            sessionStorage.setItem('amsParameterAppId', data.id);
                            sessionStorage.setItem('parameterApplicationReq',JSON.stringify(parameterObj));
                            showSuccessMessage("Application saved successfully.");
                            previewApplicationStep(data);
                        }

                    }
                    $('#modal-loader').modal('hide');
                };
                $.ajax({
                    url: SIH.getEndPoint("/api/auth/ams/application/parameter"),
                    type: 'POST',
                    dataType: 'json',
                    contentType: "application/json",
                    data: JSON.stringify(parameterObj),
                    headers: {
                            'Content-Type': 'application/json',
                            "X-Auth-Token": store.getItem("token")
                        },
                    success: saveSuccess,
                    error: function (data) {
                        if (data && data.responseText) {
                            showErrorMessage(data.responseText);
                        } else {
                            showErrorMessage("Something bad happened while saving the application.");
                            console.error(data);
                        }
                        $('#modal-loader').modal('hide');
                    }
                });
        } else {
             showErrorMessage("Please fill all mandatory fields.");
        }
    }
};

function validateParameterSelection(){
    $(".help-block").html("");
	var status = true;
	var grand = $('.parameter-repeat');
    $(grand).find("select#parameter").each(function(index){
        if($(this).children("option:selected").val() === ''){
            showValMsg(this,"This is Mandatory");
            return status = false;
        }
        if(status){
            if($(this).children("option:selected").val() === 'others') {
				if($(this).closest(".parameter-fields").find("input[type=text][name=subParameter]").val()==''){
                    showValMsg(this,"This is Mandatory");
                    return status = false;
                }
            }else{
                var checkbox = $(this).closest(".parameter-fields").find("input[type=checkbox][name=subParameter]:checked");
                if($(checkbox).length <= 0){
					showValMsg(this,"This is Mandatory");
                    return status = false;
                }
              }
            }
    });

    $(grand).find("input[name='weightage']").each(function(index){
        if($(this).val() === '') {
            showValMsg(this,"This is Mandatory");
            return status = false;
        }
    });


	return status;
}

function goToDashboard() {
    window.location = $('.dashboard').attr('href');
}
function createFinalJson(applicationObj){
    var parameterList = [];
    if(sessionStorage.getItem("amsParameterAppId")){
		applicationObj.id = sessionStorage.getItem("amsParameterAppId");
    }
	applicationObj.applicationId = sessionStorage.getItem("amsApplicationId");
    applicationObj.status = "drafted";
    $(".parameter-repeat .parameter-fields").each(function(index){
        var item = {};
        item.parameter = $(this).find("#parameter option:selected").val();
		item.weightage = $(this).find("input[name='weightage']").val();
		item.subParameter = [];
        if($(this).find("#parameter option:selected").val() === "others") {
        	item.subParameter.push($(this).find("input[type='text'][name='subParameter']").val());
        } else {
            $.each($(this).find("input[name='subParameter']:checked"), function(index){
                item.subParameter.push($(this).val());
            });
        }
        parameterList.push(item);
    });
    applicationObj.parameterList = parameterList;
	return applicationObj;
}

function addRepeatedFields(count){
    var parameterRepeat = $('.parameter-repeat');
    var $target = $(".button.repeat-add");
    var toRepeat = parameterRepeat.find(".parameter-fields").first();
    if(count === 0) {
        return toRepeat;
    }
    var clone = toRepeat.clone();
    var nowId = $.now();
    clone.attr("id", nowId);
    clearElements(clone);
    clone.find(".ams-title.ams-selector-heading .weightage-head")
    .append('<div class="close-repeat-fields btn btn-primary personaOrangeCTA" data-close-id="' + nowId + '">Remove</div>');
    clone.find("button.repeat-add").remove();
	clone.insertBefore($target);
    return clone;
}

function fetchAllParameters(){
    $('#modal-loader').modal('show');
    var saveSuccess = function (data) {
        if (data) {
            sessionStorage.setItem("amsParameterAppId", data.id);
            var parameterList = data.parameterList;
            var totalWeightage = 0;
            $(parameterList).each(function(index,value){
                var position = (index+1);
                var clone = addRepeatedFields(index);
                $(clone).find(".ams-title.ams-selector-heading h3").text("Parameter "+position);
                $(clone).find("#parameter").children("option[value='"+value.parameter+"']").prop("selected",true);
                $(clone).find("input[name=weightage]").val(value.weightage);
                totalWeightage += value.weightage;
                $(clone).find('div[class*="sub-parameter-"]').hide();
                $(clone).find('.sub-parameter-'+value.parameter).show();
                if(value.parameter === 'others') {
                    $(clone).find("input[name='subParameter']").val(value.subParameter);
                } else {
                    $(value.subParameter).each(function(index,value){
                        $(clone).find("input[type=checkbox][value='"+value+"']").prop("checked",true);
                    });
                }
            });
            $(".ams-title.ams-selector-heading.ams-selector-total h3 span.total-marks").text(totalWeightage);
        }
        $('#modal-loader').modal('hide');
    };
    $.ajax({
        url: SIH.getEndPoint("/api/auth/ams/application/parameterDetails/"+sessionStorage.getItem("amsApplicationId")),
        type: 'GET',
        beforeSend: setAuthTokenHeader,
        success: saveSuccess,
        error: function (data) {
            if (data && data.responseText) {
                showErrorMessage(data.responseText);
            } else {
                showErrorMessage("Something bad happened while saving the application.");
                console.error(data);
            }
            $('#modal-loader').modal('hide');
        }
    });
}

var showErrorModal = function (errorMessage, callback) {
    $('.ams-error-modal .modal-body p').html(errorMessage);
    $('.ams-error-modal').modal('show').on('hidden.bs.modal', callback);
};

var showErrorMessage = function (errorMessage) {
    var amsError = $('#ams-error');
    amsError.show();
    $('#ams-success').hide();
    amsError.html(errorMessage);
    scrollTo(0, amsError.offset().top - 200);
};

function showValMsg(element,msg){
    $(element).closest(".form-group").find(".help-block").css("color","red");
	$(element).closest(".form-group").find(".help-block").html(msg);
}

$(document).ready(function(){
    if(sessionStorage.getItem("applicationObj")){
        var progtype = JSON.parse(sessionStorage.getItem("applicationObj")).application.formType;
        if(progtype!=null || progtype != undefined || progtype != ''){
            progtype = progtype.toLowerCase().replace(/_/g," ");
            $(".ams-title.ams-selector-heading.ams-selector-total h3 span.program-type").text(progtype);
        } else {
            $(".ams-title.ams-selector-heading.ams-selector-total h3 span.program-type").text("program");
        }
    }
    $('input.go-to-home').click(function(){
        window.location.href = "/content/sih/en/home-page.html";
    });
});
function fetchBlogs(searchParam, path, numberOfBlogs){
    var query = "";

    if (searchParam !== ""){
        var tagQuery = getUrlParameter('tag', searchParam)
        if (tagQuery && tagQuery.trim()) {
            query += "&tag=" + tagQuery.trim();
        }
        var monthQuery = getUrlParameter('month', searchParam)
        if (monthQuery && monthQuery.trim()) {
            query += "&month=" + monthQuery.trim();
        }
        var yearQuery = getUrlParameter('year', searchParam)
        if (yearQuery && yearQuery.trim()) {
            query += "&year=" + yearQuery.trim();
        }
        var searchQuery = getUrlParameter('query', searchParam)
        if (searchQuery && searchQuery.trim()) {
            query += "&query=" + searchQuery.trim();
        }
        path = path + "?" + query.substring(1, query.length);
    }
    $('#bloglist-container').html('');
    var source = $("#bloglist-template").html();
    var template = Handlebars.compile(source);
    $.ajax({
        type: "GET",
        url: path,
        dataType: "json",
        error: function(){
            $(".blogLoadMore").addClass("display-n");
        }
    }).done(function (data) {
        if ($.trim(data)) {
            if (numberOfBlogs === '-1') {
                $("#bloglist-container").append(template(data.slice(0)));
            } else {
                $("#bloglist-container").append(template(data.slice(0, numberOfBlogs)));
            }
            if (numberOfBlogs === '-1') {
                if(data.length > 6){
                    $(".blogLoadMore").removeClass("display-n");
                    lazyloader(null, null, null, path);
                } else {
                    $(".blogLoadMore").addClass("display-n");
                }
            } else if (numberOfBlogs === '3') {
                $("#bloglist-container").removeClass("block-container").addClass("padding-l15 padding-r15");
            }
            equalHeights();
        }
    });
}
function getRedirectLink(tagParam) {
    var currentTag = getUrlParameter("tag", location.search.substr(1));
    var redirectUrl = "/content/sih/en/bloglist.html?tag=";
    if(currentTag){
        if(currentTag.indexOf(",") > 0){
            var tags = currentTag.split(",");
            var exists = tags.find(function(item){return item === tagParam})
            if(exists && exists.length){
                tags = tags.filter(function(item) {return item !== tagParam});
                tags.map(function (item) { redirectUrl = redirectUrl + item + ","; })
                redirectUrl = redirectUrl.substring(0, redirectUrl.length - 1);
            } else {
                tags.map(function (item) { redirectUrl = redirectUrl + item + ","; })
                redirectUrl = redirectUrl + tagParam;
            }
        } else if (currentTag === tagParam){
            redirectUrl = redirectUrl.split("?")[0];
        } else {
            redirectUrl = redirectUrl + currentTag + "," + tagParam;
        }
    } else {
        redirectUrl = redirectUrl + tagParam;
    }
    window.location.href = redirectUrl;
}



var course = {
    id: "",
    courseName: "",
    courseDescription: "",
    organization: "",
    category: "",
    duration: "",
    noOfModules: "",
    courseLink: "",
    banner: ""
}
var isValidated = false;
var isEdit = false;
var isOriginalBanner = false;
var editCourseObject = "";

function checkIfEditCourse() {
    if (sessionStorage.getItem("editCourseObject")){
        $('#modal-loader').modal('show');
        editCourseObject = JSON.parse(sessionStorage.getItem("editCourseObject"));
        isEdit = true;
        isOriginalBanner = true;
        $('.breadcrumb').addClass('display-n');
        $('.page-title').html("Update Course");
        document.title = "Update Course";
        populateCourseFields(editCourseObject)
    }
}

function checkLogin() {
    var token = store.getItem("token");
    var email = store.getItem("email");
    var courseCreator = "aishwariya.chauhan@investindia.org.in";
    if(!token || token === ""){
        $(".login .sign-in").trigger('click');
        $("#loginModal").on('hide.bs.modal', function(){
            location.reload();
        });
    } else if (token && email !== courseCreator) {
        $('.error-modal p').html("Please Contact the Course Administrator for adding New Courses.")
        $('.error-modal').modal("show");
    } else
        return true;
}

$('.add-course-form input[name=submit-course]').click(function () {
    var loggedIn = checkLogin();
    if (loggedIn === true) {
        validateCourseForm();
        if (isValidated) {
            $(".add-course-form .form-error-block").hide();
            getCourseData();
            submitCourseForm();
        } else {
            $(".add-course-form .form-error-block").show();
        }
    }
});

function populateCourseFields(course) {
     $('.add-course-form .user-profile-rating .form-group input[name=c_title]').val(course.courseName);
     $('.add-course-form .user-profile-rating .form-group textarea[name=c_description]').val(course.courseDescription);
     $('.add-course-form .user-profile-rating .form-group #c_organisation').val(course.organization).trigger("change");
     $('.add-course-form .user-profile-rating .form-group #c_category').val(course.category).trigger("change");
     $('.add-course-form .user-profile-rating .form-group input[name=c_duration]').val(course.duration);
     $('.add-course-form .user-profile-rating .form-group input[name=c_modules]').val(course.noOfModules);
     $('.add-course-form .user-profile-rating .form-group input[name=c_linkURL]').val(course.courseLink);

     var bannerApi = SIH.getEndPoint("/api/file/online/course/banner?fileName=" + course.banner.name);
     $('.add-course-form .user-profile-rating .fileuploadMultipurpose input[type=file]').closest('.form-group').append(`<a href=${bannerApi} target="_blank" class="ecourse-b-image">Uploaded Banner: ${course.banner.compressedName}</a>`);

    $('.add-course-form input[name=submit-course]').val("update")
    var closeBtn = $('.add-course-form input[name=submit-course]').clone();
    var archiveBtn = $('.add-course-form input[name=submit-course]').clone();
    $('.add-course-form input[name=submit-course]').addClass("update-course-btn")
    closeBtn.val("cancel");
    closeBtn.insertBefore($('.add-course-form input[name=submit-course]'));
    closeBtn.on('click', function (evt){
        sessionStorage.removeItem("editCourseObject");
        window.location.href = "/content/sih/en/reources/online-courses.html";
    })
    archiveBtn.val("Mark Archive");
    archiveBtn.insertAfter($('.add-course-form input.update-course-btn'));
    archiveBtn.on('click', function (evt){
        $(".thankyou-modal").data("edit-course-redirect", "/content/sih/en/reources/online-courses.html");
        sessionStorage.removeItem("editCourseObject");
        markArchive(course.id);
    })

    $('#modal-loader').modal('hide');
}

function validateCourseForm() {
    var inputFields = $(".add-course-form").find(".form-control");
    var fileUpload = $('.add-course-form .user-profile-rating .fileuploadMultipurpose sup.required');

    $.each(inputFields, function (index, inputSel) {
        var key = $(inputSel).attr("name");
        if(typeof key !== "undefined") {
            var attrValue = $(inputSel).val();
            checkRequiredField(attrValue, inputSel);
            if (key === "c_image" || key === "c_imageFileName") {
                if (!isEdit || (isEdit && !isOriginalBanner))
                    isValidated = validateFileField(fileUpload, false, isValidated);
            }
        }
    });

    var regexValidatedFields = $('.add-course-form .regex-val');
    isValidated = validateRegexFields(regexValidatedFields, isValidated);

    $.each(inputFields, function (index, inputSel) {
        if ($(inputSel).closest(".form-group").hasClass("has-error")){
            isValidated = false;
        }
    });
}

function getCourseData() {
    course.courseName = $('.add-course-form .user-profile-rating .form-group input[name=c_title]').val();
    course.courseDescription = $('.add-course-form .user-profile-rating .form-group textarea[name=c_description]').val();
    course.organization = $('.add-course-form .user-profile-rating .form-group #c_organisation').val();
    course.category = $('.add-course-form .user-profile-rating .form-group #c_category').val();
    course.duration = $('.add-course-form .user-profile-rating .form-group input[name=c_duration]').val();
    course.noOfModules = $('.add-course-form .user-profile-rating .form-group input[name=c_modules]').val();
    course.courseLink = $('.add-course-form .user-profile-rating .form-group input[name=c_linkURL]').val();
}

function checkRequiredField(attrValue, inputSel) {
    var requiredField = $(inputSel).closest(".form-group").find("sup.required");
    if (requiredField && requiredField.length > 0 && (!attrValue || attrValue === "" || attrValue.trim() === "")) {
        isValidated = false;
        $(inputSel).closest(".form-group").addClass("has-error").find("span.help-block").first().html("This field cannot be left Blank.");
    } else {
        isValidated = true;
        $(inputSel).closest(".form-group").removeClass("has-error").find("span.help-block").first().html("");
    }
}

$(document).on('change', '.add-course-form .user-profile-rating .fileuploadMultipurpose input[type=file]', function (event) {
    var file;
    var allowedExtensionsForFile = ["image/png", "image/jpeg", "image/jpg"];
    var maxFileSizeInBytes = 5242880;

    if (file = this.files[0]){
        isOriginalBanner = false;
        if (!validateUploadedFile(event, file, maxFileSizeInBytes, allowedExtensionsForFile)){
            isValidated = false;
            return false;
        } else {
            var filePath = SIH.getEndPoint("/api/file/online/course/banner");
            var fileData = new FormData();
            fileData.append("file", file);
            $.ajax({
                url: filePath,
                type: 'POST',
                data: fileData,
                cache: false,
                contentType: false,
                processData: false,
                success: function (fileInfo) {
                    course.banner = fileInfo;
                },
                error: function (data) {
                    alert("Error while uploading File, please check the file and try again.");
                }
            });
        }
    } else {
        isOriginalBanner = true;
    }
});

function validateUploadedFile(event, file, maxFileSizeInBytes, allowedExtensionsForFile) {
    allowedExtensionsForFile = allowedExtensionsForFile ? allowedExtensionsForFile : ["image/png", "image/jpeg", "image/jpg"];
    maxFileSizeInBytes = maxFileSizeInBytes ? maxFileSizeInBytes : 5242880;
    if ($.inArray(file.type, allowedExtensionsForFile) < 0) {
        alert("Invalid Format. Supported formats are: " + allowedExtensionsForFile.join(" , "));
        event.target.value = null;
        return false;
    }
    if (file.size > maxFileSizeInBytes) {
        alert("Maximum file size allowed is 5 MB ");
        event.target.value = null;
        return false;
    }
    checkUploadedFileMimetype(event, file, allowedExtensionsForFile);
    return true;
}

function checkUploadedFileMimetype(event, file, allowedExtensionsForFile) {
    var fileReader = new FileReader();
    var ext = "";
    fileReader.onloadend = function (evt) {
        if (evt.target.readyState === FileReader.DONE) {
            var uint = new Uint8Array(evt.target.result);
            var bytes = [];
            uint.forEach(function (byte) {
                bytes.push(byte.toString(16));
            });
            var hex = bytes.join('').toUpperCase();

            ext = getMimetype(hex);
            if (!allowedExtensionsForFile.includes(ext)) {
                alert("Invalid Format. Supported formats are: " + allowedExtensionsForFile.join(" , "));
                event.target.value = null;
                return false;
            }
        }
    };

    var blob = file.slice(0, 4);
    fileReader.readAsArrayBuffer(blob);

    var getMimetype = function(signature) {
        switch (signature) {
            case '89504E47':
                return 'image/png';
            case '25504446':
                return 'application/pdf';
            case 'FFD8FFDB':
            case 'FFD8FFE0':
            case "FFD8FFE1":
            case "FFD8FFE2":
            case "FFD8FFE3":
            case "FFD8FFE8":
                return 'image/jpeg';
            default:
                return 'Unknown filetype';
        }
    }
}

function submitCourseForm() {
    $('#modal-loader').modal('show');

    if (isEdit){
        course.id = editCourseObject.id;
        if (isOriginalBanner)
            course.banner = editCourseObject.banner;
    }
    var apiPath = SIH.getEndPoint("/api/auth/online/course/create")
    $.ajax({
        url: apiPath,
        type: 'POST',
        data: JSON.stringify(course),
        beforeSend: setAuthTokenHeader,
        contentType: "application/json",
        success: function (response) {
            sessionStorage.removeItem("editCourseObject");
            $('#modal-loader').modal('hide');

            setTimeout(function () {
                $('.thankyou-modal .modal-body .heading').html("Thank You!");
                if (isEdit) {
                    $(".thankyou-modal").data("edit-course-redirect", "/content/sih/en/reources/online-courses.html");
                    $('.thankyou-modal .modal-body p').html("Your Course has been updated successfully");
                } else {
                    $('.thankyou-modal .modal-body p').html("Your Course has been added successfully");
                }
                $('.thankyou-modal').modal('show');
            }, 500);

        },
        error: function (jqXHR, textStatus, errorThrown) {
            $('#modal-loader').modal('hide');
            if (jqXHR.status === "401"){
                $('.error-modal .modal-body p').html('Please login to add Course');
            } else {
                $('.error-modal .modal-body p').html('Something went wrong while submitting the course');
            }
            $('.error-modal').modal('show');
        }
    });
}

$(document).on('click', '.c-tag-add', function (e){
    var loggedIn = checkLogin();
    if (loggedIn === true) {
        var target = $(e.target);
        $('#view-course-modal').find(".modal-body input#tagName").val("");
        $('#view-course-modal .modal-body #tagName').closest('.form-group').removeClass('has-error').find('.help-block').html("");

        if (target.hasClass('c-tag-add-org')) {
            renderTagModal("ORGANIZATION", "ORGANIZATIONS");
        } else if (target.hasClass('c-tag-add-cat')) {
            renderTagModal("CATEGORY", "CATEGORIES");
        }
    }
})

function renderTagModal(value, type) {
    $('#view-course-modal').find('.modal-body h3').html("ADD NEW " + value);
    $('#view-course-modal').find('.modal-body label[for=tagName]').html(value + " NAME <sup class='required'>*</sup>")
    $('#view-course-modal').find('.modal-body input#tagName').data("tagType", type);
    $('#view-course-modal').modal('show');
}

$(document).on('click', '#submitCourseTag', function (e) {
    var validated = true;

    // validate required fields
    var fields = $('#view-course-modal .modal-body .form-control');
    $.each(fields, function (index, element){
        var attrValue = $(element).val();
        if (!attrValue || !attrValue.trim() || !attrValue.trim().length > 0) {
            validated = false;
            $(element).closest('.form-group').addClass('has-error').find('.help-block').html("This field is required");
        } else {
            if ($(element).data("tagType") === "CATEGORIES"){
                var regex = new RegExp("^[a-zA-Z0-9\\-]+[a-zA-Z0-9\\s-]*$"); // Alphanumeric Regex
                if (!regex.test(attrValue)){
                    validated = false;
                    $(element).closest('.form-group').addClass('has-error').find('.help-block').html("This field accepts alphabets[a-z, A-Z], numbers[0-9] and hyphen[-] only");
                } else {
                    $(element).closest('.form-group').removeClass('has-error').find('.help-block').html("");
                }
            } else {
                $(element).closest('.form-group').removeClass('has-error').find('.help-block').html("");
            }
        }
    })

    if (validated) {
        var tagName = $('#view-course-modal .modal-body #tagName').val().trim();
        var tagType = $('#view-course-modal').find('.modal-body input#tagName').data("tagType");
        if (tagType === "ORGANIZATIONS" || tagType === "CATEGORIES"){
            $('#view-course-modal .modal-body #tagType').closest('.form-group').removeClass('has-error').find('.help-block').html("");
            var payload = {
                "tagTitle": tagName,
                "type": tagType
            }
            var path = "/bin/sih/create-tag/online-courses";
            $.ajax({
                url: path,
                type: "POST",
                data: JSON.stringify(payload),
                contentType: "application/json",
                success: function (response) {
                    if (response && response.status) {
                        $('#view-course-modal').modal('hide');
                        setTimeout(function () {
                            $('.thankyou-modal .modal-body .heading').html("SUCCESS!");
                            $('.thankyou-modal .modal-body p').html(response.message);
                            $('.thankyou-modal').modal('show');
                        }, 500);
                    }
                },
                error: function (response) {
                    alert("Something went wrong. Please try again");
                    location.reload();
                }
            })
        } else {
            $('#view-course-modal .modal-body #tagType').closest('.form-group').addClass('has-error').find('.help-block').html("Please select the correct Type");
        }
    }
    e.preventDefault();
})

$('input[name=c_duration]').on('keypress', function (evt) {

    evt = (evt) ? evt : window.event;
    var charCode = (evt.which) ? evt.which : evt.keyCode;
    if (charCode > 31 && (charCode < 48 || charCode > 57)) {
        return false;
    } else {
        var number = $(this).val();
        if (number.length == 2) {
            $(this).val($(this).val() + ':');
        }
        else if (number.length == 5) {
            return false;
        }
    }
});
$('input[name=c_duration]').on('focusout', function (evt) {
    var number = $(this).val();
    var re = new RegExp('^([0-9][0-9]:[0-5][0-9])?$');
    var element = $(evt.currentTarget);

    if(!number.match(re))
    {
        element.closest(".form-group").addClass("has-error");
        element.siblings(".regex-msg").show();
    } else {
        if (!(element.closest(".form-group").has("sup.required") && !element.val())) {
            showErrorState(element, false);
        }
        element.siblings(".regex-msg").hide();
    }
})

function onlineCourseList() {
    getOnlineCourses();
}
var loadMoreOpt = function (data) {
    if (searchResultFilter.page < data.totalPages - 1) {
        $('#loadMoreNew').show();
    } else {
        $('#loadMoreNew').hide();
    }
}

var getOnlineCourses = function (type) {
    $('#modal-loader').modal('show');
    $.ajax({
        url: SIH.getEndPoint("/api/common/online/courses/dashboard"),
        type: 'POST',
        contentType: "application/json",
        dataType: 'json',
        data: JSON.stringify(searchResultFilter),
        success: function (data) {
            if (data) {
                $('#modal-loader').modal("hide");
                $('#totalEleCount').html(data.totalElements)
                var dashboardTemplate = Handlebars.compile($("#owl-demo-recent-result-listing").html());
                $("div#owl-demo-recent-listing").append(dashboardTemplate(data));
                loadMoreOpt(data);
            } else {
                $('.ams-result-error-modal .modal-body p').html("Error while retrieving data, Please contact support team");
                $('.ams-result-error-modal').modal('show');
            }
        },
        error: function (error) {
            $('#modal-loader').modal('hide');
            if (error && error.responseText) {
                $('#modal-loader').modal("hide");
                if (error.status === 400 && error.responseText) {
                    $('.ams-result-error-modal .modal-body p').html(error.responseText);
                    $('.ams-result-error-modal').modal('show');
                }else {
                    $('.ams-result-error-modal .modal-body p').html(error.responseText);
                    $('.ams-result-error-modal').modal('show');
                }
            }
        }
    });
};

function editCourse(courseId) {
    $('#modal-loader').modal('show');
    $.ajax({
        url: SIH.getEndPoint("/api/auth/online/course/edit?courseId=" +courseId),
        type: 'GET',
        contentType: "application/json",
        dataType: 'json',
        beforeSend: setCoursesAuthTokenHeader,
        success: function (data) {
            if (data.status && data.data) {
                sessionStorage.setItem("editCourseObject", JSON.stringify(data.data));
                $('#modal-loader').modal("hide");
                window.location.href = "/content/sih/en/reources/add-course.html?status=update&courseId=" + courseId;
            } else {
                $('.ams-result-error-modal .modal-body p').html("Error while retrieving data, Please contact support team");
                $('.ams-result-error-modal').modal('show');
            }
        },
        error: function (error) {
            $('#modal-loader').modal('hide');
            if (error && error.responseText) {
                $('#modal-loader').modal("hide");
                if (error.status === 400 && error.responseText) {
                    $('.ams-result-error-modal .modal-body p').html(error.responseText);
                    $('.ams-result-error-modal').modal('show');
                }else {
                    $('.ams-result-error-modal .modal-body p').html(error.responseText);
                    $('.ams-result-error-modal').modal('show');
                }
            }
        }
    });
};

function markArchive(courseId) {
    $('#modal-loader').modal('show');
    $.ajax({
        url: SIH.getEndPoint("/api/auth/online/course/archive?courseId=" +courseId),
        type: 'GET',
        contentType: "application/json",
        dataType: 'json',
        beforeSend: setCoursesAuthTokenHeader,
        success: function (response) {
            if (response && response.status){
                $('#modal-loader').modal("hide");
                setTimeout(function () {
                    $('.thankyou-modal .modal-body .heading').html("SUCCESS!");
                    $('.thankyou-modal .modal-body p').html("Course Archived Successfully");
                    $('.thankyou-modal').modal('show');
                }, 500);
            } else {
                $('.ams-result-error-modal .modal-body p').html("Error while retrieving data, Please contact support team");
                $('.ams-result-error-modal').modal('show');
            }
        },
        error: function (error) {
            $('#modal-loader').modal('hide');
            if (error && error.responseText) {
                $('#modal-loader').modal("hide");
                if (error.status === 400 && error.responseText) {
                    $('.ams-result-error-modal .modal-body p').html(error.responseText);
                    $('.ams-result-error-modal').modal('show');
                }else {
                    $('.ams-result-error-modal .modal-body p').html(error.responseText);
                    $('.ams-result-error-modal').modal('show');
                }
            }
        }
    });
};

var onlineCourseSearchResultNext = function () {
    searchResultFilter.page = parseInt(searchResultFilter.page) + 1;
    getOnlineCourses();
};

var searchResultFilter = {
    query: "",
    page: getParameterByName("page") ? getParameterByName("page") : 0,
    pageSize:9,
    categories: [],
    organizations: []
};

if (searchResultFilter.query) {
    $("#search-result").val(searchResultFilter.query);
}

$(document).on("change", '#apptype' , function() {
    $('#owl-demo-recent-listing').html("");
    searchResultFilter.page = 0;
    searchResultFilter.query = "";
    searchResultFilter.appType = $("#apptype").val();
    getOnlineCourses($("#apptype").val());
});

$(document).on("click", '#search-result-icon' , function(event) {
    $('#owl-demo-recent-listing').html("");
    searchResultFilter.query = $("#search-result").val();
    searchResultFilter.page = 0;
    getOnlineCourses();
});

$(document).on("keypress", '#search-result' , function(event) {
    if (event.which == 13) {
        $('#owl-demo-recent-listing').html("");
        searchResultFilter.query = $("#search-result").val();
        var type = $("#apptype").val();
        if(type!='' || type!='undefined'){
            searchResultFilter.appType = type;
        }
        searchResultFilter.page = 0;
        getOnlineCourses();
    }
});

$(".course-search-filters-section").on('change', 'label.control--checkbox', function () {
    var checked = $(this).find('input').is(':checked');
    var value = $(this).find('input').val();
    var text = $(this).text().trim();
    var filterAttr = $(this).parents('ul').parents('.course-search-filters-section').data('filter');

    updateCourseSearchFilter(value, filterAttr, checked);
    $('#owl-demo-recent-listing').html("");
    handleSelectedFilters(value, text, checked);
    getOnlineCourses();
    // $(".search-input").val("");
});

function courseFilter(event) {
    var input = event.target, filter, divUl, li, label, i, txtValue;
    filter = input.value.toUpperCase();
    divUl = $(input).siblings('.course-search-filters-section').find("ul");
    li = $(divUl).find("li");
    for (i = 0; i < li.length; i++) {
        label = li[i].getElementsByTagName("label");
        if (label) {
            txtValue = $(label).find("span").text();
            if (txtValue.toUpperCase().indexOf(filter) > -1) {
                li[i].style.display = "";
            } else {
                li[i].style.display = "none";
            }
        }
    }
}

var updateCourseSearchFilter = function (value, filterAttr, isAdd) {
        if (isAdd) {
            if (searchResultFilter[filterAttr].indexOf(value) === -1) {
                searchResultFilter[filterAttr].push(value);
            }
        } else {
            var indexOfElement = searchResultFilter[filterAttr].indexOf(value);
            if (indexOfElement >= 0) {
                searchResultFilter[filterAttr].splice(indexOfElement, 1);
            }
        }
    searchResultFilter.page = 0;
};

function handleSelectedFilters(filterValue, filterText, addFilter) {
    if (addFilter) {
        if (!$("span.selected-filter[data-value='" + filterValue + "']").length) {
            $("span.selected-filters").append("<span class='selected-filter' data-value='" + filterValue + "'>" + filterText + "<i class='fa fa-times filterRemove' onclick='removeCourseFilter(this);'></i></span>");
        }
    } else {
        var $filterSpan = $(".selected-filter[data-value='" + filterValue + "']");
        $filterSpan.remove();
    }
    if($("span.selected-filters .selected-filter").length > 0){
        $("span.selected-filter.clear-all").removeClass("hidden");
        $(".tag-filter-block.filter-container button.hidden").removeClass("hidden");
    }else{
        $("span.selected-filter.clear-all").addClass("hidden");
        $(".tag-filter-block.filter-container button.hidden").addClass("hidden");
    }
}

function removeCourseFilter(obj, clearAll) {
    if(clearAll){
        $("span.selected-filters").empty();
        $(".course-search-filters-section").find("input:checkbox").prop("checked", false);
        searchResultFilter["categories"] = [];
        searchResultFilter["organizations"] = []
        $('#owl-demo-recent-listing').html("");
        getOnlineCourses();
        $("span.selected-filter.clear-all").addClass("hidden");
        // $(".search-input").val("");
    }else{
        var $filter = $(obj).closest("span.selected-filter");
        var filterValue = $filter.data("value");
        // $("input[value='"+filterValue+"']").parents(".accordion-section-content").find(".search-input").val("");
        $("input[value='"+filterValue+"']").prop("checked", false).trigger("change");
    }
}

var setCoursesAuthTokenHeader = function (xhr) {
    var token = store.getItem('token');
    if (token) {
        xhr.setRequestHeader('X-Auth-Token', token);
        xhr.setRequestHeader('Content-Type', 'application/json');
    } else {
        xhr.setRequestHeader('Content-Type', 'application/json');
    }
}

$(document).ready(function () {
    if($(".static-content-section .act-web-row .webinar-card").length > 6) {
        for(i=7;i<=$(".static-content-section .act-web-row .webinar-card").length;i++) {
            $(".static-content-section .act-web-row :nth-child("+i+")").hide();
        }
    }
    if($(".static-content-section .curr-web-row .webinar-card").length > 6) {
        for(i=7;i<=$(".static-content-section .curr-web-row .webinar-card").length;i++) {
            $(".static-content-section .curr-web-row :nth-child("+i+")").hide();
        }
    }
    if($(".static-content-section .curr-work-row .webinar-card").length > 6) {
        for(i=7;i<=$(".static-content-section .curr-work-row .webinar-card").length;i++) {
            $(".static-content-section .curr-work-row :nth-child("+i+")").hide();
        }
    }
    if($(".static-content-section .past-web-row .webinar-card").length > 6) {
        for(i=7;i<=$(".static-content-section .past-web-row .webinar-card").length;i++) {
            $(".static-content-section .past-web-row :nth-child("+i+")").hide();
        }
    }
    if($(".static-content-section .past-work-row .webinar-card").length > 6) {
        for(i=7;i<=$(".static-content-section .past-work-row .webinar-card").length;i++) {
            $(".static-content-section .past-work-row :nth-child("+i+")").hide();
        }
    }
    $(".webinar-register-form input.disabled,.webinar-register-form select.disabled").prop("disabled",true);
    $(".thankyou-modal").addClass("webinar-success-model");
    $(".webinar-register-form #country").change(function () {
        $(".webinar-register-form #state").prop("disabled", false);
    });

    $(".webinar-register-form").on("submit",function (event) {
        event.preventDefault();
        event.stopPropagation();
        var formData = {};
        var isValid = validateWebinarForm();
        if (isValid) {
            getFormData(formData);
            $.ajax({
                url: SIH.getEndPoint("/api/common/webinar/register"),
                type: "POST",
                data: JSON.stringify(formData),
                contentType: "application/json",
                success: function (response) {
                    if(response.status) {
                        var $thankyouModal = $(".thankyou-modal");
                        $thankyouModal.find('.heading').html("Success");
                        $thankyouModal.find('.modal-body p').html(response.message);
                        $thankyouModal.modal("show");
                    } else {
                        var $errorModal = $(".error-modal");
                        $errorModal.find('.heading').html("Error");
                        $errorModal.find('.modal-body p').html(response.message);
                        $errorModal.modal("show");
                    }
                },
                error: function (response) {
                    var $errorModal = $(".error-modal");
                    $errorModal.find('.heading').html("Error");
                    $errorModal.find('.modal-body p').html("Something went wrong! Please try again.");
                    $errorModal.modal("show");
                }
            });
        }
    });
    // $(".webinar-success-model").on('hidden.bs.modal', function () {
    //     if (location.href.indexOf("webinar") > 0) {
    //         window.location.href = $('.webinar-main-page').data("path");
    //     }
    // });

    $(".load-more").click(function () {
        var actBtn = $(this);
        var loop = 0;
        var targetRow = $(this).closest(".row").siblings(".row").children(":hidden");
        $.each(targetRow, function(i,v){
            $(v).show();
            ++loop;
            if( loop >=6) {
                return false;
            }
        });
        if($(this).closest(".row").siblings(".row").children(":hidden").length <= 0) {
            $(actBtn).hide();
        }
    });
});

function validateWebinarForm() {
    var isValid = [];
    var fields = $(".webinar-register-form").find("input,select");
    $.each(fields, function (index, value) {
        if($(this).attr("required")) {
            isValid.push($(this).val() != null && $(this).val().trim() != "");
        } else {
            isValid.push(true);
        }
        if($(this).closest(".form-group").hasClass("has-error")) {
            isValid.push(false);
        } else {
            isValid.push(true);
        }
    });
    return ($.inArray(false, isValid) == -1);
}

function getFormData(formData) {
    var fields = $(".webinar-register-form").find("input,select");
    $.each(fields, function (index, value) {
        if($(this).val() != null && $(this).val().trim() != "") {
            formData[$(this).attr("name")] = $(this).val().trim();
        }
    });
}
const allowedPages = ['/content/sih/en/nsa2022.html']

$(document).ajaxStop(function() {
    /*$(".preload").fadeOut(function() {
        $(".onload").fadeIn();
    });*/
    if (allowedPages.indexOf(location.pathname) === -1)
        $(".modal-backdrop").remove();
});


var html5lightbox_options = {
    skinsfoldername: "/etc/designs/invest-india/investindialibs/images",
    initvimeo: false,
    initsocial: false
};
